openapi: 3.0.3
info:
  title: Beauty Server Test API
  description: Test API for Beauty web server generator with validation
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 32
            maxLength: 32
            pattern: '^[a-zA-Z0-9]{32}$'
          description: User ID (must be exactly 32 alphanumeric characters)
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID format
        '404':
          description: User not found

    put:
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 32
            maxLength: 32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid request
        '404':
          description: User not found

  /users:
    get:
      summary: List users
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of users to return
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, pending]
          description: Filter by user status
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: string
          description: Unique user identifier
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          format: email
        fullName:
          type: string
          maxLength: 100
        age:
          type: integer
          minimum: 13
          maximum: 120
        status:
          type: string
          enum: [active, inactive, pending]
          default: pending
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
          nullable: true

    CreateUserRequest:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          format: email
        fullName:
          type: string
          maxLength: 100
        age:
          type: integer
          minimum: 13
          maximum: 120
