/**
 * Swagger Petstore *_/ ' \" =end -- \\r\\n \\n \\r
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  *_/ ' \" =end --       
 *
 * OpenAPI spec version: 1.0.0 *_/ ' \" =end -- \\r\\n \\n \\r
 * Contact: apiteam@swagger.io *_/ ' \" =end -- \\r\\n \\n \\r
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGFakeApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGFakeApi::SWGFakeApi() {}

SWGFakeApi::~SWGFakeApi() {}

SWGFakeApi::SWGFakeApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGFakeApi::testCodeInject */ &#39; &quot; &#x3D;end  \r\n \n \r(QString* test_code_inject____end____rn_n_r) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/fake");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    if (test_code_inject____end____rn_n_r != nullptr) {
        input.add_var("test code inject */ &#39; &quot; &#x3D;end -- \r\n \n \r", *test_code_inject____end____rn_n_r);
    }




    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGFakeApi::testCodeInject */ &#39; &quot; &#x3D;end  \r\n \n \rCallback);

    worker->execute(&input);
}

void
SWGFakeApi::testCodeInject */ &#39; &quot; &#x3D;end  \r\n \n \rCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    emit testCodeInject */ &#39; &quot; &#x3D;end  \r\n \n \rSignal();
    emit testCodeInject */ &#39; &quot; &#x3D;end  \r\n \n \rSignalE(error_type, error_str);
}


}
