# coding: utf-8

"""
    OpenAPI Petstore */ ' \" =end -- \\r\\n \\n \\r

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  */ ' \" =end --         # noqa: E501

    OpenAPI spec version: 1.0.0 */ ' \" =end -- \\r\\n \\n \\r
    Contact: something@something.abc */ ' \" =end -- \\r\\n \\n \\r
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from petstore_api.api_client import ApiClient


class FakeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def test_code_inject____end__rn_n_r(self, **kwargs):  # noqa: E501
        """To test code injection */ ' \" =end -- \\r\\n \\n \\r  # noqa: E501

        To test code injection */ ' \" =end -- \\r\\n \\n \\r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_code_inject____end__rn_n_r(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_code_inject____end____rn_n_r: To test code injection */ ' \\\" =end -- \\\\r\\\\n \\\\n \\\\r
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_code_inject____end__rn_n_r_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_code_inject____end__rn_n_r_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_code_inject____end__rn_n_r_with_http_info(self, **kwargs):  # noqa: E501
        """To test code injection */ ' \" =end -- \\r\\n \\n \\r  # noqa: E501

        To test code injection */ ' \" =end -- \\r\\n \\n \\r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_code_inject____end__rn_n_r_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_code_inject____end____rn_n_r: To test code injection */ ' \\\" =end -- \\\\r\\\\n \\\\n \\\\r
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['test_code_inject____end____rn_n_r']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_code_inject____end__rn_n_r" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'test_code_inject____end____rn_n_r' in local_var_params:
            form_params.append(('test code inject */ &#39; &quot; &#x3D;end -- \r\n \n \r', local_var_params['test_code_inject____end____rn_n_r']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', '*/  \" =end --       '])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/fake', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
