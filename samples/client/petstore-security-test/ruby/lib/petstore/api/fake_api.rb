=begin
#OpenAPI Petstore */ ' \" =_end -- \\r\\n \\n \\r

#This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  */ ' \" =_end --       

OpenAPI spec version: 1.0.0 */ &#39; \&quot; &#x3D;_end -- \\r\\n \\n \\r
Contact: something@something.abc */ ' \" =_end -- \\r\\n \\n \\r
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.1.1-SNAPSHOT

=end

require 'uri'

module Petstore
  class FakeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # To test code injection */ ' \" =_end -- \\r\\n \\n \\r
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :unknown_base_type 
    # @return [nil]
    def test_code_inject____end__rn_n_r(opts = {})
      test_code_inject____end__rn_n_r_with_http_info(opts)
      nil
    end

    # To test code injection */ &#39; \&quot; &#x3D;_end -- \\r\\n \\n \\r
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :unknown_base_type 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_code_inject____end__rn_n_r_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FakeApi.test_code_inject____end__rn_n_r ...'
      end
      # resource path
      local_var_path = '/fake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', '*/  \" =_end --       '])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'unknown_base_type'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FakeApi#test_code_inject____end__rn_n_r\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
