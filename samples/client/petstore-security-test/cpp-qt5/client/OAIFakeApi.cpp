/**
 * OpenAPI Petstore *_/ ' \" =end -- \\r\\n \\n \\r
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  *_/ ' \" =end --       
 *
 * OpenAPI spec version: 1.0.0 *_/ ' \" =end -- \\r\\n \\n \\r
 * Contact: something@something.abc *_/ ' \" =end -- \\r\\n \\n \\r
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFakeApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFakeApi::OAIFakeApi() {}

OAIFakeApi::~OAIFakeApi() {}

OAIFakeApi::OAIFakeApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIFakeApi::testCodeInject____end__rn_n_r(UNKNOWN_BASE_TYPE& unknown_base_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/fake");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "PUT");


    
    QString output = unknown_base_type.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFakeApi::testCodeInject____end__rn_n_rCallback);

    worker->execute(&input);
}

void
OAIFakeApi::testCodeInject____end__rn_n_rCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit testCodeInject____end__rn_n_rSignal();
    } else {
        emit testCodeInject____end__rn_n_rSignalE(error_type, error_str);
        emit testCodeInject____end__rn_n_rSignalEFull(worker, error_type, error_str);
    }
}


}
