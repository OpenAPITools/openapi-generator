=begin comment

Swagger Petstore */ ' \" =_end -- \\r\\n \\n \\r

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  */ ' \" =_end --       

OpenAPI spec version: 1.0.0 */ &#39; \&quot; &#x3D;_end -- \\r\\n \\n \\r
Contact: apiteam@swagger.io */ ' \" =_end -- \\r\\n \\n \\r
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::FakeApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# test_code_inject____end__rn_n_r
#
# To test code injection */ ' \" =_end -- \\r\\n \\n \\r
# 
# @param string $test_code_inject_*/_&#39;_&quot;_&#x3D;end____\r\n_\n_\r To test code injection */ &#39; \&quot; &#x3D;_end -- \\r\\n \\n \\r (optional)
{
    my $params = {
    'test_code_inject_*/_&#39;_&quot;_&#x3D;end____\r\n_\n_\r' => {
        data_type => 'string',
        description => 'To test code injection */ &#39; \&quot; &#x3D;_end -- \\r\\n \\n \\r',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_code_inject____end__rn_n_r' } = { 
    	summary => 'To test code injection */ &#39; \&quot; &#x3D;_end -- \\r\\n \\n \\r',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub test_code_inject____end__rn_n_r {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/fake';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', '*/  \" =_end --       ');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', '*/  \" =_end --       ');

    # form params
    if ( exists $args{'test_code_inject_*/_&#39;_&quot;_&#x3D;end____\r\n_\n_\r'} ) {
                $form_params->{'test code inject */ &#39; &quot; &#x3D;end -- \r\n \n \r'} = $self->{api_client}->to_form_value($args{'test_code_inject_*/_&#39;_&quot;_&#x3D;end____\r\n_\n_\r'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
