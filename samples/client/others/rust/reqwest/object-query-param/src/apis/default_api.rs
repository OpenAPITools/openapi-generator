/*
 * OpenAPI Petstore
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    UnknownValue(serde_json::Value),
}


pub fn list(configuration: &configuration::Configuration, page_query: models::ListPageQueryParameter, page_query_schema: models::Page, deep: models::ListDeepParameter, not_required: Option<models::ListNotRequiredParameter>, not_required_deep: Option<models::ListNotRequiredDeepParameter>) -> Result<(), Error<ListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_page_query = page_query;
    let p_query_page_query_schema = page_query_schema;
    let p_query_deep = deep;
    let p_query_not_required = not_required;
    let p_query_not_required_deep = not_required_deep;

    let uri_str = format!("{}/pony", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    let params = crate::apis::parse_flat_object(&serde_json::to_value(p_query_page_query)?);
    req_builder = req_builder.query(&params);
    if let Some(ref param_value) = p_query_not_required {
        let params = crate::apis::parse_flat_object(&serde_json::to_value(param_value)?);
        req_builder = req_builder.query(&params);
    }
    let params = crate::apis::parse_flat_object(&serde_json::to_value(p_query_page_query_schema)?);
    req_builder = req_builder.query(&params);
    let params = crate::apis::parse_flat_object(&serde_json::to_value(p_query_deep)?);
    req_builder = req_builder.query(&params);
    if let Some(ref param_value) = p_query_not_required_deep {
        let params = crate::apis::parse_flat_object(&serde_json::to_value(param_value)?);
        req_builder = req_builder.query(&params);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req)?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text()?;
        let entity: Option<ListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

