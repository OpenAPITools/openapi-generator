/*
 * Rust anyOf Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ModelIdentifier : Model identifier that can be a string or specific enum value
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelIdentifier {
    /// Any model name as string (anyOf option)
    #[serde(skip_serializing_if = "Option::is_none", rename = "as_any_of_0")]
    pub as_any_of_0: Option<String>,
    /// Known model enum values (anyOf option)
    #[serde(skip_serializing_if = "Option::is_none", rename = "as_any_of_1")]
    pub as_any_of_1: Option<String>,
}

impl ModelIdentifier {
    /// Creates a new ModelIdentifier with all fields set to None
    pub fn new() -> Self {
        Default::default()
    }

    /// Validates that at least one anyOf field is set (OR semantics)
    pub fn validate_any_of(&self) -> Result<(), String> {
        Ok(())
    }
}

