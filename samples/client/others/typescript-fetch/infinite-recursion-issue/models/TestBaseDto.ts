/* tslint:disable */
/* eslint-disable */
/**
 * Minimal
 * Api to reproduce bug
 *
 * The version of the OpenAPI document: 0.5.1-SNAPSHOT.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TestObjectType } from './TestObjectType';
import {
    TestObjectTypeFromJSON,
    TestObjectTypeFromJSONTyped,
    TestObjectTypeToJSON,
    TestObjectTypeToJSONTyped,
} from './TestObjectType';

import { type ExtendDto, ExtendDtoFromJSONTyped, ExtendDtoToJSON, ExtendDtoToJSONTyped } from './ExtendDto';
/**
 * 
 * @export
 * @interface TestBaseDto
 */
export interface TestBaseDto {
    /**
     * 
     * @type {string}
     * @memberof TestBaseDto
     */
    something?: string | undefined;
    /**
     * 
     * @type {TestObjectType}
     * @memberof TestBaseDto
     */
    testObjectType?: TestObjectType | undefined;
}



/**
 * Check if a given object implements the TestBaseDto interface.
 */
export function instanceOfTestBaseDto(value: object): value is TestBaseDto {
    return true;
}

export function TestBaseDtoFromJSON(json: any): TestBaseDto {
    return TestBaseDtoFromJSONTyped(json, false);
}

export function TestBaseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestBaseDto {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['testObjectType'] === 'TEST2') {
            return ExtendDtoFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['testObjectType'] === 'TEST1') {
            return TestBaseDtoFromJSONTyped(json, true);
        }

    }
    return {
        
        'something': json['something'] == null ? undefined : json['something'],
        'testObjectType': json['testObjectType'] == null ? undefined : TestObjectTypeFromJSON(json['testObjectType']),
    };
}

export function TestBaseDtoToJSON(json: any): TestBaseDto {
    return TestBaseDtoToJSONTyped(json, false);
}

export function TestBaseDtoToJSONTyped(value?: TestBaseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['testObjectType']) {
            case 'TEST2':
                return ExtendDtoToJSONTyped(value as ExtendDto, ignoreDiscriminator);
            default:
                return value;
        }
    }

    return {
        
        'something': value['something'],
        'testObjectType': TestObjectTypeToJSON(value['testObjectType']),
    };
}

