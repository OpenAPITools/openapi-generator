/* tslint:disable */
/* eslint-disable */
/**
 * Example
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BranchDto } from './BranchDto';
import {
    BranchDtoFromJSON,
    BranchDtoFromJSONTyped,
    BranchDtoToJSON,
    BranchDtoToJSONTyped,
} from './BranchDto';

import {
  InternalAuthenticatedUserDto,
  InternalAuthenticatedUserDtoToJSONTyped,
  InternalAuthenticatedUserDtoFromJSONTyped} from './InternalAuthenticatedUserDto';
import {
  RemoteAuthenticatedUserDto,
  RemoteAuthenticatedUserDtoToJSONTyped,
  RemoteAuthenticatedUserDtoFromJSONTyped} from './RemoteAuthenticatedUserDto';

/**
 * 
 * @export
 * @interface AbstractUserDto
 */
export interface AbstractUserDto {
    /**
     * 
     * @type {string}
     * @memberof AbstractUserDto
     */
    username?: string;
    /**
     * 
     * @type {BranchDto}
     * @memberof AbstractUserDto
     */
    branch?: BranchDto;
    /**
     * 
     * @type {string}
     * @memberof AbstractUserDto
     */
    type?: string;
}

/**
 * Check if a given object implements the AbstractUserDto interface.
 */
export function instanceOfAbstractUserDto(value: object): value is AbstractUserDto {
    return true;
}

export function AbstractUserDtoFromJSON(json: any): AbstractUserDto {
    return AbstractUserDtoFromJSONTyped(json, false);
}

export function AbstractUserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AbstractUserDto {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'internal-authenticated') {
            return InternalAuthenticatedUserDtoFromJSONTyped(json, true);
        }
        if (json['type'] === 'remote-authenticated') {
            return RemoteAuthenticatedUserDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'username': json['username'] == null ? undefined : json['username'],
        'branch': json['branch'] == null ? undefined : BranchDtoFromJSON(json['branch']),
        'type': json['type'] == null ? undefined : json['type'],
    };
}
function isInternalAuthenticatedUserDto(value: AbstractUserDto):value is InternalAuthenticatedUserDto{
    return value['type'] === 'internal-authenticated';
}
function isRemoteAuthenticatedUserDto(value: AbstractUserDto):value is RemoteAuthenticatedUserDto{
    return value['type'] === 'remote-authenticated';
}
export function AbstractUserDtoToJSON(value?: AbstractUserDto | null): any {
    return AbstractUserDtoToJSONTyped(value);
}
export function AbstractUserDtoToJSONTyped(value?: AbstractUserDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    if (!ignoreDiscriminator) {
        if (isInternalAuthenticatedUserDto(value)) {
            return InternalAuthenticatedUserDtoToJSONTyped(value, true);
        }
        if (isRemoteAuthenticatedUserDto(value)) {
            return RemoteAuthenticatedUserDtoToJSONTyped(value, true);
        }
    }
    return {
        
        'username': value['username'],
        'branch': BranchDtoToJSON(value['branch']),
        'type': value['type'],
    };
}

