/*
 * ByRefOrValue
 * This tests for a oneOf interface representation 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Banana
 */
@JsonPropertyOrder({
  Banana.JSON_PROPERTY_LENGTH,
  Banana.JSON_PROPERTY_FRUIT_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public final class Banana implements Fruit {
  public static final String JSON_PROPERTY_LENGTH = "length";
  @javax.annotation.Nonnull
  private Integer length;

  public static final String JSON_PROPERTY_FRUIT_TYPE = "fruitType";
  // The discriminator does not have Nullability-annotation since it is added during serialization by the @JsonTypeName annotation
  private FruitType fruitType;

  public Banana() {
  }

  public Banana length(@javax.annotation.Nonnull Integer length) {
    
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_LENGTH, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLength() {
    return length;
  }


  @JsonProperty(value = JSON_PROPERTY_LENGTH, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLength(@javax.annotation.Nonnull Integer length) {
    this.length = length;
  }

  public Banana fruitType(@javax.annotation.Nonnull FruitType fruitType) {
    
    this.fruitType = fruitType;
    return this;
  }

  /**
   * Get fruitType
   * @return fruitType
   */
  @javax.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_FRUIT_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FruitType getFruitType() {
    return fruitType;
  }


  @JsonProperty(value = JSON_PROPERTY_FRUIT_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFruitType(@javax.annotation.Nonnull FruitType fruitType) {
    this.fruitType = fruitType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Banana banana = (Banana) o;
    return Objects.equals(this.length, banana.length) &&
        Objects.equals(this.fruitType, banana.fruitType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, fruitType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Banana {\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    fruitType: ").append(toIndentedString(fruitType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

