/*
 * ByRefOrValue
 * This tests for a oneOf interface representation 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Extensible
 */
@JsonPropertyOrder({
  Extensible.JSON_PROPERTY_AT_SCHEMA_LOCATION,
  Extensible.JSON_PROPERTY_AT_BASE_TYPE,
  Extensible.JSON_PROPERTY_AT_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Extensible {
  public static final String JSON_PROPERTY_AT_SCHEMA_LOCATION = "@schemaLocation";
  @javax.annotation.Nullable
  private String atSchemaLocation;

  public static final String JSON_PROPERTY_AT_BASE_TYPE = "@baseType";
  @javax.annotation.Nullable
  private String atBaseType;

  public static final String JSON_PROPERTY_AT_TYPE = "@type";
  @javax.annotation.Nonnull
  private String atType;

  public Extensible() {
  }

  public Extensible atSchemaLocation(@javax.annotation.Nullable String atSchemaLocation) {
    
    this.atSchemaLocation = atSchemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return atSchemaLocation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AT_SCHEMA_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAtSchemaLocation() {
    return atSchemaLocation;
  }


  @JsonProperty(JSON_PROPERTY_AT_SCHEMA_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAtSchemaLocation(@javax.annotation.Nullable String atSchemaLocation) {
    this.atSchemaLocation = atSchemaLocation;
  }

  public Extensible atBaseType(@javax.annotation.Nullable String atBaseType) {
    
    this.atBaseType = atBaseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return atBaseType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AT_BASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAtBaseType() {
    return atBaseType;
  }


  @JsonProperty(JSON_PROPERTY_AT_BASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAtBaseType(@javax.annotation.Nullable String atBaseType) {
    this.atBaseType = atBaseType;
  }

  public Extensible atType(@javax.annotation.Nonnull String atType) {
    
    this.atType = atType;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class Extensible name
   * @return atType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAtType() {
    return atType;
  }


  @JsonProperty(JSON_PROPERTY_AT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAtType(@javax.annotation.Nonnull String atType) {
    this.atType = atType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extensible extensible = (Extensible) o;
    return Objects.equals(this.atSchemaLocation, extensible.atSchemaLocation) &&
        Objects.equals(this.atBaseType, extensible.atBaseType) &&
        Objects.equals(this.atType, extensible.atType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atSchemaLocation, atBaseType, atType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extensible {\n");
    sb.append("    atSchemaLocation: ").append(toIndentedString(atSchemaLocation)).append("\n");
    sb.append("    atBaseType: ").append(toIndentedString(atBaseType)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

