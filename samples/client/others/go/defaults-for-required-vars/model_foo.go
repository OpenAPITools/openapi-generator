/*
Test

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Foo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Foo{}

// Foo struct for Foo
type Foo struct {
	Bar string `json:"bar"`
	Baz string `json:"baz"`
	Qux string `json:"qux"`
	Thud *int32 `json:"thud,omitempty"`
}

type _Foo Foo

// NewFoo instantiates a new Foo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoo(bar string, baz string, qux string) *Foo {
	this := Foo{}
	this.Bar = bar
	this.Baz = baz
	this.Qux = qux
	var thud int32 = 42
	this.Thud = &thud
	return &this
}

// NewFooWithDefaults instantiates a new Foo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFooWithDefaults() *Foo {
	this := Foo{}
	var bar string = "value1"
	this.Bar = bar
	var baz string = "value2"
	this.Baz = baz
	var thud int32 = 42
	this.Thud = &thud
	return &this
}

// GetBar returns the Bar field value
func (o *Foo) GetBar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bar
}

// GetBarOk returns a tuple with the Bar field value
// and a boolean to check if the value has been set.
func (o *Foo) GetBarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bar, true
}

// SetBar sets field value
func (o *Foo) SetBar(v string) {
	o.Bar = v
}
// GetDefaultbar function assigns the default value &quot;value1&quot; to the Bar field
// of the Foo struct and returns the "value1".
func (o *Foo) GetDefaultbar() interface{}  {
	o.Bar = "value1"
	return "value1"
}

// GetBaz returns the Baz field value
func (o *Foo) GetBaz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Baz
}

// GetBazOk returns a tuple with the Baz field value
// and a boolean to check if the value has been set.
func (o *Foo) GetBazOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baz, true
}

// SetBaz sets field value
func (o *Foo) SetBaz(v string) {
	o.Baz = v
}
// GetDefaultbaz function assigns the default value &quot;value2&quot; to the Baz field
// of the Foo struct and returns the "value2".
func (o *Foo) GetDefaultbaz() interface{}  {
	o.Baz = "value2"
	return "value2"
}

// GetQux returns the Qux field value
func (o *Foo) GetQux() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Qux
}

// GetQuxOk returns a tuple with the Qux field value
// and a boolean to check if the value has been set.
func (o *Foo) GetQuxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qux, true
}

// SetQux sets field value
func (o *Foo) SetQux(v string) {
	o.Qux = v
}

// GetThud returns the Thud field value if set, zero value otherwise.
func (o *Foo) GetThud() int32 {
	if o == nil || IsNil(o.Thud) {
		var ret int32
		return ret
	}
	return *o.Thud
}

// GetThudOk returns a tuple with the Thud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Foo) GetThudOk() (*int32, bool) {
	if o == nil || IsNil(o.Thud) {
		return nil, false
	}
	return o.Thud, true
}

// HasThud returns a boolean if a field has been set.
func (o *Foo) HasThud() bool {
	if o != nil && !IsNil(o.Thud) {
		return true
	}

	return false
}

// SetThud gets a reference to the given int32 and assigns it to the Thud field.
func (o *Foo) SetThud(v int32) {
	o.Thud = &v
}

func (o Foo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Foo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if _, exists := toSerialize["bar"]; !exists {
		toSerialize["bar"] = o.GetDefaultbar()
	}
	toSerialize["bar"] = o.Bar
	if _, exists := toSerialize["baz"]; !exists {
		toSerialize["baz"] = o.GetDefaultbaz()
	}
	toSerialize["baz"] = o.Baz
	toSerialize["qux"] = o.Qux
	if !IsNil(o.Thud) {
		toSerialize["thud"] = o.Thud
	}
	return toSerialize, nil
}

func (o *Foo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bar",
		"baz",
		"qux",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
		"bar": o.GetDefaultbar,
		"baz": o.GetDefaultbaz,
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varFoo := _Foo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFoo)

	if err != nil {
		return err
	}

	*o = Foo(varFoo)

	return err
}

type NullableFoo struct {
	value *Foo
	isSet bool
}

func (v NullableFoo) Get() *Foo {
	return v.value
}

func (v *NullableFoo) Set(val *Foo) {
	v.value = val
	v.isSet = true
}

func (v NullableFoo) IsSet() bool {
	return v.isSet
}

func (v *NullableFoo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoo(val *Foo) *NullableFoo {
	return &NullableFoo{value: val, isSet: true}
}

func (v NullableFoo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


