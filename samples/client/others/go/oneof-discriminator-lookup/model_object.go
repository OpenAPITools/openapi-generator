/*
Test

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Object - struct for Object
type Object struct {
	NestedObject1 *NestedObject1
	NestedObject2 *NestedObject2
}

// NestedObject1AsObject is a convenience function that returns NestedObject1 wrapped in Object
func NestedObject1AsObject(v *NestedObject1) Object {
	return Object{
		NestedObject1: v,
	}
}

// NestedObject2AsObject is a convenience function that returns NestedObject2 wrapped in Object
func NestedObject2AsObject(v *NestedObject2) Object {
	return Object{
		NestedObject2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Object) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ONE'
	if jsonDict["type"] == "ONE" {
		// try to unmarshal JSON data into NestedObject1
		err = json.Unmarshal(data, &dst.NestedObject1)
		if err == nil {
			return nil // data stored in dst.NestedObject1, return on the first match
		} else {
			dst.NestedObject1 = nil
			return fmt.Errorf("failed to unmarshal Object as NestedObject1: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TWO'
	if jsonDict["type"] == "TWO" {
		// try to unmarshal JSON data into NestedObject2
		err = json.Unmarshal(data, &dst.NestedObject2)
		if err == nil {
			return nil // data stored in dst.NestedObject2, return on the first match
		} else {
			dst.NestedObject2 = nil
			return fmt.Errorf("failed to unmarshal Object as NestedObject2: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NestedObject1'
	if jsonDict["type"] == "NestedObject1" {
		// try to unmarshal JSON data into NestedObject1
		err = json.Unmarshal(data, &dst.NestedObject1)
		if err == nil {
			return nil // data stored in dst.NestedObject1, return on the first match
		} else {
			dst.NestedObject1 = nil
			return fmt.Errorf("failed to unmarshal Object as NestedObject1: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NestedObject2'
	if jsonDict["type"] == "NestedObject2" {
		// try to unmarshal JSON data into NestedObject2
		err = json.Unmarshal(data, &dst.NestedObject2)
		if err == nil {
			return nil // data stored in dst.NestedObject2, return on the first match
		} else {
			dst.NestedObject2 = nil
			return fmt.Errorf("failed to unmarshal Object as NestedObject2: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Object) MarshalJSON() ([]byte, error) {
	if src.NestedObject1 != nil {
		return json.Marshal(&src.NestedObject1)
	}

	if src.NestedObject2 != nil {
		return json.Marshal(&src.NestedObject2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Object) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NestedObject1 != nil {
		return obj.NestedObject1
	}

	if obj.NestedObject2 != nil {
		return obj.NestedObject2
	}

	// all schemas are nil
	return nil
}

type NullableObject struct {
	value *Object
	isSet bool
}

func (v NullableObject) Get() *Object {
	return v.value
}

func (v *NullableObject) Set(val *Object) {
	v.value = val
	v.isSet = true
}

func (v NullableObject) IsSet() bool {
	return v.isSet
}

func (v *NullableObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObject(val *Object) *NullableObject {
	return &NullableObject{value: val, isSet: true}
}

func (v NullableObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


