/*
Test

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NestedObject2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedObject2{}

// NestedObject2 struct for NestedObject2
type NestedObject2 struct {
	// Specifies an action name to be used with the Android Intent class.
	Field1 *string `json:"field1,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewNestedObject2 instantiates a new NestedObject2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedObject2() *NestedObject2 {
	this := NestedObject2{}
	return &this
}

// NewNestedObject2WithDefaults instantiates a new NestedObject2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedObject2WithDefaults() *NestedObject2 {
	this := NestedObject2{}
	return &this
}

// GetField1 returns the Field1 field value if set, zero value otherwise.
func (o *NestedObject2) GetField1() string {
	if o == nil || IsNil(o.Field1) {
		var ret string
		return ret
	}
	return *o.Field1
}

// GetField1Ok returns a tuple with the Field1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedObject2) GetField1Ok() (*string, bool) {
	if o == nil || IsNil(o.Field1) {
		return nil, false
	}
	return o.Field1, true
}

// HasField1 returns a boolean if a field has been set.
func (o *NestedObject2) HasField1() bool {
	if o != nil && !IsNil(o.Field1) {
		return true
	}

	return false
}

// SetField1 gets a reference to the given string and assigns it to the Field1 field.
func (o *NestedObject2) SetField1(v string) {
	o.Field1 = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NestedObject2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedObject2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NestedObject2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NestedObject2) SetType(v string) {
	o.Type = &v
}

func (o NestedObject2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedObject2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field1) {
		toSerialize["field1"] = o.Field1
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableNestedObject2 struct {
	value *NestedObject2
	isSet bool
}

func (v NullableNestedObject2) Get() *NestedObject2 {
	return v.value
}

func (v *NullableNestedObject2) Set(val *NestedObject2) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedObject2) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedObject2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedObject2(val *NestedObject2) *NullableNestedObject2 {
	return &NullableNestedObject2{value: val, isSet: true}
}

func (v NullableNestedObject2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedObject2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


