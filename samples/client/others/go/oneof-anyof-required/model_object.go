/*
Test

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Object - struct for Object
type Object struct {
	NestedObject1Value *NestedObject1
	NestedObject2Value *NestedObject2
}

// NestedObject1AsObject is a convenience function that returns NestedObject1 wrapped in Object
func NestedObject1ValueAsObject(v *NestedObject1) Object {
	return Object{
		NestedObject1Value: v,
	}
}

// NestedObject2AsObject is a convenience function that returns NestedObject2 wrapped in Object
func NestedObject2ValueAsObject(v *NestedObject2) Object {
	return Object{
		NestedObject2Value: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Object) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NestedObject1Value
	err = newStrictDecoder(data).Decode(&dst.NestedObject1Value)
	if err == nil {
		jsonNestedObject1Value, _ := json.Marshal(dst.NestedObject1Value)
		if string(jsonNestedObject1Value) == "{}" { // empty struct
			dst.NestedObject1Value = nil
		} else {
			if err = validator.Validate(dst.NestedObject1Value); err != nil {
				dst.NestedObject1Value = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedObject1Value = nil
	}

	// try to unmarshal data into NestedObject2Value
	err = newStrictDecoder(data).Decode(&dst.NestedObject2Value)
	if err == nil {
		jsonNestedObject2Value, _ := json.Marshal(dst.NestedObject2Value)
		if string(jsonNestedObject2Value) == "{}" { // empty struct
			dst.NestedObject2Value = nil
		} else {
			if err = validator.Validate(dst.NestedObject2Value); err != nil {
				dst.NestedObject2Value = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedObject2Value = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NestedObject1Value = nil
		dst.NestedObject2Value = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Object)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Object)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Object) MarshalJSON() ([]byte, error) {
	if src.NestedObject1Value != nil {
		return json.Marshal(&src.NestedObject1Value)
	}

	if src.NestedObject2Value != nil {
		return json.Marshal(&src.NestedObject2Value)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Object) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NestedObject1Value != nil {
		return obj.NestedObject1Value
	}

	if obj.NestedObject2Value != nil {
		return obj.NestedObject2Value
	}

	// all schemas are nil
	return nil
}

type NullableObject struct {
	value *Object
	isSet bool
}

func (v NullableObject) Get() *Object {
	return v.value
}

func (v *NullableObject) Set(val *Object) {
	v.value = val
	v.isSet = true
}

func (v NullableObject) IsSet() bool {
	return v.isSet
}

func (v *NullableObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObject(val *Object) *NullableObject {
	return &NullableObject{value: val, isSet: true}
}

func (v NullableObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


