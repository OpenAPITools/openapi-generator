=begin
#Echo Server API

#Echo Server API

The version of the OpenAPI document: 0.1.0
Contact: team@openapitools.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::BodyApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BodyApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::BodyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BodyApi' do
    it 'should create an instance of BodyApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::BodyApi)
    end
  end

  # unit tests for test_binary_gif
  # Test binary (gif) response body
  # Test binary (gif) response body
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'test_binary_gif test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_body_application_octetstream_binary
  # Test body parameter(s)
  # Test body parameter(s)
  # @param [Hash] opts the optional parameters
  # @option opts [File] :body 
  # @return [String]
  describe 'test_body_application_octetstream_binary test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_body_multipart_formdata_array_of_binary
  # Test array of binary in multipart mime
  # Test array of binary in multipart mime
  # @param files 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'test_body_multipart_formdata_array_of_binary test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_echo_body_all_of_pet
  # Test body parameter(s)
  # Test body parameter(s)
  # @param [Hash] opts the optional parameters
  # @option opts [Pet] :pet Pet object that needs to be added to the store
  # @return [Pet]
  describe 'test_echo_body_all_of_pet test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_echo_body_free_form_object_response_string
  # Test free form object
  # Test free form object
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body Free form object
  # @return [String]
  describe 'test_echo_body_free_form_object_response_string test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_echo_body_pet
  # Test body parameter(s)
  # Test body parameter(s)
  # @param [Hash] opts the optional parameters
  # @option opts [Pet] :pet Pet object that needs to be added to the store
  # @return [Pet]
  describe 'test_echo_body_pet test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_echo_body_pet_response_string
  # Test empty response body
  # Test empty response body
  # @param [Hash] opts the optional parameters
  # @option opts [Pet] :pet Pet object that needs to be added to the store
  # @return [String]
  describe 'test_echo_body_pet_response_string test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for test_echo_body_tag_response_string
  # Test empty json (request body)
  # Test empty json (request body)
  # @param [Hash] opts the optional parameters
  # @option opts [Tag] :tag Tag object
  # @return [String]
  describe 'test_echo_body_tag_response_string test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
