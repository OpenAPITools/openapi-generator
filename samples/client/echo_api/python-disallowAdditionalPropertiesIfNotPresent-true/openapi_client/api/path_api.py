# coding: utf-8

"""
    Echo Server API

    Echo Server API

    The version of the OpenAPI document: 0.1.0
    Contact: team@openapitools.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_call, ValidationError
from typing import Dict, List, Optional, Tuple

from pydantic import StrictInt, StrictStr, field_validator

from openapi_client.models.string_enum_ref import StringEnumRef

from openapi_client.api_client import ApiClient, Deserializer
from openapi_client.api_response import ApiResponse, AsyncApiResponse, AsyncResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PathApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path(
        self,
        path_string: StrictStr,
        path_integer: StrictInt,
        enum_nonref_string_path: StrictStr,
        enum_ref_string_path: StringEnumRef,
        **kwargs,
    ) -> str:
        """Test path parameter(s)  # noqa: E501

        Test path parameter(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path(path_string, path_integer, enum_nonref_string_path, enum_ref_string_path, async_req=True)
        >>> result = thread.get()

        :param path_string: (required)
        :type path_string: str
        :param path_integer: (required)
        :type path_integer: int
        :param enum_nonref_string_path: (required)
        :type enum_nonref_string_path: str
        :param enum_ref_string_path: (required)
        :type enum_ref_string_path: StringEnumRef
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        if '_preload_content' in kwargs:
            message = "Error! Please call the tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        response = self.tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info.raw_function(
            path_string,
            path_integer,
            enum_nonref_string_path,
            enum_ref_string_path,
            **kwargs,
        )

        response_types_map: Dict[str, Optional[str]] = {
            '200': 'str',
        }

        response_type = response_types_map.get(str(response.status_code))
        if not response_type and isinstance(response.status_code, int) and 100 <= response.status_code <= 599:
            # if not found, look for '1XX', '2XX', etc.
            response_type = response_types_map.get(str(response.status_code)[0] + "XX")

        d = Deserializer()
        if response_type is not None:
            return d.deserialize(response, response_type)
        else:
            return None

    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_async(
        self,
        path_string: StrictStr,
        path_integer: StrictInt,
        enum_nonref_string_path: StrictStr,
        enum_ref_string_path: StringEnumRef,
        **kwargs,
    ) -> AsyncResponse[str]:
        """Test path parameter(s)  # noqa: E501

        Test path parameter(s)  # noqa: E501
        This method makes a asynchronous HTTP request.

        >>> thread = api.tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path(path_string, path_integer, enum_nonref_string_path, enum_ref_string_path, )
        >>> result = thread.get()

        :param path_string: (required)
        :type path_string: str
        :param path_integer: (required)
        :type path_integer: int
        :param enum_nonref_string_path: (required)
        :type enum_nonref_string_path: str
        :param enum_ref_string_path: (required)
        :type enum_ref_string_path: StringEnumRef
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """

        if '_preload_content' in kwargs:
            message = "Error! Please call the tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        response = self.tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(
            path_string,
            path_integer,
            enum_nonref_string_path,
            enum_ref_string_path,
            **kwargs,
        )

        def d(response):
            response_types_map = {
                '200': 'str',
            }

            response_type = response_types_map.get(str(response.status_code))
            if not response_type and isinstance(response.status_code, int) and 100 <= response.status_code <= 599:
                # if not found, look for '1XX', '2XX', etc.
                response_type = response_types_map.get(str(response.status_code)[0] + "XX")

            d = Deserializer()
            if response_type is not None:
                return d.deserialize(response, response_type)
            else:
                return None

        return AsyncResponse(response, d)

    @validate_call
    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info(
        self,
        path_string: StrictStr,
        path_integer: StrictInt,
        enum_nonref_string_path: StrictStr,
        enum_ref_string_path: StringEnumRef,
        **kwargs,
    ) -> ApiResponse:
        """Test path parameter(s)  # noqa: E501

        Test path parameter(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info(path_string, path_integer, enum_nonref_string_path, enum_ref_string_path, async_req=True)
        >>> result = thread.get()

        :param path_string: (required)
        :type path_string: str
        :param path_integer: (required)
        :type path_integer: int
        :param enum_nonref_string_path: (required)
        :type enum_nonref_string_path: str
        :param enum_ref_string_path: (required)
        :type enum_ref_string_path: StringEnumRef
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse
        """

        _params = locals()

        _all_params = [
            'path_string',
            'path_integer',
            'enum_nonref_string_path',
            'enum_ref_string_path'
        ]
        _all_params.extend(
            [
                'async_req',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['path_string'] is not None:
            _path_params['path_string'] = _params['path_string']

        if _params['path_integer'] is not None:
            _path_params['path_integer'] = _params['path_integer']

        if _params['enum_nonref_string_path'] is not None:
            _path_params['enum_nonref_string_path'] = _params['enum_nonref_string_path']

        if _params['enum_ref_string_path'] is not None:
            _path_params['enum_ref_string_path'] = _params['enum_ref_string_path'].value


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.call_api(
            '/path/string/{path_string}/integer/{path_integer}/{enum_nonref_string_path}/{enum_ref_string_path}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(self, path_string : StrictStr, path_integer : StrictInt, enum_nonref_string_path : StrictStr, enum_ref_string_path : StringEnumRef, **kwargs) -> AsyncApiResponse:  # noqa: E501
        """Test path parameter(s)  # noqa: E501

        Test path parameter(s)  # noqa: E501
        This method makes a asynchronous HTTP request:

        >>> thread = api.tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(path_string, path_integer, enum_nonref_string_path, enum_ref_string_path, )
        >>> result = thread.get()

        :param path_string: (required)
        :type path_string: str
        :param path_integer: (required)
        :type path_integer: int
        :param enum_nonref_string_path: (required)
        :type enum_nonref_string_path: str
        :param enum_ref_string_path: (required)
        :type enum_ref_string_path: StringEnumRef
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse
        """

        _params = locals()

        _all_params = [
            'path_string',
            'path_integer',
            'enum_nonref_string_path',
            'enum_ref_string_path'
        ]
        _all_params.extend(
            [
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['path_string'] is not None:
            _path_params['path_string'] = _params['path_string']

        if _params['path_integer'] is not None:
            _path_params['path_integer'] = _params['path_integer']

        if _params['enum_nonref_string_path'] is not None:
            _path_params['enum_nonref_string_path'] = _params['enum_nonref_string_path']

        if _params['enum_ref_string_path'] is not None:
            _path_params['enum_ref_string_path'] = _params['enum_ref_string_path']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.call_api_async(
            '/path/string/{path_string}/integer/{path_integer}/{enum_nonref_string_path}/{enum_ref_string_path}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

