/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import kotlin.Any
import java.io.File
import org.openapitools.client.models.Pet
import org.openapitools.client.models.Tag
import org.openapitools.client.infrastructure.*

class BodyApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun testBinaryGif(): File {
        val result = testBinaryGifWithHttpInfo()
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testBinaryGifWithHttpInfo(): ResponseEntity<File> {
        val localVariableConfig = testBinaryGifRequestConfig()
        return request<Unit, File>(
            localVariableConfig
        )
    }

    fun testBinaryGifRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "image/gif"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/binary/gif",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testBodyApplicationOctetstreamBinary(body: File? = null): String {
        val result = testBodyApplicationOctetstreamBinaryWithHttpInfo(body = body)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testBodyApplicationOctetstreamBinaryWithHttpInfo(body: File? = null): ResponseEntity<String> {
        val localVariableConfig = testBodyApplicationOctetstreamBinaryRequestConfig(body = body)
        return request<File, String>(
            localVariableConfig
        )
    }

    fun testBodyApplicationOctetstreamBinaryRequestConfig(body: File? = null) : RequestConfig<File> {
        val localVariableBody = body
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/octet-stream"
        localVariableHeaders["Accept"] = "text/plain"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/body/application/octetstream/binary",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testBodyMultipartFormdataArrayOfBinary(files: List<File>): String {
        val result = testBodyMultipartFormdataArrayOfBinaryWithHttpInfo(files = files)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testBodyMultipartFormdataArrayOfBinaryWithHttpInfo(files: List<File>): ResponseEntity<String> {
        val localVariableConfig = testBodyMultipartFormdataArrayOfBinaryRequestConfig(files = files)
        return request<Map<String, PartConfig<*>>, String>(
            localVariableConfig
        )
    }

    fun testBodyMultipartFormdataArrayOfBinaryRequestConfig(files: List<File>) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "files" to PartConfig(body = files, headers = mutableMapOf()),)
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/body/application/octetstream/array_of_binary",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testBodyMultipartFormdataSingleBinary(myFile: File? = null): String {
        val result = testBodyMultipartFormdataSingleBinaryWithHttpInfo(myFile = myFile)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testBodyMultipartFormdataSingleBinaryWithHttpInfo(myFile: File? = null): ResponseEntity<String> {
        val localVariableConfig = testBodyMultipartFormdataSingleBinaryRequestConfig(myFile = myFile)
        return request<Map<String, PartConfig<*>>, String>(
            localVariableConfig
        )
    }

    fun testBodyMultipartFormdataSingleBinaryRequestConfig(myFile: File? = null) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "my-file" to PartConfig(body = myFile, headers = mutableMapOf()),)
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/body/application/octetstream/single_binary",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testEchoBodyFreeFormObjectResponseString(body: Any? = null): String {
        val result = testEchoBodyFreeFormObjectResponseStringWithHttpInfo(body = body)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testEchoBodyFreeFormObjectResponseStringWithHttpInfo(body: Any? = null): ResponseEntity<String> {
        val localVariableConfig = testEchoBodyFreeFormObjectResponseStringRequestConfig(body = body)
        return request<Any, String>(
            localVariableConfig
        )
    }

    fun testEchoBodyFreeFormObjectResponseStringRequestConfig(body: Any? = null) : RequestConfig<Any> {
        val localVariableBody = body
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "text/plain"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/echo/body/FreeFormObject/response_string",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testEchoBodyPet(pet: Pet? = null): Pet {
        val result = testEchoBodyPetWithHttpInfo(pet = pet)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testEchoBodyPetWithHttpInfo(pet: Pet? = null): ResponseEntity<Pet> {
        val localVariableConfig = testEchoBodyPetRequestConfig(pet = pet)
        return request<Pet, Pet>(
            localVariableConfig
        )
    }

    fun testEchoBodyPetRequestConfig(pet: Pet? = null) : RequestConfig<Pet> {
        val localVariableBody = pet
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/echo/body/Pet",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testEchoBodyPetResponseString(pet: Pet? = null): String {
        val result = testEchoBodyPetResponseStringWithHttpInfo(pet = pet)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testEchoBodyPetResponseStringWithHttpInfo(pet: Pet? = null): ResponseEntity<String> {
        val localVariableConfig = testEchoBodyPetResponseStringRequestConfig(pet = pet)
        return request<Pet, String>(
            localVariableConfig
        )
    }

    fun testEchoBodyPetResponseStringRequestConfig(pet: Pet? = null) : RequestConfig<Pet> {
        val localVariableBody = pet
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "text/plain"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/echo/body/Pet/response_string",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun testEchoBodyTagResponseString(tag: Tag? = null): String {
        val result = testEchoBodyTagResponseStringWithHttpInfo(tag = tag)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun testEchoBodyTagResponseStringWithHttpInfo(tag: Tag? = null): ResponseEntity<String> {
        val localVariableConfig = testEchoBodyTagResponseStringRequestConfig(tag = tag)
        return request<Tag, String>(
            localVariableConfig
        )
    }

    fun testEchoBodyTagResponseStringRequestConfig(tag: Tag? = null) : RequestConfig<Tag> {
        val localVariableBody = tag
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "text/plain"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/echo/body/Tag/response_string",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
