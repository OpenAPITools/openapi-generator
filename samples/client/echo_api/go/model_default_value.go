/*
Echo Server API

Echo Server API

API version: 0.1.0
Contact: team@openapitools.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DefaultValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultValue{}

// DefaultValue to test the default value of properties
type DefaultValue struct {
	ArrayStringEnumRefDefault []StringEnumRef `json:"array_string_enum_ref_default,omitempty"`
	ArrayStringEnumDefault []string `json:"array_string_enum_default,omitempty"`
	ArrayStringDefault []string `json:"array_string_default,omitempty"`
	ArrayIntegerDefault []int32 `json:"array_integer_default,omitempty"`
	ArrayString []string `json:"array_string,omitempty"`
	ArrayStringNullable []string `json:"array_string_nullable,omitempty"`
	ArrayStringExtensionNullable []string `json:"array_string_extension_nullable,omitempty"`
	StringNullable NullableString `json:"string_nullable,omitempty"`
}

// NewDefaultValue instantiates a new DefaultValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultValue() *DefaultValue {
	this := DefaultValue{}
	return &this
}

// NewDefaultValueWithDefaults instantiates a new DefaultValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultValueWithDefaults() *DefaultValue {
	this := DefaultValue{}
	return &this
}

// GetArrayStringEnumRefDefault returns the ArrayStringEnumRefDefault field value if set, zero value otherwise.
func (o *DefaultValue) GetArrayStringEnumRefDefault() []StringEnumRef {
	if o == nil || IsNil(o.ArrayStringEnumRefDefault) {
		var ret []StringEnumRef
		return ret
	}
	return o.ArrayStringEnumRefDefault
}

// GetArrayStringEnumRefDefaultOk returns a tuple with the ArrayStringEnumRefDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValue) GetArrayStringEnumRefDefaultOk() ([]StringEnumRef, bool) {
	if o == nil || IsNil(o.ArrayStringEnumRefDefault) {
		return nil, false
	}
	return o.ArrayStringEnumRefDefault, true
}

// HasArrayStringEnumRefDefault returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayStringEnumRefDefault() bool {
	if o != nil && !IsNil(o.ArrayStringEnumRefDefault) {
		return true
	}

	return false
}

// SetArrayStringEnumRefDefault gets a reference to the given []StringEnumRef and assigns it to the ArrayStringEnumRefDefault field.
func (o *DefaultValue) SetArrayStringEnumRefDefault(v []StringEnumRef) {
	o.ArrayStringEnumRefDefault = v
}

// GetArrayStringEnumDefault returns the ArrayStringEnumDefault field value if set, zero value otherwise.
func (o *DefaultValue) GetArrayStringEnumDefault() []string {
	if o == nil || IsNil(o.ArrayStringEnumDefault) {
		var ret []string
		return ret
	}
	return o.ArrayStringEnumDefault
}

// GetArrayStringEnumDefaultOk returns a tuple with the ArrayStringEnumDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValue) GetArrayStringEnumDefaultOk() ([]string, bool) {
	if o == nil || IsNil(o.ArrayStringEnumDefault) {
		return nil, false
	}
	return o.ArrayStringEnumDefault, true
}

// HasArrayStringEnumDefault returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayStringEnumDefault() bool {
	if o != nil && !IsNil(o.ArrayStringEnumDefault) {
		return true
	}

	return false
}

// SetArrayStringEnumDefault gets a reference to the given []string and assigns it to the ArrayStringEnumDefault field.
func (o *DefaultValue) SetArrayStringEnumDefault(v []string) {
	o.ArrayStringEnumDefault = v
}

// GetArrayStringDefault returns the ArrayStringDefault field value if set, zero value otherwise.
func (o *DefaultValue) GetArrayStringDefault() []string {
	if o == nil || IsNil(o.ArrayStringDefault) {
		var ret []string
		return ret
	}
	return o.ArrayStringDefault
}

// GetArrayStringDefaultOk returns a tuple with the ArrayStringDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValue) GetArrayStringDefaultOk() ([]string, bool) {
	if o == nil || IsNil(o.ArrayStringDefault) {
		return nil, false
	}
	return o.ArrayStringDefault, true
}

// HasArrayStringDefault returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayStringDefault() bool {
	if o != nil && !IsNil(o.ArrayStringDefault) {
		return true
	}

	return false
}

// SetArrayStringDefault gets a reference to the given []string and assigns it to the ArrayStringDefault field.
func (o *DefaultValue) SetArrayStringDefault(v []string) {
	o.ArrayStringDefault = v
}

// GetArrayIntegerDefault returns the ArrayIntegerDefault field value if set, zero value otherwise.
func (o *DefaultValue) GetArrayIntegerDefault() []int32 {
	if o == nil || IsNil(o.ArrayIntegerDefault) {
		var ret []int32
		return ret
	}
	return o.ArrayIntegerDefault
}

// GetArrayIntegerDefaultOk returns a tuple with the ArrayIntegerDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValue) GetArrayIntegerDefaultOk() ([]int32, bool) {
	if o == nil || IsNil(o.ArrayIntegerDefault) {
		return nil, false
	}
	return o.ArrayIntegerDefault, true
}

// HasArrayIntegerDefault returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayIntegerDefault() bool {
	if o != nil && !IsNil(o.ArrayIntegerDefault) {
		return true
	}

	return false
}

// SetArrayIntegerDefault gets a reference to the given []int32 and assigns it to the ArrayIntegerDefault field.
func (o *DefaultValue) SetArrayIntegerDefault(v []int32) {
	o.ArrayIntegerDefault = v
}

// GetArrayString returns the ArrayString field value if set, zero value otherwise.
func (o *DefaultValue) GetArrayString() []string {
	if o == nil || IsNil(o.ArrayString) {
		var ret []string
		return ret
	}
	return o.ArrayString
}

// GetArrayStringOk returns a tuple with the ArrayString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValue) GetArrayStringOk() ([]string, bool) {
	if o == nil || IsNil(o.ArrayString) {
		return nil, false
	}
	return o.ArrayString, true
}

// HasArrayString returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayString() bool {
	if o != nil && !IsNil(o.ArrayString) {
		return true
	}

	return false
}

// SetArrayString gets a reference to the given []string and assigns it to the ArrayString field.
func (o *DefaultValue) SetArrayString(v []string) {
	o.ArrayString = v
}

// GetArrayStringNullable returns the ArrayStringNullable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultValue) GetArrayStringNullable() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ArrayStringNullable
}

// GetArrayStringNullableOk returns a tuple with the ArrayStringNullable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultValue) GetArrayStringNullableOk() ([]string, bool) {
	if o == nil || IsNil(o.ArrayStringNullable) {
		return nil, false
	}
	return o.ArrayStringNullable, true
}

// HasArrayStringNullable returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayStringNullable() bool {
	if o != nil && IsNil(o.ArrayStringNullable) {
		return true
	}

	return false
}

// SetArrayStringNullable gets a reference to the given []string and assigns it to the ArrayStringNullable field.
func (o *DefaultValue) SetArrayStringNullable(v []string) {
	o.ArrayStringNullable = v
}

// GetArrayStringExtensionNullable returns the ArrayStringExtensionNullable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultValue) GetArrayStringExtensionNullable() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ArrayStringExtensionNullable
}

// GetArrayStringExtensionNullableOk returns a tuple with the ArrayStringExtensionNullable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultValue) GetArrayStringExtensionNullableOk() ([]string, bool) {
	if o == nil || IsNil(o.ArrayStringExtensionNullable) {
		return nil, false
	}
	return o.ArrayStringExtensionNullable, true
}

// HasArrayStringExtensionNullable returns a boolean if a field has been set.
func (o *DefaultValue) HasArrayStringExtensionNullable() bool {
	if o != nil && IsNil(o.ArrayStringExtensionNullable) {
		return true
	}

	return false
}

// SetArrayStringExtensionNullable gets a reference to the given []string and assigns it to the ArrayStringExtensionNullable field.
func (o *DefaultValue) SetArrayStringExtensionNullable(v []string) {
	o.ArrayStringExtensionNullable = v
}

// GetStringNullable returns the StringNullable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultValue) GetStringNullable() string {
	if o == nil || IsNil(o.StringNullable.Get()) {
		var ret string
		return ret
	}
	return *o.StringNullable.Get()
}

// GetStringNullableOk returns a tuple with the StringNullable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultValue) GetStringNullableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StringNullable.Get(), o.StringNullable.IsSet()
}

// HasStringNullable returns a boolean if a field has been set.
func (o *DefaultValue) HasStringNullable() bool {
	if o != nil && o.StringNullable.IsSet() {
		return true
	}

	return false
}

// SetStringNullable gets a reference to the given NullableString and assigns it to the StringNullable field.
func (o *DefaultValue) SetStringNullable(v string) {
	o.StringNullable.Set(&v)
}
// SetStringNullableNil sets the value for StringNullable to be an explicit nil
func (o *DefaultValue) SetStringNullableNil() {
	o.StringNullable.Set(nil)
}

// UnsetStringNullable ensures that no value is present for StringNullable, not even an explicit nil
func (o *DefaultValue) UnsetStringNullable() {
	o.StringNullable.Unset()
}

func (o DefaultValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArrayStringEnumRefDefault) {
		toSerialize["array_string_enum_ref_default"] = o.ArrayStringEnumRefDefault
	}
	if !IsNil(o.ArrayStringEnumDefault) {
		toSerialize["array_string_enum_default"] = o.ArrayStringEnumDefault
	}
	if !IsNil(o.ArrayStringDefault) {
		toSerialize["array_string_default"] = o.ArrayStringDefault
	}
	if !IsNil(o.ArrayIntegerDefault) {
		toSerialize["array_integer_default"] = o.ArrayIntegerDefault
	}
	if !IsNil(o.ArrayString) {
		toSerialize["array_string"] = o.ArrayString
	}
	if o.ArrayStringNullable != nil {
		toSerialize["array_string_nullable"] = o.ArrayStringNullable
	}
	if o.ArrayStringExtensionNullable != nil {
		toSerialize["array_string_extension_nullable"] = o.ArrayStringExtensionNullable
	}
	if o.StringNullable.IsSet() {
		toSerialize["string_nullable"] = o.StringNullable.Get()
	}
	return toSerialize, nil
}

type NullableDefaultValue struct {
	value *DefaultValue
	isSet bool
}

func (v NullableDefaultValue) Get() *DefaultValue {
	return v.value
}

func (v *NullableDefaultValue) Set(val *DefaultValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultValue(val *DefaultValue) *NullableDefaultValue {
	return &NullableDefaultValue{value: val, isSet: true}
}

func (v NullableDefaultValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


