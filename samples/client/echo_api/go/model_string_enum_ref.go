/*
Echo Server API

Echo Server API

API version: 0.1.0
Contact: team@openapitools.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StringEnumRef the model 'StringEnumRef'
type StringEnumRef string

// List of StringEnumRef
const (
	SUCCESS StringEnumRef = "success"
	FAILURE StringEnumRef = "failure"
	UNCLASSIFIED StringEnumRef = "unclassified"
)

// All allowed values of StringEnumRef enum
var AllowedStringEnumRefEnumValues = []StringEnumRef{
	"success",
	"failure",
	"unclassified",
}

func (v *StringEnumRef) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StringEnumRef(value)
	for _, existing := range AllowedStringEnumRefEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StringEnumRef", value)
}

// NewStringEnumRefFromValue returns a pointer to a valid StringEnumRef
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStringEnumRefFromValue(v string) (*StringEnumRef, error) {
	ev := StringEnumRef(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StringEnumRef: valid values are %v", v, AllowedStringEnumRefEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StringEnumRef) IsValid() bool {
	for _, existing := range AllowedStringEnumRefEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StringEnumRef value
func (v StringEnumRef) Ptr() *StringEnumRef {
	return &v
}

type NullableStringEnumRef struct {
	value *StringEnumRef
	isSet bool
}

func (v NullableStringEnumRef) Get() *StringEnumRef {
	return v.value
}

func (v *NullableStringEnumRef) Set(val *StringEnumRef) {
	v.value = val
	v.isSet = true
}

func (v NullableStringEnumRef) IsSet() bool {
	return v.isSet
}

func (v *NullableStringEnumRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringEnumRef(val *StringEnumRef) *NullableStringEnumRef {
	return &NullableStringEnumRef{value: val, isSet: true}
}

func (v NullableStringEnumRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringEnumRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

