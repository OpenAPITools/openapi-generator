/*
Echo Server API

Echo Server API

API version: 0.1.0
Contact: team@openapitools.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Query type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Query{}

// QueryOutcomes the model 'QueryOutcomes'
type QueryOutcomes string

// List of QueryOutcomes
const (
	QUERY_SUCCESS QueryOutcomes = "SUCCESS"
	QUERY_FAILURE QueryOutcomes = "FAILURE"
	QUERY_SKIPPED QueryOutcomes = "SKIPPED"
)

// All allowed values of QueryOutcomes enum
var AllowedQueryOutcomesEnumValues = []QueryOutcomes{
	"SUCCESS",
	"FAILURE",
	"SKIPPED",
}

func (v *QueryOutcomes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryOutcomes(value)
	for _, existing := range AllowedQueryOutcomesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryOutcomes", value)
}

// NewQueryOutcomesFromValue returns a pointer to a valid QueryOutcomes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryOutcomesFromValue(v string) (*QueryOutcomes, error) {
	ev := QueryOutcomes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryOutcomes: valid values are %v", v, AllowedQueryOutcomesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryOutcomes) IsValid() bool {
	for _, existing := range AllowedQueryOutcomesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Outcomes value
func (v QueryOutcomes) Ptr() *QueryOutcomes {
	return &v
}

type NullableQueryOutcomes struct {
	value *QueryOutcomes
	isSet bool
}

func (v NullableQueryOutcomes) Get() *QueryOutcomes {
	return v.value
}

func (v *NullableQueryOutcomes) Set(val *QueryOutcomes) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryOutcomes) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryOutcomes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryOutcomes(val *QueryOutcomes) *NullableQueryOutcomes {
	return &NullableQueryOutcomes{value: val, isSet: true}
}

func (v NullableQueryOutcomes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryOutcomes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


// Query struct for Query
type Query struct {
	// Query
	Id *int64 `json:"id,omitempty"`
	Outcomes QueryOutcomes `json:"outcomes,omitempty"`
}

// NewQuery instantiates a new Query object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuery() *Query {
	this := Query{}
	return &this
}

// NewQueryWithDefaults instantiates a new Query object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryWithDefaults() *Query {
	this := Query{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Query) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Query) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Query) SetId(v int64) {
	o.Id = &v
}

// GetOutcomes returns the Outcomes field value if set, zero value otherwise.
func (o *Query) GetOutcomes() QueryOutcomes {
	if o == nil || IsNil(o.Outcomes) {
		var ret QueryOutcomes
		return ret
	}
	return o.Outcomes
}

// GetOutcomesOk returns a tuple with the Outcomes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetOutcomesOk() (QueryOutcomes, bool) {
	if o == nil || IsNil(o.Outcomes) {
		return o.Outcomes, false
	}
	return o.Outcomes, true
}

// HasOutcomes returns a boolean if a field has been set.
func (o *Query) HasOutcomes() bool {
	if o != nil && !IsNil(o.Outcomes) {
		return true
	}

	return false
}

// SetOutcomes gets a reference to the given []string and assigns it to the Outcomes field.
func (o *Query) SetOutcomes(v QueryOutcomes) {
	o.Outcomes = v
}

func (o Query) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Query) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Outcomes) {
		toSerialize["outcomes"] = o.Outcomes
	}
	return toSerialize, nil
}

type NullableQuery struct {
	value *Query
	isSet bool
}

func (v NullableQuery) Get() *Query {
	return v.value
}

func (v *NullableQuery) Set(val *Query) {
	v.value = val
	v.isSet = true
}

func (v NullableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuery(val *Query) *NullableQuery {
	return &NullableQuery{value: val, isSet: true}
}

func (v NullableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


