#
# Echo Server API
# Echo Server API
# Version: 0.1.0
# Contact: team@openapitools.org
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Number
No description available.
.PARAMETER Float
No description available.
.PARAMETER Double
No description available.
.OUTPUTS

NumberPropertiesOnly<PSCustomObject>
#>

function Initialize-NumberPropertiesOnly {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Number},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Float},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Double}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => NumberPropertiesOnly' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Double -and $Double -gt 50.2) {
          throw "invalid value for 'Double', must be smaller than or equal to 50.2."
        }

        if ($Double -and $Double -lt 0.8) {
          throw "invalid value for 'Double', must be greater than or equal to 0.8."
        }


        $PSO = [PSCustomObject]@{
            "number" = ${Number}
            "float" = ${Float}
            "double" = ${Double}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NumberPropertiesOnly<PSCustomObject>

.DESCRIPTION

Convert from JSON to NumberPropertiesOnly<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NumberPropertiesOnly<PSCustomObject>
#>
function ConvertFrom-JsonToNumberPropertiesOnly {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => NumberPropertiesOnly' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NumberPropertiesOnly
        $AllProperties = ("number", "float", "double")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "number"))) { #optional property not found
            $Number = $null
        } else {
            $Number = $JsonParameters.PSobject.Properties["number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "float"))) { #optional property not found
            $Float = $null
        } else {
            $Float = $JsonParameters.PSobject.Properties["float"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "double"))) { #optional property not found
            $Double = $null
        } else {
            $Double = $JsonParameters.PSobject.Properties["double"].value
        }

        $PSO = [PSCustomObject]@{
            "number" = ${Number}
            "float" = ${Float}
            "double" = ${Double}
        }

        return $PSO
    }

}

