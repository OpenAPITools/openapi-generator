//
// AllPrimitives.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Object which contains lots of different primitive Swagger types */

open class AllPrimitives: Codable {

    public var myInteger: Int?
    public var myIntegerArray: [Int]?
    public var myLong: Int64?
    public var myLongArray: [Int64]?
    public var myFloat: Float?
    public var myFloatArray: [Float]?
    public var myDouble: Double?
    public var myDoubleArray: [Double]?
    public var myString: String?
    public var myStringArray: [String]?
    public var myBytes: Data?
    public var myBytesArray: [Data]?
    public var myBoolean: Bool?
    public var myBooleanArray: [Bool]?
    public var myDate: Date?
    public var myDateArray: [Date]?
    public var myDateTime: Date?
    public var myDateTimeArray: [Date]?
    public var myFile: URL?
    public var myFileArray: [URL]?
    public var myUUID: UUID?
    public var myUUIDArray: [UUID]?
    public var myStringEnum: StringEnum?
    public var myStringEnumArray: [StringEnum]?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(myInteger, forKey: "myInteger")
        try container.encodeArrayIfPresent(myIntegerArray, forKey: "myIntegerArray")
        try container.encodeIfPresent(myLong, forKey: "myLong")
        try container.encodeArrayIfPresent(myLongArray, forKey: "myLongArray")
        try container.encodeIfPresent(myFloat, forKey: "myFloat")
        try container.encodeArrayIfPresent(myFloatArray, forKey: "myFloatArray")
        try container.encodeIfPresent(myDouble, forKey: "myDouble")
        try container.encodeArrayIfPresent(myDoubleArray, forKey: "myDoubleArray")
        try container.encodeIfPresent(myString, forKey: "myString")
        try container.encodeArrayIfPresent(myStringArray, forKey: "myStringArray")
        try container.encodeIfPresent(myBytes, forKey: "myBytes")
        try container.encodeArrayIfPresent(myBytesArray, forKey: "myBytesArray")
        try container.encodeIfPresent(myBoolean, forKey: "myBoolean")
        try container.encodeArrayIfPresent(myBooleanArray, forKey: "myBooleanArray")
        try container.encodeIfPresent(myDate, forKey: "myDate")
        try container.encodeArrayIfPresent(myDateArray, forKey: "myDateArray")
        try container.encodeIfPresent(myDateTime, forKey: "myDateTime")
        try container.encodeArrayIfPresent(myDateTimeArray, forKey: "myDateTimeArray")
        try container.encodeIfPresent(myFile, forKey: "myFile")
        try container.encodeArrayIfPresent(myFileArray, forKey: "myFileArray")
        try container.encodeIfPresent(myUUID, forKey: "myUUID")
        try container.encodeArrayIfPresent(myUUIDArray, forKey: "myUUIDArray")
        try container.encodeIfPresent(myStringEnum, forKey: "myStringEnum")
        try container.encodeArrayIfPresent(myStringEnumArray, forKey: "myStringEnumArray")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        myInteger = try container.decodeIfPresent(Int.self, forKey: "myInteger")
        myIntegerArray = try container.decodeArrayIfPresent(Int.self, forKey: "myIntegerArray")
        myLong = try container.decodeIfPresent(Int64.self, forKey: "myLong")
        myLongArray = try container.decodeArrayIfPresent(Int64.self, forKey: "myLongArray")
        myFloat = try container.decodeIfPresent(Float.self, forKey: "myFloat")
        myFloatArray = try container.decodeArrayIfPresent(Float.self, forKey: "myFloatArray")
        myDouble = try container.decodeIfPresent(Double.self, forKey: "myDouble")
        myDoubleArray = try container.decodeArrayIfPresent(Double.self, forKey: "myDoubleArray")
        myString = try container.decodeIfPresent(String.self, forKey: "myString")
        myStringArray = try container.decodeArrayIfPresent(String.self, forKey: "myStringArray")
        myBytes = try container.decodeIfPresent(Data.self, forKey: "myBytes")
        myBytesArray = try container.decodeArrayIfPresent(Data.self, forKey: "myBytesArray")
        myBoolean = try container.decodeIfPresent(Bool.self, forKey: "myBoolean")
        myBooleanArray = try container.decodeArrayIfPresent(Bool.self, forKey: "myBooleanArray")
        myDate = try container.decodeIfPresent(Date.self, forKey: "myDate")
        myDateArray = try container.decodeArrayIfPresent(Date.self, forKey: "myDateArray")
        myDateTime = try container.decodeIfPresent(Date.self, forKey: "myDateTime")
        myDateTimeArray = try container.decodeArrayIfPresent(Date.self, forKey: "myDateTimeArray")
        myFile = try container.decodeIfPresent(URL.self, forKey: "myFile")
        myFileArray = try container.decodeArrayIfPresent(URL.self, forKey: "myFileArray")
        myUUID = try container.decodeIfPresent(UUID.self, forKey: "myUUID")
        myUUIDArray = try container.decodeArrayIfPresent(UUID.self, forKey: "myUUIDArray")
        myStringEnum = try container.decodeIfPresent(StringEnum.self, forKey: "myStringEnum")
        myStringEnumArray = try container.decodeArrayIfPresent(StringEnum.self, forKey: "myStringEnumArray")
    }
}

