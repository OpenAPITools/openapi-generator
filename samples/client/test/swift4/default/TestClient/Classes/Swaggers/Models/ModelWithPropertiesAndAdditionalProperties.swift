//
// ModelWithPropertiesAndAdditionalProperties.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** This is an empty model with no properties and only additionalProperties of type int32 */

open class ModelWithPropertiesAndAdditionalProperties: Codable {

    public var myIntegerReq: Int
    public var myIntegerOpt: Int?
    public var myPrimitiveReq: AllPrimitives
    public var myPrimitiveOpt: AllPrimitives?
    public var myStringArrayReq: [String]
    public var myStringArrayOpt: [String]?
    public var myPrimitiveArrayReq: [AllPrimitives]
    public var myPrimitiveArrayOpt: [AllPrimitives]?

    public var additionalProperties: [String:String] = [:]

    public subscript(key: String) -> String? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(myIntegerReq, forKey: "myIntegerReq")
        try container.encodeIfPresent(myIntegerOpt, forKey: "myIntegerOpt")
        try container.encode(myPrimitiveReq, forKey: "myPrimitiveReq")
        try container.encodeIfPresent(myPrimitiveOpt, forKey: "myPrimitiveOpt")
        try container.encodeArray(myStringArrayReq, forKey: "myStringArrayReq")
        try container.encodeArrayIfPresent(myStringArrayOpt, forKey: "myStringArrayOpt")
        try container.encodeArray(myPrimitiveArrayReq, forKey: "myPrimitiveArrayReq")
        try container.encodeArrayIfPresent(myPrimitiveArrayOpt, forKey: "myPrimitiveArrayOpt")
        try container.encodeMap(additionalProperties)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        myIntegerReq = try container.decode(Int.self, forKey: "myIntegerReq")
        myIntegerOpt = try container.decodeIfPresent(Int.self, forKey: "myIntegerOpt")
        myPrimitiveReq = try container.decode(AllPrimitives.self, forKey: "myPrimitiveReq")
        myPrimitiveOpt = try container.decodeIfPresent(AllPrimitives.self, forKey: "myPrimitiveOpt")
        myStringArrayReq = try container.decodeArray(String.self, forKey: "myStringArrayReq")
        myStringArrayOpt = try container.decodeArrayIfPresent(String.self, forKey: "myStringArrayOpt")
        myPrimitiveArrayReq = try container.decodeArray(AllPrimitives.self, forKey: "myPrimitiveArrayReq")
        myPrimitiveArrayOpt = try container.decodeArrayIfPresent(AllPrimitives.self, forKey: "myPrimitiveArrayOpt")
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("myIntegerReq")
        nonAdditionalPropertyKeys.insert("myIntegerOpt")
        nonAdditionalPropertyKeys.insert("myPrimitiveReq")
        nonAdditionalPropertyKeys.insert("myPrimitiveOpt")
        nonAdditionalPropertyKeys.insert("myStringArrayReq")
        nonAdditionalPropertyKeys.insert("myStringArrayOpt")
        nonAdditionalPropertyKeys.insert("myPrimitiveArrayReq")
        nonAdditionalPropertyKeys.insert("myPrimitiveArrayOpt")
        additionalProperties = try container.decodeMap(String.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

