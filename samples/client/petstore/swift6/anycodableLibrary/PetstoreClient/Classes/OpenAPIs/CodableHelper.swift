//
// CodableHelper.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CodableHelper: @unchecked Sendable {
    private init() {}
    public static let shared = CodableHelper()

    private var customDateFormatter: DateFormatter?
    private var defaultDateFormatter: DateFormatter = OpenISO8601DateFormatter()

    private var customJSONDecoder: JSONDecoder?
    private var defaultJSONDecoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(CodableHelper.dateFormatter)
        return decoder
    }()

    private var customJSONEncoder: JSONEncoder?
    private var defaultJSONEncoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(CodableHelper.dateFormatter)
        encoder.outputFormatting = .prettyPrinted
        return encoder
    }()

    public static var dateFormatter: DateFormatter {
        get { return Self.shared.customDateFormatter ?? Self.shared.defaultDateFormatter }
        set { Self.shared.customDateFormatter = newValue }
    }
    public static var jsonDecoder: JSONDecoder {
        get { return Self.shared.customJSONDecoder ?? Self.shared.defaultJSONDecoder }
        set { Self.shared.customJSONDecoder = newValue }
    }
    public static var jsonEncoder: JSONEncoder {
        get { return Self.shared.customJSONEncoder ?? Self.shared.defaultJSONEncoder }
        set { Self.shared.customJSONEncoder = newValue }
    }

    open class func decode<T>(_ type: T.Type, from data: Data) -> Swift.Result<T, Error> where T: Decodable {
        return Swift.Result { try jsonDecoder.decode(type, from: data) }
    }

    open class func encode<T>(_ value: T) -> Swift.Result<Data, Error> where T: Encodable {
        return Swift.Result { try jsonEncoder.encode(value) }
    }
}
