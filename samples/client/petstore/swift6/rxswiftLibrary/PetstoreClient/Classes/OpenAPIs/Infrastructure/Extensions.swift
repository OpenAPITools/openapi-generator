// Extensions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension Bool: QueryStringEncodable {}
extension Float: QueryStringEncodable {}
extension Int: QueryStringEncodable {}
extension Int32: QueryStringEncodable {}
extension Int64: QueryStringEncodable {}
extension Double: QueryStringEncodable {}
extension Decimal: QueryStringEncodable {}
extension String: QueryStringEncodable {}
extension URL: QueryStringEncodable {}
extension UUID: QueryStringEncodable {}

extension QueryStringEncodable {
    @_disfavoredOverload
    func encodeToQueryString(codableHelper: CodableHelper) -> String { String(describing: self) }
}

extension RawRepresentable where RawValue: QueryStringEncodable {
    func encodeToQueryString(codableHelper: CodableHelper) -> String { String(describing: rawValue) }
}

private func encodeIfPossible<T>(_ object: T, codableHelper: CodableHelper) -> String {
    if let encodableObject = object as? QueryStringEncodable {
        return encodableObject.encodeToQueryString(codableHelper: codableHelper)
    } else {
        return String(describing: object)
    }
}

extension Array {
    func encodeToQueryString(codableHelper: CodableHelper) -> [String] {
        return self.map { encodeIfPossible($0, codableHelper: codableHelper) }
    }
}

extension Set {
    func encodeToQueryString(codableHelper: CodableHelper) -> [String] {
        return Array(self).encodeToQueryString(codableHelper: codableHelper)
    }
}

extension Dictionary {
    func encodeToQueryString(codableHelper: CodableHelper) -> [Key: String] {
        var dictionary = [Key: String]()
        for (key, value) in self {
            dictionary[key] = encodeIfPossible(value, codableHelper: codableHelper)
        }
        return dictionary
    }
}

extension Data: QueryStringEncodable {
    func encodeToQueryString(codableHelper: CodableHelper) -> String {
        return self.base64EncodedString(options: Data.Base64EncodingOptions())
    }
}

extension Date: QueryStringEncodable {
    func encodeToQueryString(codableHelper: CodableHelper) -> String {
        return codableHelper.dateFormatter.string(from: self)
    }
}

extension QueryStringEncodable where Self: Encodable {
    func encodeToQueryString(codableHelper: CodableHelper) -> String {
        guard let data = try? codableHelper.jsonEncoder.encode(self) else {
            fatalError("Could not encode to json: \(self)")
        }
        return data.encodeToQueryString(codableHelper: codableHelper)
    }
}
