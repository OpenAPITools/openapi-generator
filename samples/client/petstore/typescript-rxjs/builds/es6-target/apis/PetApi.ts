// tslint:disable
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfRequired, encodeURI, COLLECTION_FORMATS } from '../runtime';
import {
    ApiResponse,
    Pet,
} from '../models';

export interface AddPetRequest {
    body: Pet;
}

export interface DeletePetRequest {
    petId: number;
    apiKey?: string;
}

export interface FindPetsByStatusRequest {
    status: Array<FindPetsByStatusStatusEnum>;
}

export interface FindPetsByTagsRequest {
    tags: Array<string>;
}

export interface GetPetByIdRequest {
    petId: number;
}

export interface UpdatePetRequest {
    body: Pet;
}

export interface UpdatePetWithFormRequest {
    petId: number;
    name?: string;
    status?: string;
}

export interface UploadFileRequest {
    petId: number;
    additionalMetadata?: string;
    file?: Blob;
}

/**
 * no description
 */
export class PetApi extends BaseAPI {

    /**
     * Add a new pet to the store
     */
    addPet = (requestParameters: AddPetRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'body', 'addPet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        return this.request<void>({
            path: '/pet',
            method: 'POST',
            headers,
            body: requestParameters.body,
        });
    }

    /**
     * Deletes a pet
     */
    deletePet = (requestParameters: DeletePetRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'petId', 'deletePet');

        const headers: HttpHeaders = {
            ...(requestParameters.apiKey && { 'api_key': String(requestParameters.apiKey) }),
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        return this.request<void>({
            path: '/pet/{petId}'.replace('{petId}', encodeURI(requestParameters.petId)),
            method: 'DELETE',
            headers,
        });
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Finds Pets by status
     */
    findPetsByStatus = (requestParameters: FindPetsByStatusRequest): Observable<Array<Pet>> => {
        throwIfRequired(requestParameters, 'status', 'findPetsByStatus');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        const query: HttpQuery = {
            ...(requestParameters.status && { 'status': requestParameters.status.join(COLLECTION_FORMATS['csv']) }),
        };

        return this.request<Array<Pet>>({
            path: '/pet/findByStatus',
            method: 'GET',
            headers,
            query,
        });
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Finds Pets by tags
     */
    findPetsByTags = (requestParameters: FindPetsByTagsRequest): Observable<Array<Pet>> => {
        throwIfRequired(requestParameters, 'tags', 'findPetsByTags');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        const query: HttpQuery = {
            ...(requestParameters.tags && { 'tags': requestParameters.tags.join(COLLECTION_FORMATS['csv']) }),
        };

        return this.request<Array<Pet>>({
            path: '/pet/findByTags',
            method: 'GET',
            headers,
            query,
        });
    }

    /**
     * Returns a single pet
     * Find pet by ID
     */
    getPetById = (requestParameters: GetPetByIdRequest): Observable<Pet> => {
        throwIfRequired(requestParameters, 'petId', 'getPetById');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'api_key': this.configuration.apiKey('api_key') }), // api_key authentication
        };

        return this.request<Pet>({
            path: '/pet/{petId}'.replace('{petId}', encodeURI(requestParameters.petId)),
            method: 'GET',
            headers,
        });
    }

    /**
     * Update an existing pet
     */
    updatePet = (requestParameters: UpdatePetRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'body', 'updatePet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        return this.request<void>({
            path: '/pet',
            method: 'PUT',
            headers,
            body: requestParameters.body,
        });
    }

    /**
     * Updates a pet in the store with form data
     */
    updatePetWithForm = (requestParameters: UpdatePetWithFormRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'petId', 'updatePetWithForm');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        const formData = new FormData();
        if (requestParameters.name !== undefined) {
            formData.append('name', requestParameters.name as any);
        }

        if (requestParameters.status !== undefined) {
            formData.append('status', requestParameters.status as any);
        }

        return this.request<void>({
            path: '/pet/{petId}'.replace('{petId}', encodeURI(requestParameters.petId)),
            method: 'POST',
            headers,
            body: formData,
        });
    }

    /**
     * uploads an image
     */
    uploadFile = (requestParameters: UploadFileRequest): Observable<ApiResponse> => {
        throwIfRequired(requestParameters, 'petId', 'uploadFile');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken && {
                Authorization: this.configuration.accessToken && (typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken)
            }),
        };

        const formData = new FormData();
        if (requestParameters.additionalMetadata !== undefined) {
            formData.append('additionalMetadata', requestParameters.additionalMetadata as any);
        }

        if (requestParameters.file !== undefined) {
            formData.append('file', requestParameters.file as any);
        }

        return this.request<ApiResponse>({
            path: '/pet/{petId}/uploadImage'.replace('{petId}', encodeURI(requestParameters.petId)),
            method: 'POST',
            headers,
            body: formData,
        });
    }

}

/**
 * @export
 * @enum {string}
 */
export enum FindPetsByStatusStatusEnum {
    Available = 'available',
    Pending = 'pending',
    Sold = 'sold'
}
