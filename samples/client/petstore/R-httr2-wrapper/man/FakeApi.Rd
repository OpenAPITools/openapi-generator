% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fake_api.R
\docType{class}
\name{FakeApi}
\alias{FakeApi}
\title{Fake operations}
\format{
An \code{R6Class} generator object
}
\description{
FakeApi
}
\details{
OpenAPI Petstore

This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

The version of the OpenAPI document: 1.0.0
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ fake_data_file } \emph{ test data_file to ensure it&#39;s escaped correctly }


\itemize{
\item \emph{ @param } dummy character
\item \emph{ @param } var_data_file character
\item \emph{ @returnType } \link{User} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : User
\item response headers :

\tabular{ll}{
}
}

\strong{ fake_regular_expression } \emph{ test regular expression to ensure no exception }


\itemize{
\item \emph{ @param } reg_exp_test character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  fake_data_file  ####################

library(petstore)
var_dummy <- "dummy_example" # character | dummy required parameter
var_var_data_file <- "var_data_file_example" # character | header data file

#test data_file to ensure it's escaped correctly
api_instance <- petstore_api$new()

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$fake_api$fake_data_file(var_dummy, var_data_file = var_var_data_file, data_file = "result.txt"),
             
             
             api_instance$fake_api$fake_data_file(var_dummy, var_data_file = var_var_data_file),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `fake_data_file`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  fake_regular_expression  ####################

library(petstore)
var_reg_exp_test <- "reg_exp_test_example" # character | dummy required parameter

#test regular expression to ensure no exception
api_instance <- petstore_api$new()

result <- tryCatch(
             
             api_instance$fake_api$fake_regular_expression(var_reg_exp_test),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `fake_regular_expression`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FakeApi-new}{\code{FakeApi$new()}}
\item \href{#method-FakeApi-fake_data_file}{\code{FakeApi$fake_data_file()}}
\item \href{#method-FakeApi-fake_data_file_with_http_info}{\code{FakeApi$fake_data_file_with_http_info()}}
\item \href{#method-FakeApi-fake_regular_expression}{\code{FakeApi$fake_regular_expression()}}
\item \href{#method-FakeApi-fake_regular_expression_with_http_info}{\code{FakeApi$fake_regular_expression_with_http_info()}}
\item \href{#method-FakeApi-clone}{\code{FakeApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FakeApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-FakeApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new FakeApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FakeApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FakeApi-fake_data_file"></a>}}
\if{latex}{\out{\hypertarget{method-FakeApi-fake_data_file}{}}}
\subsection{Method \code{fake_data_file()}}{
test data_file to ensure it's escaped correctly
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FakeApi$fake_data_file(dummy, var_data_file = NULL, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dummy}}{dummy required parameter}

\item{\code{var_data_file}}{(optional) header data file}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
User
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FakeApi-fake_data_file_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-FakeApi-fake_data_file_with_http_info}{}}}
\subsection{Method \code{fake_data_file_with_http_info()}}{
test data_file to ensure it's escaped correctly
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FakeApi$fake_data_file_with_http_info(
  dummy,
  var_data_file = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dummy}}{dummy required parameter}

\item{\code{var_data_file}}{(optional) header data file}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (User) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FakeApi-fake_regular_expression"></a>}}
\if{latex}{\out{\hypertarget{method-FakeApi-fake_regular_expression}{}}}
\subsection{Method \code{fake_regular_expression()}}{
test regular expression to ensure no exception
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FakeApi$fake_regular_expression(reg_exp_test, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reg_exp_test}}{dummy required parameter}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FakeApi-fake_regular_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-FakeApi-fake_regular_expression_with_http_info}{}}}
\subsection{Method \code{fake_regular_expression_with_http_info()}}{
test regular expression to ensure no exception
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FakeApi$fake_regular_expression_with_http_info(reg_exp_test, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reg_exp_test}}{dummy required parameter}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FakeApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FakeApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FakeApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
