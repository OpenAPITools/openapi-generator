% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/store_api.R
\docType{class}
\name{StoreApi}
\alias{StoreApi}
\title{Store operations}
\format{
An \code{R6Class} generator object
}
\description{
StoreApi
}
\details{
OpenAPI Petstore

This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

The version of the OpenAPI document: 1.0.0
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ delete_order } \emph{ Delete purchase order by ID }
For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors

\itemize{
\item \emph{ @param } order_id character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Order not found


\item response headers :

\tabular{ll}{
}
}

\strong{ get_inventory } \emph{ Returns pet inventories by status }
Returns a map of status codes to quantities

\itemize{

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : map(integer)
\item response headers :

\tabular{ll}{
}
}

\strong{ get_order_by_id } \emph{ Find purchase order by ID }
For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions

\itemize{
\item \emph{ @param } order_id integer
\item \emph{ @returnType } \link{Order} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Order
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Order not found


\item response headers :

\tabular{ll}{
}
}

\strong{ place_order } \emph{ Place an order for a pet }


\itemize{
\item \emph{ @param } order \link{Order}
\item \emph{ @returnType } \link{Order} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Order
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid Order


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  delete_order  ####################

library(petstore)
var_order_id <- "order_id_example" # character | ID of the order that needs to be deleted

#Delete purchase order by ID
api_instance <- petstore_api$new()

result <- tryCatch(
             
             api_instance$store_api$delete_order(var_order_id),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `delete_order`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  get_inventory  ####################

library(petstore)

#Returns pet inventories by status
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$store_api$get_inventory(data_file = "result.txt"),
             
             
             api_instance$store_api$get_inventory(),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `get_inventory`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  get_order_by_id  ####################

library(petstore)
var_order_id <- 56 # integer | ID of pet that needs to be fetched

#Find purchase order by ID
api_instance <- petstore_api$new()

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$store_api$get_order_by_id(var_order_id, data_file = "result.txt"),
             
             
             api_instance$store_api$get_order_by_id(var_order_id),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `get_order_by_id`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  place_order  ####################

library(petstore)
var_order <- Order$new() # Order | order placed for purchasing the pet

#Place an order for a pet
api_instance <- petstore_api$new()

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$store_api$place_order(var_order, data_file = "result.txt"),
             
             
             api_instance$store_api$place_order(var_order),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `place_order`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-StoreApi-new}{\code{StoreApi$new()}}
\item \href{#method-StoreApi-delete_order}{\code{StoreApi$delete_order()}}
\item \href{#method-StoreApi-delete_order_with_http_info}{\code{StoreApi$delete_order_with_http_info()}}
\item \href{#method-StoreApi-get_inventory}{\code{StoreApi$get_inventory()}}
\item \href{#method-StoreApi-get_inventory_with_http_info}{\code{StoreApi$get_inventory_with_http_info()}}
\item \href{#method-StoreApi-get_order_by_id}{\code{StoreApi$get_order_by_id()}}
\item \href{#method-StoreApi-get_order_by_id_with_http_info}{\code{StoreApi$get_order_by_id_with_http_info()}}
\item \href{#method-StoreApi-place_order}{\code{StoreApi$place_order()}}
\item \href{#method-StoreApi-place_order_with_http_info}{\code{StoreApi$place_order_with_http_info()}}
\item \href{#method-StoreApi-clone}{\code{StoreApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new StoreApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-delete_order"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-delete_order}{}}}
\subsection{Method \code{delete_order()}}{
Delete purchase order by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$delete_order(order_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order_id}}{ID of the order that needs to be deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-delete_order_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-delete_order_with_http_info}{}}}
\subsection{Method \code{delete_order_with_http_info()}}{
Delete purchase order by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$delete_order_with_http_info(order_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order_id}}{ID of the order that needs to be deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-get_inventory"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-get_inventory}{}}}
\subsection{Method \code{get_inventory()}}{
Returns pet inventories by status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$get_inventory(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
map(integer)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-get_inventory_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-get_inventory_with_http_info}{}}}
\subsection{Method \code{get_inventory_with_http_info()}}{
Returns pet inventories by status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$get_inventory_with_http_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (map(integer)) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-get_order_by_id"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-get_order_by_id}{}}}
\subsection{Method \code{get_order_by_id()}}{
Find purchase order by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$get_order_by_id(order_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order_id}}{ID of pet that needs to be fetched}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Order
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-get_order_by_id_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-get_order_by_id_with_http_info}{}}}
\subsection{Method \code{get_order_by_id_with_http_info()}}{
Find purchase order by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$get_order_by_id_with_http_info(order_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order_id}}{ID of pet that needs to be fetched}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Order) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-place_order"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-place_order}{}}}
\subsection{Method \code{place_order()}}{
Place an order for a pet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$place_order(order, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order}}{order placed for purchasing the pet}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Order
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-place_order_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-place_order_with_http_info}{}}}
\subsection{Method \code{place_order_with_http_info()}}{
Place an order for a pet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$place_order_with_http_info(order, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order}}{order placed for purchasing the pet}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Order) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-StoreApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-StoreApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StoreApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
