% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pet_api.R
\docType{class}
\name{PetApi}
\alias{PetApi}
\title{Pet operations}
\format{
An \code{R6Class} generator object
}
\description{
PetApi
}
\details{
OpenAPI Petstore

This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

The version of the OpenAPI document: 1.0.0
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ add_pet } \emph{ Add a new pet to the store }


\itemize{
\item \emph{ @param } pet \link{Pet}
\item \emph{ @returnType } \link{Pet} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Pet
\item response headers :

\tabular{ll}{
}
\item status code : 405 | Invalid input


\item response headers :

\tabular{ll}{
}
}

\strong{ delete_pet } \emph{ Deletes a pet }


\itemize{
\item \emph{ @param } pet_id integer
\item \emph{ @param } api_key character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid pet value


\item response headers :

\tabular{ll}{
}
}

\strong{ find_pets_by_status } \emph{ Finds Pets by status }
Multiple status values can be provided with comma separated strings

\itemize{
\item \emph{ @param } status Enum < [available, pending, sold] >
\item \emph{ @returnType } list( \link{Pet} ) \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : array[Pet]
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid status value


\item response headers :

\tabular{ll}{
}
}

\strong{ find_pets_by_tags } \emph{ Finds Pets by tags }
Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

\itemize{
\item \emph{ @param } tags list( character )
\item \emph{ @returnType } list( \link{Pet} ) \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : array[Pet]
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid tag value


\item response headers :

\tabular{ll}{
}
}

\strong{ get_pet_by_id } \emph{ Find pet by ID }
Returns a single pet

\itemize{
\item \emph{ @param } pet_id integer
\item \emph{ @returnType } \link{Pet} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Pet
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Pet not found


\item response headers :

\tabular{ll}{
}
}

\strong{ get_pet_by_id_streaming } \emph{ Find pet by ID (streaming) }
Returns a single pet

\itemize{
\item \emph{ @param } pet_id integer
\item \emph{ @returnType } \link{Pet} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Pet
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Pet not found


\item response headers :

\tabular{ll}{
}
}

\strong{ test_header } \emph{ Header test }
Header test

\itemize{
\item \emph{ @param } header_test_int integer
\item \emph{ @returnType } \link{Pet} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Pet
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Pet not found


\item response headers :

\tabular{ll}{
}
}

\strong{ update_pet } \emph{ Update an existing pet }


\itemize{
\item \emph{ @param } pet \link{Pet}
\item \emph{ @returnType } \link{Pet} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Pet
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Pet not found


\item response headers :

\tabular{ll}{
}
\item status code : 405 | Validation exception


\item response headers :

\tabular{ll}{
}
}

\strong{ update_pet_with_form } \emph{ Updates a pet in the store with form data }


\itemize{
\item \emph{ @param } pet_id integer
\item \emph{ @param } name character
\item \emph{ @param } status character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 405 | Invalid input


\item response headers :

\tabular{ll}{
}
}

\strong{ upload_file } \emph{ uploads an image }


\itemize{
\item \emph{ @param } pet_id integer
\item \emph{ @param } additional_metadata character
\item \emph{ @param } file data.frame
\item \emph{ @returnType } \link{ModelApiResponse} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : ModelApiResponse
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  add_pet  ####################

library(petstore)
var_pet <- Pet$new() # Pet | Pet object that needs to be added to the store

#Add a new pet to the store
api_instance <- petstore_api$new()

# Configure HTTP basic authorization: http_auth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$add_pet(var_pet, data_file = "result.txt"),
             
             
             api_instance$pet_api$add_pet(var_pet),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `add_pet`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  delete_pet  ####################

library(petstore)
var_pet_id <- 56 # integer | Pet id to delete
var_api_key <- "api_key_example" # character | 

#Deletes a pet
api_instance <- petstore_api$new()

# Configure OAuth2 access token for authorization: petstore_auth
api_instance$api_client$access_token <- Sys.getenv("ACCESS_TOKEN")

result <- tryCatch(
             
             api_instance$pet_api$delete_pet(var_pet_id, api_key = var_api_key),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `delete_pet`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  find_pets_by_status  ####################

library(petstore)
var_status <- ["status_example"] # array[character] | Status values that need to be considered for filter

#Finds Pets by status
api_instance <- petstore_api$new()

# Configure OAuth2 access token for authorization: petstore_auth
api_instance$api_client$access_token <- Sys.getenv("ACCESS_TOKEN")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$find_pets_by_status(var_status, data_file = "result.txt"),
             
             
             api_instance$pet_api$find_pets_by_status(var_status),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `find_pets_by_status`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  find_pets_by_tags  ####################

library(petstore)
var_tags <- ["tags_example"] # array[character] | Tags to filter by

#Finds Pets by tags
api_instance <- petstore_api$new()

# Configure OAuth2 access token for authorization: petstore_auth
api_instance$api_client$access_token <- Sys.getenv("ACCESS_TOKEN")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$find_pets_by_tags(var_tags, data_file = "result.txt"),
             
             
             api_instance$pet_api$find_pets_by_tags(var_tags),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `find_pets_by_tags`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  get_pet_by_id  ####################

library(petstore)
var_pet_id <- 56 # integer | ID of pet to return

#Find pet by ID
api_instance <- petstore_api$new()

# Configure HTTP bearer authorization: BearerToken
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$get_pet_by_id(var_pet_id, data_file = "result.txt"),
             
             
             api_instance$pet_api$get_pet_by_id(var_pet_id),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `get_pet_by_id`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  get_pet_by_id_streaming  ####################

library(petstore)
var_pet_id <- 56 # integer | ID of pet to return

#Find pet by ID (streaming)
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$get_pet_by_id_streaming(var_pet_id, data_file = "result.txt"),
             
             # this endpoint supports data streaming via a callback function using the optional `stream_callback` parameter, e.g.
             # api_instance$pet_api$get_pet_by_id_streaming(var_pet_id, stream_callback = function(x){ print(length(x)) }),
             
             
             api_instance$pet_api$get_pet_by_id_streaming(var_pet_id),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `get_pet_by_id_streaming`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  test_header  ####################

library(petstore)
var_header_test_int <- 56 # integer | header test int

#Header test
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$test_header(var_header_test_int, data_file = "result.txt"),
             
             # this endpoint supports data streaming via a callback function using the optional `stream_callback` parameter, e.g.
             # api_instance$pet_api$test_header(var_header_test_int, stream_callback = function(x){ print(length(x)) }),
             
             
             api_instance$pet_api$test_header(var_header_test_int),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `test_header`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  update_pet  ####################

library(petstore)
var_pet <- Pet$new() # Pet | Pet object that needs to be added to the store

#Update an existing pet
api_instance <- petstore_api$new()

# Configure OAuth2 access token for authorization: petstore_auth
api_instance$api_client$access_token <- Sys.getenv("ACCESS_TOKEN")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$update_pet(var_pet, data_file = "result.txt"),
             
             
             api_instance$pet_api$update_pet(var_pet),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `update_pet`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  update_pet_with_form  ####################

library(petstore)
var_pet_id <- 56 # integer | ID of pet that needs to be updated
var_name <- "name_example" # character | Updated name of the pet
var_status <- "status_example" # character | Updated status of the pet

#Updates a pet in the store with form data
api_instance <- petstore_api$new()

result <- tryCatch(
             
             api_instance$pet_api$update_pet_with_form(var_pet_id, name = var_name, status = var_status),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `update_pet_with_form`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  upload_file  ####################

library(petstore)
var_pet_id <- 56 # integer | ID of pet to update
var_additional_metadata <- "additional_metadata_example" # character | Additional data to pass to server
var_file <- File.new('/path/to/file') # data.frame | file to upload

#uploads an image
api_instance <- petstore_api$new()

# Configure OAuth2 access token for authorization: petstore_auth
api_instance$api_client$access_token <- Sys.getenv("ACCESS_TOKEN")

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$pet_api$upload_file(var_pet_id, additional_metadata = var_additional_metadata, file = var_file, data_file = "result.txt"),
             
             
             api_instance$pet_api$upload_file(var_pet_id, additional_metadata = var_additional_metadata, file = var_file),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `upload_file`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PetApi-new}{\code{PetApi$new()}}
\item \href{#method-PetApi-add_pet}{\code{PetApi$add_pet()}}
\item \href{#method-PetApi-add_pet_with_http_info}{\code{PetApi$add_pet_with_http_info()}}
\item \href{#method-PetApi-delete_pet}{\code{PetApi$delete_pet()}}
\item \href{#method-PetApi-delete_pet_with_http_info}{\code{PetApi$delete_pet_with_http_info()}}
\item \href{#method-PetApi-find_pets_by_status}{\code{PetApi$find_pets_by_status()}}
\item \href{#method-PetApi-find_pets_by_status_with_http_info}{\code{PetApi$find_pets_by_status_with_http_info()}}
\item \href{#method-PetApi-find_pets_by_tags}{\code{PetApi$find_pets_by_tags()}}
\item \href{#method-PetApi-find_pets_by_tags_with_http_info}{\code{PetApi$find_pets_by_tags_with_http_info()}}
\item \href{#method-PetApi-get_pet_by_id}{\code{PetApi$get_pet_by_id()}}
\item \href{#method-PetApi-get_pet_by_id_with_http_info}{\code{PetApi$get_pet_by_id_with_http_info()}}
\item \href{#method-PetApi-get_pet_by_id_streaming}{\code{PetApi$get_pet_by_id_streaming()}}
\item \href{#method-PetApi-get_pet_by_id_streaming_with_http_info}{\code{PetApi$get_pet_by_id_streaming_with_http_info()}}
\item \href{#method-PetApi-test_header}{\code{PetApi$test_header()}}
\item \href{#method-PetApi-test_header_with_http_info}{\code{PetApi$test_header_with_http_info()}}
\item \href{#method-PetApi-update_pet}{\code{PetApi$update_pet()}}
\item \href{#method-PetApi-update_pet_with_http_info}{\code{PetApi$update_pet_with_http_info()}}
\item \href{#method-PetApi-update_pet_with_form}{\code{PetApi$update_pet_with_form()}}
\item \href{#method-PetApi-update_pet_with_form_with_http_info}{\code{PetApi$update_pet_with_form_with_http_info()}}
\item \href{#method-PetApi-upload_file}{\code{PetApi$upload_file()}}
\item \href{#method-PetApi-upload_file_with_http_info}{\code{PetApi$upload_file_with_http_info()}}
\item \href{#method-PetApi-clone}{\code{PetApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new PetApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-add_pet"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-add_pet}{}}}
\subsection{Method \code{add_pet()}}{
Add a new pet to the store
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$add_pet(pet, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet}}{Pet object that needs to be added to the store}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Pet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-add_pet_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-add_pet_with_http_info}{}}}
\subsection{Method \code{add_pet_with_http_info()}}{
Add a new pet to the store
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$add_pet_with_http_info(pet, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet}}{Pet object that needs to be added to the store}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Pet) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-delete_pet"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-delete_pet}{}}}
\subsection{Method \code{delete_pet()}}{
Deletes a pet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$delete_pet(pet_id, api_key = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{Pet id to delete}

\item{\code{api_key}}{(optional) No description}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-delete_pet_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-delete_pet_with_http_info}{}}}
\subsection{Method \code{delete_pet_with_http_info()}}{
Deletes a pet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$delete_pet_with_http_info(pet_id, api_key = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{Pet id to delete}

\item{\code{api_key}}{(optional) No description}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-find_pets_by_status"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-find_pets_by_status}{}}}
\subsection{Method \code{find_pets_by_status()}}{
Finds Pets by status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$find_pets_by_status(status, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{Status values that need to be considered for filter}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Pet]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-find_pets_by_status_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-find_pets_by_status_with_http_info}{}}}
\subsection{Method \code{find_pets_by_status_with_http_info()}}{
Finds Pets by status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$find_pets_by_status_with_http_info(status, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{Status values that need to be considered for filter}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Pet]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-find_pets_by_tags"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-find_pets_by_tags}{}}}
\subsection{Method \code{find_pets_by_tags()}}{
Finds Pets by tags
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$find_pets_by_tags(tags, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tags}}{Tags to filter by}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[Pet]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-find_pets_by_tags_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-find_pets_by_tags_with_http_info}{}}}
\subsection{Method \code{find_pets_by_tags_with_http_info()}}{
Finds Pets by tags
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$find_pets_by_tags_with_http_info(tags, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tags}}{Tags to filter by}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[Pet]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-get_pet_by_id"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-get_pet_by_id}{}}}
\subsection{Method \code{get_pet_by_id()}}{
Find pet by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$get_pet_by_id(pet_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet to return}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Pet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-get_pet_by_id_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-get_pet_by_id_with_http_info}{}}}
\subsection{Method \code{get_pet_by_id_with_http_info()}}{
Find pet by ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$get_pet_by_id_with_http_info(pet_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet to return}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Pet) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-get_pet_by_id_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-get_pet_by_id_streaming}{}}}
\subsection{Method \code{get_pet_by_id_streaming()}}{
Find pet by ID (streaming)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$get_pet_by_id_streaming(
  pet_id,
  stream_callback = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet to return}

\item{\code{stream_callback}}{(optional) callback function to process the data stream}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Pet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-get_pet_by_id_streaming_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-get_pet_by_id_streaming_with_http_info}{}}}
\subsection{Method \code{get_pet_by_id_streaming_with_http_info()}}{
Find pet by ID (streaming)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$get_pet_by_id_streaming_with_http_info(
  pet_id,
  stream_callback = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet to return}

\item{\code{stream_callback}}{(optional) callback function to process the data stream}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Pet) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-test_header"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-test_header}{}}}
\subsection{Method \code{test_header()}}{
Header test
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$test_header(
  header_test_int,
  stream_callback = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{header_test_int}}{header test int}

\item{\code{stream_callback}}{(optional) callback function to process the data stream}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Pet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-test_header_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-test_header_with_http_info}{}}}
\subsection{Method \code{test_header_with_http_info()}}{
Header test
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$test_header_with_http_info(
  header_test_int,
  stream_callback = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{header_test_int}}{header test int}

\item{\code{stream_callback}}{(optional) callback function to process the data stream}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Pet) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-update_pet"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-update_pet}{}}}
\subsection{Method \code{update_pet()}}{
Update an existing pet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$update_pet(pet, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet}}{Pet object that needs to be added to the store}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Pet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-update_pet_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-update_pet_with_http_info}{}}}
\subsection{Method \code{update_pet_with_http_info()}}{
Update an existing pet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$update_pet_with_http_info(pet, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet}}{Pet object that needs to be added to the store}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (Pet) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-update_pet_with_form"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-update_pet_with_form}{}}}
\subsection{Method \code{update_pet_with_form()}}{
Updates a pet in the store with form data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$update_pet_with_form(pet_id, name = NULL, status = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet that needs to be updated}

\item{\code{name}}{(optional) Updated name of the pet}

\item{\code{status}}{(optional) Updated status of the pet}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-update_pet_with_form_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-update_pet_with_form_with_http_info}{}}}
\subsection{Method \code{update_pet_with_form_with_http_info()}}{
Updates a pet in the store with form data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$update_pet_with_form_with_http_info(
  pet_id,
  name = NULL,
  status = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet that needs to be updated}

\item{\code{name}}{(optional) Updated name of the pet}

\item{\code{status}}{(optional) Updated status of the pet}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-upload_file"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-upload_file}{}}}
\subsection{Method \code{upload_file()}}{
uploads an image
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$upload_file(
  pet_id,
  additional_metadata = NULL,
  file = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet to update}

\item{\code{additional_metadata}}{(optional) Additional data to pass to server}

\item{\code{file}}{(optional) file to upload}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ModelApiResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-upload_file_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-upload_file_with_http_info}{}}}
\subsection{Method \code{upload_file_with_http_info()}}{
uploads an image
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$upload_file_with_http_info(
  pet_id,
  additional_metadata = NULL,
  file = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pet_id}}{ID of pet to update}

\item{\code{additional_metadata}}{(optional) Additional data to pass to server}

\item{\code{file}}{(optional) file to upload}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ModelApiResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PetApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PetApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PetApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
