% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zebra.R
\docType{class}
\name{Zebra}
\alias{Zebra}
\title{Zebra}
\format{
An \code{R6Class} generator object
}
\description{
Zebra Class

Zebra Class
}
\details{
Create a new Zebra
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{type}}{character [optional]}

\item{\code{className}}{character}

\item{\code{_field_list}}{a list of fields list(character)}

\item{\code{additional_properties}}{additional properties list(character) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Zebra-new}{\code{Zebra$new()}}
\item \href{#method-Zebra-toJSON}{\code{Zebra$toJSON()}}
\item \href{#method-Zebra-fromJSON}{\code{Zebra$fromJSON()}}
\item \href{#method-Zebra-toJSONString}{\code{Zebra$toJSONString()}}
\item \href{#method-Zebra-fromJSONString}{\code{Zebra$fromJSONString()}}
\item \href{#method-Zebra-validateJSON}{\code{Zebra$validateJSON()}}
\item \href{#method-Zebra-toString}{\code{Zebra$toString()}}
\item \href{#method-Zebra-isValid}{\code{Zebra$isValid()}}
\item \href{#method-Zebra-getInvalidFields}{\code{Zebra$getInvalidFields()}}
\item \href{#method-Zebra-print}{\code{Zebra$print()}}
\item \href{#method-Zebra-clone}{\code{Zebra$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-new"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Zebra class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$new(className, type = NULL, additional_properties = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{className}}{className}

\item{\code{type}}{type}

\item{\code{additional_properties}}{additonal properties (optional)}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Zebra in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Zebra
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Zebra
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Zebra in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Zebra
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Zebra
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Zebra and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Zebra
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-print"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Zebra-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Zebra-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Zebra$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
