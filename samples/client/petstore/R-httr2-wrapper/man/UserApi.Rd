% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_api.R
\docType{class}
\name{UserApi}
\alias{UserApi}
\title{User operations}
\format{
An \code{R6Class} generator object
}
\description{
UserApi
}
\details{
OpenAPI Petstore

This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

The version of the OpenAPI document: 1.0.0
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ create_user } \emph{ Create user }
This can only be done by the logged in user.

\itemize{
\item \emph{ @param } user \link{User}

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ create_users_with_array_input } \emph{ Creates list of users with given input array }


\itemize{
\item \emph{ @param } user list( \link{User} )

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ create_users_with_list_input } \emph{ Creates list of users with given input array }


\itemize{
\item \emph{ @param } user list( \link{User} )

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ delete_user } \emph{ Delete user }
This can only be done by the logged in user.

\itemize{
\item \emph{ @param } username character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid username supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
}

\strong{ get_user_by_name } \emph{ Get user by user name }


\itemize{
\item \emph{ @param } username character
\item \emph{ @returnType } \link{User} \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : User
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid username supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
}

\strong{ login_user } \emph{ Logs user into the system }


\itemize{
\item \emph{ @param } username character
\item \emph{ @param } password character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : character
\item response headers :

\tabular{ll}{
Set-Cookie \tab Cookie authentication key for use with the `api_key` apiKey authentication. \cr
X-Rate-Limit \tab calls per hour allowed by the user \cr
X-Expires-After \tab date in UTC when token expires \cr
}
\item status code : 400 | Invalid username/password supplied


\item response headers :

\tabular{ll}{
}
}

\strong{ logout_user } \emph{ Logs out current logged in user session }


\itemize{

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ update_user } \emph{ Updated user }
This can only be done by the logged in user.

\itemize{
\item \emph{ @param } username character
\item \emph{ @param } user \link{User}

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid user supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  create_user  ####################

library(petstore)
var_user <- User$new() # User | Created user object

#Create user
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             api_instance$user_api$create_user(var_user),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `create_user`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  create_users_with_array_input  ####################

library(petstore)
var_user <- [User$new()] # array[User] | List of user object

#Creates list of users with given input array
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             api_instance$user_api$create_users_with_array_input(var_user),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `create_users_with_array_input`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  create_users_with_list_input  ####################

library(petstore)
var_user <- [User$new()] # array[User] | List of user object

#Creates list of users with given input array
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             api_instance$user_api$create_users_with_list_input(var_user),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `create_users_with_list_input`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  delete_user  ####################

library(petstore)
var_username <- "username_example" # character | The name that needs to be deleted

#Delete user
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             api_instance$user_api$delete_user(var_username),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `delete_user`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  get_user_by_name  ####################

library(petstore)
var_username <- "username_example" # character | The name that needs to be fetched. Use user1 for testing.

#Get user by user name
api_instance <- petstore_api$new()

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$user_api$get_user_by_name(var_username, data_file = "result.txt"),
             
             
             api_instance$user_api$get_user_by_name(var_username),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `get_user_by_name`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  login_user  ####################

library(petstore)
var_username <- "username_example" # character | The user name for login
var_password <- "password_example" # character | The password for login in clear text

#Logs user into the system
api_instance <- petstore_api$new()

result <- tryCatch(
             
             # to save the result into a file, simply add the optional `data_file` parameter, e.g.
             # api_instance$user_api$login_user(var_username, var_password, data_file = "result.txt"),
             
             
             api_instance$user_api$login_user(var_username, var_password),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `login_user`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
} else {
  # deserialized response object
  print("The response is ...")
  dput(result$toString())
}



####################  logout_user  ####################

library(petstore)

#Logs out current logged in user session
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             api_instance$user_api$logout_user(),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `logout_user`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


####################  update_user  ####################

library(petstore)
var_username <- "username_example" # character | name that need to be deleted
var_user <- User$new() # User | Updated user object

#Updated user
api_instance <- petstore_api$new()

# Configure API key authorization: api_key
api_instance$api_client$api_keys["api_key"] <- Sys.getenv("API_KEY")

result <- tryCatch(
             
             api_instance$user_api$update_user(var_username, var_user),
             ApiException = function(ex) ex
          )
# In case of error, print the error object
if (!is.null(result$ApiException)) {
  print("Exception occurs when calling `update_user`:")
  dput(result$ApiException$toString())
  
  # error object
  dput(result$ApiException$error_object$toJSONString())
  
}#'
# This endpoint doesn't return data


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UserApi-new}{\code{UserApi$new()}}
\item \href{#method-UserApi-create_user}{\code{UserApi$create_user()}}
\item \href{#method-UserApi-create_user_with_http_info}{\code{UserApi$create_user_with_http_info()}}
\item \href{#method-UserApi-create_users_with_array_input}{\code{UserApi$create_users_with_array_input()}}
\item \href{#method-UserApi-create_users_with_array_input_with_http_info}{\code{UserApi$create_users_with_array_input_with_http_info()}}
\item \href{#method-UserApi-create_users_with_list_input}{\code{UserApi$create_users_with_list_input()}}
\item \href{#method-UserApi-create_users_with_list_input_with_http_info}{\code{UserApi$create_users_with_list_input_with_http_info()}}
\item \href{#method-UserApi-delete_user}{\code{UserApi$delete_user()}}
\item \href{#method-UserApi-delete_user_with_http_info}{\code{UserApi$delete_user_with_http_info()}}
\item \href{#method-UserApi-get_user_by_name}{\code{UserApi$get_user_by_name()}}
\item \href{#method-UserApi-get_user_by_name_with_http_info}{\code{UserApi$get_user_by_name_with_http_info()}}
\item \href{#method-UserApi-login_user}{\code{UserApi$login_user()}}
\item \href{#method-UserApi-login_user_with_http_info}{\code{UserApi$login_user_with_http_info()}}
\item \href{#method-UserApi-logout_user}{\code{UserApi$logout_user()}}
\item \href{#method-UserApi-logout_user_with_http_info}{\code{UserApi$logout_user_with_http_info()}}
\item \href{#method-UserApi-update_user}{\code{UserApi$update_user()}}
\item \href{#method-UserApi-update_user_with_http_info}{\code{UserApi$update_user_with_http_info()}}
\item \href{#method-UserApi-clone}{\code{UserApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new UserApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-create_user"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-create_user}{}}}
\subsection{Method \code{create_user()}}{
Create user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$create_user(user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user}}{Created user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-create_user_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-create_user_with_http_info}{}}}
\subsection{Method \code{create_user_with_http_info()}}{
Create user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$create_user_with_http_info(user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user}}{Created user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-create_users_with_array_input"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-create_users_with_array_input}{}}}
\subsection{Method \code{create_users_with_array_input()}}{
Creates list of users with given input array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$create_users_with_array_input(user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user}}{List of user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-create_users_with_array_input_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-create_users_with_array_input_with_http_info}{}}}
\subsection{Method \code{create_users_with_array_input_with_http_info()}}{
Creates list of users with given input array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$create_users_with_array_input_with_http_info(user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user}}{List of user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-create_users_with_list_input"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-create_users_with_list_input}{}}}
\subsection{Method \code{create_users_with_list_input()}}{
Creates list of users with given input array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$create_users_with_list_input(user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user}}{List of user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-create_users_with_list_input_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-create_users_with_list_input_with_http_info}{}}}
\subsection{Method \code{create_users_with_list_input_with_http_info()}}{
Creates list of users with given input array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$create_users_with_list_input_with_http_info(user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user}}{List of user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-delete_user"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-delete_user}{}}}
\subsection{Method \code{delete_user()}}{
Delete user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$delete_user(username, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{The name that needs to be deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-delete_user_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-delete_user_with_http_info}{}}}
\subsection{Method \code{delete_user_with_http_info()}}{
Delete user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$delete_user_with_http_info(username, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{The name that needs to be deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-get_user_by_name"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-get_user_by_name}{}}}
\subsection{Method \code{get_user_by_name()}}{
Get user by user name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$get_user_by_name(username, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{The name that needs to be fetched. Use user1 for testing.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
User
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-get_user_by_name_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-get_user_by_name_with_http_info}{}}}
\subsection{Method \code{get_user_by_name_with_http_info()}}{
Get user by user name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$get_user_by_name_with_http_info(username, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{The name that needs to be fetched. Use user1 for testing.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (User) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-login_user"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-login_user}{}}}
\subsection{Method \code{login_user()}}{
Logs user into the system
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$login_user(username, password, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{The user name for login}

\item{\code{password}}{The password for login in clear text}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-login_user_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-login_user_with_http_info}{}}}
\subsection{Method \code{login_user_with_http_info()}}{
Logs user into the system
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$login_user_with_http_info(username, password, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{The user name for login}

\item{\code{password}}{The password for login in clear text}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-logout_user"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-logout_user}{}}}
\subsection{Method \code{logout_user()}}{
Logs out current logged in user session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$logout_user(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-logout_user_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-logout_user_with_http_info}{}}}
\subsection{Method \code{logout_user_with_http_info()}}{
Logs out current logged in user session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$logout_user_with_http_info(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-update_user"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-update_user}{}}}
\subsection{Method \code{update_user()}}{
Updated user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$update_user(username, user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{name that need to be deleted}

\item{\code{user}}{Updated user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-update_user_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-update_user_with_http_info}{}}}
\subsection{Method \code{update_user_with_http_info()}}{
Updated user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$update_user_with_http_info(username, user, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{username}}{name that need to be deleted}

\item{\code{user}}{Updated user object}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
