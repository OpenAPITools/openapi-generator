/* 
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use serde_json;
use serde_json::Value;

use reqwest;

use super::{Error, configuration};

pub struct PetApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl PetApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> PetApiClient {
        PetApiClient {
            configuration: configuration,
        }
    }
}

pub trait PetApi {
    fn add_pet(&self, pet: ::models::Pet) -> Result<(), Error>;
    fn delete_pet(&self, pet_id: i64, api_key: &str) -> Result<(), Error>;
    fn find_pets_by_status(&self, status: Vec<String>) -> Result<Vec<::models::Pet>, Error>;
    fn find_pets_by_tags(&self, tags: Vec<String>) -> Result<Vec<::models::Pet>, Error>;
    fn get_pet_by_id(&self, pet_id: i64) -> Result<::models::Pet, Error>;
    fn update_pet(&self, pet: ::models::Pet) -> Result<(), Error>;
    fn update_pet_with_form(&self, pet_id: i64, name: &str, status: &str) -> Result<(), Error>;
    fn upload_file(&self, pet_id: i64, additional_metadata: &str, file: ::models::File) -> Result<::models::ApiResponse, Error>;
}


impl PetApi for PetApiClient {
    fn add_pet(&self, pet: ::models::Pet) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/pet?{}", configuration.base_path, query_string);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };

        req_builder.json(&pet);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_pet(&self, pet_id: i64, api_key: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}?{}", configuration.base_path, query_string, petId=pet_id);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        req_builder.header(configuration::Configuration::header_api_key(api_key.to_string()));

        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn find_pets_by_status(&self, status: Vec<String>) -> Result<Vec<::models::Pet>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("status", &status.join(",").to_string());

            query.finish()
        };
        let uri_str = format!("{}/pet/findByStatus?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn find_pets_by_tags(&self, tags: Vec<String>) -> Result<Vec<::models::Pet>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("tags", &tags.join(",").to_string());

            query.finish()
        };
        let uri_str = format!("{}/pet/findByTags?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_pet_by_id(&self, pet_id: i64) -> Result<::models::Pet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}?{}", configuration.base_path, query_string, petId=pet_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref _apikey) = configuration.api_key {
            req_builder.header(configuration.header_configured_api_key());
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_pet(&self, pet: ::models::Pet) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/pet?{}", configuration.base_path, query_string);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };

        req_builder.json(&pet);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_pet_with_form(&self, pet_id: i64, name: &str, status: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}?{}", configuration.base_path, query_string, petId=pet_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn upload_file(&self, pet_id: i64, additional_metadata: &str, file: ::models::File) -> Result<::models::ApiResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;



        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}/uploadImage?{}", configuration.base_path, query_string, petId=pet_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
