/* 
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std;

use hyper;
use reqwest;
use reqwest::header::{Formatter, Header, Raw};

pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration {
            base_path: "http://petstore.swagger.io/v2".to_owned(),
            user_agent: Some("Swagger-Codegen/1.0.0/rust".to_owned()),
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            api_key: None,
        }
    }

    pub fn header_api_key(value: String) -> Header_api_key {
        Header_api_key(value)
    }
}

#[derive(Debug, Clone)]
pub struct Header_api_key(String);

impl Header for Header_api_key {
    fn header_name() -> &'static str {
        "api_key"
    }

    fn parse_header(raw: &Raw) -> Result<Self, hyper::error::Error> {
        Ok(Header_api_key(std::str::from_utf8(raw.one().unwrap())?.to_string()))
    }

    fn fmt_header(&self, f: &mut Formatter) -> Result<(), std::fmt::Error> {
        f.fmt_line(&self.0)
    }
}
