{-
   OpenAPI Petstore

   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI Version: 3.0.1
   OpenAPI Petstore API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OpenAPIPetstore.API.User
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenAPIPetstore.API.User where

import OpenAPIPetstore.Core
import OpenAPIPetstore.MimeTypes
import OpenAPIPetstore.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- *** createUser

-- | @@
-- 
-- Create user
-- 
-- This can only be done by the logged in user.
-- 
createUser 
  :: Accept accept -- ^ request accept ('MimeType')
  -> User -- ^ "body" -  Created user object
  -> OpenAPIPetstoreRequest  contentType  accept
createUser _  _ body =
  _mkRequest "POST" ["/user"]
    `setBodyParam` body

data  

-- | /Body Param/ "body" - Created user object
instance HasBodyParam  User 
instance Produces  MimeNoContent


-- *** createUsersWithArrayInput

-- | @@
-- 
-- Creates list of users with given input array
-- 
createUsersWithArrayInput 
  :: Accept accept -- ^ request accept ('MimeType')
  -> [User] -- ^ "body" -  List of user object
  -> OpenAPIPetstoreRequest  contentType  accept
createUsersWithArrayInput _  _ body =
  _mkRequest "POST" ["/user/createWithArray"]
    `setBodyParam` body

data  

-- | /Body Param/ "body" - List of user object
instance HasBodyParam  [User] 
instance Produces  MimeNoContent


-- *** createUsersWithListInput

-- | @@
-- 
-- Creates list of users with given input array
-- 
createUsersWithListInput 
  :: Accept accept -- ^ request accept ('MimeType')
  -> [User] -- ^ "body" -  List of user object
  -> OpenAPIPetstoreRequest  contentType  accept
createUsersWithListInput _  _ body =
  _mkRequest "POST" ["/user/createWithList"]
    `setBodyParam` body

data  

-- | /Body Param/ "body" - List of user object
instance HasBodyParam  [User] 
instance Produces  MimeNoContent


-- *** deleteUser

-- | @@
-- 
-- Delete user
-- 
-- This can only be done by the logged in user.
-- 
deleteUser 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Text -- ^ "username" -  The name that needs to be deleted
  -> OpenAPIPetstoreRequest  contentType  accept
deleteUser _  _ ( username) =
  _mkRequest "DELETE" ["/user/",toPath username]

data   
instance Produces  MimeNoContent


-- *** getUserByName

-- | @@
-- 
-- Get user by user name
-- 
getUserByName 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Text -- ^ "username" -  The name that needs to be fetched. Use user1 for testing.
  -> OpenAPIPetstoreRequest  contentType  accept
getUserByName _  _ ( username) =
  _mkRequest "GET" ["/user/",toPath username]

data   
-- | @application/xml@
instance Produces  MimeXML
-- | @application/json@
instance Produces  MimeJSON


-- *** loginUser

-- | @@
-- 
-- Logs user into the system
-- 
loginUser 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Text -- ^ "username" -  The user name for login
  -> Text -- ^ "password" -  The password for login in clear text
  -> OpenAPIPetstoreRequest  contentType  accept
loginUser _  _ ( username) ( password) =
  _mkRequest "GET" ["/user/login"]
    `setQuery` toQuery ("username", Just username)
    `setQuery` toQuery ("password", Just password)

data   
-- | @application/xml@
instance Produces  MimeXML
-- | @application/json@
instance Produces  MimeJSON


-- *** logoutUser

-- | @@
-- 
-- Logs out current logged in user session
-- 
logoutUser 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpenAPIPetstoreRequest  contentType  accept
logoutUser _  _ =
  _mkRequest "GET" ["/user/logout"]

data   
instance Produces  MimeNoContent


-- *** updateUser

-- | @@
-- 
-- Updated user
-- 
-- This can only be done by the logged in user.
-- 
updateUser 
  :: Accept accept -- ^ request accept ('MimeType')
  -> User -- ^ "body" -  Updated user object
  -> Text -- ^ "username" -  name that need to be deleted
  -> OpenAPIPetstoreRequest  contentType  accept
updateUser _  _ body ( username) =
  _mkRequest "PUT" ["/user/",toPath username]
    `setBodyParam` body

data  

-- | /Body Param/ "body" - Updated user object
instance HasBodyParam  User 
instance Produces  MimeNoContent

