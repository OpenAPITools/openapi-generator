{-
   OpenAPI Petstore

   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI Version: 3.0.1
   OpenAPI Petstore API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OpenAPIPetstore.API.Pet
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenAPIPetstore.API.Pet where

import OpenAPIPetstore.Core
import OpenAPIPetstore.MimeTypes
import OpenAPIPetstore.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- *** addPet

-- | @@
-- 
-- Add a new pet to the store
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
addPet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Pet -- ^ "body" -  Pet object that needs to be added to the store
  -> OpenAPIPetstoreRequest  contentType  accept
addPet _  _ body =
  _mkRequest "POST" ["/pet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)
    `setBodyParam` body

data  

-- | /Body Param/ "body" - Pet object that needs to be added to the store
instance HasBodyParam  Pet 

-- | @application/xml@
instance Consumes  MimeXML
-- | @application/json@
instance Consumes  MimeJSON

instance Produces  MimeNoContent


-- *** deletePet

-- | @@
-- 
-- Deletes a pet
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
deletePet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Integer -- ^ "petId" -  Pet id to delete
  -> OpenAPIPetstoreRequest  contentType  accept
deletePet _  _ ( petId) =
  _mkRequest "DELETE" ["/pet/",toPath petId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)

data   
instance Produces  MimeNoContent


-- *** findPetsByStatus

-- | @@
-- 
-- Finds Pets by status
-- 
-- Multiple status values can be provided with comma separated strings
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
findPetsByStatus 
  :: Accept accept -- ^ request accept ('MimeType')
  -> [Text] -- ^ "status" -  Status values that need to be considered for filter
  -> OpenAPIPetstoreRequest  contentType  accept
findPetsByStatus _  _ ( status) =
  _mkRequest "GET" ["/pet/findByStatus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)
    `setQuery` toQueryColl  ("status", Just status)

data   
-- | @application/xml@
instance Produces  MimeXML
-- | @application/json@
instance Produces  MimeJSON


-- *** findPetsByTags

-- | @@
-- 
-- Finds Pets by tags
-- 
-- Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
findPetsByTags 
  :: Accept accept -- ^ request accept ('MimeType')
  -> [Text] -- ^ "tags" -  Tags to filter by
  -> OpenAPIPetstoreRequest  contentType  accept
findPetsByTags _  _ ( tags) =
  _mkRequest "GET" ["/pet/findByTags"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)
    `setQuery` toQueryColl  ("tags", Just tags)

{-# DEPRECATED findPetsByTags "" #-}

data   
-- | @application/xml@
instance Produces  MimeXML
-- | @application/json@
instance Produces  MimeJSON


-- *** getPetById

-- | @@
-- 
-- Find pet by ID
-- 
-- Returns a single pet
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
getPetById 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Integer -- ^ "petId" -  ID of pet to return
  -> OpenAPIPetstoreRequest  contentType  accept
getPetById _  _ ( petId) =
  _mkRequest "GET" ["/pet/",toPath petId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data   
-- | @application/xml@
instance Produces  MimeXML
-- | @application/json@
instance Produces  MimeJSON


-- *** updatePet

-- | @@
-- 
-- Update an existing pet
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
updatePet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Pet -- ^ "body" -  Pet object that needs to be added to the store
  -> OpenAPIPetstoreRequest  contentType  accept
updatePet _  _ body =
  _mkRequest "PUT" ["/pet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)
    `setBodyParam` body

data  

-- | /Body Param/ "body" - Pet object that needs to be added to the store
instance HasBodyParam  Pet 

-- | @application/xml@
instance Consumes  MimeXML
-- | @application/json@
instance Consumes  MimeJSON

instance Produces  MimeNoContent


-- *** updatePetWithForm

-- | @@
-- 
-- Updates a pet in the store with form data
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
updatePetWithForm 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Integer -- ^ "petId" -  ID of pet that needs to be updated
  -> OpenAPIPetstoreRequest  contentType  accept
updatePetWithForm _  _ ( petId) =
  _mkRequest "POST" ["/pet/",toPath petId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)

data   

-- | @application/x-www-form-urlencoded@
instance Consumes  MimeFormUrlEncoded

instance Produces  MimeNoContent


-- *** uploadFile

-- | @@
-- 
-- uploads an image
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
uploadFile 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Integer -- ^ "petId" -  ID of pet to update
  -> OpenAPIPetstoreRequest  contentType  accept
uploadFile _  _ ( petId) =
  _mkRequest "POST" ["/pet/",toPath petId,"/uploadImage"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)

data   

-- | @multipart/form-data@
instance Consumes  MimeMultipartFormData

-- | @application/json@
instance Produces  MimeJSON


-- *** uploadFileWithRequiredFile

-- | @@
-- 
-- uploads an image (required)
-- 
-- AuthMethod: 'AuthOAuthPetstoreAuth'
-- 
uploadFileWithRequiredFile 
  :: Accept accept -- ^ request accept ('MimeType')
  -> FilePath -- ^ "requiredFile" -  file to upload
  -> Integer -- ^ "petId" -  ID of pet to update
  -> OpenAPIPetstoreRequest  contentType  accept
uploadFileWithRequiredFile _  _ ( requiredFile) ( petId) =
  _mkRequest "POST" ["/fake/",toPath petId,"/uploadImageWithRequiredFile"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthPetstoreAuth)
    `_addMultiFormPart` NH.partFileSource "requiredFile" requiredFile

data   

-- | @multipart/form-data@
instance Consumes  MimeMultipartFormData

-- | @application/json@
instance Produces  MimeJSON

