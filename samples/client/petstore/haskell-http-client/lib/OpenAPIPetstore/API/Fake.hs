{-
   OpenAPI Petstore

   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI Version: 3.0.1
   OpenAPI Petstore API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OpenAPIPetstore.API.Fake
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenAPIPetstore.API.Fake where

import OpenAPIPetstore.Core
import OpenAPIPetstore.MimeTypes
import OpenAPIPetstore.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- *** createXmlItem

-- | @@
-- 
-- creates an XmlItem
-- 
-- this route creates an XmlItem
-- 
createXmlItem 
  :: Accept accept -- ^ request accept ('MimeType')
  -> XmlItem -- ^ "xmlItem" -  XmlItem Body
  -> OpenAPIPetstoreRequest  contentType  accept
createXmlItem _  _ xmlItem =
  _mkRequest "POST" ["/fake/create_xml_item"]
    `setBodyParam` xmlItem

data  

-- | /Body Param/ "XmlItem" - XmlItem Body
instance HasBodyParam  XmlItem 

-- | @application/xml@
instance Consumes  MimeXML
-- | @text/xml@
instance Consumes  MimeTextXml
-- | @text/xml; charset=utf-8@
instance Consumes  MimeTextXmlCharsetutf8
-- | @text/xml; charset=utf-16@
instance Consumes  MimeTextXmlCharsetutf16
-- | @application/xml; charset=utf-8@
instance Consumes  MimeXmlCharsetutf8
-- | @application/xml; charset=utf-16@
instance Consumes  MimeXmlCharsetutf16

instance Produces  MimeNoContent


-- *** fakeOuterBooleanSerialize

-- | @@
-- 
-- Test serialization of outer boolean types
-- 
fakeOuterBooleanSerialize 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpenAPIPetstoreRequest  contentType  accept
fakeOuterBooleanSerialize _  _ =
  _mkRequest "POST" ["/fake/outer/boolean"]

data  

-- | /Body Param/ "body" - Input boolean as post body
instance HasBodyParam  Bool 
-- | @*/*@
instance MimeType mtype => Produces  mtype


-- *** fakeOuterCompositeSerialize

-- | @@
-- 
-- Test serialization of object with outer number type
-- 
fakeOuterCompositeSerialize 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpenAPIPetstoreRequest  contentType  accept
fakeOuterCompositeSerialize _  _ =
  _mkRequest "POST" ["/fake/outer/composite"]

data  

-- | /Body Param/ "body" - Input composite as post body
instance HasBodyParam  OuterComposite 
-- | @*/*@
instance MimeType mtype => Produces  mtype


-- *** fakeOuterNumberSerialize

-- | @@
-- 
-- Test serialization of outer number types
-- 
fakeOuterNumberSerialize 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpenAPIPetstoreRequest  contentType  accept
fakeOuterNumberSerialize _  _ =
  _mkRequest "POST" ["/fake/outer/number"]

data  

-- | /Body Param/ "body" - Input number as post body
instance HasBodyParam  Double 
-- | @*/*@
instance MimeType mtype => Produces  mtype


-- *** fakeOuterStringSerialize

-- | @@
-- 
-- Test serialization of outer string types
-- 
fakeOuterStringSerialize 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpenAPIPetstoreRequest  contentType  accept
fakeOuterStringSerialize _  _ =
  _mkRequest "POST" ["/fake/outer/string"]

data  

-- | /Body Param/ "body" - Input string as post body
instance HasBodyParam  Text 
-- | @*/*@
instance MimeType mtype => Produces  mtype


-- *** testBodyWithFileSchema

-- | @@
-- 
-- For this test, the body for this request much reference a schema named `File`.
-- 
testBodyWithFileSchema 
  :: Accept accept -- ^ request accept ('MimeType')
  -> FileSchemaTestClass -- ^ "body"
  -> OpenAPIPetstoreRequest  contentType  accept
testBodyWithFileSchema _  _ body =
  _mkRequest "PUT" ["/fake/body-with-file-schema"]
    `setBodyParam` body

data  
instance HasBodyParam  FileSchemaTestClass 

-- | @application/json@
instance Consumes  MimeJSON

instance Produces  MimeNoContent


-- *** testBodyWithQueryParams

-- | @@
-- 
testBodyWithQueryParams 
  :: Accept accept -- ^ request accept ('MimeType')
  -> User -- ^ "body"
  -> Text -- ^ "query"
  -> OpenAPIPetstoreRequest  contentType  accept
testBodyWithQueryParams _  _ body ( query) =
  _mkRequest "PUT" ["/fake/body-with-query-params"]
    `setBodyParam` body
    `setQuery` toQuery ("query", Just query)

data  
instance HasBodyParam  User 

-- | @application/json@
instance Consumes  MimeJSON

instance Produces  MimeNoContent


-- *** testClientModel

-- | @@
-- 
-- To test \"client\" model
-- 
-- To test \"client\" model
-- 
testClientModel 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Client -- ^ "body" -  client model
  -> OpenAPIPetstoreRequest  contentType  accept
testClientModel _  _ body =
  _mkRequest "PATCH" ["/fake"]
    `setBodyParam` body

data  

-- | /Body Param/ "body" - client model
instance HasBodyParam  Client 

-- | @application/json@
instance Consumes  MimeJSON

-- | @application/json@
instance Produces  MimeJSON


-- *** testEndpointParameters

-- | @@
-- 
-- Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
-- 
-- Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
-- 
-- AuthMethod: 'AuthBasicHttpBasicTest'
-- 
testEndpointParameters 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Double -- ^ "number" -  None
  -> Double -- ^ "double" -  None
  -> Text -- ^ "patternWithoutDelimiter" -  None
  -> ByteArray -- ^ "byte" -  None
  -> OpenAPIPetstoreRequest  contentType  accept
testEndpointParameters _  _ ( number) ( double) ( patternWithoutDelimiter) ( byte) =
  _mkRequest "POST" ["/fake"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicHttpBasicTest)
    `addForm` toForm ("number", number)
    `addForm` toForm ("double", double)
    `addForm` toForm ("pattern_without_delimiter", patternWithoutDelimiter)
    `addForm` toForm ("byte", byte)

data   

-- | @application/x-www-form-urlencoded@
instance Consumes  MimeFormUrlEncoded

instance Produces  MimeNoContent


-- *** testEnumParameters

-- | @@
-- 
-- To test enum parameters
-- 
-- To test enum parameters
-- 
testEnumParameters 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpenAPIPetstoreRequest  contentType  accept
testEnumParameters _  _ =
  _mkRequest "GET" ["/fake"]

data   

-- | @application/x-www-form-urlencoded@
instance Consumes  MimeFormUrlEncoded

instance Produces  MimeNoContent


-- *** testGroupParameters

-- | @@
-- 
-- Fake endpoint to test group parameters (optional)
-- 
-- Fake endpoint to test group parameters (optional)
-- 
testGroupParameters 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Int -- ^ "requiredStringGroup" -  Required String in group parameters
  -> Bool -- ^ "requiredBooleanGroup" -  Required Boolean in group parameters
  -> Integer -- ^ "requiredInt64Group" -  Required Integer in group parameters
  -> OpenAPIPetstoreRequest  contentType  accept
testGroupParameters _  _ ( requiredStringGroup) ( requiredBooleanGroup) ( requiredInt64Group) =
  _mkRequest "DELETE" ["/fake"]
    `setQuery` toQuery ("required_string_group", Just requiredStringGroup)
    `setHeader` toHeader ("required_boolean_group", requiredBooleanGroup)
    `setQuery` toQuery ("required_int64_group", Just requiredInt64Group)

data   
instance Produces  MimeNoContent


-- *** testInlineAdditionalProperties

-- | @@
-- 
-- test inline additionalProperties
-- 
testInlineAdditionalProperties 
  :: Accept accept -- ^ request accept ('MimeType')
  -> (Map.Map String Text) -- ^ "param" -  request body
  -> OpenAPIPetstoreRequest  contentType  accept
testInlineAdditionalProperties _  _ param =
  _mkRequest "POST" ["/fake/inline-additionalProperties"]
    `setBodyParam` param

data  

-- | /Body Param/ "param" - request body
instance HasBodyParam  (Map.Map String Text) 

-- | @application/json@
instance Consumes  MimeJSON

instance Produces  MimeNoContent


-- *** testJsonFormData

-- | @@
-- 
-- test json serialization of form data
-- 
testJsonFormData 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Text -- ^ "param" -  field1
  -> Text -- ^ "param2" -  field2
  -> OpenAPIPetstoreRequest  contentType  accept
testJsonFormData _  _ ( param) ( param2) =
  _mkRequest "GET" ["/fake/jsonFormData"]
    `addForm` toForm ("param", param)
    `addForm` toForm ("param2", param2)

data   

-- | @application/x-www-form-urlencoded@
instance Consumes  MimeFormUrlEncoded

instance Produces  MimeNoContent


-- *** testQueryParameterCollectionFormat

-- | @@
-- 
-- To test the collection format in query parameters
-- 
testQueryParameterCollectionFormat 
  :: Accept accept -- ^ request accept ('MimeType')
  -> [Text] -- ^ "pipe"
  -> [Text] -- ^ "ioutil"
  -> [Text] -- ^ "http"
  -> [Text] -- ^ "url"
  -> [Text] -- ^ "context"
  -> OpenAPIPetstoreRequest  contentType  accept
testQueryParameterCollectionFormat _  _ ( pipe) ( ioutil) ( http) ( url) ( context) =
  _mkRequest "PUT" ["/fake/test-query-paramters"]
    `setQuery` toQueryColl  ("pipe", Just pipe)
    `setQuery` toQueryColl  ("ioutil", Just ioutil)
    `setQuery` toQueryColl  ("http", Just http)
    `setQuery` toQueryColl  ("url", Just url)
    `setQuery` toQueryColl  ("context", Just context)

data   
instance Produces  MimeNoContent

