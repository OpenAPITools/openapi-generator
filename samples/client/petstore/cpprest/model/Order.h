/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@wordnik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Order.h
 * 
 * 
 */

#ifndef Order_H_
#define Order_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Order
	: public ModelBase
{
public:
    Order();
    virtual ~Order();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// Order members
	   
    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    int64_t getPetId() const;
    void setPetId(int64_t value);
    bool petIdIsSet() const;
    void unsetPetId();
    /// <summary>
    /// 
    /// </summary>
    int32_t getQuantity() const;
    void setQuantity(int32_t value);
    bool quantityIsSet() const;
    void unsetQuantity();
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getShipDate() const;
    void setShipDate(utility::datetime value);
    bool shipDateIsSet() const;
    void unsetShipDate();
    /// <summary>
    /// Order Status
    /// </summary>
    utility::string_t getStatus() const;
    void setStatus(utility::string_t value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    bool getComplete() const;
    void setComplete(bool value);
    bool completeIsSet() const;
    void unsetComplete();
    
protected:
    int64_t m_Id;
    bool m_IdIsSet;
int64_t m_PetId;
    bool m_PetIdIsSet;
int32_t m_Quantity;
    bool m_QuantityIsSet;
utility::datetime m_ShipDate;
    bool m_ShipDateIsSet;
utility::string_t m_Status;
    bool m_StatusIsSet;
bool m_Complete;
    bool m_CompleteIsSet;
};

}
}
}
}

#endif /* Order_H_ */
