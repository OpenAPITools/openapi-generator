// tslint:disable
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  User,
} from '../models';

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P extends unknown
  ? Record<string, any>
  : P
  : never;

export interface CreateUserForQuery {
  user: User;
}
export interface CreateUsersWithArrayInputForQuery {
  user: User[];
}
export interface CreateUsersWithListInputForQuery {
  user: User[];
}
export interface DeleteUserForQuery {
  username: string;
}
export interface GetUserByNameForQuery {
  username: string;
}
export interface LoginUserForQuery {
  username: string;
  password: string;
}
export interface UpdateUserForQuery {
  username: string;
  user: User;
}

/**
 * This can only be done by the logged in user.
 * Create user
 */


export const createUserMutate = (
  body: CreateUserForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/user';
  return Axios<unknown>(
    {
      url,
      method: 'POST',
      data: {
        ...body.user
      }
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useCreateUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, CreateUserForQuery, unknown>((props) => {
    return  createUserMutate(props,requestOptions);
  }, mutationOptions);
};


/**
 * Creates list of users with given input array
 */


export const createUsersWithArrayInputMutate = (
  body: CreateUsersWithArrayInputForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/user/createWithArray';
  return Axios<unknown>(
    {
      url,
      method: 'POST',
      data: {
        ...body.user
      }
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useCreateUsersWithArrayInputMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, CreateUsersWithArrayInputForQuery, unknown>((props) => {
    return  createUsersWithArrayInputMutate(props,requestOptions);
  }, mutationOptions);
};


/**
 * Creates list of users with given input array
 */


export const createUsersWithListInputMutate = (
  body: CreateUsersWithListInputForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/user/createWithList';
  return Axios<unknown>(
    {
      url,
      method: 'POST',
      data: {
        ...body.user
      }
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useCreateUsersWithListInputMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, CreateUsersWithListInputForQuery, unknown>((props) => {
    return  createUsersWithListInputMutate(props,requestOptions);
  }, mutationOptions);
};


/**
 * This can only be done by the logged in user.
 * Delete user
 */


export const deleteUserMutate = (
  body: DeleteUserForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/user/{username}'.replace(`{${'username'}}`, encodeURIComponent(String(body.username)));
  delete body.username;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useDeleteUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteUserForQuery, unknown>((props) => {
    return  deleteUserMutate(props,requestOptions);
  }, mutationOptions);
};


/**
 * Get user by user name
 */

export const getUserByNameAxiosRequest = (
  requestParameters: GetUserByNameForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  return Axios<User>(
    {
      url: '/user/{username}'.replace(`{${'username'}}`, encodeURIComponent(String(requestParameters.username))),
      method: 'GET',
      requestParameters
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getUserByNameQueryKey = (
  requestParametersQuery: GetUserByNameForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/user/{username}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetUserByNameInfiniteQuery = <Error = ApiError>(
  params: GetUserByNameForQuery,
  pageParam = -1,
  version = 1,
  options?: {
    query?: UseInfiniteQueryOptions<User, Error>;
    request?: SecondParameter<typeof Axios>;
  },
) => {
  const queryKey = getUserByNameQueryKey(params, pageParam, version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useInfiniteQuery<User, Error>(
    queryKey,
    () => getUserByNameAxiosRequest(params, requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetUserByNameQuery = <Error = ApiError>(
  params: GetUserByNameForQuery,
  version = 1,
  options?: {
  query?: UseQueryOptions<User, Error>;
  request?: SecondParameter<typeof Axios>;
}) => {
  const queryKey = getUserByNameQueryKey(params,  version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useQuery<User, Error>(
    queryKey,
    () => getUserByNameAxiosRequest(params, requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Logs user into the system
 */

export const loginUserAxiosRequest = (
  requestParameters: LoginUserForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  return Axios<string>(
    {
      url: '/user/login',
      method: 'GET',
      requestParameters
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const loginUserQueryKey = (
  requestParametersQuery: LoginUserForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/user/login`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useLoginUserInfiniteQuery = <Error = ApiError>(
  params: LoginUserForQuery,
  pageParam = -1,
  version = 1,
  options?: {
    query?: UseInfiniteQueryOptions<string, Error>;
    request?: SecondParameter<typeof Axios>;
  },
) => {
  const queryKey = loginUserQueryKey(params, pageParam, version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useInfiniteQuery<string, Error>(
    queryKey,
    () => loginUserAxiosRequest(params, requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};

export const useLoginUserQuery = <Error = ApiError>(
  params: LoginUserForQuery,
  version = 1,
  options?: {
  query?: UseQueryOptions<string, Error>;
  request?: SecondParameter<typeof Axios>;
}) => {
  const queryKey = loginUserQueryKey(params,  version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useQuery<string, Error>(
    queryKey,
    () => loginUserAxiosRequest(params, requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Logs out current logged in user session
 */

export const logoutUserAxiosRequest = (
  options?: SecondParameter<typeof Axios>
) => {
  return Axios<unknown>(
    {
      url: '/user/logout',
      method: 'GET',
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const logoutUserQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/user/logout`,
  pageParam,
];


export const useLogoutUserInfiniteQuery = <Error = ApiError>(
  pageParam = -1,
  version = 1,
  options?: {
    query?: UseInfiniteQueryOptions<Data, Error>;
    request?: SecondParameter<typeof Axios>;
  },
) => {
  const queryKey = logoutUserQueryKey(pageParam, version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useInfiniteQuery<Data, Error>(
    queryKey,
    () => logoutUserAxiosRequest(requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};

export const useLogoutUserQuery = <Error = ApiError>(
  version = 1,
  options?: {
  query?: UseQueryOptions<void, Error>;
  request?: SecondParameter<typeof Axios>;
}) => {
  const queryKey = logoutUserQueryKey(version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useQuery<void, Error>(
    queryKey,
    () => logoutUserAxiosRequest(requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * This can only be done by the logged in user.
 * Updated user
 */


export const updateUserMutate = (
  body: UpdateUserForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/user/{username}'.replace(`{${'username'}}`, encodeURIComponent(String(body.username)));
  delete body.username;
  return Axios<unknown>(
    {
      url,
      method: 'PUT',
      data: {
        ...body.user
      }
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useUpdateUserMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, UpdateUserForQuery, unknown>((props) => {
    return  updateUserMutate(props,requestOptions);
  }, mutationOptions);
};





