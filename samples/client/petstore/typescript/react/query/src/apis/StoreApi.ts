// tslint:disable
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { useQuery, useInfiniteQuery, useMutation, UseQueryOptions, UseInfiniteQueryOptions, UseMutationOptions } from 'react-query';
import Axios from '../runtime';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import type {
  Order,
} from '../models';

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P extends unknown
  ? Record<string, any>
  : P
  : never;

export interface DeleteOrderForQuery {
  orderId: string;
}
export interface GetOrderByIdForQuery {
  orderId: number;
}
export interface PlaceOrderForQuery {
  order: Order;
}

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * Delete purchase order by ID
 */


export const deleteOrderMutate = (
  body: DeleteOrderForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/store/order/{orderId}'.replace(`{${'orderId'}}`, encodeURIComponent(String(body.orderId)));
  delete body.orderId;
  return Axios<unknown>(
    {
      url,
      method: 'DELETE',
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useDeleteOrderMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<unknown, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<unknown, Error, DeleteOrderForQuery, unknown>((props) => {
    return  deleteOrderMutate(props,requestOptions);
  }, mutationOptions);
};


/**
 * Returns a map of status codes to quantities
 * Returns pet inventories by status
 */

export const getInventoryAxiosRequest = (
  options?: SecondParameter<typeof Axios>
) => {
  return Axios<{ [key: string]: number; }>(
    {
      url: '/store/inventory',
      method: 'GET',
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getInventoryQueryKey = (
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/store/inventory`,
  pageParam,
];


export const useGetInventoryInfiniteQuery = <Error = ApiError>(
  pageParam = -1,
  version = 1,
  options?: {
    query?: UseInfiniteQueryOptions<{ [key: string]: number; }, Error>;
    request?: SecondParameter<typeof Axios>;
  },
) => {
  const queryKey = getInventoryQueryKey(pageParam, version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useInfiniteQuery<{ [key: string]: number; }, Error>(
    queryKey,
    () => getInventoryAxiosRequest(requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetInventoryQuery = <Error = ApiError>(
  version = 1,
  options?: {
  query?: UseQueryOptions<{ [key: string]: number; }, Error>;
  request?: SecondParameter<typeof Axios>;
}) => {
  const queryKey = getInventoryQueryKey(version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useQuery<{ [key: string]: number; }, Error>(
    queryKey,
    () => getInventoryAxiosRequest(requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
 * Find purchase order by ID
 */

export const getOrderByIdAxiosRequest = (
  requestParameters: GetOrderByIdForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  return Axios<Order>(
    {
      url: '/store/order/{orderId}'.replace(`{${'orderId'}}`, encodeURIComponent(String(requestParameters.orderId))),
      method: 'GET',
      requestParameters
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getOrderByIdQueryKey = (
  requestParametersQuery: GetOrderByIdForQuery,
  pageParam = -1,
  version = 1,
) => [
  `/v${version}/store/order/{orderId}`,
  pageParam,
  ...(requestParametersQuery ? [requestParametersQuery] : [])
];


export const useGetOrderByIdInfiniteQuery = <Error = ApiError>(
  params: GetOrderByIdForQuery,
  pageParam = -1,
  version = 1,
  options?: {
    query?: UseInfiniteQueryOptions<Order, Error>;
    request?: SecondParameter<typeof Axios>;
  },
) => {
  const queryKey = getOrderByIdQueryKey(params, pageParam, version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useInfiniteQuery<Order, Error>(
    queryKey,
    () => getOrderByIdAxiosRequest(params, requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};

export const useGetOrderByIdQuery = <Error = ApiError>(
  params: GetOrderByIdForQuery,
  version = 1,
  options?: {
  query?: UseQueryOptions<Order, Error>;
  request?: SecondParameter<typeof Axios>;
}) => {
  const queryKey = getOrderByIdQueryKey(params,  version);
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const query = useQuery<Order, Error>(
    queryKey,
    () => getOrderByIdAxiosRequest(params, requestOptions),
    { enabled: !!version, ...queryOptions }
  );

  return {
    queryKey,
    ...query
  };
};



/**
 * Place an order for a pet
 */


export const placeOrderMutate = (
  body: PlaceOrderForQuery,
  options?: SecondParameter<typeof Axios>
) => {
  const url = '/store/order';
  return Axios<Order>(
    {
      url,
      method: 'POST',
      data: {
        ...body.order
      }
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const usePlaceOrderMutation = <Error = ApiError>(
  options?: {
    mutation?:UseMutationOptions<Order, Error>,
    request?: SecondParameter<typeof Axios>
  }
) => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};
  // eslint-disable-next-line
  // @ts-ignore
  return useMutation<Order, Error, PlaceOrderForQuery, unknown>((props) => {
    return  placeOrderMutate(props,requestOptions);
  }, mutationOptions);
};





