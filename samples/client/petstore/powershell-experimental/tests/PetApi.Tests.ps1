#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSOpenAPITools' -name 'PetApi' {
    Context 'AddPet' {
        It 'Invoke-PetApiAddPet' {
            #$TestResult = Invoke-PetApiGetPetById -body "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0

            #$result = Invoke-PetApiGetPetById -petId 2
            #$result | Select-Object -Property "photoUrls" | ConvertTo-Json | Write-Host
            #Write-Host "result =" + $result.photoUrls

            $category = New-Category -Id 2 -Name 'bar'

            $pet = New-Pet -Id 1 -Name 'foo' -Category (
                    New-Category -Id 2 -Name 'bar'
                    ) -PhotoUrls @(
                        'http://example.com/foo',
                        'http://example.com/bar'
                        ) -Tags (
                            New-Tag -Id 3 -Name 'baz'
                            ) -Status Available

            #$pet = New-Pet -Id 1 -Name 'foo' `
            #        -Category ( New-Category -Id 2 -Name 'bar' ) `
            #        -PhotoUrls @('http://example.com/foo', 'http://example.com/bar') `
            #        -Tags (New-Tag -Id 3 -Name 'baz') -Status Available

            $result = Invoke-PetApiAddPet -Body $pet
        }
    }

    Context 'DeletePet' {
        It 'Invoke-PetApiDeletePet' {
            #$TestResult = Invoke-PetApiGetPetById -petId "TEST_VALUE" -apiKey "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

    Context 'FindPetsByStatus' {
        It 'Invoke-PetApiFindPetsByStatus' {
            #$TestResult = Invoke-PetApiGetPetById -status "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

    Context 'FindPetsByTags' {
        It 'Invoke-PetApiFindPetsByTags' {
            #$TestResult = Invoke-PetApiGetPetById -tags "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

    Context 'GetPetById' {
        It 'Invoke-PetApiGetPetById' {
            #$TestResult = Invoke-PetApiGetPetById -petId "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

    Context 'UpdatePet' {
        It 'Invoke-PetApiUpdatePet' {
            #$TestResult = Invoke-PetApiGetPetById -body "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

    Context 'UpdatePetWithForm' {
        It 'Invoke-PetApiUpdatePetWithForm' {
            #$TestResult = Invoke-PetApiGetPetById -petId "TEST_VALUE" -name "TEST_VALUE" -status "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

    Context 'UploadFile' {
        It 'Invoke-PetApiUploadFile' {
            #$TestResult = Invoke-PetApiGetPetById -petId "TEST_VALUE" -additionalMetadata "TEST_VALUE" -file "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
        }
    }

}
