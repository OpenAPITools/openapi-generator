#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSOpenAPITools' -name 'Integration Tests' {
    Context 'Pet' {
        It 'CRUD tests' {
            $Id = 38369

            # Add pet
            $Pet = New-PSPet -Id $Id -Name 'PowerShell' -Category (
                New-PSCategory -Id $Id -Name 'PSCategory'
            ) -PhotoUrls @(
                'http://example.com/foo',
                'http://example.com/bar'
            ) -Tags (
                New-PSTag -Id $Id -Name 'PSTag'
            ) -Status Available
            $Result = Add-PSPet -Pet $Pet
            
            # Get 
            $Result = Get-PSPetById -petId $Id
            $Result."id" | Should Be 38369
            $Result."name" | Should Be "PowerShell"
            $Result."status" | Should Be "Available"

            # Update (form)
            $Result = Update-PSPetWithForm -petId $Id -Name "PowerShell Update" -Status "Pending"

            $Result = Get-PSPetById -petId $Id
            $Result."id" | Should Be 38369
            $Result."name" | Should Be "PowerShell Update"
            $Result."status" | Should Be "Pending"

            # Update (put)
            $NewPet = New-PSPet -Id $Id -Name 'PowerShell2' -Category (
                New-PSCategory -Id $Id -Name 'PSCategory2'
            ) -PhotoUrls @(
                'http://example.com/foo2',
                'http://example.com/bar2'
            ) -Tags (
                New-PSTag -Id $Id -Name 'PSTag2'
            ) -Status Sold

            $Result = Update-PSPet -Pet $NewPet
            $Result = Get-PSPetById -petId $Id
            $Result."id" | Should Be 38369
            $Result."name" | Should Be "PowerShell2"
            $Result."status" | Should Be "Sold"

            # upload file
            $file = Get-Item "./plus.gif"
            #$Result = Invoke-PSUploadFile -petId $Id -additionalMetadata "Additional data" -File $file

            # Delete
            $Result = Remove-Pet -petId $Id

        }
    }
}
