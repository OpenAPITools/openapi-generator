# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from dateutil.parser import parse as dateutil_parser  # noqa: F401
import pprint
import re  # noqa: F401

import six


class TypeHolderDefault(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'string_item': 'str',
        'number_item': 'float',
        'integer_item': 'int',
        'bool_item': 'bool',
        'date_item': 'date',
        'datetime_item': 'datetime',
        'array_item': 'list[int]'
    }

    attribute_map = {
        'string_item': 'string_item',
        'number_item': 'number_item',
        'integer_item': 'integer_item',
        'bool_item': 'bool_item',
        'date_item': 'date_item',
        'datetime_item': 'datetime_item',
        'array_item': 'array_item'
    }

    def __init__(self, string_item=None, number_item=None, integer_item=None, bool_item=None, date_item=None, datetime_item=None, array_item=None):  # noqa: E501
        """TypeHolderDefault - a model defined in OpenAPI



        Keyword Args:
            string_item (str): [optional] if omitted the server will use the default value of 'what'  # noqa: E501
            number_item (float): [optional] if omitted the server will use the default value of 1.234  # noqa: E501
            integer_item (int): [optional] if omitted the server will use the default value of -2  # noqa: E501
            bool_item (bool): [optional] if omitted the server will use the default value of True  # noqa: E501
            date_item (date): [optional]  # noqa: E501
            datetime_item (datetime): [optional]  # noqa: E501
            array_item (list[int]): [optional]  # noqa: E501
        """

        self._string_item = None
        self._number_item = None
        self._integer_item = None
        self._bool_item = None
        self._date_item = None
        self._datetime_item = None
        self._array_item = None
        self.discriminator = None

        if string_item is not None:
            self.string_item = string_item
        if number_item is not None:
            self.number_item = number_item
        if integer_item is not None:
            self.integer_item = integer_item
        if bool_item is not None:
            self.bool_item = bool_item
        if date_item is not None:
            self.date_item = date_item
        if datetime_item is not None:
            self.datetime_item = datetime_item
        if array_item is not None:
            self.array_item = array_item

    @property
    def string_item(self):
        """Gets the string_item of this TypeHolderDefault.  # noqa: E501


        :return: The string_item of this TypeHolderDefault.  # noqa: E501
        :rtype: str
        """
        return self._string_item

    @string_item.setter
    def string_item(self, string_item):
        """Sets the string_item of this TypeHolderDefault.


        :param string_item: The string_item of this TypeHolderDefault.  # noqa: E501
        :type: str
        """

        self._string_item = string_item

    @property
    def number_item(self):
        """Gets the number_item of this TypeHolderDefault.  # noqa: E501


        :return: The number_item of this TypeHolderDefault.  # noqa: E501
        :rtype: float
        """
        return self._number_item

    @number_item.setter
    def number_item(self, number_item):
        """Sets the number_item of this TypeHolderDefault.


        :param number_item: The number_item of this TypeHolderDefault.  # noqa: E501
        :type: float
        """

        self._number_item = number_item

    @property
    def integer_item(self):
        """Gets the integer_item of this TypeHolderDefault.  # noqa: E501


        :return: The integer_item of this TypeHolderDefault.  # noqa: E501
        :rtype: int
        """
        return self._integer_item

    @integer_item.setter
    def integer_item(self, integer_item):
        """Sets the integer_item of this TypeHolderDefault.


        :param integer_item: The integer_item of this TypeHolderDefault.  # noqa: E501
        :type: int
        """

        self._integer_item = integer_item

    @property
    def bool_item(self):
        """Gets the bool_item of this TypeHolderDefault.  # noqa: E501


        :return: The bool_item of this TypeHolderDefault.  # noqa: E501
        :rtype: bool
        """
        return self._bool_item

    @bool_item.setter
    def bool_item(self, bool_item):
        """Sets the bool_item of this TypeHolderDefault.


        :param bool_item: The bool_item of this TypeHolderDefault.  # noqa: E501
        :type: bool
        """

        self._bool_item = bool_item

    @property
    def date_item(self):
        """Gets the date_item of this TypeHolderDefault.  # noqa: E501


        :return: The date_item of this TypeHolderDefault.  # noqa: E501
        :rtype: date
        """
        return self._date_item

    @date_item.setter
    def date_item(self, date_item):
        """Sets the date_item of this TypeHolderDefault.


        :param date_item: The date_item of this TypeHolderDefault.  # noqa: E501
        :type: date
        """

        self._date_item = date_item

    @property
    def datetime_item(self):
        """Gets the datetime_item of this TypeHolderDefault.  # noqa: E501


        :return: The datetime_item of this TypeHolderDefault.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime_item

    @datetime_item.setter
    def datetime_item(self, datetime_item):
        """Sets the datetime_item of this TypeHolderDefault.


        :param datetime_item: The datetime_item of this TypeHolderDefault.  # noqa: E501
        :type: datetime
        """

        self._datetime_item = datetime_item

    @property
    def array_item(self):
        """Gets the array_item of this TypeHolderDefault.  # noqa: E501


        :return: The array_item of this TypeHolderDefault.  # noqa: E501
        :rtype: list[int]
        """
        return self._array_item

    @array_item.setter
    def array_item(self, array_item):
        """Sets the array_item of this TypeHolderDefault.


        :param array_item: The array_item of this TypeHolderDefault.  # noqa: E501
        :type: list[int]
        """

        self._array_item = array_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypeHolderDefault):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
