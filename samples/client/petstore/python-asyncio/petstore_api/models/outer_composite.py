# coding: utf-8

"""
    Swagger Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OuterComposite(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'my_number': 'OuterNumber',
        'my_string': 'OuterString',
        'my_boolean': 'OuterBoolean'
    }

    attribute_map = {
        'my_number': 'my_number',
        'my_string': 'my_string',
        'my_boolean': 'my_boolean'
    }

    def __init__(self, my_number=None, my_string=None, my_boolean=None):
        """
        OuterComposite - a model defined in Swagger
        """

        self._my_number = None
        self._my_string = None
        self._my_boolean = None
        self.discriminator = None

        if my_number is not None:
          self.my_number = my_number
        if my_string is not None:
          self.my_string = my_string
        if my_boolean is not None:
          self.my_boolean = my_boolean

    @property
    def my_number(self):
        """
        Gets the my_number of this OuterComposite.

        :return: The my_number of this OuterComposite.
        :rtype: OuterNumber
        """
        return self._my_number

    @my_number.setter
    def my_number(self, my_number):
        """
        Sets the my_number of this OuterComposite.

        :param my_number: The my_number of this OuterComposite.
        :type: OuterNumber
        """

        self._my_number = my_number

    @property
    def my_string(self):
        """
        Gets the my_string of this OuterComposite.

        :return: The my_string of this OuterComposite.
        :rtype: OuterString
        """
        return self._my_string

    @my_string.setter
    def my_string(self, my_string):
        """
        Sets the my_string of this OuterComposite.

        :param my_string: The my_string of this OuterComposite.
        :type: OuterString
        """

        self._my_string = my_string

    @property
    def my_boolean(self):
        """
        Gets the my_boolean of this OuterComposite.

        :return: The my_boolean of this OuterComposite.
        :rtype: OuterBoolean
        """
        return self._my_boolean

    @my_boolean.setter
    def my_boolean(self, my_boolean):
        """
        Sets the my_boolean of this OuterComposite.

        :param my_boolean: The my_boolean of this OuterComposite.
        :type: OuterBoolean
        """

        self._my_boolean = my_boolean

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OuterComposite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
