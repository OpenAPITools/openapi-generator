# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.exceptions import (
    ApiKeyError,
    ApiTypeError,
    ApiValueError,
)
from petstore_api.model_utils import (  # noqa: F401
    OpenApiModel,
    date,
    datetime,
    file_type,
    get_simple_class,
    int,
    model_to_dict,
    none_type,
    str,
    type_error_message,
    validate_and_convert_types
)


class User(OpenApiModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional, required variables, and
                            additional properties.
    """
    openapi_types = {
        'id': [int],  # noqa: E501
        'username': [str],  # noqa: E501
        'first_name': [str],  # noqa: E501
        'last_name': [str],  # noqa: E501
        'email': [str],  # noqa: E501
        'password': [str],  # noqa: E501
        'phone': [str],  # noqa: E501
        'user_status': [int]  # noqa: E501
    }
    attribute_map = {
        'id': 'id',  # noqa: E501
        'username': 'username',  # noqa: E501
        'first_name': 'firstName',  # noqa: E501
        'last_name': 'lastName',  # noqa: E501
        'email': 'email',  # noqa: E501
        'password': 'password',  # noqa: E501
        'phone': 'phone',  # noqa: E501
        'user_status': 'userStatus'  # noqa: E501
    }

    def __init__(self, _check_type=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """User - a model defined in OpenAPI



        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            id (int): [optional]  # noqa: E501
            username (str): [optional]  # noqa: E501
            first_name (str): [optional]  # noqa: E501
            last_name (str): [optional]  # noqa: E501
            email (str): [optional]  # noqa: E501
            password (str): [optional]  # noqa: E501
            phone (str): [optional]  # noqa: E501
            user_status (int): User Status. [optional]  # noqa: E501
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_types_mixed = self.openapi_types[name]
        else:
            path_to_item = []
            if self._path_to_item:
                path_to_item.extend(self._path_to_item)
            path_to_item.append(name)
            raise ApiKeyError(
                "{0} has no key '{1}'".format(type(self).__name__, name),
                path_to_item
            )

        path_to_item = []
        if self._path_to_item:
            path_to_item.extend(self._path_to_item)
        path_to_item.append(name)

        if get_simple_class(name) != str:
            error_msg = type_error_message(
                var_name=name,
                var_value=name,
                valid_classes=(str,),
                key_type=True
            )
            raise ApiTypeError(
                error_msg,
                path_to_item=path_to_item,
                valid_classes=(str,),
                key_type=True
            )

        if check_type:
            self._data_store[name] = validate_and_convert_types(
                value, required_types_mixed, path_to_item,
                configuration=self._configuration)
        else:
            self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]

        path_to_item = []
        if self._path_to_item:
            path_to_item.extend(self._path_to_item)
        path_to_item.append(name)
        raise ApiKeyError(
            "{0} has no key '{1}'".format(type(self).__name__, name),
            [name]
        )

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        Returns:
            (int): The id of this User.  # noqa: E501
        """
        return self._data_store.get('id')

    @id.setter
    def id(
            self, id):
        """Sets the id of this User.


        Returns:
            (int): The id of this User.  # noqa: E501
        """

        self.__setitem__(
            'id',
            id
        )

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        Returns:
            (str): The username of this User.  # noqa: E501
        """
        return self._data_store.get('username')

    @username.setter
    def username(
            self, username):
        """Sets the username of this User.


        Returns:
            (str): The username of this User.  # noqa: E501
        """

        self.__setitem__(
            'username',
            username
        )

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        Returns:
            (str): The first_name of this User.  # noqa: E501
        """
        return self._data_store.get('first_name')

    @first_name.setter
    def first_name(
            self, first_name):
        """Sets the first_name of this User.


        Returns:
            (str): The first_name of this User.  # noqa: E501
        """

        self.__setitem__(
            'first_name',
            first_name
        )

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        Returns:
            (str): The last_name of this User.  # noqa: E501
        """
        return self._data_store.get('last_name')

    @last_name.setter
    def last_name(
            self, last_name):
        """Sets the last_name of this User.


        Returns:
            (str): The last_name of this User.  # noqa: E501
        """

        self.__setitem__(
            'last_name',
            last_name
        )

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        Returns:
            (str): The email of this User.  # noqa: E501
        """
        return self._data_store.get('email')

    @email.setter
    def email(
            self, email):
        """Sets the email of this User.


        Returns:
            (str): The email of this User.  # noqa: E501
        """

        self.__setitem__(
            'email',
            email
        )

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        Returns:
            (str): The password of this User.  # noqa: E501
        """
        return self._data_store.get('password')

    @password.setter
    def password(
            self, password):
        """Sets the password of this User.


        Returns:
            (str): The password of this User.  # noqa: E501
        """

        self.__setitem__(
            'password',
            password
        )

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501


        Returns:
            (str): The phone of this User.  # noqa: E501
        """
        return self._data_store.get('phone')

    @phone.setter
    def phone(
            self, phone):
        """Sets the phone of this User.


        Returns:
            (str): The phone of this User.  # noqa: E501
        """

        self.__setitem__(
            'phone',
            phone
        )

    @property
    def user_status(self):
        """Gets the user_status of this User.  # noqa: E501

        User Status  # noqa: E501

        Returns:
            (int): The user_status of this User.  # noqa: E501
        """
        return self._data_store.get('user_status')

    @user_status.setter
    def user_status(
            self, user_status):
        """Sets the user_status of this User.

        User Status  # noqa: E501

        Returns:
            (int): The user_status of this User.  # noqa: E501
        """

        self.__setitem__(
            'user_status',
            user_status
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
