#
# Copyright 2015 Reverb Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#

require 5.6.0;
use strict;
use warnings;

use WWW::Swagger::Model::Category;
use WWW::Swagger::Model::Pet;

package WWW::Swagger::StoreApiAPI;

our $VERSION = '2.09';


sub new {
    my $class   = shift;
    my $options = shift;

    croak("You must supply an API client")
      unless $options->{api_client};

    my $self = {
        api_client = $option->{api_client}
    } 

    bless $self, $class;

}

    
    #
    # getInventory
    #
    # Returns pet inventories by status
    # 
    # @return map[string,int]
    #
    sub getInventory {
        my $self = shift;
        my %args = @_;

        // parse inputs
        my $resource_path = "/store/inventory";
        $resource_path =~ s/{format}/json/;

        my $method = "GET";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

      
      
      
      
      

      # for HTTP post (form)
      $body = $body ?: $formParams;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      // make the API Call
      $response = $this->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      if(!$response) {
        return;
      }

  		$response_object = $this->api_client->deserialize($response, 'map[string,int]');
  		return $responseObject;
  }
  
    #
    # placeOrder
    #
    # Place an order for a pet
    # 
    # @param Order $body order placed for purchasing the pet (required)
    # @return Order
    #
    sub placeOrder {
        my $self = shift;
        my %args = @_;

        // parse inputs
        my $resource_path = "/store/order";
        $resource_path =~ s/{format}/json/;

        my $method = "POST";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

      
      
      
      
       # body params
      my $body;
      if (isset($body)) {
        $body = $body;
      }

      # for HTTP post (form)
      $body = $body ?: $formParams;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      // make the API Call
      $response = $this->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      if(!$response) {
        return;
      }

  		$response_object = $this->api_client->deserialize($response, 'Order');
  		return $responseObject;
  }
  
    #
    # getOrderById
    #
    # Find purchase order by ID
    # 
    # @param string $order_id ID of pet that needs to be fetched (required)
    # @return Order
    #
    sub getOrderById {
        my $self = shift;
        my %args = @_;

        // parse inputs
        my $resource_path = "/store/order/{orderId}";
        $resource_path =~ s/{format}/json/;

        my $method = "GET";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

      
      
       # path params
      if($order_id !== null) {
        my $base_variable = "{" + "orderId" + "}";
        my $base_value = $this->api_client->to_path_value($order_id);
        $resource_path = s/$base_variable/$base_value/;
      }
      
      

      # for HTTP post (form)
      $body = $body ?: $formParams;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      // make the API Call
      $response = $this->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      if(!$response) {
        return;
      }

  		$response_object = $this->api_client->deserialize($response, 'Order');
  		return $responseObject;
  }
  
    #
    # deleteOrder
    #
    # Delete purchase order by ID
    # 
    # @param string $order_id ID of the order that needs to be deleted (required)
    # @return void
    #
    sub deleteOrder {
        my $self = shift;
        my %args = @_;

        // parse inputs
        my $resource_path = "/store/order/{orderId}";
        $resource_path =~ s/{format}/json/;

        my $method = "DELETE";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

      
      
       # path params
      if($order_id !== null) {
        my $base_variable = "{" + "orderId" + "}";
        my $base_value = $this->api_client->to_path_value($order_id);
        $resource_path = s/$base_variable/$base_value/;
      }
      
      

      # for HTTP post (form)
      $body = $body ?: $formParams;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      // make the API Call
      $response = $this->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      
  }
  

}

1;
