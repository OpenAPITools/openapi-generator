#
# Copyright 2015 Reverb Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#

require 5.6.0;
use strict;
use warnings;

#use WWW::Swagger::Model::Category;
#use WWW::Swagger::Model::Pet;

package WWW::Swagger::PetApi;

our $VERSION = '2.09';


sub new {
    my $class   = shift;
    my $options = shift;

    croak("You must supply an API client")
      unless $options->{api_client};

    my $self = {
        api_client => $options->{api_client}
    }; 

    bless $self, $class;

}

    
    #
    # updatePet
    #
    # Update an existing pet
    # 
    # @param Pet $body Pet object that needs to be added to the store (required)
    # @return void
    #
    sub updatePet {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet";
        $resource_path =~ s/{format}/json/;

        my $method = "PUT";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = 'application/json,application/xml';

      
      
      
      
      my $body;
       # body params
      if (isset($body)) {
        $body = $body;
      }

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      
  }
  
    #
    # addPet
    #
    # Add a new pet to the store
    # 
    # @param Pet $body Pet object that needs to be added to the store (required)
    # @return void
    #
    sub addPet {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet";
        $resource_path =~ s/{format}/json/;

        my $method = "POST";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = 'application/json,application/xml';

      
      
      
      
      my $body;
       # body params
      if (isset($body)) {
        $body = $body;
      }

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      
  }
  
    #
    # findPetsByStatus
    #
    # Finds Pets by status
    # 
    # @param array[string] $status Status values that need to be considered for filter (required)
    # @return array[Pet]
    #
    sub findPetsByStatus {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet/findByStatus";
        $resource_path =~ s/{format}/json/;

        my $method = "GET";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

       # query params
      if($args{ status }) {
        $query_params->{'status'} = $self->api_client->to_query_value($args{ status });
      }
      
      
      
      my $body;
      

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      if(!$response) {
        return;
      }

  		my $response_object = $self->api_client->deserialize($response, 'array[Pet]');
  		return $response_object;
  }
  
    #
    # findPetsByTags
    #
    # Finds Pets by tags
    # 
    # @param array[string] $tags Tags to filter by (required)
    # @return array[Pet]
    #
    sub findPetsByTags {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet/findByTags";
        $resource_path =~ s/{format}/json/;

        my $method = "GET";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

       # query params
      if($args{ tags }) {
        $query_params->{'tags'} = $self->api_client->to_query_value($args{ tags });
      }
      
      
      
      my $body;
      

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      if(!$response) {
        return;
      }

  		my $response_object = $self->api_client->deserialize($response, 'array[Pet]');
  		return $response_object;
  }
  
    #
    # getPetById
    #
    # Find pet by ID
    # 
    # @param int $pet_id ID of pet that needs to be fetched (required)
    # @return Pet
    #
    sub getPetById {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet/{petId}";
        $resource_path =~ s/{format}/json/;

        my $method = "GET";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

      
      
       # path params
      if( $args{ pet_id }) {
        my $base_variable = "{" + "petId" + "}";
        my $base_value = $self->api_client->to_path_value($args{ pet_id });
        $resource_path = s/$base_variable/$base_value/;
      }
      
      my $body;
      

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      if(!$response) {
        return;
      }

  		my $response_object = $self->api_client->deserialize($response, 'Pet');
  		return $response_object;
  }
  
    #
    # updatePetWithForm
    #
    # Updates a pet in the store with form data
    # 
    # @param string $pet_id ID of pet that needs to be updated (required)
    # @param string $name Updated name of the pet (required)
    # @param string $status Updated status of the pet (required)
    # @return void
    #
    sub updatePetWithForm {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet/{petId}";
        $resource_path =~ s/{format}/json/;

        my $method = "POST";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = 'application/x-www-form-urlencoded';

      
      
       # path params
      if( $args{ pet_id }) {
        my $base_variable = "{" + "petId" + "}";
        my $base_value = $self->api_client->to_path_value($args{ pet_id });
        $resource_path = s/$base_variable/$base_value/;
      }
       # form params
      if ($args{ name }) {
        $form_params->{'name'} = $self->api_client->to_form_value($args{ name });
      } # form params
      if ($args{ status }) {
        $form_params->{'status'} = $self->api_client->to_form_value($args{ status });
      }
      my $body;
      

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      
  }
  
    #
    # deletePet
    #
    # Deletes a pet
    # 
    # @param string $api_key  (required)
    # @param int $pet_id Pet id to delete (required)
    # @return void
    #
    sub deletePet {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet/{petId}";
        $resource_path =~ s/{format}/json/;

        my $method = "DELETE";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = '';

      
       # header params
      if($args{ api_key }) {
        $header_params->{'api_key'} = $self->apiClient->to_header_value($args{ api_key });
      }
       # path params
      if( $args{ pet_id }) {
        my $base_variable = "{" + "petId" + "}";
        my $base_value = $self->api_client->to_path_value($args{ pet_id });
        $resource_path = s/$base_variable/$base_value/;
      }
      
      my $body;
      

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      
  }
  
    #
    # uploadFile
    #
    # uploads an image
    # 
    # @param int $pet_id ID of pet to update (required)
    # @param string $additional_metadata Additional data to pass to server (required)
    # @param file $file file to upload (required)
    # @return void
    #
    sub uploadFile {
        my $self = shift;
        my %args = @_;

        # parse inputs
        my $resource_path = "/pet/{petId}/uploadImage";
        $resource_path =~ s/{format}/json/;

        my $method = "POST";
        my $query_params = {};
        my $header_params = {};
        my $form_params = {};
      
        $header_params->{'Accept'} = 'application/json,application/xml';
        $header_params->{'Content-Type'} = 'multipart/form-data';

      
      
       # path params
      if( $args{ pet_id }) {
        my $base_variable = "{" + "petId" + "}";
        my $base_value = $self->api_client->to_path_value($args{ pet_id });
        $resource_path = s/$base_variable/$base_value/;
      }
       # form params
      if ($args{ additional_metadata }) {
        $form_params->{'additionalMetadata'} = $self->api_client->to_form_value($args{ additional_metadata });
      } # form params
      if ($args{ file }) {
        $form_params->{'file'} = '@' . $self->api_client->to_form_value($args{ file });
      }
      my $body;
      

      # for HTTP post (form)
      $body = $body ? undef : $form_params;

      if ($header_params->{'Content-Type'} eq "application/x-www-form-urlencoded") {
        $body = http_build_query($body);
      }

      # make the API Call
      my $response = $self->api_client->call_api($resource_path, $method,
                                             $query_params, $body,
                                             $header_params);

      
  }
  


1;
