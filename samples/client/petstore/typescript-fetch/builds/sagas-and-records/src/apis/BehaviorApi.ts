/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetBehaviorPermissionsResponse,
  GetBehaviorTypeResponse,
} from '../models/index';
import {
    GetBehaviorPermissionsResponseFromJSON,
    GetBehaviorPermissionsResponseToJSON,
    GetBehaviorTypeResponseFromJSON,
    GetBehaviorTypeResponseToJSON,
} from '../models/index';

export interface GetBehaviorPermissionsRequest {
    behaviorId: number;
}

export interface GetBehaviorTypeRequest {
    behaviorId: number;
}

/**
 * 
 */
export class BehaviorApi extends runtime.BaseAPI {

    /**
     * Creates request options for getBehaviorPermissions without sending the request
     */
    async getBehaviorPermissionsRequestOpts(requestParameters: GetBehaviorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.RequestOpts> {
        if (requestParameters['behaviorId'] == null) {
            throw new runtime.RequiredError(
                'behaviorId',
                'Required parameter "behaviorId" was null or undefined when calling getBehaviorPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fake_behavior/{behavior-id}/permissions`;
        urlPath = urlPath.replace(`{${"behavior-id"}}`, encodeURIComponent(String(requestParameters['behaviorId'])));

        return {
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     * Get permissions for the behavior
     */
    async getBehaviorPermissionsRaw(requestParameters: GetBehaviorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBehaviorPermissionsResponse>> {
        const requestConfig = await this.getBehaviorPermissionsRequestConfig(requestParameters, initOverrides);
        const response = await this.request(requestConfig, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBehaviorPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get permissions for the behavior
     */
    async getBehaviorPermissions(behaviorId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBehaviorPermissionsResponse> {
        const response = await this.getBehaviorPermissionsRaw({ behaviorId: behaviorId }, initOverrides);
        return await response.value();
    }

    /**
     * Creates request options for getBehaviorType without sending the request
     */
    async getBehaviorTypeRequestOpts(requestParameters: GetBehaviorTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.RequestOpts> {
        if (requestParameters['behaviorId'] == null) {
            throw new runtime.RequiredError(
                'behaviorId',
                'Required parameter "behaviorId" was null or undefined when calling getBehaviorType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fake_behavior/{behavior-id}/type`;
        urlPath = urlPath.replace(`{${"behavior-id"}}`, encodeURIComponent(String(requestParameters['behaviorId'])));

        return {
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     * Get the type of behavior
     */
    async getBehaviorTypeRaw(requestParameters: GetBehaviorTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBehaviorTypeResponse>> {
        const requestConfig = await this.getBehaviorTypeRequestConfig(requestParameters, initOverrides);
        const response = await this.request(requestConfig, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBehaviorTypeResponseFromJSON(jsonValue));
    }

    /**
     * Get the type of behavior
     */
    async getBehaviorType(behaviorId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBehaviorTypeResponse> {
        const response = await this.getBehaviorTypeRaw({ behaviorId: behaviorId }, initOverrides);
        return await response.value();
    }

}
