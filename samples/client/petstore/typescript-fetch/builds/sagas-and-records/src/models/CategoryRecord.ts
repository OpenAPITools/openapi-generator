/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {ApiRecordUtils, knownRecordFactories} from "../runtimeSagasAndRecords";
import {getApiEntitiesState} from "../ApiEntitiesSelectors"
import {List, Record, RecordOf, Map} from 'immutable';
import {Schema, schema, NormalizedSchema} from "normalizr";
import {select, call} from "redux-saga/effects";

import {
    Category,
} from './Category';



export const CategoryRecordProps = {
    recType: "CategoryApiRecord" as "CategoryApiRecord",
    id: null as string | null,
    name: null as string | null,
};

export type CategoryRecordPropsType = typeof CategoryRecordProps;
export const CategoryRecord = Record(CategoryRecordProps, CategoryRecordProps.recType);
export type CategoryRecord = RecordOf<CategoryRecordPropsType>;

knownRecordFactories.set(CategoryRecordProps.recType, CategoryRecord);

export const CategoryRecordEntityProps = {
    ...CategoryRecordProps,
    recType: "CategoryApiRecordEntity" as "CategoryApiRecordEntity",
};

export type CategoryRecordEntityPropsType = typeof CategoryRecordEntityProps;
export const CategoryRecordEntity = Record(CategoryRecordEntityProps, CategoryRecordEntityProps.recType);
export type CategoryRecordEntity = RecordOf<CategoryRecordEntityPropsType>;

knownRecordFactories.set(CategoryRecordEntityProps.recType, CategoryRecordEntity);

class CategoryRecordUtils extends ApiRecordUtils<Category, CategoryRecord> {
    public normalize(apiObject: Category, asEntity?: boolean): Category {
        (apiObject as any).recType = asEntity ? CategoryRecordEntityProps.recType : CategoryRecordProps.recType;
        if (apiObject.id) { (apiObject as any).id = apiObject.id.toString(); } 
        return apiObject;
    }

    public getSchema(): Schema {
        return new schema.Entity("category", {
        });
    }

    public *toInlined(entityId?: string | null) {
        if (!entityId) {return undefined; }
        const entity = yield select(apiEntityCategorySelector, {id: entityId});
        if (!entity) {return undefined; }

        const {
            recType,
		    ...unchangedProperties
		} = entity;

        const entityProperties = {
        }

        return CategoryRecord({
            ...unchangedProperties,
            ...entityProperties
        });
    }

    public *toInlinedArray(entityIds: List<string> | null) {
        if (!entityIds) {return null; }
        let entities = List<CategoryRecord>();
        for (let entityIndex = 0; entityIndex < entityIds.count(); entityIndex++) {
            const entity = yield call(this.toInlined, entityIds.get(entityIndex));
            if (entity) {
                entities.push(entity);
            }
        }
        return entities;
    }

    public toApi(record: CategoryRecord): Category {
        const apiObject = super.toApi(record);
        if (record.id) { apiObject.id = parseFloat(record.id); } 
        return apiObject;
    }
}

export const categoryRecordUtils = new CategoryRecordUtils();

export const apiEntitiesCategorySelector = (state: any) => getApiEntitiesState(state).category as Map<string, CategoryRecordEntity>;
export const apiEntityCategorySelector = (state: any, {id}: {id?: string | null}) => id ? apiEntitiesCategorySelector(state).get(id) : undefined;

