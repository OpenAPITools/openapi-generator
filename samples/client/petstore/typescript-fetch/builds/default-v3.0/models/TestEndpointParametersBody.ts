/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TestEndpointParametersBody
 */
export interface TestEndpointParametersBody {
    /**
     * None
     * @type {number}
     * @memberof TestEndpointParametersBody
     */
    integer?: number;
    /**
     * None
     * @type {number}
     * @memberof TestEndpointParametersBody
     */
    int32?: number;
    /**
     * None
     * @type {number}
     * @memberof TestEndpointParametersBody
     */
    int64?: number;
    /**
     * None
     * @type {number}
     * @memberof TestEndpointParametersBody
     */
    number: number;
    /**
     * None
     * @type {number}
     * @memberof TestEndpointParametersBody
     */
    _float?: number;
    /**
     * None
     * @type {number}
     * @memberof TestEndpointParametersBody
     */
    _double: number;
    /**
     * None
     * @type {string}
     * @memberof TestEndpointParametersBody
     */
    string?: string;
    /**
     * None
     * @type {string}
     * @memberof TestEndpointParametersBody
     */
    patternWithoutDelimiter: string;
    /**
     * None
     * @type {string}
     * @memberof TestEndpointParametersBody
     */
    _byte: string;
    /**
     * None
     * @type {Blob}
     * @memberof TestEndpointParametersBody
     */
    binary?: Blob;
    /**
     * None
     * @type {Date}
     * @memberof TestEndpointParametersBody
     */
    date?: Date;
    /**
     * None
     * @type {Date}
     * @memberof TestEndpointParametersBody
     */
    dateTime?: Date;
    /**
     * None
     * @type {string}
     * @memberof TestEndpointParametersBody
     */
    password?: string;
    /**
     * None
     * @type {string}
     * @memberof TestEndpointParametersBody
     */
    callback?: string;
}

export function TestEndpointParametersBodyFromJSON(json: any): TestEndpointParametersBody {
    return TestEndpointParametersBodyFromJSONTyped(json, false);
}

export function TestEndpointParametersBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestEndpointParametersBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'integer': !exists(json, 'integer') ? undefined : json['integer'],
        'int32': !exists(json, 'int32') ? undefined : json['int32'],
        'int64': !exists(json, 'int64') ? undefined : json['int64'],
        'number': json['number'],
        '_float': !exists(json, 'float') ? undefined : json['float'],
        '_double': json['double'],
        'string': !exists(json, 'string') ? undefined : json['string'],
        'patternWithoutDelimiter': json['pattern_without_delimiter'],
        '_byte': json['byte'],
        'binary': !exists(json, 'binary') ? undefined : json['binary'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'dateTime': !exists(json, 'dateTime') ? undefined : (new Date(json['dateTime'])),
        'password': !exists(json, 'password') ? undefined : json['password'],
        'callback': !exists(json, 'callback') ? undefined : json['callback'],
    };
}

export function TestEndpointParametersBodyToJSON(value?: TestEndpointParametersBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'integer': value.integer,
        'int32': value.int32,
        'int64': value.int64,
        'number': value.number,
        'float': value._float,
        'double': value._double,
        'string': value.string,
        'pattern_without_delimiter': value.patternWithoutDelimiter,
        'byte': value._byte,
        'binary': value.binary,
        'date': value.date === undefined ? undefined : (value.date.toISOString().substr(0,10)),
        'dateTime': value.dateTime === undefined ? undefined : (value.dateTime.toISOString()),
        'password': value.password,
        'callback': value.callback,
    };
}


