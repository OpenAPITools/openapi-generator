/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Client,
} from '../models/index';
import {
    ClientFromJSON,
    ClientToJSON,
} from '../models/index';

export interface 123testSpecialTagsRequest {
    client: Client;
}

/**
 * 
 */
export class AnotherFakeApi extends runtime.BaseAPI {

    /**
     * Creates request options for _123testSpecialTags without sending the request
     */
    async _123testSpecialTagsRequestOpts(requestParameters: 123testSpecialTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.RequestOpts> {
        if (requestParameters['client'] == null) {
            throw new runtime.RequiredError(
                'client',
                'Required parameter "client" was null or undefined when calling _123testSpecialTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/another-fake/dummy`;

        return {
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ClientToJSON(requestParameters['client']),
        };
    }

    /**
     * To test special tags and operation ID starting with number
     * To test special tags
     */
    async _123testSpecialTagsRaw(requestParameters: 123testSpecialTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Client>> {
        const requestConfig = await this._123testSpecialTagsRequestConfig(requestParameters, initOverrides);
        const response = await this.request(requestConfig, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFromJSON(jsonValue));
    }

    /**
     * To test special tags and operation ID starting with number
     * To test special tags
     */
    async _123testSpecialTags(requestParameters: 123testSpecialTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Client> {
        const response = await this._123testSpecialTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
