/* tslint:disable */
/* eslint-disable */
/**
 * testing oneOf without discriminator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TestA } from './TestA';
import {
    instanceOfTestA,
    TestAFromJSON,
    TestAFromJSONTyped,
    TestAToJSON,
} from './TestA';
import type { TestB } from './TestB';
import {
    instanceOfTestB,
    TestBFromJSON,
    TestBFromJSONTyped,
    TestBToJSON,
} from './TestB';

/**
 * @type TestArrayResponse
 * 
 * @export
 */
export type TestArrayResponse = Array<TestA> | Array<TestB> | Array<string>;

export function TestArrayResponseFromJSON(json: any): TestArrayResponse {
    return TestArrayResponseFromJSONTyped(json, false);
}

export function TestArrayResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestArrayResponse {
    if (json == null) {
        return json;
    }
    if (Array.isArray(json)) {
        if (json.every(item => typeof item === 'object')) {
            if (json.every(item => instanceOfTestA(item))) {
                return json.map(value => TestAFromJSONTyped(value, true));
            }
            if (json.every(item => instanceOfTestB(item))) {
                return json.map(value => TestBFromJSONTyped(value, true));
            }
        }
        return json;
    }

    return {} as any;
}

export function TestArrayResponseToJSON(json: any): any {
    return TestArrayResponseToJSONTyped(json, false);
}

export function TestArrayResponseToJSONTyped(value?: TestArrayResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (Array.isArray(value)) {
        if (value.every(item => typeof item === 'object')) {
            if (value.every(item => instanceOfTestA(item))) {
                return value.map(value => TestAToJSON(value as TestA));
            }
            if (value.every(item => instanceOfTestB(item))) {
                return value.map(value => TestBToJSON(value as TestB));
            }
        }
        return value;
    }

    return {};
}

