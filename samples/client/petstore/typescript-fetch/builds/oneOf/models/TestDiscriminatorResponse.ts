/* tslint:disable */
/* eslint-disable */
/**
 * testing oneOf without discriminator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { OptionOne } from './OptionOne';
import {
    instanceOfOptionOne,
    OptionOneFromJSON,
    OptionOneFromJSONTyped,
    OptionOneToJSON,
} from './OptionOne';
import type { OptionTwo } from './OptionTwo';
import {
    instanceOfOptionTwo,
    OptionTwoFromJSON,
    OptionTwoFromJSONTyped,
    OptionTwoToJSON,
} from './OptionTwo';

/**
 * @type TestDiscriminatorResponse
 * 
 * @export
 */
export type TestDiscriminatorResponse = { discriminatorField: 'optionOne' } & OptionOne | { discriminatorField: 'optionTwo' } & OptionTwo;

export function TestDiscriminatorResponseFromJSON(json: any): TestDiscriminatorResponse {
    return TestDiscriminatorResponseFromJSONTyped(json, false);
}

export function TestDiscriminatorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestDiscriminatorResponse {
    if (json == null) {
        return json;
    }
    switch (json['discriminatorField']) {
        case 'optionOne':
            return Object.assign({}, OptionOneFromJSONTyped(json, true), { discriminatorField: 'optionOne' } as const);
        case 'optionTwo':
            return Object.assign({}, OptionTwoFromJSONTyped(json, true), { discriminatorField: 'optionTwo' } as const);
        default:
            return json;
    }
}

export function TestDiscriminatorResponseToJSON(json: any): any {
    return TestDiscriminatorResponseToJSONTyped(json, false);
}

export function TestDiscriminatorResponseToJSONTyped(value?: TestDiscriminatorResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['discriminatorField']) {
        case 'optionOne':
            return Object.assign({}, OptionOneToJSON(value), { discriminatorField: 'optionOne' } as const);
        case 'optionTwo':
            return Object.assign({}, OptionTwoToJSON(value), { discriminatorField: 'optionTwo' } as const);
        default:
            return json;
    }
}

