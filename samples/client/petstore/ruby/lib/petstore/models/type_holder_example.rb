=begin
#OpenAPI Petstore

#This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-SNAPSHOT

=end

require 'date'

module Petstore
  # a model to test required properties with an example and length one enum
  class TypeHolderExample
    attr_accessor :string_item

    attr_accessor :number_item

    attr_accessor :integer_item

    attr_accessor :bool_item

    attr_accessor :date_item

    attr_accessor :datetime_item

    attr_accessor :array_item

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'string_item' => :'string_item',
        :'number_item' => :'number_item',
        :'integer_item' => :'integer_item',
        :'bool_item' => :'bool_item',
        :'date_item' => :'date_item',
        :'datetime_item' => :'datetime_item',
        :'array_item' => :'array_item'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'string_item' => :'String',
        :'number_item' => :'Float',
        :'integer_item' => :'Integer',
        :'bool_item' => :'BOOLEAN',
        :'date_item' => :'Date',
        :'datetime_item' => :'DateTime',
        :'array_item' => :'Array<Integer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Petstore::TypeHolderExample` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Petstore::TypeHolderExample`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'string_item')
        self.string_item = attributes[:'string_item']
      end

      if attributes.key?(:'number_item')
        self.number_item = attributes[:'number_item']
      end

      if attributes.key?(:'integer_item')
        self.integer_item = attributes[:'integer_item']
      end

      if attributes.key?(:'bool_item')
        self.bool_item = attributes[:'bool_item']
      end

      if attributes.key?(:'date_item')
        self.date_item = attributes[:'date_item']
      end

      if attributes.key?(:'datetime_item')
        self.datetime_item = attributes[:'datetime_item']
      end

      if attributes.key?(:'array_item')
        if (value = attributes[:'array_item']).is_a?(Array)
          self.array_item = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @string_item.nil?
        invalid_properties.push('invalid value for "string_item", string_item cannot be nil.')
      end

      if @number_item.nil?
        invalid_properties.push('invalid value for "number_item", number_item cannot be nil.')
      end

      if @integer_item.nil?
        invalid_properties.push('invalid value for "integer_item", integer_item cannot be nil.')
      end

      if @bool_item.nil?
        invalid_properties.push('invalid value for "bool_item", bool_item cannot be nil.')
      end

      if @date_item.nil?
        invalid_properties.push('invalid value for "date_item", date_item cannot be nil.')
      end

      if @datetime_item.nil?
        invalid_properties.push('invalid value for "datetime_item", datetime_item cannot be nil.')
      end

      if @array_item.nil?
        invalid_properties.push('invalid value for "array_item", array_item cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @string_item.nil?
      string_item_validator = EnumAttributeValidator.new('String', ["what"])
      return false unless string_item_validator.valid?(@string_item)
      return false if @number_item.nil?
      number_item_validator = EnumAttributeValidator.new('Float', [1.2339999675750732])
      return false unless number_item_validator.valid?(@number_item)
      return false if @integer_item.nil?
      integer_item_validator = EnumAttributeValidator.new('Integer', [-2])
      return false unless integer_item_validator.valid?(@integer_item)
      return false if @bool_item.nil?
      return false if @date_item.nil?
      date_item_validator = EnumAttributeValidator.new('Date', ["Thu Jul 20 17:00:00 PDT 2017"])
      return false unless date_item_validator.valid?(@date_item)
      return false if @datetime_item.nil?
      datetime_item_validator = EnumAttributeValidator.new('DateTime', ["Fri Jul 21 10:32:28 PDT 2017"])
      return false unless datetime_item_validator.valid?(@datetime_item)
      return false if @array_item.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] string_item Object to be assigned
    def string_item=(string_item)
      validator = EnumAttributeValidator.new('String', ["what"])
      unless validator.valid?(string_item)
        fail ArgumentError, "invalid value for \"string_item\", must be one of #{validator.allowable_values}."
      end
      @string_item = string_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number_item Object to be assigned
    def number_item=(number_item)
      validator = EnumAttributeValidator.new('Float', [1.2339999675750732])
      unless validator.valid?(number_item)
        fail ArgumentError, "invalid value for \"number_item\", must be one of #{validator.allowable_values}."
      end
      @number_item = number_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] integer_item Object to be assigned
    def integer_item=(integer_item)
      validator = EnumAttributeValidator.new('Integer', [-2])
      unless validator.valid?(integer_item)
        fail ArgumentError, "invalid value for \"integer_item\", must be one of #{validator.allowable_values}."
      end
      @integer_item = integer_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_item Object to be assigned
    def date_item=(date_item)
      validator = EnumAttributeValidator.new('Date', ["Thu Jul 20 17:00:00 PDT 2017"])
      unless validator.valid?(date_item)
        fail ArgumentError, "invalid value for \"date_item\", must be one of #{validator.allowable_values}."
      end
      @date_item = date_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] datetime_item Object to be assigned
    def datetime_item=(datetime_item)
      validator = EnumAttributeValidator.new('DateTime', ["Fri Jul 21 10:32:28 PDT 2017"])
      unless validator.valid?(datetime_item)
        fail ArgumentError, "invalid value for \"datetime_item\", must be one of #{validator.allowable_values}."
      end
      @datetime_item = datetime_item
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          string_item == o.string_item &&
          number_item == o.number_item &&
          integer_item == o.integer_item &&
          bool_item == o.bool_item &&
          date_item == o.date_item &&
          datetime_item == o.datetime_item &&
          array_item == o.array_item
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [string_item, number_item, integer_item, bool_item, date_item, datetime_item, array_item].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Petstore.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
