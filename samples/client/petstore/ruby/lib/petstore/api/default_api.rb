=begin
#Swagger Petstore

#This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

OpenAPI spec version: 1.0.0
Contact: apiteam@swagger.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module Petstore
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get some XML
    # 
    # @param [Hash] opts the optional parameters
    # @return [XmlObject]
    def get_xml_features(opts = {})
      data, _status_code, _headers = get_xml_features_with_http_info(opts)
      return data
    end

    # Get some XML
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(XmlObject, Fixnum, Hash)>] XmlObject data, response status code and response headers
    def get_xml_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_xml_features ..."
      end
      # resource path
      local_var_path = "/fake/xmlFeatures"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XmlObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_xml_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post some xml
    # 
    # @param xml_object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_xml_features(xml_object, opts = {})
      post_xml_features_with_http_info(xml_object, opts)
      return nil
    end

    # Post some xml
    # 
    # @param xml_object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_xml_features_with_http_info(xml_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.post_xml_features ..."
      end
      # verify the required parameter 'xml_object' is set
      if @api_client.config.client_side_validation && xml_object.nil?
        fail ArgumentError, "Missing the required parameter 'xml_object' when calling DefaultApi.post_xml_features"
      end
      # resource path
      local_var_path = "/fake/xmlFeatures"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(xml_object)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_xml_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
