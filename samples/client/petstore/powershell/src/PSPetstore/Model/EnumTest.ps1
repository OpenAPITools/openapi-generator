#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EnumString
No description available.
.PARAMETER EnumStringRequired
No description available.
.PARAMETER EnumInteger
No description available.
.PARAMETER EnumIntegerOnly
No description available.
.PARAMETER EnumNumber
No description available.
.PARAMETER OuterEnum
No description available.
.OUTPUTS

EnumTest<PSCustomObject>
#>

function Initialize-PSEnumTest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("UPPER", "lower", "")]
        [String]
        ${EnumString},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("UPPER", "lower", "")]
        [String]
        ${EnumStringRequired},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "-1")]
        [System.Nullable[Int32]]
        ${EnumInteger},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("2", "-2")]
        [System.Nullable[Int32]]
        ${EnumIntegerOnly},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1.1", "-1.2")]
        [System.Nullable[Double]]
        ${EnumNumber},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("placed", "approved", "delivered")]
        [PSCustomObject]
        ${OuterEnum}
    )

    Process {
        'Creating PSCustomObject: PSPetstore => PSEnumTest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $EnumStringRequired) {
            throw "invalid value for 'EnumStringRequired', 'EnumStringRequired' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "enum_string" = ${EnumString}
            "enum_string_required" = ${EnumStringRequired}
            "enum_integer" = ${EnumInteger}
            "enum_integer_only" = ${EnumIntegerOnly}
            "enum_number" = ${EnumNumber}
            "outerEnum" = ${OuterEnum}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EnumTest<PSCustomObject>

.DESCRIPTION

Convert from JSON to EnumTest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EnumTest<PSCustomObject>
#>
function ConvertFrom-PSJsonToEnumTest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSPetstore => PSEnumTest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSEnumTest
        $AllProperties = ("enum_string", "enum_string_required", "enum_integer", "enum_integer_only", "enum_number", "outerEnum")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'enum_string_required' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enum_string_required"))) {
            throw "Error! JSON cannot be serialized due to the required property 'enum_string_required' missing."
        } else {
            $EnumStringRequired = $JsonParameters.PSobject.Properties["enum_string_required"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enum_string"))) { #optional property not found
            $EnumString = $null
        } else {
            $EnumString = $JsonParameters.PSobject.Properties["enum_string"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enum_integer"))) { #optional property not found
            $EnumInteger = $null
        } else {
            $EnumInteger = $JsonParameters.PSobject.Properties["enum_integer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enum_integer_only"))) { #optional property not found
            $EnumIntegerOnly = $null
        } else {
            $EnumIntegerOnly = $JsonParameters.PSobject.Properties["enum_integer_only"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enum_number"))) { #optional property not found
            $EnumNumber = $null
        } else {
            $EnumNumber = $JsonParameters.PSobject.Properties["enum_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outerEnum"))) { #optional property not found
            $OuterEnum = $null
        } else {
            $OuterEnum = $JsonParameters.PSobject.Properties["outerEnum"].value
        }

        $PSO = [PSCustomObject]@{
            "enum_string" = ${EnumString}
            "enum_string_required" = ${EnumStringRequired}
            "enum_integer" = ${EnumInteger}
            "enum_integer_only" = ${EnumIntegerOnly}
            "enum_number" = ${EnumNumber}
            "outerEnum" = ${OuterEnum}
        }

        return $PSO
    }

}

