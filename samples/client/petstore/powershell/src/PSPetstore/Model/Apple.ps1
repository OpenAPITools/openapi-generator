#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Cultivar
No description available.
.PARAMETER Origin
No description available.
.OUTPUTS

Apple<PSCustomObject>
#>

function Initialize-PSApple {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z\s]*$")]
        [String]
        ${Cultivar},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("/^[A-Z\s]*$/i")]
        [String]
        ${Origin}
    )

    Process {
        'Creating PSCustomObject: PSPetstore => PSApple' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cultivar" = ${Cultivar}
            "origin" = ${Origin}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Apple<PSCustomObject>

.DESCRIPTION

Convert from JSON to Apple<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Apple<PSCustomObject>
#>
function ConvertFrom-PSJsonToApple {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSPetstore => PSApple' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSApple
        $AllProperties = ("cultivar", "origin")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cultivar"))) { #optional property not found
            $Cultivar = $null
        } else {
            $Cultivar = $JsonParameters.PSobject.Properties["cultivar"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "origin"))) { #optional property not found
            $Origin = $null
        } else {
            $Origin = $JsonParameters.PSobject.Properties["origin"].value
        }

        $PSO = [PSCustomObject]@{
            "cultivar" = ${Cultivar}
            "origin" = ${Origin}
        }

        return $PSO
    }

}

