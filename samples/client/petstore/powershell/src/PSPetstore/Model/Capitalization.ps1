#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SmallCamel
No description available.
.PARAMETER CapitalCamel
No description available.
.PARAMETER SmallSnake
No description available.
.PARAMETER CapitalSnake
No description available.
.PARAMETER SCAETHFlowPoints
No description available.
.PARAMETER ATTNAME
Name of the pet 
.OUTPUTS

Capitalization<PSCustomObject>
#>

function Initialize-PSCapitalization {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmallCamel},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CapitalCamel},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmallSnake},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CapitalSnake},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SCAETHFlowPoints},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ATTNAME}
    )

    Process {
        'Creating PSCustomObject: PSPetstore => PSCapitalization' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "smallCamel" = ${SmallCamel}
            "CapitalCamel" = ${CapitalCamel}
            "small_Snake" = ${SmallSnake}
            "Capital_Snake" = ${CapitalSnake}
            "SCA_ETH_Flow_Points" = ${SCAETHFlowPoints}
            "ATT_NAME" = ${ATTNAME}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Capitalization<PSCustomObject>

.DESCRIPTION

Convert from JSON to Capitalization<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Capitalization<PSCustomObject>
#>
function ConvertFrom-PSJsonToCapitalization {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSPetstore => PSCapitalization' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSCapitalization
        $AllProperties = ("smallCamel", "CapitalCamel", "small_Snake", "Capital_Snake", "SCA_ETH_Flow_Points", "ATT_NAME")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smallCamel"))) { #optional property not found
            $SmallCamel = $null
        } else {
            $SmallCamel = $JsonParameters.PSobject.Properties["smallCamel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CapitalCamel"))) { #optional property not found
            $CapitalCamel = $null
        } else {
            $CapitalCamel = $JsonParameters.PSobject.Properties["CapitalCamel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "small_Snake"))) { #optional property not found
            $SmallSnake = $null
        } else {
            $SmallSnake = $JsonParameters.PSobject.Properties["small_Snake"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Capital_Snake"))) { #optional property not found
            $CapitalSnake = $null
        } else {
            $CapitalSnake = $JsonParameters.PSobject.Properties["Capital_Snake"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SCA_ETH_Flow_Points"))) { #optional property not found
            $SCAETHFlowPoints = $null
        } else {
            $SCAETHFlowPoints = $JsonParameters.PSobject.Properties["SCA_ETH_Flow_Points"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ATT_NAME"))) { #optional property not found
            $ATTNAME = $null
        } else {
            $ATTNAME = $JsonParameters.PSobject.Properties["ATT_NAME"].value
        }

        $PSO = [PSCustomObject]@{
            "smallCamel" = ${SmallCamel}
            "CapitalCamel" = ${CapitalCamel}
            "small_Snake" = ${SmallSnake}
            "Capital_Snake" = ${CapitalSnake}
            "SCA_ETH_Flow_Points" = ${SCAETHFlowPoints}
            "ATT_NAME" = ${ATTNAME}
        }

        return $PSO
    }

}

