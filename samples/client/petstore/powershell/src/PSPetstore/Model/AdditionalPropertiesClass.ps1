#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MapProperty
No description available.
.PARAMETER MapOfMapProperty
No description available.
.PARAMETER Anytype1
No description available.
.PARAMETER MapWithUndeclaredPropertiesAnytype1
No description available.
.PARAMETER MapWithUndeclaredPropertiesAnytype2
No description available.
.PARAMETER MapWithUndeclaredPropertiesAnytype3
No description available.
.PARAMETER EmptyMap
an object with no declared properties and no undeclared properties, hence it's an empty map.
.PARAMETER MapWithUndeclaredPropertiesString
No description available.
.OUTPUTS

AdditionalPropertiesClass<PSCustomObject>
#>

function Initialize-PSAdditionalPropertiesClass {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MapProperty},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MapOfMapProperty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Anytype1},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MapWithUndeclaredPropertiesAnytype1},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MapWithUndeclaredPropertiesAnytype2},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MapWithUndeclaredPropertiesAnytype3},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EmptyMap},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MapWithUndeclaredPropertiesString}
    )

    Process {
        'Creating PSCustomObject: PSPetstore => PSAdditionalPropertiesClass' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "map_property" = ${MapProperty}
            "map_of_map_property" = ${MapOfMapProperty}
            "anytype_1" = ${Anytype1}
            "map_with_undeclared_properties_anytype_1" = ${MapWithUndeclaredPropertiesAnytype1}
            "map_with_undeclared_properties_anytype_2" = ${MapWithUndeclaredPropertiesAnytype2}
            "map_with_undeclared_properties_anytype_3" = ${MapWithUndeclaredPropertiesAnytype3}
            "empty_map" = ${EmptyMap}
            "map_with_undeclared_properties_string" = ${MapWithUndeclaredPropertiesString}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdditionalPropertiesClass<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdditionalPropertiesClass<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdditionalPropertiesClass<PSCustomObject>
#>
function ConvertFrom-PSJsonToAdditionalPropertiesClass {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSPetstore => PSAdditionalPropertiesClass' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSAdditionalPropertiesClass
        $AllProperties = ("map_property", "map_of_map_property", "anytype_1", "map_with_undeclared_properties_anytype_1", "map_with_undeclared_properties_anytype_2", "map_with_undeclared_properties_anytype_3", "empty_map", "map_with_undeclared_properties_string")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_property"))) { #optional property not found
            $MapProperty = $null
        } else {
            $MapProperty = $JsonParameters.PSobject.Properties["map_property"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_of_map_property"))) { #optional property not found
            $MapOfMapProperty = $null
        } else {
            $MapOfMapProperty = $JsonParameters.PSobject.Properties["map_of_map_property"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "anytype_1"))) { #optional property not found
            $Anytype1 = $null
        } else {
            $Anytype1 = $JsonParameters.PSobject.Properties["anytype_1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_with_undeclared_properties_anytype_1"))) { #optional property not found
            $MapWithUndeclaredPropertiesAnytype1 = $null
        } else {
            $MapWithUndeclaredPropertiesAnytype1 = $JsonParameters.PSobject.Properties["map_with_undeclared_properties_anytype_1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_with_undeclared_properties_anytype_2"))) { #optional property not found
            $MapWithUndeclaredPropertiesAnytype2 = $null
        } else {
            $MapWithUndeclaredPropertiesAnytype2 = $JsonParameters.PSobject.Properties["map_with_undeclared_properties_anytype_2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_with_undeclared_properties_anytype_3"))) { #optional property not found
            $MapWithUndeclaredPropertiesAnytype3 = $null
        } else {
            $MapWithUndeclaredPropertiesAnytype3 = $JsonParameters.PSobject.Properties["map_with_undeclared_properties_anytype_3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "empty_map"))) { #optional property not found
            $EmptyMap = $null
        } else {
            $EmptyMap = $JsonParameters.PSobject.Properties["empty_map"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map_with_undeclared_properties_string"))) { #optional property not found
            $MapWithUndeclaredPropertiesString = $null
        } else {
            $MapWithUndeclaredPropertiesString = $JsonParameters.PSobject.Properties["map_with_undeclared_properties_string"].value
        }

        $PSO = [PSCustomObject]@{
            "map_property" = ${MapProperty}
            "map_of_map_property" = ${MapOfMapProperty}
            "anytype_1" = ${Anytype1}
            "map_with_undeclared_properties_anytype_1" = ${MapWithUndeclaredPropertiesAnytype1}
            "map_with_undeclared_properties_anytype_2" = ${MapWithUndeclaredPropertiesAnytype2}
            "map_with_undeclared_properties_anytype_3" = ${MapWithUndeclaredPropertiesAnytype3}
            "empty_map" = ${EmptyMap}
            "map_with_undeclared_properties_string" = ${MapWithUndeclaredPropertiesString}
        }

        return $PSO
    }

}

