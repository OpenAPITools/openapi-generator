#
# OpenAPI Petstore
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: "" \
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MainShape
No description available.
.PARAMETER ShapeOrNull
No description available.
.PARAMETER NullableShape
No description available.
.PARAMETER Shapes
No description available.
.OUTPUTS

Drawing<PSCustomObject>
#>

function Initialize-PSDrawing {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MainShape},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ShapeOrNull},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NullableShape},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Shapes}
    )

    Process {
        'Creating PSCustomObject: PSPetstore => PSDrawing' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "mainShape" = ${MainShape}
            "shapeOrNull" = ${ShapeOrNull}
            "nullableShape" = ${NullableShape}
            "shapes" = ${Shapes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Drawing<PSCustomObject>

.DESCRIPTION

Convert from JSON to Drawing<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Drawing<PSCustomObject>
#>
function ConvertFrom-PSJsonToDrawing {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSPetstore => PSDrawing' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSDrawing
        $AllProperties = ("mainShape", "shapeOrNull", "nullableShape", "shapes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mainShape"))) { #optional property not found
            $MainShape = $null
        } else {
            $MainShape = $JsonParameters.PSobject.Properties["mainShape"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shapeOrNull"))) { #optional property not found
            $ShapeOrNull = $null
        } else {
            $ShapeOrNull = $JsonParameters.PSobject.Properties["shapeOrNull"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nullableShape"))) { #optional property not found
            $NullableShape = $null
        } else {
            $NullableShape = $JsonParameters.PSobject.Properties["nullableShape"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shapes"))) { #optional property not found
            $Shapes = $null
        } else {
            $Shapes = $JsonParameters.PSobject.Properties["shapes"].value
        }

        $PSO = [PSCustomObject]@{
            "mainShape" = ${MainShape}
            "shapeOrNull" = ${ShapeOrNull}
            "nullableShape" = ${NullableShape}
            "shapes" = ${Shapes}
        }

        return $PSO
    }

}

