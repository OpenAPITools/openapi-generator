#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSPetstore' -name 'PSPSUserApi' {
    Context 'New-PSUser' {
        It 'Test New-PSUser' {
            #$TestResult = New-PSUser -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-PSUsersWithArrayInput' {
        It 'Test New-PSUsersWithArrayInput' {
            #$TestResult = New-PSUsersWithArrayInput -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-PSUsersWithListInput' {
        It 'Test New-PSUsersWithListInput' {
            #$TestResult = New-PSUsersWithListInput -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Remove-PSUser' {
        It 'Test Remove-PSUser' {
            #$TestResult = Remove-PSUser -Username "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-PSUserByName' {
        It 'Test Get-PSUserByName' {
            #$TestResult = Get-PSUserByName -Username "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PSLoginUser' {
        It 'Test Invoke-PSLoginUser' {
            #$TestResult = Invoke-PSLoginUser -Username "TEST_VALUE" -Password "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PSLogoutUser' {
        It 'Test Invoke-PSLogoutUser' {
            #$TestResult = Invoke-PSLogoutUser
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-PSUser' {
        It 'Test Update-PSUser' {
            #$TestResult = Update-PSUser -Username "TEST_VALUE" -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
