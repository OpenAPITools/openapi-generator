/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.Client;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.concurrent.CompletableFuture;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0-SNAPSHOT")
public class AnotherFakeApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  // Per-API Bearer authentication
  private String bearerToken;

  // Per-API Basic authentication
  private String username;
  private String password;

  // Per-API API key authentication
  private String apiKey;
  private String apiKeyPrefix;

  // Per-API OAuth authentication
  private String accessToken;

  public AnotherFakeApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AnotherFakeApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  /**
   * Helper method to set access token for Bearer authentication.
   * @param bearerToken Bearer token
   * @return AnotherFakeApi
   */
  public AnotherFakeApi setBearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
    return this;
  }

  /**
   * Helper method to set username for HTTP basic authentication.
   * @param username Username
   * @return AnotherFakeApi
   */
  public AnotherFakeApi setUsername(String username) {
    this.username = username;
    return this;
  }

  /**
   * Helper method to set password for HTTP basic authentication.
   * @param password Password
   * @return AnotherFakeApi
   */
  public AnotherFakeApi setPassword(String password) {
    this.password = password;
    return this;
  }

  /**
   * Helper method to set API key value for API key authentication.
   * @param apiKey API key
   * @return AnotherFakeApi
   */
  public AnotherFakeApi setApiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Helper method to set API key prefix for API key authentication.
   * @param apiKeyPrefix API key prefix
   * @return AnotherFakeApi
   */
  public AnotherFakeApi setApiKeyPrefix(String apiKeyPrefix) {
    this.apiKeyPrefix = apiKeyPrefix;
    return this;
  }

  /**
   * Helper method to set access token for OAuth2 authentication.
   * @param accessToken Access token
   * @return AnotherFakeApi
   */
  public AnotherFakeApi setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Apply authentication settings directly to request headers.
   * This avoids modifying the shared ApiClient's authentication state.
   */
  private void applyAuthToHeaders(HttpRequest.Builder localVarRequestBuilder) {
    if (bearerToken != null) {
      localVarRequestBuilder.header("Authorization", "Bearer " + bearerToken);
    }
    if (username != null && password != null) {
      String credentials = java.util.Base64.getEncoder().encodeToString((username + ":" + password).getBytes());
      localVarRequestBuilder.header("Authorization", "Basic " + credentials);
    }
    if (apiKey != null) {
      
      String keyValue = apiKeyPrefix != null ? apiKeyPrefix + " " + apiKey : apiKey;
      localVarRequestBuilder.header("api_key", keyValue);
      
    }
    if (accessToken != null) {
      localVarRequestBuilder.header("Authorization", "Bearer " + accessToken);
    }
  }

  /**
   * Apply authentication settings directly to query parameters.
   * This avoids modifying the shared ApiClient's authentication state.
   */
  private String applyAuthToQueryParams(String queryString) {
    if (apiKey != null) {
      
      String keyValue = apiKeyPrefix != null ? apiKeyPrefix + " " + apiKey : apiKey;
      String authParam = "api_key_query=" + keyValue;
      if (queryString != null && !queryString.isEmpty()) {
        return queryString + "&" + authParam;
      } else {
        return authParam;
      }
      
    }
    return queryString;
  }


  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * To test special tags
   * To test special tags and operation ID starting with number
   * @param client client model (required)
   * @return CompletableFuture&lt;Client&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Client> call123testSpecialTags(@javax.annotation.Nonnull Client client) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = call123testSpecialTagsRequestBuilder(client);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("call123testSpecialTags", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Client>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * To test special tags
   * To test special tags and operation ID starting with number
   * @param client client model (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Client&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Client>> call123testSpecialTagsWithHttpInfo(@javax.annotation.Nonnull Client client) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = call123testSpecialTagsRequestBuilder(client);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("call123testSpecialTags", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Client>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Client>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder call123testSpecialTagsRequestBuilder(@javax.annotation.Nonnull Client client) throws ApiException {
    // verify the required parameter 'client' is set
    if (client == null) {
      throw new ApiException(400, "Missing the required parameter 'client' when calling call123testSpecialTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/another-fake/dummy";

    String authQuery = applyAuthToQueryParams(null);
    if (authQuery != null && !authQuery.isEmpty()) {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + authQuery));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(client);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Apply per-API authentication directly to the request
    applyAuthToHeaders(localVarRequestBuilder);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
