/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.vertx.core.file.AsyncFile;
import io.swagger.client.model.ModelApiResponse;
import io.swagger.client.model.Pet;

import io.swagger.client.Configuration;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.runner.RunWith;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PetApi
 */
@RunWith(VertxUnitRunner.class)
@Ignore
public class PetApiTest {

    private PetApi api;

    @Rule
    public RunTestOnContext rule = new RunTestOnContext();

    @BeforeClass
    public void setupApiClient() {
        JsonObject config = new JsonObject();
        Vertx vertx = rule.vertx();
        Configuration.setupDefaultApiClient(vertx, config);

        api = new PetApiImpl();
    }
    
    /**
     * Add a new pet to the store
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void addPetTest(TestContext context) {
        Async async = context.async();
        Pet body = null;
        api.addPet(body, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Deletes a pet
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void deletePetTest(TestContext context) {
        Async async = context.async();
        Long petId = null;
        String apiKey = null;
        api.deletePet(petId, apiKey, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void findPetsByStatusTest(TestContext context) {
        Async async = context.async();
        List<String> status = null;
        api.findPetsByStatus(status, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void findPetsByTagsTest(TestContext context) {
        Async async = context.async();
        List<String> tags = null;
        api.findPetsByTags(tags, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Find pet by ID
     * Returns a single pet
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void getPetByIdTest(TestContext context) {
        Async async = context.async();
        Long petId = null;
        api.getPetById(petId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Update an existing pet
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void updatePetTest(TestContext context) {
        Async async = context.async();
        Pet body = null;
        api.updatePet(body, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * Updates a pet in the store with form data
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void updatePetWithFormTest(TestContext context) {
        Async async = context.async();
        Long petId = null;
        String name = null;
        String status = null;
        api.updatePetWithForm(petId, name, status, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
    /**
     * uploads an image
     * 
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void uploadFileTest(TestContext context) {
        Async async = context.async();
        Long petId = null;
        String additionalMetadata = null;
        AsyncFile file = null;
        api.uploadFile(petId, additionalMetadata, file, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    
}