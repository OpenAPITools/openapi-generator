/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import org.openapitools.client.model.AnyOf1;
import org.openapitools.client.model.AnyOf2;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import org.openapitools.client.JSON;


import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
@JsonDeserialize(using=AnyofArray200Response.AnyofArray200ResponseDeserializer.class)
@JsonSerialize(using = AnyofArray200Response.AnyofArray200ResponseSerializer.class)
public class AnyofArray200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AnyofArray200Response.class.getName());

    public static class AnyofArray200ResponseSerializer extends StdSerializer<AnyofArray200Response> {
        public AnyofArray200ResponseSerializer(Class<AnyofArray200Response> t) {
            super(t);
        }

        public AnyofArray200ResponseSerializer() {
            this(null);
        }

        @Override
        public void serialize(AnyofArray200Response value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AnyofArray200ResponseDeserializer extends StdDeserializer<AnyofArray200Response> {
        public AnyofArray200ResponseDeserializer() {
            this(AnyofArray200Response.class);
        }

        public AnyofArray200ResponseDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AnyofArray200Response deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize List<@Valid AnyOf1>
            try {
                if (token == JsonToken.START_ARRAY) {
                    final TypeReference<List<@Valid AnyOf1>> ref = new TypeReference<List<@Valid AnyOf1>>(){};
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ref);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    log.log(Level.FINER, "Input data matches schema 'List<@Valid AnyOf1>'");
                }
                AnyofArray200Response ret = new AnyofArray200Response();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'List<@Valid AnyOf1>'", e);
            }

            // deserialize List<@Valid AnyOf2>
            try {
                if (token == JsonToken.START_ARRAY) {
                    final TypeReference<List<@Valid AnyOf2>> ref = new TypeReference<List<@Valid AnyOf2>>(){};
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ref);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    log.log(Level.FINER, "Input data matches schema 'List<@Valid AnyOf2>'");
                }
                AnyofArray200Response ret = new AnyofArray200Response();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'List<@Valid AnyOf2>'", e);
            }

            throw new IOException(String.format("Failed deserialization for AnyofArray200Response: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public AnyofArray200Response getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "AnyofArray200Response cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType<?>> schemas = new HashMap<>();

    public AnyofArray200Response() {
        super("anyOf", Boolean.FALSE);
    }
  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  @JsonAnySetter
  public AnyofArray200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

    /**
     * Return true if this anyof_array_200_response object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        return super.equals(o) && Objects.equals(this.additionalProperties, ((AnyofArray200Response)o).additionalProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActualInstance(), isNullable(), getSchemaType(), additionalProperties);
    }
    public AnyofArray200Response(List o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("List<@Valid AnyOf1>", new GenericType<List<@Valid AnyOf1>>() {
        });
        schemas.put("List<@Valid AnyOf2>", new GenericType<List<@Valid AnyOf2>>() {
        });
        JSON.registerDescendants(AnyofArray200Response.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType<?>> getSchemas() {
        return AnyofArray200Response.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * List<@Valid AnyOf1>, List<@Valid AnyOf2>
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(List.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be List<@Valid AnyOf1>, List<@Valid AnyOf2>");
    }

    /**
     * Get the actual instance, which can be the following:
     * List<@Valid AnyOf1>, List<@Valid AnyOf2>
     *
     * @return The actual instance (List<@Valid AnyOf1>, List<@Valid AnyOf2>)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
    * Get the actual instance of `List<@Valid AnyOf1>`. If the actual instance is not `List<@Valid AnyOf1>`,
    * the ClassCastException will be thrown.
    *
    * @return The actual instance of `List<@Valid AnyOf1>`
    * @throws ClassCastException if the instance is not `List<@Valid AnyOf1>`
    */
    public List<@Valid AnyOf1> getListAnyOf1() throws ClassCastException {
        return (List<@Valid AnyOf1>)super.getActualInstance();
    }

    /**
    * Get the actual instance of `List<@Valid AnyOf2>`. If the actual instance is not `List<@Valid AnyOf2>`,
    * the ClassCastException will be thrown.
    *
    * @return The actual instance of `List<@Valid AnyOf2>`
    * @throws ClassCastException if the instance is not `List<@Valid AnyOf2>`
    */
    public List<@Valid AnyOf2> getListAnyOf2() throws ClassCastException {
        return (List<@Valid AnyOf2>)super.getActualInstance();
    }

}

