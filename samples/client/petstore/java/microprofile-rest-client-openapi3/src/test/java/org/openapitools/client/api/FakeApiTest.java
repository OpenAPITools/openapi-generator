/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import java.math.BigDecimal;
import org.openapitools.client.model.Client;
import java.util.Date;
import java.io.File;
import org.openapitools.client.model.FileSchemaTestClass;
import org.openapitools.client.model.HealthCheckResult;
import org.openapitools.client.model.OuterComposite;
import org.openapitools.client.model.OuterObjectWithEnumProperty;
import org.openapitools.client.model.Pet;
import org.openapitools.client.model.User;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import org.eclipse.microprofile.rest.client.RestClientBuilder;

import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



/**
 * OpenAPI Petstore Test
 *
 * API tests for FakeApi 
 */
public class FakeApiTest {

    private FakeApi client;
    private String baseUrl = "http://localhost:9080";
    
    @Before
    public void setup() throws MalformedURLException {
        client = RestClientBuilder.newBuilder()
                        .baseUrl(new URL(baseUrl))
                        .register(ApiException.class)
                        .build(FakeApi.class);
    }

    
    /**
     * Health check endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakeHealthGetTest() {
        // TODO: test validations
        //HealthCheckResult response = api.fakeHealthGet();
        //assertNotNull(response);
        
        
    }
    
    /**
     * test http signature authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakeHttpSignatureTestTest() {
        // TODO: test validations
        Pet pet = null;
        String query1 = null;
        String header1 = null;
        //void response = api.fakeHttpSignatureTest(pet, query1, header1);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakeOuterBooleanSerializeTest() {
        // TODO: test validations
        Boolean body = null;
        //Boolean response = api.fakeOuterBooleanSerialize(body);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakeOuterCompositeSerializeTest() {
        // TODO: test validations
        OuterComposite outerComposite = null;
        //OuterComposite response = api.fakeOuterCompositeSerialize(outerComposite);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakeOuterNumberSerializeTest() {
        // TODO: test validations
        BigDecimal body = null;
        //BigDecimal response = api.fakeOuterNumberSerialize(body);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakeOuterStringSerializeTest() {
        // TODO: test validations
        String body = null;
        //String response = api.fakeOuterStringSerialize(body);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fakePropertyEnumIntegerSerializeTest() {
        // TODO: test validations
        OuterObjectWithEnumProperty outerObjectWithEnumProperty = null;
        //OuterObjectWithEnumProperty response = api.fakePropertyEnumIntegerSerialize(outerObjectWithEnumProperty);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testBodyWithFileSchemaTest() {
        // TODO: test validations
        FileSchemaTestClass fileSchemaTestClass = null;
        //void response = api.testBodyWithFileSchema(fileSchemaTestClass);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testBodyWithQueryParamsTest() {
        // TODO: test validations
        String query = null;
        User user = null;
        //void response = api.testBodyWithQueryParams(query, user);
        //assertNotNull(response);
        
        
    }
    
    /**
     * To test \&quot;client\&quot; model
     *
     * To test \&quot;client\&quot; model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testClientModelTest() {
        // TODO: test validations
        Client client = null;
        //Client response = api.testClientModel(client);
        //assertNotNull(response);
        
        
    }
    
    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     *
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testEndpointParametersTest() {
        // TODO: test validations
        BigDecimal number = null;
        Double _double = null;
        String patternWithoutDelimiter = null;
        byte[] _byte = null;
        Integer integer = null;
        Integer int32 = null;
        Long int64 = null;
        Float _float = null;
        String string = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment binary = null;
        Date date = null;
        Date dateTime = null;
        String password = null;
        String paramCallback = null;
        //void response = api.testEndpointParameters(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback);
        //assertNotNull(response);
        
        
    }
    
    /**
     * To test enum parameters
     *
     * To test enum parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testEnumParametersTest() {
        // TODO: test validations
        List<String> enumHeaderStringArray = null;
        String enumHeaderString = null;
        List<String> enumQueryStringArray = null;
        String enumQueryString = null;
        Integer enumQueryInteger = null;
        Double enumQueryDouble = null;
        List<String> enumFormStringArray = null;
        String enumFormString = null;
        //void response = api.testEnumParameters(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString);
        //assertNotNull(response);
        
        
    }
    
    /**
     * Fake endpoint to test group parameters (optional)
     *
     * Fake endpoint to test group parameters (optional)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testGroupParametersTest() {
        // TODO: test validations
        Integer requiredStringGroup = null;
        Boolean requiredBooleanGroup = null;
        Long requiredInt64Group = null;
        Integer stringGroup = null;
        Boolean booleanGroup = null;
        Long int64Group = null;
        //void response = api.testGroupParameters(requiredStringGroup, requiredBooleanGroup, requiredInt64Group, stringGroup, booleanGroup, int64Group);
        //assertNotNull(response);
        
        
    }
    
    /**
     * test inline additionalProperties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testInlineAdditionalPropertiesTest() {
        // TODO: test validations
        Map<String, String> requestBody = null;
        //void response = api.testInlineAdditionalProperties(requestBody);
        //assertNotNull(response);
        
        
    }
    
    /**
     * test json serialization of form data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testJsonFormDataTest() {
        // TODO: test validations
        String param = null;
        String param2 = null;
        //void response = api.testJsonFormData(param, param2);
        //assertNotNull(response);
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testQueryParameterCollectionFormatTest() {
        // TODO: test validations
        List<String> pipe = null;
        List<String> ioutil = null;
        List<String> http = null;
        List<String> url = null;
        List<String> context = null;
        //void response = api.testQueryParameterCollectionFormat(pipe, ioutil, http, url, context);
        //assertNotNull(response);
        
        
    }
    
}
