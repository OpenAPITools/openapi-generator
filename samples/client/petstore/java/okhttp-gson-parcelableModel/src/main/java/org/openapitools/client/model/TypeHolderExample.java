/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * a model to test required properties with an example and length one enum
 */
@ApiModel(description = "a model to test required properties with an example and length one enum")

public class TypeHolderExample implements Parcelable {
  /**
   * Gets or Sets stringItem
   */
  @JsonAdapter(StringItemEnum.Adapter.class)
  public enum StringItemEnum {
    WHAT("what");

    private String value;

    StringItemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StringItemEnum fromValue(String text) {
      for (StringItemEnum b : StringItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<StringItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StringItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StringItemEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StringItemEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_STRING_ITEM = "string_item";
  @SerializedName(SERIALIZED_NAME_STRING_ITEM)
  private StringItemEnum stringItem;

  /**
   * Gets or Sets numberItem
   */
  @JsonAdapter(NumberItemEnum.Adapter.class)
  public enum NumberItemEnum {
    NUMBER_1_DOT_2339999675750732(1.2339999675750732f);

    private Float value;

    NumberItemEnum(Float value) {
      this.value = value;
    }

    public Float getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberItemEnum fromValue(String text) {
      for (NumberItemEnum b : NumberItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<NumberItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberItemEnum read(final JsonReader jsonReader) throws IOException {
        Float value = jsonReader.nextFloat();
        return NumberItemEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_ITEM = "number_item";
  @SerializedName(SERIALIZED_NAME_NUMBER_ITEM)
  private NumberItemEnum numberItem;

  /**
   * Gets or Sets integerItem
   */
  @JsonAdapter(IntegerItemEnum.Adapter.class)
  public enum IntegerItemEnum {
    NUMBER_MINUS_2(-2);

    private Integer value;

    IntegerItemEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntegerItemEnum fromValue(String text) {
      for (IntegerItemEnum b : IntegerItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<IntegerItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntegerItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntegerItemEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return IntegerItemEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_INTEGER_ITEM = "integer_item";
  @SerializedName(SERIALIZED_NAME_INTEGER_ITEM)
  private IntegerItemEnum integerItem;

  public static final String SERIALIZED_NAME_BOOL_ITEM = "bool_item";
  @SerializedName(SERIALIZED_NAME_BOOL_ITEM)
  private Boolean boolItem;

  /**
   * Gets or Sets dateItem
   */
  @JsonAdapter(DateItemEnum.Adapter.class)
  public enum DateItemEnum {
    THU_JUL_20_17_00_00_PDT_2017("Thu Jul 20 17:00:00 PDT 2017");

    private LocalDate value;

    DateItemEnum(LocalDate value) {
      this.value = value;
    }

    public LocalDate getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateItemEnum fromValue(String text) {
      for (DateItemEnum b : DateItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<DateItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateItemEnum read(final JsonReader jsonReader) throws IOException {
        LocalDate value = jsonReader.nextLocalDate();
        return DateItemEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_DATE_ITEM = "date_item";
  @SerializedName(SERIALIZED_NAME_DATE_ITEM)
  private DateItemEnum dateItem;

  /**
   * Gets or Sets datetimeItem
   */
  @JsonAdapter(DatetimeItemEnum.Adapter.class)
  public enum DatetimeItemEnum {
    FRI_JUL_21_10_32_28_PDT_2017("Fri Jul 21 10:32:28 PDT 2017");

    private OffsetDateTime value;

    DatetimeItemEnum(OffsetDateTime value) {
      this.value = value;
    }

    public OffsetDateTime getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatetimeItemEnum fromValue(String text) {
      for (DatetimeItemEnum b : DatetimeItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<DatetimeItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatetimeItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatetimeItemEnum read(final JsonReader jsonReader) throws IOException {
        OffsetDateTime value = jsonReader.nextOffsetDateTime();
        return DatetimeItemEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_DATETIME_ITEM = "datetime_item";
  @SerializedName(SERIALIZED_NAME_DATETIME_ITEM)
  private DatetimeItemEnum datetimeItem;

  public static final String SERIALIZED_NAME_ARRAY_ITEM = "array_item";
  @SerializedName(SERIALIZED_NAME_ARRAY_ITEM)
  private List<Integer> arrayItem = new ArrayList<Integer>();

  public TypeHolderExample() {
  }
  public TypeHolderExample stringItem(StringItemEnum stringItem) {
    this.stringItem = stringItem;
    return this;
  }

   /**
   * Get stringItem
   * @return stringItem
  **/
  @ApiModelProperty(example = "what", required = true, value = "")
  public StringItemEnum getStringItem() {
    return stringItem;
  }

  public void setStringItem(StringItemEnum stringItem) {
    this.stringItem = stringItem;
  }

  public TypeHolderExample numberItem(NumberItemEnum numberItem) {
    this.numberItem = numberItem;
    return this;
  }

   /**
   * Get numberItem
   * @return numberItem
  **/
  @ApiModelProperty(example = "1.234", required = true, value = "")
  public NumberItemEnum getNumberItem() {
    return numberItem;
  }

  public void setNumberItem(NumberItemEnum numberItem) {
    this.numberItem = numberItem;
  }

  public TypeHolderExample integerItem(IntegerItemEnum integerItem) {
    this.integerItem = integerItem;
    return this;
  }

   /**
   * Get integerItem
   * @return integerItem
  **/
  @ApiModelProperty(example = "-2", required = true, value = "")
  public IntegerItemEnum getIntegerItem() {
    return integerItem;
  }

  public void setIntegerItem(IntegerItemEnum integerItem) {
    this.integerItem = integerItem;
  }

  public TypeHolderExample boolItem(Boolean boolItem) {
    this.boolItem = boolItem;
    return this;
  }

   /**
   * Get boolItem
   * @return boolItem
  **/
  @ApiModelProperty(example = "true", required = true, value = "")
  public Boolean getBoolItem() {
    return boolItem;
  }

  public void setBoolItem(Boolean boolItem) {
    this.boolItem = boolItem;
  }

  public TypeHolderExample dateItem(DateItemEnum dateItem) {
    this.dateItem = dateItem;
    return this;
  }

   /**
   * Get dateItem
   * @return dateItem
  **/
  @ApiModelProperty(required = true, value = "")
  public DateItemEnum getDateItem() {
    return dateItem;
  }

  public void setDateItem(DateItemEnum dateItem) {
    this.dateItem = dateItem;
  }

  public TypeHolderExample datetimeItem(DatetimeItemEnum datetimeItem) {
    this.datetimeItem = datetimeItem;
    return this;
  }

   /**
   * Get datetimeItem
   * @return datetimeItem
  **/
  @ApiModelProperty(required = true, value = "")
  public DatetimeItemEnum getDatetimeItem() {
    return datetimeItem;
  }

  public void setDatetimeItem(DatetimeItemEnum datetimeItem) {
    this.datetimeItem = datetimeItem;
  }

  public TypeHolderExample arrayItem(List<Integer> arrayItem) {
    this.arrayItem = arrayItem;
    return this;
  }

  public TypeHolderExample addArrayItemItem(Integer arrayItemItem) {
    this.arrayItem.add(arrayItemItem);
    return this;
  }

   /**
   * Get arrayItem
   * @return arrayItem
  **/
  @ApiModelProperty(example = "[[0, 1, 2, 3]]", required = true, value = "")
  public List<Integer> getArrayItem() {
    return arrayItem;
  }

  public void setArrayItem(List<Integer> arrayItem) {
    this.arrayItem = arrayItem;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypeHolderExample typeHolderExample = (TypeHolderExample) o;
    return Objects.equals(this.stringItem, typeHolderExample.stringItem) &&
        Objects.equals(this.numberItem, typeHolderExample.numberItem) &&
        Objects.equals(this.integerItem, typeHolderExample.integerItem) &&
        Objects.equals(this.boolItem, typeHolderExample.boolItem) &&
        Objects.equals(this.dateItem, typeHolderExample.dateItem) &&
        Objects.equals(this.datetimeItem, typeHolderExample.datetimeItem) &&
        Objects.equals(this.arrayItem, typeHolderExample.arrayItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stringItem, numberItem, integerItem, boolItem, dateItem, datetimeItem, arrayItem);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypeHolderExample {\n");
    sb.append("    stringItem: ").append(toIndentedString(stringItem)).append("\n");
    sb.append("    numberItem: ").append(toIndentedString(numberItem)).append("\n");
    sb.append("    integerItem: ").append(toIndentedString(integerItem)).append("\n");
    sb.append("    boolItem: ").append(toIndentedString(boolItem)).append("\n");
    sb.append("    dateItem: ").append(toIndentedString(dateItem)).append("\n");
    sb.append("    datetimeItem: ").append(toIndentedString(datetimeItem)).append("\n");
    sb.append("    arrayItem: ").append(toIndentedString(arrayItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(stringItem);
    out.writeValue(numberItem);
    out.writeValue(integerItem);
    out.writeValue(boolItem);
    out.writeValue(dateItem);
    out.writeValue(datetimeItem);
    out.writeValue(arrayItem);
  }

  TypeHolderExample(Parcel in) {
    stringItem = (StringItemEnum)in.readValue(null);
    numberItem = (NumberItemEnum)in.readValue(null);
    integerItem = (IntegerItemEnum)in.readValue(null);
    boolItem = (Boolean)in.readValue(null);
    dateItem = (DateItemEnum)in.readValue(LocalDate.class.getClassLoader());
    datetimeItem = (DatetimeItemEnum)in.readValue(OffsetDateTime.class.getClassLoader());
    arrayItem = (List<Integer>)in.readValue(null);
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<TypeHolderExample> CREATOR = new Parcelable.Creator<TypeHolderExample>() {
    public TypeHolderExample createFromParcel(Parcel in) {
      return new TypeHolderExample(in);
    }
    public TypeHolderExample[] newArray(int size) {
      return new TypeHolderExample[size];
    }
  };
}

