/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\ 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import com.google.gson.annotations.SerializedName;


/**
 * EnumTest
 */
public class EnumTest   {
  /**
   * Gets or Sets enumString
   */
  public enum EnumStringEnum {
    @SerializedName("UPPER")
    UPPER("UPPER"),

    @SerializedName("lower")
    LOWER("lower");

    private String value;

    EnumStringEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

    @SerializedName("enum_string")
    private EnumStringEnum enumString = null;
  /**
   * Gets or Sets enumInteger
   */
  public enum EnumIntegerEnum {
    @SerializedName("1")
    NUMBER_1(1),

    @SerializedName("-1")
    NUMBER_MINUS_1(-1);

    private Integer value;

    EnumIntegerEnum(Integer value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

    @SerializedName("enum_integer")
    private EnumIntegerEnum enumInteger = null;
  /**
   * Gets or Sets enumNumber
   */
  public enum EnumNumberEnum {
    @SerializedName("1.1")
    NUMBER_1_DOT_1(1.1),

    @SerializedName("-1.2")
    NUMBER_MINUS_1_DOT_2(-1.2);

    private Double value;

    EnumNumberEnum(Double value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

    @SerializedName("enum_number")
    private EnumNumberEnum enumNumber = null;

    /**
     * Get enumString
     * @return enumString
     **/
    @ApiModelProperty(value = "")
    public EnumStringEnum getEnumString() {
        return enumString;
    }

    /**
     * Set enumString
     *
     * @param enumString enumString
     */
    public void setEnumString(EnumStringEnum enumString) {
        this.enumString = enumString;
    }

    /**
     * Get enumInteger
     * @return enumInteger
     **/
    @ApiModelProperty(value = "")
    public EnumIntegerEnum getEnumInteger() {
        return enumInteger;
    }

    /**
     * Set enumInteger
     *
     * @param enumInteger enumInteger
     */
    public void setEnumInteger(EnumIntegerEnum enumInteger) {
        this.enumInteger = enumInteger;
    }

    /**
     * Get enumNumber
     * @return enumNumber
     **/
    @ApiModelProperty(value = "")
    public EnumNumberEnum getEnumNumber() {
        return enumNumber;
    }

    /**
     * Set enumNumber
     *
     * @param enumNumber enumNumber
     */
    public void setEnumNumber(EnumNumberEnum enumNumber) {
        this.enumNumber = enumNumber;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnumTest enumTest = (EnumTest) o;
        return Objects.equals(this.enumString, enumTest.enumString) &&
        Objects.equals(this.enumInteger, enumTest.enumInteger) &&
        Objects.equals(this.enumNumber, enumTest.enumNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(enumString, enumInteger, enumNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EnumTest {\n");
        
        sb.append("    enumString: ").append(toIndentedString(enumString)).append("\n");
        sb.append("    enumInteger: ").append(toIndentedString(enumInteger)).append("\n");
        sb.append("    enumNumber: ").append(toIndentedString(enumNumber)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     *
     * @param o Object to be converted to indented string
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

