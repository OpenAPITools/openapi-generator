/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.Context;
import org.openapitools.client.Context.Tag;
import org.openapitools.client.model.Client;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;

import static io.restassured.http.Method.*;

public class FakeClassnameTags123Api {

    private RequestSpecBuilder reqSpec;
    private Consumer<Context> contextConsumer;

    private FakeClassnameTags123Api(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    private FakeClassnameTags123Api(RequestSpecBuilder reqSpec, Consumer<Context> contextConsumer) {
        this.reqSpec = reqSpec;
        this.contextConsumer = contextConsumer;
    }

    public static FakeClassnameTags123Api fakeClassnameTags123(RequestSpecBuilder reqSpec, Consumer<Context> contextConsumer) {
        return new FakeClassnameTags123Api(reqSpec, contextConsumer);
    }


    public TestClassnameOper testClassname() {
        return new TestClassnameOper(reqSpec, contextConsumer);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public FakeClassnameTags123Api reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * To test class name in snake case
     * To test class name in snake case
     *
     * @see #body client model (required)
     * return Client
     */
    public static class TestClassnameOper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fake_classname_test";
        public static final Context CONTEXT = new Context()
                .withTags(Arrays.asList(new Tag().withName("fake_classname_tags 123#$%^")))
                .withSummary("To test class name in snake case")
                .withNotes("To test class name in snake case")
                .withIsDeprecated(false);

        private Consumer<Context> contextConsumer;
        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public TestClassnameOper(RequestSpecBuilder reqSpec, Consumer<Context> contextConsumer) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
            this.contextConsumer = contextConsumer;
        }

        /**
         * PATCH /fake_classname_test
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            contextConsumer.accept(CONTEXT);
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fake_classname_test
         * @param handler handler
         * @return Client
         */
        public Client executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Client>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param client (Client) client model (required)
         * @return operation
         */
        public TestClassnameOper body(Client client) {
            reqSpec.setBody(client);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public TestClassnameOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public TestClassnameOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
