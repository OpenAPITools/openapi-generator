/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

@JsonPropertyOrder({
  Capitalization.JSON_PROPERTY_SMALL_CAMEL,
  Capitalization.JSON_PROPERTY_CAPITAL_CAMEL,
  Capitalization.JSON_PROPERTY_SMALL_SNAKE,
  Capitalization.JSON_PROPERTY_CAPITAL_SNAKE,
  Capitalization.JSON_PROPERTY_SC_A_E_T_H_FLOW_POINTS,
  Capitalization.JSON_PROPERTY_A_T_T_N_A_M_E
})

public class Capitalization  {
  
  public static final String JSON_PROPERTY_SMALL_CAMEL = "smallCamel";
  
  private String smallCamel;

  public static final String JSON_PROPERTY_CAPITAL_CAMEL = "CapitalCamel";
  
  private String capitalCamel;

  public static final String JSON_PROPERTY_SMALL_SNAKE = "small_Snake";
  
  private String smallSnake;

  public static final String JSON_PROPERTY_CAPITAL_SNAKE = "Capital_Snake";
  
  private String capitalSnake;

  public static final String JSON_PROPERTY_SC_A_E_T_H_FLOW_POINTS = "SCA_ETH_Flow_Points";
  
  private String scAETHFlowPoints;

  public static final String JSON_PROPERTY_A_T_T_N_A_M_E = "ATT_NAME";
 /**
  * Name of the pet 
  */
  
  private String ATT_NAME;

  /**
   * Get smallCamel
   * @return smallCamel
   **/
  @JsonProperty(JSON_PROPERTY_SMALL_CAMEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSmallCamel() {
    return smallCamel;
  }

  /**
   * Set smallCamel
   */
  @JsonProperty(JSON_PROPERTY_SMALL_CAMEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmallCamel(String smallCamel) {
    this.smallCamel = smallCamel;
  }

  public Capitalization smallCamel(String smallCamel) {
    this.smallCamel = smallCamel;
    return this;
  }

  /**
   * Get capitalCamel
   * @return capitalCamel
   **/
  @JsonProperty(JSON_PROPERTY_CAPITAL_CAMEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCapitalCamel() {
    return capitalCamel;
  }

  /**
   * Set capitalCamel
   */
  @JsonProperty(JSON_PROPERTY_CAPITAL_CAMEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapitalCamel(String capitalCamel) {
    this.capitalCamel = capitalCamel;
  }

  public Capitalization capitalCamel(String capitalCamel) {
    this.capitalCamel = capitalCamel;
    return this;
  }

  /**
   * Get smallSnake
   * @return smallSnake
   **/
  @JsonProperty(JSON_PROPERTY_SMALL_SNAKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSmallSnake() {
    return smallSnake;
  }

  /**
   * Set smallSnake
   */
  @JsonProperty(JSON_PROPERTY_SMALL_SNAKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmallSnake(String smallSnake) {
    this.smallSnake = smallSnake;
  }

  public Capitalization smallSnake(String smallSnake) {
    this.smallSnake = smallSnake;
    return this;
  }

  /**
   * Get capitalSnake
   * @return capitalSnake
   **/
  @JsonProperty(JSON_PROPERTY_CAPITAL_SNAKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCapitalSnake() {
    return capitalSnake;
  }

  /**
   * Set capitalSnake
   */
  @JsonProperty(JSON_PROPERTY_CAPITAL_SNAKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapitalSnake(String capitalSnake) {
    this.capitalSnake = capitalSnake;
  }

  public Capitalization capitalSnake(String capitalSnake) {
    this.capitalSnake = capitalSnake;
    return this;
  }

  /**
   * Get scAETHFlowPoints
   * @return scAETHFlowPoints
   **/
  @JsonProperty(JSON_PROPERTY_SC_A_E_T_H_FLOW_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getScAETHFlowPoints() {
    return scAETHFlowPoints;
  }

  /**
   * Set scAETHFlowPoints
   */
  @JsonProperty(JSON_PROPERTY_SC_A_E_T_H_FLOW_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScAETHFlowPoints(String scAETHFlowPoints) {
    this.scAETHFlowPoints = scAETHFlowPoints;
  }

  public Capitalization scAETHFlowPoints(String scAETHFlowPoints) {
    this.scAETHFlowPoints = scAETHFlowPoints;
    return this;
  }

  /**
   * Name of the pet 
   * @return ATT_NAME
   **/
  @JsonProperty(JSON_PROPERTY_A_T_T_N_A_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getATTNAME() {
    return ATT_NAME;
  }

  /**
   * Set ATT_NAME
   */
  @JsonProperty(JSON_PROPERTY_A_T_T_N_A_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setATTNAME(String ATT_NAME) {
    this.ATT_NAME = ATT_NAME;
  }

  public Capitalization ATT_NAME(String ATT_NAME) {
    this.ATT_NAME = ATT_NAME;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Capitalization {\n");
    
    sb.append("    smallCamel: ").append(toIndentedString(smallCamel)).append("\n");
    sb.append("    capitalCamel: ").append(toIndentedString(capitalCamel)).append("\n");
    sb.append("    smallSnake: ").append(toIndentedString(smallSnake)).append("\n");
    sb.append("    capitalSnake: ").append(toIndentedString(capitalSnake)).append("\n");
    sb.append("    scAETHFlowPoints: ").append(toIndentedString(scAETHFlowPoints)).append("\n");
    sb.append("    ATT_NAME: ").append(toIndentedString(ATT_NAME)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

