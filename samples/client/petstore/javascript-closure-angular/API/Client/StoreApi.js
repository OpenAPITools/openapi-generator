/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.StoreApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at &lt;a href=\&quot;http://swagger.io\&quot;&gt;http://swagger.io&lt;/a&gt; or on irc.freenode.net, #swagger.  For this sample, you can use the api key \&quot;special-key\&quot; to test the authorization filters
 * Version: 1.0.0
 * Generated at: 2016-01-27T23:51:03.092-07:00
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.StoreApi');

goog.require('API.Client.Order');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.StoreApi = function($http, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('StoreApiBasePath') ?
                   /** @type {!string} */ ($injector.get('StoreApiBasePath')) :
                   'http://petstore.swagger.io/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('StoreApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('StoreApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;
}
API.Client.StoreApi.$inject = ['$http', '$injector'];

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object<!string, number>>}
 */
API.Client.StoreApi.prototype.getInventory = function(opt_extraHttpRequestParams) {
  /** @const {!string} */
  var path = this.basePath_ + '/store/inventory';

  /** @type {!Object<string,string>} */
  var queryParameters = {};

  /** @type {!Object<string,string>} */
  var headerParams = angular.copy(this.defaultHeaders_);

  /** @type {!angular.$http.Config} */
  var httpRequestConfig = /** @type {!angular.$http.Config} */ ({
      url: path,
      json: true,
      params: queryParameters,
      headers: headerParams
  });

  if (opt_extraHttpRequestParams) {
    // If an opt_extraHttpRequestParams object is passed in, override values
    // set the generated config with the passed in values.
    httpRequestConfig = angular.merge(httpRequestConfig, opt_extraHttpRequestParams);
  }

  // This whole block is to work around a limitation in closure compiler. It
  // would be better to call the $http service directly as a function, but that
  // isn't permitted since it has methods attached to it. Manually confirmed to
  // compile down to just a single method even with only SIMPLE optimization on.
  // https://github.com/google/closure-compiler/blob/90769b826df65eabfb0211517b0d6d85c0c1c60b/contrib/externs/angular-1.4.js#L1393
  switch ('GET') {
    case 'GET':
      return this.http_.get(path, httpRequestConfig);
    case 'HEAD':
      return this.http_.head(path, httpRequestConfig);
    case 'POST':
      return this.http_.post(path, {}, httpRequestConfig);
    case 'PUT':
      return this.http_.put(path, {}, httpRequestConfig);
    case 'DELETE':
      return this.http_.delete(path, httpRequestConfig);
    case 'PATCH':
      return this.http_.patch(path, {}, httpRequestConfig);
  }
}

/**
 * Place an order for a pet
 * 
 * @param {!Order=} opt_body order placed for purchasing the pet
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Order>}
 */
API.Client.StoreApi.prototype.placeOrder = function(opt_body, opt_extraHttpRequestParams) {
  /** @const {!string} */
  var path = this.basePath_ + '/store/order';

  /** @type {!Object<string,string>} */
  var queryParameters = {};

  /** @type {!Object<string,string>} */
  var headerParams = angular.copy(this.defaultHeaders_);

  /** @type {!angular.$http.Config} */
  var httpRequestConfig = /** @type {!angular.$http.Config} */ ({
      url: path,
      json: true,
      data: body,
      params: queryParameters,
      headers: headerParams
  });

  if (opt_extraHttpRequestParams) {
    // If an opt_extraHttpRequestParams object is passed in, override values
    // set the generated config with the passed in values.
    httpRequestConfig = angular.merge(httpRequestConfig, opt_extraHttpRequestParams);
  }

  // This whole block is to work around a limitation in closure compiler. It
  // would be better to call the $http service directly as a function, but that
  // isn't permitted since it has methods attached to it. Manually confirmed to
  // compile down to just a single method even with only SIMPLE optimization on.
  // https://github.com/google/closure-compiler/blob/90769b826df65eabfb0211517b0d6d85c0c1c60b/contrib/externs/angular-1.4.js#L1393
  switch ('POST') {
    case 'GET':
      return this.http_.get(path, httpRequestConfig);
    case 'HEAD':
      return this.http_.head(path, httpRequestConfig);
    case 'POST':
      return this.http_.post(path, {}, httpRequestConfig);
    case 'PUT':
      return this.http_.put(path, {}, httpRequestConfig);
    case 'DELETE':
      return this.http_.delete(path, httpRequestConfig);
    case 'PATCH':
      return this.http_.patch(path, {}, httpRequestConfig);
  }
}

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generated exceptions
 * @param {!string} orderId ID of pet that needs to be fetched
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Order>}
 */
API.Client.StoreApi.prototype.getOrderById = function(orderId, opt_extraHttpRequestParams) {
  /** @const {!string} */
  var path = this.basePath_ + '/store/order/{orderId}'
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object<string,string>} */
  var queryParameters = {};

  /** @type {!Object<string,string>} */
  var headerParams = angular.copy(this.defaultHeaders_);

  /** @type {!angular.$http.Config} */
  var httpRequestConfig = /** @type {!angular.$http.Config} */ ({
      url: path,
      json: true,
      params: queryParameters,
      headers: headerParams
  });

  if (opt_extraHttpRequestParams) {
    // If an opt_extraHttpRequestParams object is passed in, override values
    // set the generated config with the passed in values.
    httpRequestConfig = angular.merge(httpRequestConfig, opt_extraHttpRequestParams);
  }

  // This whole block is to work around a limitation in closure compiler. It
  // would be better to call the $http service directly as a function, but that
  // isn't permitted since it has methods attached to it. Manually confirmed to
  // compile down to just a single method even with only SIMPLE optimization on.
  // https://github.com/google/closure-compiler/blob/90769b826df65eabfb0211517b0d6d85c0c1c60b/contrib/externs/angular-1.4.js#L1393
  switch ('GET') {
    case 'GET':
      return this.http_.get(path, httpRequestConfig);
    case 'HEAD':
      return this.http_.head(path, httpRequestConfig);
    case 'POST':
      return this.http_.post(path, {}, httpRequestConfig);
    case 'PUT':
      return this.http_.put(path, {}, httpRequestConfig);
    case 'DELETE':
      return this.http_.delete(path, httpRequestConfig);
    case 'PATCH':
      return this.http_.patch(path, {}, httpRequestConfig);
  }
}

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
 * @param {!string} orderId ID of the order that needs to be deleted
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.StoreApi.prototype.deleteOrder = function(orderId, opt_extraHttpRequestParams) {
  /** @const {!string} */
  var path = this.basePath_ + '/store/order/{orderId}'
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object<string,string>} */
  var queryParameters = {};

  /** @type {!Object<string,string>} */
  var headerParams = angular.copy(this.defaultHeaders_);

  /** @type {!angular.$http.Config} */
  var httpRequestConfig = /** @type {!angular.$http.Config} */ ({
      url: path,
      json: true,
      params: queryParameters,
      headers: headerParams
  });

  if (opt_extraHttpRequestParams) {
    // If an opt_extraHttpRequestParams object is passed in, override values
    // set the generated config with the passed in values.
    httpRequestConfig = angular.merge(httpRequestConfig, opt_extraHttpRequestParams);
  }

  // This whole block is to work around a limitation in closure compiler. It
  // would be better to call the $http service directly as a function, but that
  // isn't permitted since it has methods attached to it. Manually confirmed to
  // compile down to just a single method even with only SIMPLE optimization on.
  // https://github.com/google/closure-compiler/blob/90769b826df65eabfb0211517b0d6d85c0c1c60b/contrib/externs/angular-1.4.js#L1393
  switch ('DELETE') {
    case 'GET':
      return this.http_.get(path, httpRequestConfig);
    case 'HEAD':
      return this.http_.head(path, httpRequestConfig);
    case 'POST':
      return this.http_.post(path, {}, httpRequestConfig);
    case 'PUT':
      return this.http_.put(path, {}, httpRequestConfig);
    case 'DELETE':
      return this.http_.delete(path, httpRequestConfig);
    case 'PATCH':
      return this.http_.patch(path, {}, httpRequestConfig);
  }
}
