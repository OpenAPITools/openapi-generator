# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from petstore_api.api_client import ApiClient, Endpoint
from petstore_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from petstore_api.model.animal_farm import AnimalFarm
from petstore_api.model.client import Client
from petstore_api.model.file_schema_test_class import FileSchemaTestClass
from petstore_api.model.number_with_validations import NumberWithValidations
from petstore_api.model.object_model_with_ref_props import ObjectModelWithRefProps
from petstore_api.model.string_enum import StringEnum
from petstore_api.model.user import User
from petstore_api.model.xml_item import XmlItem


class FakeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __array_model(
            self,
            **kwargs
        ):
            """array_model  # noqa: E501

            Test serialization of ArrayModel  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.array_model(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (AnimalFarm): Input model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AnimalFarm
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.array_model = Endpoint(
            settings={
                'response_type': (AnimalFarm,),
                'auth': [],
                'endpoint_path': '/fake/refs/arraymodel',
                'operation_id': 'array_model',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (AnimalFarm,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__array_model
        )

        def __boolean(
            self,
            **kwargs
        ):
            """boolean  # noqa: E501

            Test serialization of outer boolean types  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.boolean(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (bool): Input boolean as post body. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.boolean = Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [],
                'endpoint_path': '/fake/refs/boolean',
                'operation_id': 'boolean',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (bool,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__boolean
        )

        def __create_xml_item(
            self,
            xml_item,
            **kwargs
        ):
            """creates an XmlItem  # noqa: E501

            this route creates an XmlItem  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_xml_item(xml_item, async_req=True)
            >>> result = thread.get()

            Args:
                xml_item (XmlItem): XmlItem Body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['xml_item'] = \
                xml_item
            return self.call_with_http_info(**kwargs)

        self.create_xml_item = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake/create_xml_item',
                'operation_id': 'create_xml_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'xml_item',
                ],
                'required': [
                    'xml_item',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'xml_item':
                        (XmlItem,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'xml_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/xml',
                    'application/xml; charset=utf-8',
                    'application/xml; charset=utf-16',
                    'text/xml',
                    'text/xml; charset=utf-8',
                    'text/xml; charset=utf-16'
                ]
            },
            api_client=api_client,
            callable=__create_xml_item
        )

        def __number_with_validations(
            self,
            **kwargs
        ):
            """number_with_validations  # noqa: E501

            Test serialization of outer number types  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.number_with_validations(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (NumberWithValidations): Input number as post body. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NumberWithValidations
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.number_with_validations = Endpoint(
            settings={
                'response_type': (NumberWithValidations,),
                'auth': [],
                'endpoint_path': '/fake/refs/number',
                'operation_id': 'number_with_validations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (NumberWithValidations,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__number_with_validations
        )

        def __object_model_with_ref_props(
            self,
            **kwargs
        ):
            """object_model_with_ref_props  # noqa: E501

            Test serialization of object with $refed properties  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.object_model_with_ref_props(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (ObjectModelWithRefProps): Input model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ObjectModelWithRefProps
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.object_model_with_ref_props = Endpoint(
            settings={
                'response_type': (ObjectModelWithRefProps,),
                'auth': [],
                'endpoint_path': '/fake/refs/object_model_with_ref_props',
                'operation_id': 'object_model_with_ref_props',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (ObjectModelWithRefProps,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__object_model_with_ref_props
        )

        def __string(
            self,
            **kwargs
        ):
            """string  # noqa: E501

            Test serialization of outer string types  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (str): Input string as post body. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.string = Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/fake/refs/string',
                'operation_id': 'string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (str,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__string
        )

        def __string_enum(
            self,
            **kwargs
        ):
            """string_enum  # noqa: E501

            Test serialization of outer enum  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.string_enum(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (StringEnum): Input enum. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StringEnum
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.string_enum = Endpoint(
            settings={
                'response_type': (StringEnum,),
                'auth': [],
                'endpoint_path': '/fake/refs/enum',
                'operation_id': 'string_enum',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (StringEnum,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__string_enum
        )

        def __test_body_with_file_schema(
            self,
            body,
            **kwargs
        ):
            """test_body_with_file_schema  # noqa: E501

            For this test, the body for this request much reference a schema named `File`.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_body_with_file_schema(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (FileSchemaTestClass):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.test_body_with_file_schema = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake/body-with-file-schema',
                'operation_id': 'test_body_with_file_schema',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (FileSchemaTestClass,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__test_body_with_file_schema
        )

        def __test_body_with_query_params(
            self,
            query,
            body,
            **kwargs
        ):
            """test_body_with_query_params  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_body_with_query_params(query, body, async_req=True)
            >>> result = thread.get()

            Args:
                query (str):
                body (User):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['query'] = \
                query
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.test_body_with_query_params = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake/body-with-query-params',
                'operation_id': 'test_body_with_query_params',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'body',
                ],
                'required': [
                    'query',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'body':
                        (User,),
                },
                'attribute_map': {
                    'query': 'query',
                },
                'location_map': {
                    'query': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__test_body_with_query_params
        )

        def __test_client_model(
            self,
            body,
            **kwargs
        ):
            """To test \"client\" model  # noqa: E501

            To test \"client\" model  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_client_model(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (Client): client model

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Client
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.test_client_model = Endpoint(
            settings={
                'response_type': (Client,),
                'auth': [],
                'endpoint_path': '/fake',
                'operation_id': 'test_client_model',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (Client,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__test_client_model
        )

        def __test_endpoint_enums_length_one(
            self,
            query_integer=3,
            query_string="brillig",
            path_string="hello",
            path_integer=34,
            header_number=1.234,
            **kwargs
        ):
            """test_endpoint_enums_length_one  # noqa: E501

            This route has required values with enums of 1  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_endpoint_enums_length_one(query_integer=3, query_string="brillig", path_string="hello", path_integer=34, header_number=1.234, async_req=True)
            >>> result = thread.get()

            Args:
                query_integer (int): defaults to 3, must be one of [3]
                query_string (str): defaults to "brillig", must be one of ["brillig"]
                path_string (str): defaults to "hello", must be one of ["hello"]
                path_integer (int): defaults to 34, must be one of [34]
                header_number (float): defaults to 1.234, must be one of [1.234]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['query_integer'] = \
                query_integer
            kwargs['query_string'] = \
                query_string
            kwargs['path_string'] = \
                path_string
            kwargs['path_integer'] = \
                path_integer
            kwargs['header_number'] = \
                header_number
            return self.call_with_http_info(**kwargs)

        self.test_endpoint_enums_length_one = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake/enums-of-length-one/{path_string}/{path_integer}',
                'operation_id': 'test_endpoint_enums_length_one',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'query_integer',
                    'query_string',
                    'path_string',
                    'path_integer',
                    'header_number',
                ],
                'required': [
                    'query_integer',
                    'query_string',
                    'path_string',
                    'path_integer',
                    'header_number',
                ],
                'nullable': [
                ],
                'enum': [
                    'query_integer',
                    'query_string',
                    'path_string',
                    'path_integer',
                    'header_number',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('query_integer',): {

                        "3": 3
                    },
                    ('query_string',): {

                        "BRILLIG": "brillig"
                    },
                    ('path_string',): {

                        "HELLO": "hello"
                    },
                    ('path_integer',): {

                        "34": 34
                    },
                    ('header_number',): {

                        "1.234": 1.234
                    },
                },
                'openapi_types': {
                    'query_integer':
                        (int,),
                    'query_string':
                        (str,),
                    'path_string':
                        (str,),
                    'path_integer':
                        (int,),
                    'header_number':
                        (float,),
                },
                'attribute_map': {
                    'query_integer': 'query_integer',
                    'query_string': 'query_string',
                    'path_string': 'path_string',
                    'path_integer': 'path_integer',
                    'header_number': 'header_number',
                },
                'location_map': {
                    'query_integer': 'query',
                    'query_string': 'query',
                    'path_string': 'path',
                    'path_integer': 'path',
                    'header_number': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__test_endpoint_enums_length_one
        )

        def __test_endpoint_parameters(
            self,
            number,
            double,
            pattern_without_delimiter,
            byte,
            **kwargs
        ):
            """Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트  # noqa: E501

            Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_endpoint_parameters(number, double, pattern_without_delimiter, byte, async_req=True)
            >>> result = thread.get()

            Args:
                number (float): None
                double (float): None
                pattern_without_delimiter (str): None
                byte (str): None

            Keyword Args:
                integer (int): None. [optional]
                int32 (int): None. [optional]
                int64 (int): None. [optional]
                float (float): None. [optional]
                string (str): None. [optional]
                binary (file_type): None. [optional]
                date (date): None. [optional]
                date_time (datetime): None. [optional]
                password (str): None. [optional]
                param_callback (str): None. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['number'] = \
                number
            kwargs['double'] = \
                double
            kwargs['pattern_without_delimiter'] = \
                pattern_without_delimiter
            kwargs['byte'] = \
                byte
            return self.call_with_http_info(**kwargs)

        self.test_endpoint_parameters = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'http_basic_test'
                ],
                'endpoint_path': '/fake',
                'operation_id': 'test_endpoint_parameters',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'number',
                    'double',
                    'pattern_without_delimiter',
                    'byte',
                    'integer',
                    'int32',
                    'int64',
                    'float',
                    'string',
                    'binary',
                    'date',
                    'date_time',
                    'password',
                    'param_callback',
                ],
                'required': [
                    'number',
                    'double',
                    'pattern_without_delimiter',
                    'byte',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                    'double',
                    'pattern_without_delimiter',
                    'integer',
                    'int32',
                    'float',
                    'string',
                    'password',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 543.2,
                        'inclusive_minimum': 32.1,
                    },
                    ('double',): {

                        'inclusive_maximum': 123.4,
                        'inclusive_minimum': 67.8,
                    },
                    ('pattern_without_delimiter',): {

                        'regex': {
                            'pattern': r'^[A-Z].*',  # noqa: E501
                        },
                    },
                    ('integer',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 10,
                    },
                    ('int32',): {

                        'inclusive_maximum': 200,
                        'inclusive_minimum': 20,
                    },
                    ('float',): {

                        'inclusive_maximum': 987.6,
                    },
                    ('string',): {

                        'regex': {
                            'pattern': r'[a-z]',  # noqa: E501
                            'flags': (re.IGNORECASE)
                        },
                    },
                    ('password',): {
                        'max_length': 64,
                        'min_length': 10,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'number':
                        (float,),
                    'double':
                        (float,),
                    'pattern_without_delimiter':
                        (str,),
                    'byte':
                        (str,),
                    'integer':
                        (int,),
                    'int32':
                        (int,),
                    'int64':
                        (int,),
                    'float':
                        (float,),
                    'string':
                        (str,),
                    'binary':
                        (file_type,),
                    'date':
                        (date,),
                    'date_time':
                        (datetime,),
                    'password':
                        (str,),
                    'param_callback':
                        (str,),
                },
                'attribute_map': {
                    'number': 'number',
                    'double': 'double',
                    'pattern_without_delimiter': 'pattern_without_delimiter',
                    'byte': 'byte',
                    'integer': 'integer',
                    'int32': 'int32',
                    'int64': 'int64',
                    'float': 'float',
                    'string': 'string',
                    'binary': 'binary',
                    'date': 'date',
                    'date_time': 'dateTime',
                    'password': 'password',
                    'param_callback': 'callback',
                },
                'location_map': {
                    'number': 'form',
                    'double': 'form',
                    'pattern_without_delimiter': 'form',
                    'byte': 'form',
                    'integer': 'form',
                    'int32': 'form',
                    'int64': 'form',
                    'float': 'form',
                    'string': 'form',
                    'binary': 'form',
                    'date': 'form',
                    'date_time': 'form',
                    'password': 'form',
                    'param_callback': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__test_endpoint_parameters
        )

        def __test_enum_parameters(
            self,
            **kwargs
        ):
            """To test enum parameters  # noqa: E501

            To test enum parameters  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_enum_parameters(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                enum_header_string_array ([str]): Header parameter enum test (string array). [optional]
                enum_header_string (str): Header parameter enum test (string). [optional] if omitted the server will use the default value of "-efg"
                enum_query_string_array ([str]): Query parameter enum test (string array). [optional]
                enum_query_string (str): Query parameter enum test (string). [optional] if omitted the server will use the default value of "-efg"
                enum_query_integer (int): Query parameter enum test (double). [optional]
                enum_query_double (float): Query parameter enum test (double). [optional]
                enum_form_string_array ([str]): Form parameter enum test (string array). [optional] if omitted the server will use the default value of "$"
                enum_form_string (str): Form parameter enum test (string). [optional] if omitted the server will use the default value of "-efg"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.test_enum_parameters = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake',
                'operation_id': 'test_enum_parameters',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'enum_header_string_array',
                    'enum_header_string',
                    'enum_query_string_array',
                    'enum_query_string',
                    'enum_query_integer',
                    'enum_query_double',
                    'enum_form_string_array',
                    'enum_form_string',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'enum_header_string_array',
                    'enum_header_string',
                    'enum_query_string_array',
                    'enum_query_string',
                    'enum_query_integer',
                    'enum_query_double',
                    'enum_form_string_array',
                    'enum_form_string',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('enum_header_string_array',): {

                        "&gt;": ">",
                        "$": "$"
                    },
                    ('enum_header_string',): {

                        "_ABC": "_abc",
                        "-EFG": "-efg",
                        "(XYZ)": "(xyz)"
                    },
                    ('enum_query_string_array',): {

                        "&gt;": ">",
                        "$": "$"
                    },
                    ('enum_query_string',): {

                        "_ABC": "_abc",
                        "-EFG": "-efg",
                        "(XYZ)": "(xyz)"
                    },
                    ('enum_query_integer',): {

                        "1": 1,
                        "-2": -2
                    },
                    ('enum_query_double',): {

                        "1.1": 1.1,
                        "-1.2": -1.2
                    },
                    ('enum_form_string_array',): {

                        "&gt;": ">",
                        "$": "$"
                    },
                    ('enum_form_string',): {

                        "_ABC": "_abc",
                        "-EFG": "-efg",
                        "(XYZ)": "(xyz)"
                    },
                },
                'openapi_types': {
                    'enum_header_string_array':
                        ([str],),
                    'enum_header_string':
                        (str,),
                    'enum_query_string_array':
                        ([str],),
                    'enum_query_string':
                        (str,),
                    'enum_query_integer':
                        (int,),
                    'enum_query_double':
                        (float,),
                    'enum_form_string_array':
                        ([str],),
                    'enum_form_string':
                        (str,),
                },
                'attribute_map': {
                    'enum_header_string_array': 'enum_header_string_array',
                    'enum_header_string': 'enum_header_string',
                    'enum_query_string_array': 'enum_query_string_array',
                    'enum_query_string': 'enum_query_string',
                    'enum_query_integer': 'enum_query_integer',
                    'enum_query_double': 'enum_query_double',
                    'enum_form_string_array': 'enum_form_string_array',
                    'enum_form_string': 'enum_form_string',
                },
                'location_map': {
                    'enum_header_string_array': 'header',
                    'enum_header_string': 'header',
                    'enum_query_string_array': 'query',
                    'enum_query_string': 'query',
                    'enum_query_integer': 'query',
                    'enum_query_double': 'query',
                    'enum_form_string_array': 'form',
                    'enum_form_string': 'form',
                },
                'collection_format_map': {
                    'enum_header_string_array': 'csv',
                    'enum_query_string_array': 'csv',
                    'enum_form_string_array': 'csv',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__test_enum_parameters
        )

        def __test_group_parameters(
            self,
            required_string_group,
            required_boolean_group,
            required_int64_group,
            **kwargs
        ):
            """Fake endpoint to test group parameters (optional)  # noqa: E501

            Fake endpoint to test group parameters (optional)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_group_parameters(required_string_group, required_boolean_group, required_int64_group, async_req=True)
            >>> result = thread.get()

            Args:
                required_string_group (int): Required String in group parameters
                required_boolean_group (bool): Required Boolean in group parameters
                required_int64_group (int): Required Integer in group parameters

            Keyword Args:
                string_group (int): String in group parameters. [optional]
                boolean_group (bool): Boolean in group parameters. [optional]
                int64_group (int): Integer in group parameters. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['required_string_group'] = \
                required_string_group
            kwargs['required_boolean_group'] = \
                required_boolean_group
            kwargs['required_int64_group'] = \
                required_int64_group
            return self.call_with_http_info(**kwargs)

        self.test_group_parameters = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake',
                'operation_id': 'test_group_parameters',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'required_string_group',
                    'required_boolean_group',
                    'required_int64_group',
                    'string_group',
                    'boolean_group',
                    'int64_group',
                ],
                'required': [
                    'required_string_group',
                    'required_boolean_group',
                    'required_int64_group',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'required_string_group':
                        (int,),
                    'required_boolean_group':
                        (bool,),
                    'required_int64_group':
                        (int,),
                    'string_group':
                        (int,),
                    'boolean_group':
                        (bool,),
                    'int64_group':
                        (int,),
                },
                'attribute_map': {
                    'required_string_group': 'required_string_group',
                    'required_boolean_group': 'required_boolean_group',
                    'required_int64_group': 'required_int64_group',
                    'string_group': 'string_group',
                    'boolean_group': 'boolean_group',
                    'int64_group': 'int64_group',
                },
                'location_map': {
                    'required_string_group': 'query',
                    'required_boolean_group': 'header',
                    'required_int64_group': 'query',
                    'string_group': 'query',
                    'boolean_group': 'header',
                    'int64_group': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__test_group_parameters
        )

        def __test_inline_additional_properties(
            self,
            param,
            **kwargs
        ):
            """test inline additionalProperties  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_inline_additional_properties(param, async_req=True)
            >>> result = thread.get()

            Args:
                param ({str: (str,)}): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['param'] = \
                param
            return self.call_with_http_info(**kwargs)

        self.test_inline_additional_properties = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake/inline-additionalProperties',
                'operation_id': 'test_inline_additional_properties',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'param',
                ],
                'required': [
                    'param',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'param':
                        ({str: (str,)},),
                },
                'attribute_map': {
                },
                'location_map': {
                    'param': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__test_inline_additional_properties
        )

        def __test_json_form_data(
            self,
            param,
            param2,
            **kwargs
        ):
            """test json serialization of form data  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_json_form_data(param, param2, async_req=True)
            >>> result = thread.get()

            Args:
                param (str): field1
                param2 (str): field2

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['param'] = \
                param
            kwargs['param2'] = \
                param2
            return self.call_with_http_info(**kwargs)

        self.test_json_form_data = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/fake/jsonFormData',
                'operation_id': 'test_json_form_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'param',
                    'param2',
                ],
                'required': [
                    'param',
                    'param2',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'param':
                        (str,),
                    'param2':
                        (str,),
                },
                'attribute_map': {
                    'param': 'param',
                    'param2': 'param2',
                },
                'location_map': {
                    'param': 'form',
                    'param2': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__test_json_form_data
        )
