# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from petstore_api.exceptions import ApiValueError  # noqa: F401
from petstore_api.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class FormatTest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
    }

    attribute_map = {
        'integer': 'integer',  # noqa: E501
        'int32': 'int32',  # noqa: E501
        'int64': 'int64',  # noqa: E501
        'number': 'number',  # noqa: E501
        'float': 'float',  # noqa: E501
        'double': 'double',  # noqa: E501
        'string': 'string',  # noqa: E501
        'byte': 'byte',  # noqa: E501
        'binary': 'binary',  # noqa: E501
        'date': 'date',  # noqa: E501
        'date_time': 'dateTime',  # noqa: E501
        'uuid': 'uuid',  # noqa: E501
        'password': 'password'  # noqa: E501
    }

    openapi_types = {
        'integer': 'int',
        'int32': 'int',
        'int64': 'int',
        'number': 'float',
        'float': 'float',
        'double': 'float',
        'string': 'str',
        'byte': 'str',
        'binary': 'file',
        'date': 'date',
        'date_time': 'datetime',
        'uuid': 'str',
        'password': 'str'
    }

    validations = {
        ('integer',): {

            'inclusive_maximum': 100,
            'inclusive_minimum': 10,
        },
        ('int32',): {

            'inclusive_maximum': 200,
            'inclusive_minimum': 20,
        },
        ('number',): {

            'inclusive_maximum': 543.2,
            'inclusive_minimum': 32.1,
        },
        ('float',): {

            'inclusive_maximum': 987.6,
            'inclusive_minimum': 54.3,
        },
        ('double',): {

            'inclusive_maximum': 123.4,
            'inclusive_minimum': 67.8,
        },
        ('string',): {

            'regex': {
                'pattern': r'^[a-z]+$',  # noqa: E501
                'flags': (re.IGNORECASE)
            },
        },
        ('byte',): {

            'regex': {
                'pattern': r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$',  # noqa: E501
            },
        },
        ('password',): {
            'max_length': 64,
            'min_length': 10,
        },
    }

    def __init__(self, integer=None, int32=None, int64=None, number=None, float=None, double=None, string=None, byte=None, binary=None, date=None, date_time=None, uuid=None, password=None):  # noqa: E501
        """FormatTest - a model defined in OpenAPI"""  # noqa: E501

        self._integer = None
        self._int32 = None
        self._int64 = None
        self._number = None
        self._float = None
        self._double = None
        self._string = None
        self._byte = None
        self._binary = None
        self._date = None
        self._date_time = None
        self._uuid = None
        self._password = None
        self.discriminator = None

        if integer is not None:
            self.integer = (
                integer
            )
        if int32 is not None:
            self.int32 = (
                int32
            )
        if int64 is not None:
            self.int64 = (
                int64
            )
        self.number = number
        if float is not None:
            self.float = (
                float
            )
        if double is not None:
            self.double = (
                double
            )
        if string is not None:
            self.string = (
                string
            )
        self.byte = byte
        if binary is not None:
            self.binary = (
                binary
            )
        self.date = date
        if date_time is not None:
            self.date_time = (
                date_time
            )
        if uuid is not None:
            self.uuid = (
                uuid
            )
        self.password = password

    @property
    def integer(self):
        """Gets the integer of this FormatTest.  # noqa: E501


        :return: The integer of this FormatTest.  # noqa: E501
        :rtype: int
        """
        return self._integer

    @integer.setter
    def integer(self, integer):  # noqa: E501
        """Sets the integer of this FormatTest.


        :param integer: The integer of this FormatTest.  # noqa: E501
        :type: int
        """
        check_validations(
            self.validations,
            ('integer',),
            integer
        )

        self._integer = (
            integer
        )

    @property
    def int32(self):
        """Gets the int32 of this FormatTest.  # noqa: E501


        :return: The int32 of this FormatTest.  # noqa: E501
        :rtype: int
        """
        return self._int32

    @int32.setter
    def int32(self, int32):  # noqa: E501
        """Sets the int32 of this FormatTest.


        :param int32: The int32 of this FormatTest.  # noqa: E501
        :type: int
        """
        check_validations(
            self.validations,
            ('int32',),
            int32
        )

        self._int32 = (
            int32
        )

    @property
    def int64(self):
        """Gets the int64 of this FormatTest.  # noqa: E501


        :return: The int64 of this FormatTest.  # noqa: E501
        :rtype: int
        """
        return self._int64

    @int64.setter
    def int64(self, int64):  # noqa: E501
        """Sets the int64 of this FormatTest.


        :param int64: The int64 of this FormatTest.  # noqa: E501
        :type: int
        """

        self._int64 = (
            int64
        )

    @property
    def number(self):
        """Gets the number of this FormatTest.  # noqa: E501


        :return: The number of this FormatTest.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):  # noqa: E501
        """Sets the number of this FormatTest.


        :param number: The number of this FormatTest.  # noqa: E501
        :type: float
        """
        if number is None:
            raise ApiValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('number',),
            number
        )

        self._number = (
            number
        )

    @property
    def float(self):
        """Gets the float of this FormatTest.  # noqa: E501


        :return: The float of this FormatTest.  # noqa: E501
        :rtype: float
        """
        return self._float

    @float.setter
    def float(self, float):  # noqa: E501
        """Sets the float of this FormatTest.


        :param float: The float of this FormatTest.  # noqa: E501
        :type: float
        """
        check_validations(
            self.validations,
            ('float',),
            float
        )

        self._float = (
            float
        )

    @property
    def double(self):
        """Gets the double of this FormatTest.  # noqa: E501


        :return: The double of this FormatTest.  # noqa: E501
        :rtype: float
        """
        return self._double

    @double.setter
    def double(self, double):  # noqa: E501
        """Sets the double of this FormatTest.


        :param double: The double of this FormatTest.  # noqa: E501
        :type: float
        """
        check_validations(
            self.validations,
            ('double',),
            double
        )

        self._double = (
            double
        )

    @property
    def string(self):
        """Gets the string of this FormatTest.  # noqa: E501


        :return: The string of this FormatTest.  # noqa: E501
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):  # noqa: E501
        """Sets the string of this FormatTest.


        :param string: The string of this FormatTest.  # noqa: E501
        :type: str
        """
        check_validations(
            self.validations,
            ('string',),
            string
        )

        self._string = (
            string
        )

    @property
    def byte(self):
        """Gets the byte of this FormatTest.  # noqa: E501


        :return: The byte of this FormatTest.  # noqa: E501
        :rtype: str
        """
        return self._byte

    @byte.setter
    def byte(self, byte):  # noqa: E501
        """Sets the byte of this FormatTest.


        :param byte: The byte of this FormatTest.  # noqa: E501
        :type: str
        """
        if byte is None:
            raise ApiValueError("Invalid value for `byte`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('byte',),
            byte
        )

        self._byte = (
            byte
        )

    @property
    def binary(self):
        """Gets the binary of this FormatTest.  # noqa: E501


        :return: The binary of this FormatTest.  # noqa: E501
        :rtype: file
        """
        return self._binary

    @binary.setter
    def binary(self, binary):  # noqa: E501
        """Sets the binary of this FormatTest.


        :param binary: The binary of this FormatTest.  # noqa: E501
        :type: file
        """

        self._binary = (
            binary
        )

    @property
    def date(self):
        """Gets the date of this FormatTest.  # noqa: E501


        :return: The date of this FormatTest.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):  # noqa: E501
        """Sets the date of this FormatTest.


        :param date: The date of this FormatTest.  # noqa: E501
        :type: date
        """
        if date is None:
            raise ApiValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = (
            date
        )

    @property
    def date_time(self):
        """Gets the date_time of this FormatTest.  # noqa: E501


        :return: The date_time of this FormatTest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):  # noqa: E501
        """Sets the date_time of this FormatTest.


        :param date_time: The date_time of this FormatTest.  # noqa: E501
        :type: datetime
        """

        self._date_time = (
            date_time
        )

    @property
    def uuid(self):
        """Gets the uuid of this FormatTest.  # noqa: E501


        :return: The uuid of this FormatTest.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):  # noqa: E501
        """Sets the uuid of this FormatTest.


        :param uuid: The uuid of this FormatTest.  # noqa: E501
        :type: str
        """

        self._uuid = (
            uuid
        )

    @property
    def password(self):
        """Gets the password of this FormatTest.  # noqa: E501


        :return: The password of this FormatTest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):  # noqa: E501
        """Sets the password of this FormatTest.


        :param password: The password of this FormatTest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ApiValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('password',),
            password
        )

        self._password = (
            password
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormatTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
