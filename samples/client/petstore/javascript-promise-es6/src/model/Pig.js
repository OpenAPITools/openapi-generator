/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasquePig from './BasquePig';
import DanishPig from './DanishPig';

/**
 * The Pig model module.
 * @module model/Pig
 * @version 1.0.0
 */
class Pig {
    /**
     * Constructs a new <code>Pig</code>.
     * @alias module:model/Pig
     * @param {(module:model/BasquePig|module:model/DanishPig)} The actual instance to initialize Pig.
     */
    constructor(obj = null) {
        this.actualInstance = obj;
    }

    /**
     * Constructs a <code>Pig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pig} obj Optional instance to populate.
     * @return {module:model/Pig} The populated <code>Pig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (!data) {
            return new Pig();
        }
        var match = 0;
        var errorMessages = [];
        try {
            // validate the JSON data
            BasquePig.validateJSON(data);
            // create BasquePig from JSON data
            obj = new Pig(BasquePig.constructFromObject(data));
            match++;
        } catch(err) {
            // json data failed to deserialize into BasquePig
            errorMessages.push("Failed to construct BasquePig: " + err)
        }

        try {
            // validate the JSON data
            DanishPig.validateJSON(data);
            // create DanishPig from JSON data
            obj = new Pig(DanishPig.constructFromObject(data));
            match++;
        } catch(err) {
            // json data failed to deserialize into DanishPig
            errorMessages.push("Failed to construct DanishPig: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `Pig` with oneOf schemas BasquePig, DanishPig. JSON data: " + JSON.stringify(data));
        } else if (match === 0) {
            throw new Error("No match found constructing `Pig` with oneOf schemas BasquePig, DanishPig. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            return obj;
        }
    }

    /**
     * Gets the actaul instance, which can be <code>BasquePig</code>, <code>DanishPig</code>.
     * @return {(module:model/BasquePig|module:model/DanishPig)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actaul instance, which can be <code>BasquePig</code>, <code>DanishPig</code>.
     * @param {(module:model/BasquePig|module:model/DanishPig)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Pig.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual intance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

}

/**
 * @member {String} className
 */
Pig.prototype['className'] = undefined;

/**
 * @member {String} color
 */
Pig.prototype['color'] = undefined;

/**
 * @member {Number} size
 */
Pig.prototype['size'] = undefined;


Pig.OneOf = ["BasquePig", "DanishPig"];

export default Pig;

