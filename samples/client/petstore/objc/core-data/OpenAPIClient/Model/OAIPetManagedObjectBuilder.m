

#import "OAIPetManagedObjectBuilder.h"

/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

@implementation OAIPetManagedObjectBuilder

-(instancetype)init {
    self = [super init];
    if (self != nil) {
       _categoryBuilder = [[OAICategoryManagedObjectBuilder alloc] init];
       _tagsBuilder = [[OAITagManagedObjectBuilder alloc] init];
    }
    return self;
}

-(OAIPetManagedObject*)createNewOAIPetManagedObjectInContext:(NSManagedObjectContext*)context {
    OAIPetManagedObject *managedObject = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([OAIPetManagedObject class]) inManagedObjectContext:context];
    return managedObject;
}

-(OAIPetManagedObject*)OAIPetManagedObjectFromOAIPet:(OAIPet*)object context:(NSManagedObjectContext*)context {
    OAIPetManagedObject* newOAIPet = [self createNewOAIPetManagedObjectInContext:context];
    [self updateOAIPetManagedObject:newOAIPet withOAIPet:object];
    return newOAIPet;
}

-(void)updateOAIPetManagedObject:(OAIPetManagedObject*)managedObject withOAIPet:(OAIPet*)object {
    if(!managedObject || !object) {
        return;
    }
    NSManagedObjectContext* context = managedObject.managedObjectContext;
    managedObject._id = [object._id copy];

    if(!managedObject.category) {
        managedObject.category = [self.categoryBuilder OAICategoryManagedObjectFromOAICategory:object.category context:managedObject.managedObjectContext];
    } else {
        [self.categoryBuilder updateOAICategoryManagedObject:managedObject.category withOAICategory:object.category];
    }
    managedObject.name = [object.name copy];
    managedObject.photoUrls = [object.photoUrls copy];
    if(managedObject.tags) {
        for (id object in managedObject.tags) {
            [context deleteObject:object];
        }
    }
    if(object.tags) {
        NSMutableOrderedSet * convertedObjs = [NSMutableOrderedSet orderedSet];
        for (id innerObject in object.tags) {
            id convertedObj = [self.tagsBuilder OAITagManagedObjectFromOAITag:innerObject context:managedObject.managedObjectContext];
            [convertedObjs addObject:convertedObj];
        }
        managedObject.tags = convertedObjs;
    }
    managedObject.status = [object.status copy];

}

-(OAIPet*)OAIPetFromOAIPetManagedObject:(OAIPetManagedObject*)obj {
    if(!obj) {
        return nil;
    }
    OAIPet* newOAIPet = [[OAIPet alloc] init];
    [self updateOAIPet:newOAIPet withOAIPetManagedObject:obj];
    return newOAIPet;
}

-(void)updateOAIPet:(OAIPet*)newOAIPet withOAIPetManagedObject:(OAIPetManagedObject*)obj {
    newOAIPet._id = [obj._id copy];
    newOAIPet.category = [self.categoryBuilder OAICategoryFromOAICategoryManagedObject:obj.category];
    newOAIPet.name = [obj.name copy];
    newOAIPet.photoUrls = [obj.photoUrls copy];
    if(obj.tags != nil) {
        NSMutableArray* convertedObjs = [NSMutableArray array];
        for (id innerObject in obj.tags) {
            id convertedObj = [self.tagsBuilder OAITagFromOAITagManagedObject:innerObject];
            [convertedObjs addObject:convertedObj];
        }
        newOAIPet.tags = (NSArray<OAITag>*)convertedObjs;
    }
    
    newOAIPet.status = [obj.status copy];
}

@end
