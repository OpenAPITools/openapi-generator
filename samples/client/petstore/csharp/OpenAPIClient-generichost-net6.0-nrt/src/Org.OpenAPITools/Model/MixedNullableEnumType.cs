// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines MixedNullableEnumType
    /// </summary>
    public enum MixedNullableEnumType
    {
        /// <summary>
        /// Enum SOMETHINGNULL for value: SOMETHING_NULL
        /// </summary>
        SOMETHINGNULL = 1,

        /// <summary>
        /// Enum SOMETHINGNEWED for value: SOMETHING_NEWED
        /// </summary>
        SOMETHINGNEWED = 2,

        /// <summary>
        /// Enum Null for value: null
        /// </summary>
        Null = 3
    }

    /// <summary>
    /// Converts <see cref="MixedNullableEnumType"/> to and from the JSON value
    /// </summary>
    public static class MixedNullableEnumTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MixedNullableEnumType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MixedNullableEnumType FromString(string value)
        {
            if (value.Equals("SOMETHING_NULL"))
                return MixedNullableEnumType.SOMETHINGNULL;

            if (value.Equals("SOMETHING_NEWED"))
                return MixedNullableEnumType.SOMETHINGNEWED;

            if (value.Equals("null"))
                return MixedNullableEnumType.Null;

            throw new NotImplementedException($"Could not convert value to type MixedNullableEnumType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MixedNullableEnumType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MixedNullableEnumType? FromStringOrDefault(string value)
        {
            if (value.Equals("SOMETHING_NULL"))
                return MixedNullableEnumType.SOMETHINGNULL;

            if (value.Equals("SOMETHING_NEWED"))
                return MixedNullableEnumType.SOMETHINGNEWED;

            if (value.Equals("null"))
                return MixedNullableEnumType.Null;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MixedNullableEnumType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MixedNullableEnumType value)
        {
            if (value == MixedNullableEnumType.SOMETHINGNULL)
                return "SOMETHING_NULL";

            if (value == MixedNullableEnumType.SOMETHINGNEWED)
                return "SOMETHING_NEWED";

            if (value == MixedNullableEnumType.Null)
                return "null";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MixedNullableEnumType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MixedNullableEnumTypeJsonConverter : JsonConverter<MixedNullableEnumType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MixedNullableEnumType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MixedNullableEnumType? result = rawValue == null
                ? null
                : MixedNullableEnumTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MixedNullableEnumType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mixedNullableEnumType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MixedNullableEnumType mixedNullableEnumType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mixedNullableEnumType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MixedNullableEnumType"/>
    /// </summary>
    public class MixedNullableEnumTypeNullableJsonConverter : JsonConverter<MixedNullableEnumType?>
    {
        /// <summary>
        /// Returns a MixedNullableEnumType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MixedNullableEnumType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MixedNullableEnumType? result = rawValue == null
                ? null
                : MixedNullableEnumTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mixedNullableEnumType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MixedNullableEnumType? mixedNullableEnumType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mixedNullableEnumType?.ToString() ?? "null");
        }
    }
}
