/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FakeBigDecimalMap200Response
    /// </summary>
    [DataContract]
    public partial class FakeBigDecimalMap200Response :  IEquatable<FakeBigDecimalMap200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeBigDecimalMap200Response" /> class.
        /// </summary>
        /// <param name="someId">someId.</param>
        /// <param name="someMap">someMap.</param>
        public FakeBigDecimalMap200Response(decimal someId = default(decimal), Dictionary<string, decimal> someMap = default(Dictionary<string, decimal>))
        {
            this.SomeId = someId;
            this.SomeMap = someMap;
        }

        /// <summary>
        /// Gets or Sets SomeId
        /// </summary>
        [DataMember(Name="someId", EmitDefaultValue=false)]
        public decimal SomeId { get; set; }

        /// <summary>
        /// Gets or Sets SomeMap
        /// </summary>
        [DataMember(Name="someMap", EmitDefaultValue=false)]
        public Dictionary<string, decimal> SomeMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FakeBigDecimalMap200Response {\n");
            sb.Append("  SomeId: ").Append(SomeId).Append("\n");
            sb.Append("  SomeMap: ").Append(SomeMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FakeBigDecimalMap200Response);
        }

        /// <summary>
        /// Returns true if FakeBigDecimalMap200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of FakeBigDecimalMap200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FakeBigDecimalMap200Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SomeId == input.SomeId ||
                    (this.SomeId != null &&
                    this.SomeId.Equals(input.SomeId))
                ) && 
                (
                    this.SomeMap == input.SomeMap ||
                    this.SomeMap != null &&
                    input.SomeMap != null &&
                    this.SomeMap.SequenceEqual(input.SomeMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SomeId != null)
                    hashCode = hashCode * 59 + this.SomeId.GetHashCode();
                if (this.SomeMap != null)
                    hashCode = hashCode * 59 + this.SomeMap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
