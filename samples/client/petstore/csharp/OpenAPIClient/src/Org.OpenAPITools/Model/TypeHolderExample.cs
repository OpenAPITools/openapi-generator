/* 
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// a model to test required properties with an example and length one enum
    /// </summary>
    [DataContract]
    public partial class TypeHolderExample :  IEquatable<TypeHolderExample>, IValidatableObject
    {
        /// <summary>
        /// Defines StringItem
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StringItemEnum
        {
            /// <summary>
            /// Enum What for value: what
            /// </summary>
            [EnumMember(Value = "what")]
            What = 1

        }

        /// <summary>
        /// Gets or Sets StringItem
        /// </summary>
        [DataMember(Name="string_item", EmitDefaultValue=false)]
        public StringItemEnum StringItem { get; set; }
        /// <summary>
        /// Defines NumberItem
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NumberItemEnum
        {
            /// <summary>
            /// Enum NUMBER_1_DOT_2339999675750732 for value: 1.2339999675750732
            /// </summary>
            [EnumMember(Value = "1.2339999675750732")]
            NUMBER_1_DOT_2339999675750732 = 1

        }

        /// <summary>
        /// Gets or Sets NumberItem
        /// </summary>
        [DataMember(Name="number_item", EmitDefaultValue=false)]
        public NumberItemEnum NumberItem { get; set; }
        /// <summary>
        /// Defines IntegerItem
        /// </summary>
        public enum IntegerItemEnum
        {
            /// <summary>
            /// Enum NUMBER_MINUS_2 for value: -2
            /// </summary>
            NUMBER_MINUS_2 = -2

        }

        /// <summary>
        /// Gets or Sets IntegerItem
        /// </summary>
        [DataMember(Name="integer_item", EmitDefaultValue=false)]
        public IntegerItemEnum IntegerItem { get; set; }
        /// <summary>
        /// Defines DateItem
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DateItemEnum
        {
            /// <summary>
            /// Enum ThuJul20170000PDT2017 for value: Thu Jul 20 17:00:00 PDT 2017
            /// </summary>
            ThuJul20170000PDT2017 = Thu Jul 20 17:00:00 PDT 2017

        }

        /// <summary>
        /// Gets or Sets DateItem
        /// </summary>
        [DataMember(Name="date_item", EmitDefaultValue=false)]
        public DateItemEnum DateItem { get; set; }
        /// <summary>
        /// Defines DatetimeItem
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DatetimeItemEnum
        {
            /// <summary>
            /// Enum FriJul21103228PDT2017 for value: Fri Jul 21 10:32:28 PDT 2017
            /// </summary>
            FriJul21103228PDT2017 = Fri Jul 21 10:32:28 PDT 2017

        }

        /// <summary>
        /// Gets or Sets DatetimeItem
        /// </summary>
        [DataMember(Name="datetime_item", EmitDefaultValue=false)]
        public DatetimeItemEnum DatetimeItem { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeHolderExample" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TypeHolderExample() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeHolderExample" /> class.
        /// </summary>
        /// <param name="stringItem">stringItem (required).</param>
        /// <param name="numberItem">numberItem (required).</param>
        /// <param name="integerItem">integerItem (required).</param>
        /// <param name="boolItem">boolItem (required).</param>
        /// <param name="dateItem">dateItem (required).</param>
        /// <param name="datetimeItem">datetimeItem (required).</param>
        /// <param name="arrayItem">arrayItem (required).</param>
        public TypeHolderExample(StringItemEnum stringItem = default(StringItemEnum), NumberItemEnum numberItem = default(NumberItemEnum), IntegerItemEnum integerItem = default(IntegerItemEnum), bool? boolItem = default(bool?), DateItemEnum dateItem = default(DateItemEnum), DatetimeItemEnum datetimeItem = default(DatetimeItemEnum), List<int?> arrayItem = default(List<int?>))
        {
            // to ensure "stringItem" is required (not null)
            if (stringItem == null)
            {
                throw new InvalidDataException("stringItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.StringItem = stringItem;
            }
            // to ensure "numberItem" is required (not null)
            if (numberItem == null)
            {
                throw new InvalidDataException("numberItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.NumberItem = numberItem;
            }
            // to ensure "integerItem" is required (not null)
            if (integerItem == null)
            {
                throw new InvalidDataException("integerItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.IntegerItem = integerItem;
            }
            // to ensure "boolItem" is required (not null)
            if (boolItem == null)
            {
                throw new InvalidDataException("boolItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.BoolItem = boolItem;
            }
            // to ensure "dateItem" is required (not null)
            if (dateItem == null)
            {
                throw new InvalidDataException("dateItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.DateItem = dateItem;
            }
            // to ensure "datetimeItem" is required (not null)
            if (datetimeItem == null)
            {
                throw new InvalidDataException("datetimeItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.DatetimeItem = datetimeItem;
            }
            // to ensure "arrayItem" is required (not null)
            if (arrayItem == null)
            {
                throw new InvalidDataException("arrayItem is a required property for TypeHolderExample and cannot be null");
            }
            else
            {
                this.ArrayItem = arrayItem;
            }
        }
        



        /// <summary>
        /// Gets or Sets BoolItem
        /// </summary>
        [DataMember(Name="bool_item", EmitDefaultValue=false)]
        public bool? BoolItem { get; set; }



        /// <summary>
        /// Gets or Sets ArrayItem
        /// </summary>
        [DataMember(Name="array_item", EmitDefaultValue=false)]
        public List<int?> ArrayItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypeHolderExample {\n");
            sb.Append("  StringItem: ").Append(StringItem).Append("\n");
            sb.Append("  NumberItem: ").Append(NumberItem).Append("\n");
            sb.Append("  IntegerItem: ").Append(IntegerItem).Append("\n");
            sb.Append("  BoolItem: ").Append(BoolItem).Append("\n");
            sb.Append("  DateItem: ").Append(DateItem).Append("\n");
            sb.Append("  DatetimeItem: ").Append(DatetimeItem).Append("\n");
            sb.Append("  ArrayItem: ").Append(ArrayItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypeHolderExample);
        }

        /// <summary>
        /// Returns true if TypeHolderExample instances are equal
        /// </summary>
        /// <param name="input">Instance of TypeHolderExample to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypeHolderExample input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StringItem == input.StringItem ||
                    (this.StringItem != null &&
                    this.StringItem.Equals(input.StringItem))
                ) && 
                (
                    this.NumberItem == input.NumberItem ||
                    (this.NumberItem != null &&
                    this.NumberItem.Equals(input.NumberItem))
                ) && 
                (
                    this.IntegerItem == input.IntegerItem ||
                    (this.IntegerItem != null &&
                    this.IntegerItem.Equals(input.IntegerItem))
                ) && 
                (
                    this.BoolItem == input.BoolItem ||
                    (this.BoolItem != null &&
                    this.BoolItem.Equals(input.BoolItem))
                ) && 
                (
                    this.DateItem == input.DateItem ||
                    (this.DateItem != null &&
                    this.DateItem.Equals(input.DateItem))
                ) && 
                (
                    this.DatetimeItem == input.DatetimeItem ||
                    (this.DatetimeItem != null &&
                    this.DatetimeItem.Equals(input.DatetimeItem))
                ) && 
                (
                    this.ArrayItem == input.ArrayItem ||
                    this.ArrayItem != null &&
                    this.ArrayItem.SequenceEqual(input.ArrayItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StringItem != null)
                    hashCode = hashCode * 59 + this.StringItem.GetHashCode();
                if (this.NumberItem != null)
                    hashCode = hashCode * 59 + this.NumberItem.GetHashCode();
                if (this.IntegerItem != null)
                    hashCode = hashCode * 59 + this.IntegerItem.GetHashCode();
                if (this.BoolItem != null)
                    hashCode = hashCode * 59 + this.BoolItem.GetHashCode();
                if (this.DateItem != null)
                    hashCode = hashCode * 59 + this.DateItem.GetHashCode();
                if (this.DatetimeItem != null)
                    hashCode = hashCode * 59 + this.DatetimeItem.GetHashCode();
                if (this.ArrayItem != null)
                    hashCode = hashCode * 59 + this.ArrayItem.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
