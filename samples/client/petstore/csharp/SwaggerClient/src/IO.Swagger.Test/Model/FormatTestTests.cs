using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FormatTest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class FormatTestTests
    {
        private FormatTest instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
			instance = new FormatTest(Number: 123, _Byte: new byte[] { 0x20 }, Date: new DateTime(2015, 1, 18), Password: "xyz");
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FormatTest
        /// </summary>
        [Test]
        public void FormatTestInstanceTest()
        {
			Assert.IsInstanceOfType(typeof(FormatTest), instance, "instance is a FormatTest");
        }

        /// <summary>
        /// Test the property 'Integer'
        /// </summary>
        [Test]
        public void IntegerTest()
        {
            // TODO: unit test for the property 'Integer'
        }
        /// <summary>
        /// Test the property 'Int32'
        /// </summary>
        [Test]
        public void Int32Test()
        {
            // TODO: unit test for the property 'Int32'
        }
        /// <summary>
        /// Test the property 'Int64'
        /// </summary>
        [Test]
        public void Int64Test()
        {
            // TODO: unit test for the property 'Int64'
        }
        /// <summary>
        /// Test the property 'Number'
        /// </summary>
        [Test]
        public void NumberTest()
        {
            // TODO: unit test for the property 'Number'
        }
        /// <summary>
        /// Test the property '_Float'
        /// </summary>
        [Test]
        public void _FloatTest()
        {
            // TODO: unit test for the property '_Float'
        }
        /// <summary>
        /// Test the property '_Double'
        /// </summary>
        [Test]
        public void _DoubleTest()
        {
            // TODO: unit test for the property '_Double'
        }
        /// <summary>
        /// Test the property '_String'
        /// </summary>
        [Test]
        public void _StringTest()
        {
            // TODO: unit test for the property '_String'
        }
        /// <summary>
        /// Test the property '_Byte'
        /// </summary>
        [Test]
        public void _ByteTest()
        {
            // TODO: unit test for the property '_Byte'
        }
        /// <summary>
        /// Test the property 'Binary'
        /// </summary>
        [Test]
        public void BinaryTest()
        {
            // TODO: unit test for the property 'Binary'
        }
        /// <summary>
        /// Test the property 'Date'
        /// </summary>
        [Test]
        public void DateTest()
        {
            var item = new FormatTest(Integer: 1, 
                Int32: 1, 
                Int64: 1, 
                Number: 1, 
                _Float: 1.0f, 
                _Double: 1.0d, 
                _String: "", 
                _Byte: new byte[0], 
                Binary: null, 
                Date: new DateTime(year: 2000, month: 5, day: 13), 
                DateTime: null, 
                Uuid: null, 
                Password: "");

            var serialized = JsonConvert.SerializeObject(item);
            Console.WriteLine(serialized);
            Assert.Greater(serialized.IndexOf("\"2000-05-13\""), 0);
        }
        /// <summary>
        /// Test the property 'DateTime'
        /// </summary>
        [Test]
        public void DateTimeTest()
        {
            // TODO: unit test for the property 'DateTime'
        }
        /// <summary>
        /// Test the property 'Uuid'
        /// </summary>
        [Test]
        public void UuidTest()
        {
            // TODO: unit test for the property 'Uuid'
        }
        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Test]
        public void PasswordTest()
        {
            // TODO: unit test for the property 'Password'
        }

    }

}
