// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using UseSourceGeneration.Client;
using UseSourceGeneration.Api;
using UseSourceGeneration.Model;
using System.Diagnostics.CodeAnalysis;

namespace UseSourceGeneration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFakeApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FakeApiEvents Events { get; }

        /// <summary>
        /// Health check endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;HealthCheckResult&gt;&gt;</returns>
        Task<ApiResponse<HealthCheckResult>> FakeHealthGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Health check endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;HealthCheckResult&gt;?&gt;</returns>
        Task<ApiResponse<HealthCheckResult>?> FakeHealthGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer boolean types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;bool&gt;&gt;</returns>
        Task<ApiResponse<bool>> FakeOuterBooleanSerializeAsync(Option<bool> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer boolean types
        /// </remarks>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;bool&gt;?&gt;</returns>
        Task<ApiResponse<bool>?> FakeOuterBooleanSerializeOrDefaultAsync(Option<bool> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of object with outer number type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;OuterComposite&gt;&gt;</returns>
        Task<ApiResponse<OuterComposite>> FakeOuterCompositeSerializeAsync(Option<OuterComposite> outerComposite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of object with outer number type
        /// </remarks>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;OuterComposite&gt;?&gt;</returns>
        Task<ApiResponse<OuterComposite>?> FakeOuterCompositeSerializeOrDefaultAsync(Option<OuterComposite> outerComposite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer number types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;decimal&gt;&gt;</returns>
        Task<ApiResponse<decimal>> FakeOuterNumberSerializeAsync(Option<decimal> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer number types
        /// </remarks>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;decimal&gt;?&gt;</returns>
        Task<ApiResponse<decimal>?> FakeOuterNumberSerializeOrDefaultAsync(Option<decimal> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer string types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredStringUuid">Required UUID String</param>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> FakeOuterStringSerializeAsync(Guid requiredStringUuid, Option<string> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer string types
        /// </remarks>
        /// <param name="requiredStringUuid">Required UUID String</param>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> FakeOuterStringSerializeOrDefaultAsync(Guid requiredStringUuid, Option<string> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Array of Enums
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;OuterEnum&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<OuterEnum>>> GetArrayOfEnumsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Array of Enums
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;OuterEnum&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<OuterEnum>>?> GetArrayOfEnumsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestBodyWithFileSchemaAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </remarks>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestBodyWithFileSchemaOrDefaultAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestBodyWithQueryParamsAsync(User user, string query, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="user"></param>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestBodyWithQueryParamsOrDefaultAsync(User user, string query, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>
        /// To test \&quot;client\&quot; model
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ModelClient&gt;&gt;</returns>
        Task<ApiResponse<ModelClient>> TestClientModelAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>
        /// To test \&quot;client\&quot; model
        /// </remarks>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;ModelClient&gt;?&gt;</returns>
        Task<ApiResponse<ModelClient>?> TestClientModelOrDefaultAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="varByte">None</param>
        /// <param name="number">None</param>
        /// <param name="varDouble">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="date">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="varFloat">None (optional)</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="varString">None (optional)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestEndpointParametersAsync(byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date = default, Option<System.IO.Stream> binary = default, Option<float> varFloat = default, Option<int> integer = default, Option<int> int32 = default, Option<long> int64 = default, Option<string> varString = default, Option<string> password = default, Option<string> callback = default, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </remarks>
        /// <param name="varByte">None</param>
        /// <param name="number">None</param>
        /// <param name="varDouble">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="date">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="varFloat">None (optional)</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="varString">None (optional)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestEndpointParametersOrDefaultAsync(byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date = default, Option<System.IO.Stream> binary = default, Option<float> varFloat = default, Option<int> integer = default, Option<int> int32 = default, Option<long> int64 = default, Option<string> varString = default, Option<string> password = default, Option<string> callback = default, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>
        /// To test enum parameters
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestEnumParametersAsync(Option<List<string>> enumHeaderStringArray = default, Option<List<string>> enumQueryStringArray = default, Option<double> enumQueryDouble = default, Option<int> enumQueryInteger = default, Option<List<string>> enumFormStringArray = default, Option<string> enumHeaderString = default, Option<string> enumQueryString = default, Option<string> enumFormString = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>
        /// To test enum parameters
        /// </remarks>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestEnumParametersOrDefaultAsync(Option<List<string>> enumHeaderStringArray = default, Option<List<string>> enumQueryStringArray = default, Option<double> enumQueryDouble = default, Option<int> enumQueryInteger = default, Option<List<string>> enumFormStringArray = default, Option<string> enumHeaderString = default, Option<string> enumQueryString = default, Option<string> enumFormString = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <remarks>
        /// Fake endpoint to test group parameters (optional)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestGroupParametersAsync(bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup = default, Option<int> stringGroup = default, Option<long> int64Group = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <remarks>
        /// Fake endpoint to test group parameters (optional)
        /// </remarks>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestGroupParametersOrDefaultAsync(bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup = default, Option<int> stringGroup = default, Option<long> int64Group = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// test inline additionalProperties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestInlineAdditionalPropertiesAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// test inline additionalProperties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestInlineAdditionalPropertiesOrDefaultAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// test json serialization of form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestJsonFormDataAsync(string param, string param2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// test json serialization of form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestJsonFormDataOrDefaultAsync(string param, string param2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To test the collection format in query parameters
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"> (optional)</param>
        /// <param name="notRequiredNullable"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> TestQueryParameterCollectionFormatAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable = default, Option<string> notRequiredNotNullable = default, Option<string?> notRequiredNullable = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To test the collection format in query parameters
        /// </remarks>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"> (optional)</param>
        /// <param name="notRequiredNullable"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> TestQueryParameterCollectionFormatOrDefaultAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable = default, Option<string> notRequiredNotNullable = default, Option<string?> notRequiredNullable = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class FakeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<HealthCheckResult>>? OnFakeHealthGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFakeHealthGet;

        internal void ExecuteOnFakeHealthGet(FakeApi.FakeHealthGetResponse fakeHealthGetResponse)
        {
            OnFakeHealthGet?.Invoke(this, new ApiResponseEventArgs<FakeHealthGetResponse>(fakeHealthGetResponse));
        }

        internal void ExecuteOnErrorFakeHealthGet(Exception exception)
        {
            OnErrorFakeHealthGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<bool>>? OnFakeOuterBooleanSerialize;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFakeOuterBooleanSerialize;

        internal void ExecuteOnFakeOuterBooleanSerialize(FakeApi.FakeOuterBooleanSerializeResponse fakeOuterBooleanSerializeResponse)
        {
            OnFakeOuterBooleanSerialize?.Invoke(this, new ApiResponseEventArgs<FakeOuterBooleanSerializeResponse>(fakeOuterBooleanSerializeResponse));
        }

        internal void ExecuteOnErrorFakeOuterBooleanSerialize(Exception exception)
        {
            OnErrorFakeOuterBooleanSerialize?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<OuterComposite>>? OnFakeOuterCompositeSerialize;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFakeOuterCompositeSerialize;

        internal void ExecuteOnFakeOuterCompositeSerialize(FakeApi.FakeOuterCompositeSerializeResponse fakeOuterCompositeSerializeResponse)
        {
            OnFakeOuterCompositeSerialize?.Invoke(this, new ApiResponseEventArgs<FakeOuterCompositeSerializeResponse>(fakeOuterCompositeSerializeResponse));
        }

        internal void ExecuteOnErrorFakeOuterCompositeSerialize(Exception exception)
        {
            OnErrorFakeOuterCompositeSerialize?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<decimal>>? OnFakeOuterNumberSerialize;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFakeOuterNumberSerialize;

        internal void ExecuteOnFakeOuterNumberSerialize(FakeApi.FakeOuterNumberSerializeResponse fakeOuterNumberSerializeResponse)
        {
            OnFakeOuterNumberSerialize?.Invoke(this, new ApiResponseEventArgs<FakeOuterNumberSerializeResponse>(fakeOuterNumberSerializeResponse));
        }

        internal void ExecuteOnErrorFakeOuterNumberSerialize(Exception exception)
        {
            OnErrorFakeOuterNumberSerialize?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnFakeOuterStringSerialize;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFakeOuterStringSerialize;

        internal void ExecuteOnFakeOuterStringSerialize(FakeApi.FakeOuterStringSerializeResponse fakeOuterStringSerializeResponse)
        {
            OnFakeOuterStringSerialize?.Invoke(this, new ApiResponseEventArgs<FakeOuterStringSerializeResponse>(fakeOuterStringSerializeResponse));
        }

        internal void ExecuteOnErrorFakeOuterStringSerialize(Exception exception)
        {
            OnErrorFakeOuterStringSerialize?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<OuterEnum>>>? OnGetArrayOfEnums;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetArrayOfEnums;

        internal void ExecuteOnGetArrayOfEnums(FakeApi.GetArrayOfEnumsResponse getArrayOfEnumsResponse)
        {
            OnGetArrayOfEnums?.Invoke(this, new ApiResponseEventArgs<GetArrayOfEnumsResponse>(getArrayOfEnumsResponse));
        }

        internal void ExecuteOnErrorGetArrayOfEnums(Exception exception)
        {
            OnErrorGetArrayOfEnums?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestBodyWithFileSchema;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestBodyWithFileSchema;

        internal void ExecuteOnTestBodyWithFileSchema(FakeApi.TestBodyWithFileSchemaResponse testBodyWithFileSchemaResponse)
        {
            OnTestBodyWithFileSchema?.Invoke(this, new ApiResponseEventArgs<TestBodyWithFileSchemaResponse>(testBodyWithFileSchemaResponse));
        }

        internal void ExecuteOnErrorTestBodyWithFileSchema(Exception exception)
        {
            OnErrorTestBodyWithFileSchema?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestBodyWithQueryParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestBodyWithQueryParams;

        internal void ExecuteOnTestBodyWithQueryParams(FakeApi.TestBodyWithQueryParamsResponse testBodyWithQueryParamsResponse)
        {
            OnTestBodyWithQueryParams?.Invoke(this, new ApiResponseEventArgs<TestBodyWithQueryParamsResponse>(testBodyWithQueryParamsResponse));
        }

        internal void ExecuteOnErrorTestBodyWithQueryParams(Exception exception)
        {
            OnErrorTestBodyWithQueryParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<ModelClient>>? OnTestClientModel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestClientModel;

        internal void ExecuteOnTestClientModel(FakeApi.TestClientModelResponse testClientModelResponse)
        {
            OnTestClientModel?.Invoke(this, new ApiResponseEventArgs<TestClientModelResponse>(testClientModelResponse));
        }

        internal void ExecuteOnErrorTestClientModel(Exception exception)
        {
            OnErrorTestClientModel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestEndpointParameters;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestEndpointParameters;

        internal void ExecuteOnTestEndpointParameters(FakeApi.TestEndpointParametersResponse testEndpointParametersResponse)
        {
            OnTestEndpointParameters?.Invoke(this, new ApiResponseEventArgs<TestEndpointParametersResponse>(testEndpointParametersResponse));
        }

        internal void ExecuteOnErrorTestEndpointParameters(Exception exception)
        {
            OnErrorTestEndpointParameters?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestEnumParameters;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestEnumParameters;

        internal void ExecuteOnTestEnumParameters(FakeApi.TestEnumParametersResponse testEnumParametersResponse)
        {
            OnTestEnumParameters?.Invoke(this, new ApiResponseEventArgs<TestEnumParametersResponse>(testEnumParametersResponse));
        }

        internal void ExecuteOnErrorTestEnumParameters(Exception exception)
        {
            OnErrorTestEnumParameters?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestGroupParameters;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestGroupParameters;

        internal void ExecuteOnTestGroupParameters(FakeApi.TestGroupParametersResponse testGroupParametersResponse)
        {
            OnTestGroupParameters?.Invoke(this, new ApiResponseEventArgs<TestGroupParametersResponse>(testGroupParametersResponse));
        }

        internal void ExecuteOnErrorTestGroupParameters(Exception exception)
        {
            OnErrorTestGroupParameters?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestInlineAdditionalProperties;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestInlineAdditionalProperties;

        internal void ExecuteOnTestInlineAdditionalProperties(FakeApi.TestInlineAdditionalPropertiesResponse testInlineAdditionalPropertiesResponse)
        {
            OnTestInlineAdditionalProperties?.Invoke(this, new ApiResponseEventArgs<TestInlineAdditionalPropertiesResponse>(testInlineAdditionalPropertiesResponse));
        }

        internal void ExecuteOnErrorTestInlineAdditionalProperties(Exception exception)
        {
            OnErrorTestInlineAdditionalProperties?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestJsonFormData;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestJsonFormData;

        internal void ExecuteOnTestJsonFormData(FakeApi.TestJsonFormDataResponse testJsonFormDataResponse)
        {
            OnTestJsonFormData?.Invoke(this, new ApiResponseEventArgs<TestJsonFormDataResponse>(testJsonFormDataResponse));
        }

        internal void ExecuteOnErrorTestJsonFormData(Exception exception)
        {
            OnErrorTestJsonFormData?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnTestQueryParameterCollectionFormat;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTestQueryParameterCollectionFormat;

        internal void ExecuteOnTestQueryParameterCollectionFormat(FakeApi.TestQueryParameterCollectionFormatResponse testQueryParameterCollectionFormatResponse)
        {
            OnTestQueryParameterCollectionFormat?.Invoke(this, new ApiResponseEventArgs<TestQueryParameterCollectionFormatResponse>(testQueryParameterCollectionFormatResponse));
        }

        internal void ExecuteOnErrorTestQueryParameterCollectionFormat(Exception exception)
        {
            OnErrorTestQueryParameterCollectionFormat?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FakeApi : IFakeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        private HealthCheckResultDeserializationContext _healthCheckResultDeserializationContext;
        private OuterCompositeDeserializationContext _outerCompositeDeserializationContext;
        private ModelClientDeserializationContext _modelClientDeserializationContext;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FakeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FakeApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="HttpSignatureTokenProvider"/>
        /// </summary>
        public TokenProvider<HttpSignatureToken> HttpSignatureTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FakeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FakeApi(ILogger<FakeApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FakeApiEvents fakeApiEvents,
            HealthCheckResultDeserializationContext healthCheckResultDeserializationContext,
            OuterCompositeDeserializationContext outerCompositeDeserializationContext,
            ModelClientDeserializationContext modelClientDeserializationContext,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            _healthCheckResultDeserializationContext = healthCheckResultDeserializationContext;
            _outerCompositeDeserializationContext = outerCompositeDeserializationContext;
            _modelClientDeserializationContext = modelClientDeserializationContext;
            Logger = logger;
            HttpClient = httpClient;
            Events = fakeApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
            HttpSignatureTokenProvider = httpSignatureTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="fakeHealthGetResponseLocalVar"></param>
        private void AfterFakeHealthGetDefaultImplementation(FakeHealthGetResponse fakeHealthGetResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterFakeHealthGet(ref suppressDefaultLog, fakeHealthGetResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (fakeHealthGetResponseLocalVar.Content.DownloadedAt - fakeHealthGetResponseLocalVar.Content.RequestedAt).TotalSeconds, fakeHealthGetResponseLocalVar.Content.StatusCode, fakeHealthGetResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="fakeHealthGetResponseLocalVar"></param>
        partial void AfterFakeHealthGet(ref bool suppressDefaultLog, FakeHealthGetResponse fakeHealthGetResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorFakeHealthGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorFakeHealthGet(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorFakeHealthGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Health check endpoint 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="HealthCheckResult"/></returns>
        public async Task<ApiResponse<HealthCheckResult>?> FakeHealthGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FakeHealthGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Health check endpoint 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FakeHealthGetResponse"/>&gt;</returns>
        public async Task<FakeHealthGetResponse> FakeHealthGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/health";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/health", requestedAtLocalVar);

                        FakeHealthGetResponse responseLocalVar = new(apiResponseLocalVar, _healthCheckResultDeserializationContext);

                        AfterFakeHealthGetDefaultImplementation(responseLocalVar);

                        Events.ExecuteOnFakeHealthGet(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFakeHealthGetDefaultImplementation(e, "/fake/health", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorFakeHealthGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FakeHealthGetResponse"/>
        /// </summary>
        public partial class FakeHealthGetResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly HealthCheckResultDeserializationContext? _healthCheckResultDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FakeHealthGetResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="healthCheckResultDeserializationContext"></param>
            public FakeHealthGetResponse(UseSourceGeneration.Client.ApiResponse content,
                HealthCheckResultDeserializationContext healthCheckResultDeserializationContext)
            {
                _healthCheckResultDeserializationContext = healthCheckResultDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FakeHealthGetResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FakeHealthGetResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out HealthCheckResult? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _healthCheckResultDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<HealthCheckResult>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<HealthCheckResult>(Content.RawContent, _healthCheckResultDeserializationContext.HealthCheckResult);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out HealthCheckResult? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<HealthCheckResult>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatFakeOuterBooleanSerialize(ref Option<bool> body);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="fakeOuterBooleanSerializeResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterFakeOuterBooleanSerializeDefaultImplementation(FakeOuterBooleanSerializeResponse fakeOuterBooleanSerializeResponseLocalVar, Option<bool> body)
        {
            bool suppressDefaultLog = false;
            AfterFakeOuterBooleanSerialize(ref suppressDefaultLog, fakeOuterBooleanSerializeResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (fakeOuterBooleanSerializeResponseLocalVar.Content.DownloadedAt - fakeOuterBooleanSerializeResponseLocalVar.Content.RequestedAt).TotalSeconds, fakeOuterBooleanSerializeResponseLocalVar.Content.StatusCode, fakeOuterBooleanSerializeResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="fakeOuterBooleanSerializeResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterFakeOuterBooleanSerialize(ref bool suppressDefaultLog, FakeOuterBooleanSerializeResponse fakeOuterBooleanSerializeResponseLocalVar, Option<bool> body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="body"></param>
        private void OnErrorFakeOuterBooleanSerializeDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> body)
        {
            bool suppressDefaultLog = false;
            OnErrorFakeOuterBooleanSerialize(ref suppressDefaultLog, exception, pathFormat, path, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="body"></param>
        partial void OnErrorFakeOuterBooleanSerialize(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> body);

        /// <summary>
        ///  Test serialization of outer boolean types
        /// </summary>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="bool"/></returns>
        public async Task<ApiResponse<bool>?> FakeOuterBooleanSerializeOrDefaultAsync(Option<bool> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FakeOuterBooleanSerializeAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Test serialization of outer boolean types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FakeOuterBooleanSerializeResponse"/>&gt;</returns>
        public async Task<FakeOuterBooleanSerializeResponse> FakeOuterBooleanSerializeAsync(Option<bool> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatFakeOuterBooleanSerialize(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/outer/boolean";

                    if (body.IsSet)
                        httpRequestMessageLocalVar.Content = (body.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/outer/boolean", requestedAtLocalVar);

                        FakeOuterBooleanSerializeResponse responseLocalVar = new(apiResponseLocalVar, _varBoolDeserializationContext);

                        AfterFakeOuterBooleanSerializeDefaultImplementation(responseLocalVar, body);

                        Events.ExecuteOnFakeOuterBooleanSerialize(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFakeOuterBooleanSerializeDefaultImplementation(e, "/fake/outer/boolean", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorFakeOuterBooleanSerialize(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FakeOuterBooleanSerializeResponse"/>
        /// </summary>
        public partial class FakeOuterBooleanSerializeResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly boolDeserializationContext? _varBoolDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FakeOuterBooleanSerializeResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="varBoolDeserializationContext"></param>
            public FakeOuterBooleanSerializeResponse(UseSourceGeneration.Client.ApiResponse content,
                boolDeserializationContext varBoolDeserializationContext)
            {
                _varBoolDeserializationContext = varBoolDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FakeOuterBooleanSerializeResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FakeOuterBooleanSerializeResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out bool? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _varBoolDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<bool>(Content.RawContent, _varBoolDeserializationContext.bool);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out bool? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<bool>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatFakeOuterCompositeSerialize(Option<OuterComposite> outerComposite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="outerComposite"></param>
        /// <returns></returns>
        private void ValidateFakeOuterCompositeSerialize(Option<OuterComposite> outerComposite)
        {
            if (outerComposite.IsSet && outerComposite.Value == null)
                throw new ArgumentNullException(nameof(outerComposite));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="fakeOuterCompositeSerializeResponseLocalVar"></param>
        /// <param name="outerComposite"></param>
        private void AfterFakeOuterCompositeSerializeDefaultImplementation(FakeOuterCompositeSerializeResponse fakeOuterCompositeSerializeResponseLocalVar, Option<OuterComposite> outerComposite)
        {
            bool suppressDefaultLog = false;
            AfterFakeOuterCompositeSerialize(ref suppressDefaultLog, fakeOuterCompositeSerializeResponseLocalVar, outerComposite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (fakeOuterCompositeSerializeResponseLocalVar.Content.DownloadedAt - fakeOuterCompositeSerializeResponseLocalVar.Content.RequestedAt).TotalSeconds, fakeOuterCompositeSerializeResponseLocalVar.Content.StatusCode, fakeOuterCompositeSerializeResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="fakeOuterCompositeSerializeResponseLocalVar"></param>
        /// <param name="outerComposite"></param>
        partial void AfterFakeOuterCompositeSerialize(ref bool suppressDefaultLog, FakeOuterCompositeSerializeResponse fakeOuterCompositeSerializeResponseLocalVar, Option<OuterComposite> outerComposite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="outerComposite"></param>
        private void OnErrorFakeOuterCompositeSerializeDefaultImplementation(Exception exception, string pathFormat, string path, Option<OuterComposite> outerComposite)
        {
            bool suppressDefaultLog = false;
            OnErrorFakeOuterCompositeSerialize(ref suppressDefaultLog, exception, pathFormat, path, outerComposite);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="outerComposite"></param>
        partial void OnErrorFakeOuterCompositeSerialize(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<OuterComposite> outerComposite);

        /// <summary>
        ///  Test serialization of object with outer number type
        /// </summary>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="OuterComposite"/></returns>
        public async Task<ApiResponse<OuterComposite>?> FakeOuterCompositeSerializeOrDefaultAsync(Option<OuterComposite> outerComposite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FakeOuterCompositeSerializeAsync(outerComposite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Test serialization of object with outer number type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FakeOuterCompositeSerializeResponse"/>&gt;</returns>
        public async Task<FakeOuterCompositeSerializeResponse> FakeOuterCompositeSerializeAsync(Option<OuterComposite> outerComposite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFakeOuterCompositeSerialize(outerComposite);

                FormatFakeOuterCompositeSerialize(outerComposite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/outer/composite";

                    if (outerComposite.IsSet)
                        httpRequestMessageLocalVar.Content = (outerComposite.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(outerComposite.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/outer/composite", requestedAtLocalVar);

                        FakeOuterCompositeSerializeResponse responseLocalVar = new(apiResponseLocalVar, _outerCompositeDeserializationContext);

                        AfterFakeOuterCompositeSerializeDefaultImplementation(responseLocalVar, outerComposite);

                        Events.ExecuteOnFakeOuterCompositeSerialize(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFakeOuterCompositeSerializeDefaultImplementation(e, "/fake/outer/composite", uriBuilderLocalVar.Path, outerComposite);
                Events.ExecuteOnErrorFakeOuterCompositeSerialize(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FakeOuterCompositeSerializeResponse"/>
        /// </summary>
        public partial class FakeOuterCompositeSerializeResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly OuterCompositeDeserializationContext? _outerCompositeDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FakeOuterCompositeSerializeResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="outerCompositeDeserializationContext"></param>
            public FakeOuterCompositeSerializeResponse(UseSourceGeneration.Client.ApiResponse content,
                OuterCompositeDeserializationContext outerCompositeDeserializationContext)
            {
                _outerCompositeDeserializationContext = outerCompositeDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FakeOuterCompositeSerializeResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FakeOuterCompositeSerializeResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out OuterComposite? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _outerCompositeDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<OuterComposite>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<OuterComposite>(Content.RawContent, _outerCompositeDeserializationContext.OuterComposite);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out OuterComposite? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<OuterComposite>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatFakeOuterNumberSerialize(ref Option<decimal> body);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="fakeOuterNumberSerializeResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterFakeOuterNumberSerializeDefaultImplementation(FakeOuterNumberSerializeResponse fakeOuterNumberSerializeResponseLocalVar, Option<decimal> body)
        {
            bool suppressDefaultLog = false;
            AfterFakeOuterNumberSerialize(ref suppressDefaultLog, fakeOuterNumberSerializeResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (fakeOuterNumberSerializeResponseLocalVar.Content.DownloadedAt - fakeOuterNumberSerializeResponseLocalVar.Content.RequestedAt).TotalSeconds, fakeOuterNumberSerializeResponseLocalVar.Content.StatusCode, fakeOuterNumberSerializeResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="fakeOuterNumberSerializeResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterFakeOuterNumberSerialize(ref bool suppressDefaultLog, FakeOuterNumberSerializeResponse fakeOuterNumberSerializeResponseLocalVar, Option<decimal> body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="body"></param>
        private void OnErrorFakeOuterNumberSerializeDefaultImplementation(Exception exception, string pathFormat, string path, Option<decimal> body)
        {
            bool suppressDefaultLog = false;
            OnErrorFakeOuterNumberSerialize(ref suppressDefaultLog, exception, pathFormat, path, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="body"></param>
        partial void OnErrorFakeOuterNumberSerialize(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<decimal> body);

        /// <summary>
        ///  Test serialization of outer number types
        /// </summary>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="decimal"/></returns>
        public async Task<ApiResponse<decimal>?> FakeOuterNumberSerializeOrDefaultAsync(Option<decimal> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FakeOuterNumberSerializeAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Test serialization of outer number types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FakeOuterNumberSerializeResponse"/>&gt;</returns>
        public async Task<FakeOuterNumberSerializeResponse> FakeOuterNumberSerializeAsync(Option<decimal> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatFakeOuterNumberSerialize(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/outer/number";

                    if (body.IsSet)
                        httpRequestMessageLocalVar.Content = (body.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/outer/number", requestedAtLocalVar);

                        FakeOuterNumberSerializeResponse responseLocalVar = new(apiResponseLocalVar, _varDecimalDeserializationContext);

                        AfterFakeOuterNumberSerializeDefaultImplementation(responseLocalVar, body);

                        Events.ExecuteOnFakeOuterNumberSerialize(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFakeOuterNumberSerializeDefaultImplementation(e, "/fake/outer/number", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorFakeOuterNumberSerialize(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FakeOuterNumberSerializeResponse"/>
        /// </summary>
        public partial class FakeOuterNumberSerializeResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly decimalDeserializationContext? _varDecimalDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FakeOuterNumberSerializeResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="varDecimalDeserializationContext"></param>
            public FakeOuterNumberSerializeResponse(UseSourceGeneration.Client.ApiResponse content,
                decimalDeserializationContext varDecimalDeserializationContext)
            {
                _varDecimalDeserializationContext = varDecimalDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FakeOuterNumberSerializeResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FakeOuterNumberSerializeResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out decimal? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _varDecimalDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<decimal>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<decimal>(Content.RawContent, _varDecimalDeserializationContext.decimal);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out decimal? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<decimal>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatFakeOuterStringSerialize(ref Guid requiredStringUuid, ref Option<string> body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateFakeOuterStringSerialize(Option<string> body)
        {
            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="fakeOuterStringSerializeResponseLocalVar"></param>
        /// <param name="requiredStringUuid"></param>
        /// <param name="body"></param>
        private void AfterFakeOuterStringSerializeDefaultImplementation(FakeOuterStringSerializeResponse fakeOuterStringSerializeResponseLocalVar, Guid requiredStringUuid, Option<string> body)
        {
            bool suppressDefaultLog = false;
            AfterFakeOuterStringSerialize(ref suppressDefaultLog, fakeOuterStringSerializeResponseLocalVar, requiredStringUuid, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (fakeOuterStringSerializeResponseLocalVar.Content.DownloadedAt - fakeOuterStringSerializeResponseLocalVar.Content.RequestedAt).TotalSeconds, fakeOuterStringSerializeResponseLocalVar.Content.StatusCode, fakeOuterStringSerializeResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="fakeOuterStringSerializeResponseLocalVar"></param>
        /// <param name="requiredStringUuid"></param>
        /// <param name="body"></param>
        partial void AfterFakeOuterStringSerialize(ref bool suppressDefaultLog, FakeOuterStringSerializeResponse fakeOuterStringSerializeResponseLocalVar, Guid requiredStringUuid, Option<string> body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requiredStringUuid"></param>
        /// <param name="body"></param>
        private void OnErrorFakeOuterStringSerializeDefaultImplementation(Exception exception, string pathFormat, string path, Guid requiredStringUuid, Option<string> body)
        {
            bool suppressDefaultLog = false;
            OnErrorFakeOuterStringSerialize(ref suppressDefaultLog, exception, pathFormat, path, requiredStringUuid, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requiredStringUuid"></param>
        /// <param name="body"></param>
        partial void OnErrorFakeOuterStringSerialize(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid requiredStringUuid, Option<string> body);

        /// <summary>
        ///  Test serialization of outer string types
        /// </summary>
        /// <param name="requiredStringUuid">Required UUID String</param>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> FakeOuterStringSerializeOrDefaultAsync(Guid requiredStringUuid, Option<string> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FakeOuterStringSerializeAsync(requiredStringUuid, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Test serialization of outer string types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredStringUuid">Required UUID String</param>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FakeOuterStringSerializeResponse"/>&gt;</returns>
        public async Task<FakeOuterStringSerializeResponse> FakeOuterStringSerializeAsync(Guid requiredStringUuid, Option<string> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFakeOuterStringSerialize(body);

                FormatFakeOuterStringSerialize(ref requiredStringUuid, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/outer/string";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["required_string_uuid"] = requiredStringUuid.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (body.IsSet)
                        httpRequestMessageLocalVar.Content = (body.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/outer/string", requestedAtLocalVar);

                        FakeOuterStringSerializeResponse responseLocalVar = new(apiResponseLocalVar, _varStringDeserializationContext);

                        AfterFakeOuterStringSerializeDefaultImplementation(responseLocalVar, requiredStringUuid, body);

                        Events.ExecuteOnFakeOuterStringSerialize(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFakeOuterStringSerializeDefaultImplementation(e, "/fake/outer/string", uriBuilderLocalVar.Path, requiredStringUuid, body);
                Events.ExecuteOnErrorFakeOuterStringSerialize(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FakeOuterStringSerializeResponse"/>
        /// </summary>
        public partial class FakeOuterStringSerializeResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly stringDeserializationContext? _varStringDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FakeOuterStringSerializeResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="varStringDeserializationContext"></param>
            public FakeOuterStringSerializeResponse(UseSourceGeneration.Client.ApiResponse content,
                stringDeserializationContext varStringDeserializationContext)
            {
                _varStringDeserializationContext = varStringDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FakeOuterStringSerializeResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FakeOuterStringSerializeResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out string? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _varStringDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<string>(Content.RawContent, _varStringDeserializationContext.string);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out string? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<string>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="getArrayOfEnumsResponseLocalVar"></param>
        private void AfterGetArrayOfEnumsDefaultImplementation(GetArrayOfEnumsResponse getArrayOfEnumsResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetArrayOfEnums(ref suppressDefaultLog, getArrayOfEnumsResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (getArrayOfEnumsResponseLocalVar.Content.DownloadedAt - getArrayOfEnumsResponseLocalVar.Content.RequestedAt).TotalSeconds, getArrayOfEnumsResponseLocalVar.Content.StatusCode, getArrayOfEnumsResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="getArrayOfEnumsResponseLocalVar"></param>
        partial void AfterGetArrayOfEnums(ref bool suppressDefaultLog, GetArrayOfEnumsResponse getArrayOfEnumsResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetArrayOfEnumsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetArrayOfEnums(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetArrayOfEnums(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Array of Enums 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<OuterEnum>>?> GetArrayOfEnumsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetArrayOfEnumsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Array of Enums 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetArrayOfEnumsResponse"/>&gt;</returns>
        public async Task<GetArrayOfEnumsResponse> GetArrayOfEnumsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/array-of-enums";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/array-of-enums", requestedAtLocalVar);

                        GetArrayOfEnumsResponse responseLocalVar = new(apiResponseLocalVar, _listltOuterEnumgtDeserializationContext);

                        AfterGetArrayOfEnumsDefaultImplementation(responseLocalVar);

                        Events.ExecuteOnGetArrayOfEnums(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetArrayOfEnumsDefaultImplementation(e, "/fake/array-of-enums", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetArrayOfEnums(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetArrayOfEnumsResponse"/>
        /// </summary>
        public partial class GetArrayOfEnumsResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly List&lt;OuterEnum&gt;DeserializationContext? _listltOuterEnumgtDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="GetArrayOfEnumsResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="listltOuterEnumgtDeserializationContext"></param>
            public GetArrayOfEnumsResponse(UseSourceGeneration.Client.ApiResponse content,
                List&lt;OuterEnum&gt;DeserializationContext listltOuterEnumgtDeserializationContext)
            {
                _listltOuterEnumgtDeserializationContext = listltOuterEnumgtDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="GetArrayOfEnumsResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public GetArrayOfEnumsResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out List<OuterEnum>? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _listltOuterEnumgtDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<List&lt;OuterEnum&gt;>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<List&lt;OuterEnum&gt;>(Content.RawContent, _listltOuterEnumgtDeserializationContext.List&lt;OuterEnum&gt;);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out List<OuterEnum>? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<List<OuterEnum>>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatTestBodyWithFileSchema(FileSchemaTestClass fileSchemaTestClass);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fileSchemaTestClass"></param>
        /// <returns></returns>
        private void ValidateTestBodyWithFileSchema(FileSchemaTestClass fileSchemaTestClass)
        {
            if (fileSchemaTestClass == null)
                throw new ArgumentNullException(nameof(fileSchemaTestClass));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testBodyWithFileSchemaResponseLocalVar"></param>
        /// <param name="fileSchemaTestClass"></param>
        private void AfterTestBodyWithFileSchemaDefaultImplementation(TestBodyWithFileSchemaResponse testBodyWithFileSchemaResponseLocalVar, FileSchemaTestClass fileSchemaTestClass)
        {
            bool suppressDefaultLog = false;
            AfterTestBodyWithFileSchema(ref suppressDefaultLog, testBodyWithFileSchemaResponseLocalVar, fileSchemaTestClass);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testBodyWithFileSchemaResponseLocalVar.Content.DownloadedAt - testBodyWithFileSchemaResponseLocalVar.Content.RequestedAt).TotalSeconds, testBodyWithFileSchemaResponseLocalVar.Content.StatusCode, testBodyWithFileSchemaResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testBodyWithFileSchemaResponseLocalVar"></param>
        /// <param name="fileSchemaTestClass"></param>
        partial void AfterTestBodyWithFileSchema(ref bool suppressDefaultLog, TestBodyWithFileSchemaResponse testBodyWithFileSchemaResponseLocalVar, FileSchemaTestClass fileSchemaTestClass);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileSchemaTestClass"></param>
        private void OnErrorTestBodyWithFileSchemaDefaultImplementation(Exception exception, string pathFormat, string path, FileSchemaTestClass fileSchemaTestClass)
        {
            bool suppressDefaultLog = false;
            OnErrorTestBodyWithFileSchema(ref suppressDefaultLog, exception, pathFormat, path, fileSchemaTestClass);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileSchemaTestClass"></param>
        partial void OnErrorTestBodyWithFileSchema(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, FileSchemaTestClass fileSchemaTestClass);

        /// <summary>
        ///  For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </summary>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestBodyWithFileSchemaOrDefaultAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestBodyWithFileSchemaAsync(fileSchemaTestClass, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestBodyWithFileSchemaResponse"/>&gt;</returns>
        public async Task<TestBodyWithFileSchemaResponse> TestBodyWithFileSchemaAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestBodyWithFileSchema(fileSchemaTestClass);

                FormatTestBodyWithFileSchema(fileSchemaTestClass);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/body-with-file-schema";

                    httpRequestMessageLocalVar.Content = (fileSchemaTestClass as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(fileSchemaTestClass, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/body-with-file-schema", requestedAtLocalVar);

                        TestBodyWithFileSchemaResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterTestBodyWithFileSchemaDefaultImplementation(responseLocalVar, fileSchemaTestClass);

                        Events.ExecuteOnTestBodyWithFileSchema(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestBodyWithFileSchemaDefaultImplementation(e, "/fake/body-with-file-schema", uriBuilderLocalVar.Path, fileSchemaTestClass);
                Events.ExecuteOnErrorTestBodyWithFileSchema(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestBodyWithFileSchemaResponse"/>
        /// </summary>
        public partial class TestBodyWithFileSchemaResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestBodyWithFileSchemaResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public TestBodyWithFileSchemaResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestBodyWithFileSchemaResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestBodyWithFileSchemaResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;
        }

        partial void FormatTestBodyWithQueryParams(User user, ref string query);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <param name="query"></param>
        /// <returns></returns>
        private void ValidateTestBodyWithQueryParams(User user, string query)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));

            if (query == null)
                throw new ArgumentNullException(nameof(query));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testBodyWithQueryParamsResponseLocalVar"></param>
        /// <param name="user"></param>
        /// <param name="query"></param>
        private void AfterTestBodyWithQueryParamsDefaultImplementation(TestBodyWithQueryParamsResponse testBodyWithQueryParamsResponseLocalVar, User user, string query)
        {
            bool suppressDefaultLog = false;
            AfterTestBodyWithQueryParams(ref suppressDefaultLog, testBodyWithQueryParamsResponseLocalVar, user, query);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testBodyWithQueryParamsResponseLocalVar.Content.DownloadedAt - testBodyWithQueryParamsResponseLocalVar.Content.RequestedAt).TotalSeconds, testBodyWithQueryParamsResponseLocalVar.Content.StatusCode, testBodyWithQueryParamsResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testBodyWithQueryParamsResponseLocalVar"></param>
        /// <param name="user"></param>
        /// <param name="query"></param>
        partial void AfterTestBodyWithQueryParams(ref bool suppressDefaultLog, TestBodyWithQueryParamsResponse testBodyWithQueryParamsResponseLocalVar, User user, string query);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        /// <param name="query"></param>
        private void OnErrorTestBodyWithQueryParamsDefaultImplementation(Exception exception, string pathFormat, string path, User user, string query)
        {
            bool suppressDefaultLog = false;
            OnErrorTestBodyWithQueryParams(ref suppressDefaultLog, exception, pathFormat, path, user, query);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        /// <param name="query"></param>
        partial void OnErrorTestBodyWithQueryParams(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, User user, string query);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="user"></param>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestBodyWithQueryParamsOrDefaultAsync(User user, string query, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestBodyWithQueryParamsAsync(user, query, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestBodyWithQueryParamsResponse"/>&gt;</returns>
        public async Task<TestBodyWithQueryParamsResponse> TestBodyWithQueryParamsAsync(User user, string query, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestBodyWithQueryParams(user, query);

                FormatTestBodyWithQueryParams(user, ref query);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/body-with-query-params";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = query.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (user as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(user, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/body-with-query-params", requestedAtLocalVar);

                        TestBodyWithQueryParamsResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterTestBodyWithQueryParamsDefaultImplementation(responseLocalVar, user, query);

                        Events.ExecuteOnTestBodyWithQueryParams(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestBodyWithQueryParamsDefaultImplementation(e, "/fake/body-with-query-params", uriBuilderLocalVar.Path, user, query);
                Events.ExecuteOnErrorTestBodyWithQueryParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestBodyWithQueryParamsResponse"/>
        /// </summary>
        public partial class TestBodyWithQueryParamsResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestBodyWithQueryParamsResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public TestBodyWithQueryParamsResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestBodyWithQueryParamsResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestBodyWithQueryParamsResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;
        }

        partial void FormatTestClientModel(ModelClient modelClient);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelClient"></param>
        /// <returns></returns>
        private void ValidateTestClientModel(ModelClient modelClient)
        {
            if (modelClient == null)
                throw new ArgumentNullException(nameof(modelClient));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testClientModelResponseLocalVar"></param>
        /// <param name="modelClient"></param>
        private void AfterTestClientModelDefaultImplementation(TestClientModelResponse testClientModelResponseLocalVar, ModelClient modelClient)
        {
            bool suppressDefaultLog = false;
            AfterTestClientModel(ref suppressDefaultLog, testClientModelResponseLocalVar, modelClient);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testClientModelResponseLocalVar.Content.DownloadedAt - testClientModelResponseLocalVar.Content.RequestedAt).TotalSeconds, testClientModelResponseLocalVar.Content.StatusCode, testClientModelResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testClientModelResponseLocalVar"></param>
        /// <param name="modelClient"></param>
        partial void AfterTestClientModel(ref bool suppressDefaultLog, TestClientModelResponse testClientModelResponseLocalVar, ModelClient modelClient);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="modelClient"></param>
        private void OnErrorTestClientModelDefaultImplementation(Exception exception, string pathFormat, string path, ModelClient modelClient)
        {
            bool suppressDefaultLog = false;
            OnErrorTestClientModel(ref suppressDefaultLog, exception, pathFormat, path, modelClient);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="modelClient"></param>
        partial void OnErrorTestClientModel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, ModelClient modelClient);

        /// <summary>
        /// To test \&quot;client\&quot; model To test \&quot;client\&quot; model
        /// </summary>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ModelClient"/></returns>
        public async Task<ApiResponse<ModelClient>?> TestClientModelOrDefaultAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestClientModelAsync(modelClient, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// To test \&quot;client\&quot; model To test \&quot;client\&quot; model
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestClientModelResponse"/>&gt;</returns>
        public async Task<TestClientModelResponse> TestClientModelAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestClientModel(modelClient);

                FormatTestClientModel(modelClient);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake";

                    httpRequestMessageLocalVar.Content = (modelClient as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelClient, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake", requestedAtLocalVar);

                        TestClientModelResponse responseLocalVar = new(apiResponseLocalVar, _modelClientDeserializationContext);

                        AfterTestClientModelDefaultImplementation(responseLocalVar, modelClient);

                        Events.ExecuteOnTestClientModel(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestClientModelDefaultImplementation(e, "/fake", uriBuilderLocalVar.Path, modelClient);
                Events.ExecuteOnErrorTestClientModel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestClientModelResponse"/>
        /// </summary>
        public partial class TestClientModelResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly ModelClientDeserializationContext? _modelClientDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestClientModelResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="modelClientDeserializationContext"></param>
            public TestClientModelResponse(UseSourceGeneration.Client.ApiResponse content,
                ModelClientDeserializationContext modelClientDeserializationContext)
            {
                _modelClientDeserializationContext = modelClientDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestClientModelResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestClientModelResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out ModelClient? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _modelClientDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<ModelClient>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<ModelClient>(Content.RawContent, _modelClientDeserializationContext.ModelClient);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out ModelClient? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<ModelClient>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatTestEndpointParameters(ref byte[] varByte, ref decimal number, ref double varDouble, ref string patternWithoutDelimiter, ref Option<DateTime> date, ref Option<System.IO.Stream> binary, ref Option<float> varFloat, ref Option<int> integer, ref Option<int> int32, ref Option<long> int64, ref Option<string> varString, ref Option<string> password, ref Option<string> callback, ref Option<DateTime> dateTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="varByte"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="binary"></param>
        /// <param name="varString"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <returns></returns>
        private void ValidateTestEndpointParameters(byte[] varByte, string patternWithoutDelimiter, Option<System.IO.Stream> binary, Option<string> varString, Option<string> password, Option<string> callback)
        {
            if (varByte == null)
                throw new ArgumentNullException(nameof(varByte));

            if (patternWithoutDelimiter == null)
                throw new ArgumentNullException(nameof(patternWithoutDelimiter));

            if (binary.IsSet && binary.Value == null)
                throw new ArgumentNullException(nameof(binary));

            if (varString.IsSet && varString.Value == null)
                throw new ArgumentNullException(nameof(varString));

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password));

            if (callback.IsSet && callback.Value == null)
                throw new ArgumentNullException(nameof(callback));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testEndpointParametersResponseLocalVar"></param>
        /// <param name="varByte"></param>
        /// <param name="number"></param>
        /// <param name="varDouble"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="date"></param>
        /// <param name="binary"></param>
        /// <param name="varFloat"></param>
        /// <param name="integer"></param>
        /// <param name="int32"></param>
        /// <param name="int64"></param>
        /// <param name="varString"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <param name="dateTime"></param>
        private void AfterTestEndpointParametersDefaultImplementation(TestEndpointParametersResponse testEndpointParametersResponseLocalVar, byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date, Option<System.IO.Stream> binary, Option<float> varFloat, Option<int> integer, Option<int> int32, Option<long> int64, Option<string> varString, Option<string> password, Option<string> callback, Option<DateTime> dateTime)
        {
            bool suppressDefaultLog = false;
            AfterTestEndpointParameters(ref suppressDefaultLog, testEndpointParametersResponseLocalVar, varByte, number, varDouble, patternWithoutDelimiter, date, binary, varFloat, integer, int32, int64, varString, password, callback, dateTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testEndpointParametersResponseLocalVar.Content.DownloadedAt - testEndpointParametersResponseLocalVar.Content.RequestedAt).TotalSeconds, testEndpointParametersResponseLocalVar.Content.StatusCode, testEndpointParametersResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testEndpointParametersResponseLocalVar"></param>
        /// <param name="varByte"></param>
        /// <param name="number"></param>
        /// <param name="varDouble"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="date"></param>
        /// <param name="binary"></param>
        /// <param name="varFloat"></param>
        /// <param name="integer"></param>
        /// <param name="int32"></param>
        /// <param name="int64"></param>
        /// <param name="varString"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <param name="dateTime"></param>
        partial void AfterTestEndpointParameters(ref bool suppressDefaultLog, TestEndpointParametersResponse testEndpointParametersResponseLocalVar, byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date, Option<System.IO.Stream> binary, Option<float> varFloat, Option<int> integer, Option<int> int32, Option<long> int64, Option<string> varString, Option<string> password, Option<string> callback, Option<DateTime> dateTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="varByte"></param>
        /// <param name="number"></param>
        /// <param name="varDouble"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="date"></param>
        /// <param name="binary"></param>
        /// <param name="varFloat"></param>
        /// <param name="integer"></param>
        /// <param name="int32"></param>
        /// <param name="int64"></param>
        /// <param name="varString"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <param name="dateTime"></param>
        private void OnErrorTestEndpointParametersDefaultImplementation(Exception exception, string pathFormat, string path, byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date, Option<System.IO.Stream> binary, Option<float> varFloat, Option<int> integer, Option<int> int32, Option<long> int64, Option<string> varString, Option<string> password, Option<string> callback, Option<DateTime> dateTime)
        {
            bool suppressDefaultLog = false;
            OnErrorTestEndpointParameters(ref suppressDefaultLog, exception, pathFormat, path, varByte, number, varDouble, patternWithoutDelimiter, date, binary, varFloat, integer, int32, int64, varString, password, callback, dateTime);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="varByte"></param>
        /// <param name="number"></param>
        /// <param name="varDouble"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="date"></param>
        /// <param name="binary"></param>
        /// <param name="varFloat"></param>
        /// <param name="integer"></param>
        /// <param name="int32"></param>
        /// <param name="int64"></param>
        /// <param name="varString"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <param name="dateTime"></param>
        partial void OnErrorTestEndpointParameters(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date, Option<System.IO.Stream> binary, Option<float> varFloat, Option<int> integer, Option<int> int32, Option<long> int64, Option<string> varString, Option<string> password, Option<string> callback, Option<DateTime> dateTime);

        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트  Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <param name="varByte">None</param>
        /// <param name="number">None</param>
        /// <param name="varDouble">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="date">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="varFloat">None (optional)</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="varString">None (optional)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestEndpointParametersOrDefaultAsync(byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date = default, Option<System.IO.Stream> binary = default, Option<float> varFloat = default, Option<int> integer = default, Option<int> int32 = default, Option<long> int64 = default, Option<string> varString = default, Option<string> password = default, Option<string> callback = default, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestEndpointParametersAsync(varByte, number, varDouble, patternWithoutDelimiter, date, binary, varFloat, integer, int32, int64, varString, password, callback, dateTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트  Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="varByte">None</param>
        /// <param name="number">None</param>
        /// <param name="varDouble">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="date">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="varFloat">None (optional)</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="varString">None (optional)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestEndpointParametersResponse"/>&gt;</returns>
        public async Task<TestEndpointParametersResponse> TestEndpointParametersAsync(byte[] varByte, decimal number, double varDouble, string patternWithoutDelimiter, Option<DateTime> date = default, Option<System.IO.Stream> binary = default, Option<float> varFloat = default, Option<int> integer = default, Option<int> int32 = default, Option<long> int64 = default, Option<string> varString = default, Option<string> password = default, Option<string> callback = default, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestEndpointParameters(varByte, patternWithoutDelimiter, binary, varString, password, callback);

                FormatTestEndpointParameters(ref varByte, ref number, ref varDouble, ref patternWithoutDelimiter, ref date, ref binary, ref varFloat, ref integer, ref int32, ref int64, ref varString, ref password, ref callback, ref dateTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("byte", ClientUtils.ParameterToString(varByte)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("number", ClientUtils.ParameterToString(number)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("double", ClientUtils.ParameterToString(varDouble)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("pattern_without_delimiter", ClientUtils.ParameterToString(patternWithoutDelimiter)));

                    if (date.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("date", ClientUtils.ParameterToString(date.Value)));

                    if (binary.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(binary.Value));

                    if (varFloat.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("float", ClientUtils.ParameterToString(varFloat.Value)));

                    if (integer.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("integer", ClientUtils.ParameterToString(integer.Value)));

                    if (int32.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("int32", ClientUtils.ParameterToString(int32.Value)));

                    if (int64.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("int64", ClientUtils.ParameterToString(int64.Value)));

                    if (varString.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("string", ClientUtils.ParameterToString(varString.Value)));

                    if (password.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("password", ClientUtils.ParameterToString(password.Value)));

                    if (callback.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("callback", ClientUtils.ParameterToString(callback.Value)));

                    if (dateTime.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("dateTime", ClientUtils.ParameterToString(dateTime.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake", requestedAtLocalVar);

                        TestEndpointParametersResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext_DeserializationContext);

                        AfterTestEndpointParametersDefaultImplementation(responseLocalVar, varByte, number, varDouble, patternWithoutDelimiter, date, binary, varFloat, integer, int32, int64, varString, password, callback, dateTime);

                        Events.ExecuteOnTestEndpointParameters(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestEndpointParametersDefaultImplementation(e, "/fake", uriBuilderLocalVar.Path, varByte, number, varDouble, patternWithoutDelimiter, date, binary, varFloat, integer, int32, int64, varString, password, callback, dateTime);
                Events.ExecuteOnErrorTestEndpointParameters(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestEndpointParametersResponse"/>
        /// </summary>
        public partial class TestEndpointParametersResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestEndpointParametersResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public TestEndpointParametersResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestEndpointParametersResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestEndpointParametersResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        partial void FormatTestEnumParameters(Option<List<string>> enumHeaderStringArray, Option<List<string>> enumQueryStringArray, ref Option<double> enumQueryDouble, ref Option<int> enumQueryInteger, Option<List<string>> enumFormStringArray, ref Option<string> enumHeaderString, ref Option<string> enumQueryString, ref Option<string> enumFormString);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        /// <returns></returns>
        private void ValidateTestEnumParameters(Option<List<string>> enumHeaderStringArray, Option<List<string>> enumQueryStringArray, Option<List<string>> enumFormStringArray, Option<string> enumHeaderString, Option<string> enumQueryString, Option<string> enumFormString)
        {
            if (enumHeaderStringArray.IsSet && enumHeaderStringArray.Value == null)
                throw new ArgumentNullException(nameof(enumHeaderStringArray));

            if (enumQueryStringArray.IsSet && enumQueryStringArray.Value == null)
                throw new ArgumentNullException(nameof(enumQueryStringArray));

            if (enumFormStringArray.IsSet && enumFormStringArray.Value == null)
                throw new ArgumentNullException(nameof(enumFormStringArray));

            if (enumHeaderString.IsSet && enumHeaderString.Value == null)
                throw new ArgumentNullException(nameof(enumHeaderString));

            if (enumQueryString.IsSet && enumQueryString.Value == null)
                throw new ArgumentNullException(nameof(enumQueryString));

            if (enumFormString.IsSet && enumFormString.Value == null)
                throw new ArgumentNullException(nameof(enumFormString));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testEnumParametersResponseLocalVar"></param>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumQueryDouble"></param>
        /// <param name="enumQueryInteger"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        private void AfterTestEnumParametersDefaultImplementation(TestEnumParametersResponse testEnumParametersResponseLocalVar, Option<List<string>> enumHeaderStringArray, Option<List<string>> enumQueryStringArray, Option<double> enumQueryDouble, Option<int> enumQueryInteger, Option<List<string>> enumFormStringArray, Option<string> enumHeaderString, Option<string> enumQueryString, Option<string> enumFormString)
        {
            bool suppressDefaultLog = false;
            AfterTestEnumParameters(ref suppressDefaultLog, testEnumParametersResponseLocalVar, enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testEnumParametersResponseLocalVar.Content.DownloadedAt - testEnumParametersResponseLocalVar.Content.RequestedAt).TotalSeconds, testEnumParametersResponseLocalVar.Content.StatusCode, testEnumParametersResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testEnumParametersResponseLocalVar"></param>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumQueryDouble"></param>
        /// <param name="enumQueryInteger"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        partial void AfterTestEnumParameters(ref bool suppressDefaultLog, TestEnumParametersResponse testEnumParametersResponseLocalVar, Option<List<string>> enumHeaderStringArray, Option<List<string>> enumQueryStringArray, Option<double> enumQueryDouble, Option<int> enumQueryInteger, Option<List<string>> enumFormStringArray, Option<string> enumHeaderString, Option<string> enumQueryString, Option<string> enumFormString);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumQueryDouble"></param>
        /// <param name="enumQueryInteger"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        private void OnErrorTestEnumParametersDefaultImplementation(Exception exception, string pathFormat, string path, Option<List<string>> enumHeaderStringArray, Option<List<string>> enumQueryStringArray, Option<double> enumQueryDouble, Option<int> enumQueryInteger, Option<List<string>> enumFormStringArray, Option<string> enumHeaderString, Option<string> enumQueryString, Option<string> enumFormString)
        {
            bool suppressDefaultLog = false;
            OnErrorTestEnumParameters(ref suppressDefaultLog, exception, pathFormat, path, enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumQueryDouble"></param>
        /// <param name="enumQueryInteger"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        partial void OnErrorTestEnumParameters(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<List<string>> enumHeaderStringArray, Option<List<string>> enumQueryStringArray, Option<double> enumQueryDouble, Option<int> enumQueryInteger, Option<List<string>> enumFormStringArray, Option<string> enumHeaderString, Option<string> enumQueryString, Option<string> enumFormString);

        /// <summary>
        /// To test enum parameters To test enum parameters
        /// </summary>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestEnumParametersOrDefaultAsync(Option<List<string>> enumHeaderStringArray = default, Option<List<string>> enumQueryStringArray = default, Option<double> enumQueryDouble = default, Option<int> enumQueryInteger = default, Option<List<string>> enumFormStringArray = default, Option<string> enumHeaderString = default, Option<string> enumQueryString = default, Option<string> enumFormString = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestEnumParametersAsync(enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// To test enum parameters To test enum parameters
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestEnumParametersResponse"/>&gt;</returns>
        public async Task<TestEnumParametersResponse> TestEnumParametersAsync(Option<List<string>> enumHeaderStringArray = default, Option<List<string>> enumQueryStringArray = default, Option<double> enumQueryDouble = default, Option<int> enumQueryInteger = default, Option<List<string>> enumFormStringArray = default, Option<string> enumHeaderString = default, Option<string> enumQueryString = default, Option<string> enumFormString = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestEnumParameters(enumHeaderStringArray, enumQueryStringArray, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);

                FormatTestEnumParameters(enumHeaderStringArray, enumQueryStringArray, ref enumQueryDouble, ref enumQueryInteger, enumFormStringArray, ref enumHeaderString, ref enumQueryString, ref enumFormString);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (enumQueryStringArray.IsSet)
                        parseQueryStringLocalVar["enum_query_string_array"] = enumQueryStringArray.Value.ToString();

                    if (enumQueryDouble.IsSet)
                        parseQueryStringLocalVar["enum_query_double"] = enumQueryDouble.Value.ToString();

                    if (enumQueryInteger.IsSet)
                        parseQueryStringLocalVar["enum_query_integer"] = enumQueryInteger.Value.ToString();

                    if (enumQueryString.IsSet)
                        parseQueryStringLocalVar["enum_query_string"] = enumQueryString.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (enumHeaderStringArray.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("enum_header_string_array", ClientUtils.ParameterToString(enumHeaderStringArray.Value));

                    if (enumHeaderString.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("enum_header_string", ClientUtils.ParameterToString(enumHeaderString.Value));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (enumFormStringArray.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("enum_form_string_array", ClientUtils.ParameterToString(enumFormStringArray.Value)));

                    if (enumFormString.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("enum_form_string", ClientUtils.ParameterToString(enumFormString.Value)));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake", requestedAtLocalVar);

                        TestEnumParametersResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext_DeserializationContext);

                        AfterTestEnumParametersDefaultImplementation(responseLocalVar, enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);

                        Events.ExecuteOnTestEnumParameters(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestEnumParametersDefaultImplementation(e, "/fake", uriBuilderLocalVar.Path, enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);
                Events.ExecuteOnErrorTestEnumParameters(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestEnumParametersResponse"/>
        /// </summary>
        public partial class TestEnumParametersResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestEnumParametersResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public TestEnumParametersResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestEnumParametersResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestEnumParametersResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        partial void FormatTestGroupParameters(ref bool requiredBooleanGroup, ref int requiredStringGroup, ref long requiredInt64Group, ref Option<bool> booleanGroup, ref Option<int> stringGroup, ref Option<long> int64Group);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testGroupParametersResponseLocalVar"></param>
        /// <param name="requiredBooleanGroup"></param>
        /// <param name="requiredStringGroup"></param>
        /// <param name="requiredInt64Group"></param>
        /// <param name="booleanGroup"></param>
        /// <param name="stringGroup"></param>
        /// <param name="int64Group"></param>
        private void AfterTestGroupParametersDefaultImplementation(TestGroupParametersResponse testGroupParametersResponseLocalVar, bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup, Option<int> stringGroup, Option<long> int64Group)
        {
            bool suppressDefaultLog = false;
            AfterTestGroupParameters(ref suppressDefaultLog, testGroupParametersResponseLocalVar, requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testGroupParametersResponseLocalVar.Content.DownloadedAt - testGroupParametersResponseLocalVar.Content.RequestedAt).TotalSeconds, testGroupParametersResponseLocalVar.Content.StatusCode, testGroupParametersResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testGroupParametersResponseLocalVar"></param>
        /// <param name="requiredBooleanGroup"></param>
        /// <param name="requiredStringGroup"></param>
        /// <param name="requiredInt64Group"></param>
        /// <param name="booleanGroup"></param>
        /// <param name="stringGroup"></param>
        /// <param name="int64Group"></param>
        partial void AfterTestGroupParameters(ref bool suppressDefaultLog, TestGroupParametersResponse testGroupParametersResponseLocalVar, bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup, Option<int> stringGroup, Option<long> int64Group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requiredBooleanGroup"></param>
        /// <param name="requiredStringGroup"></param>
        /// <param name="requiredInt64Group"></param>
        /// <param name="booleanGroup"></param>
        /// <param name="stringGroup"></param>
        /// <param name="int64Group"></param>
        private void OnErrorTestGroupParametersDefaultImplementation(Exception exception, string pathFormat, string path, bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup, Option<int> stringGroup, Option<long> int64Group)
        {
            bool suppressDefaultLog = false;
            OnErrorTestGroupParameters(ref suppressDefaultLog, exception, pathFormat, path, requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requiredBooleanGroup"></param>
        /// <param name="requiredStringGroup"></param>
        /// <param name="requiredInt64Group"></param>
        /// <param name="booleanGroup"></param>
        /// <param name="stringGroup"></param>
        /// <param name="int64Group"></param>
        partial void OnErrorTestGroupParameters(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup, Option<int> stringGroup, Option<long> int64Group);

        /// <summary>
        /// Fake endpoint to test group parameters (optional) Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestGroupParametersOrDefaultAsync(bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup = default, Option<int> stringGroup = default, Option<long> int64Group = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestGroupParametersAsync(requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fake endpoint to test group parameters (optional) Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestGroupParametersResponse"/>&gt;</returns>
        public async Task<TestGroupParametersResponse> TestGroupParametersAsync(bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, Option<bool> booleanGroup = default, Option<int> stringGroup = default, Option<long> int64Group = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatTestGroupParameters(ref requiredBooleanGroup, ref requiredStringGroup, ref requiredInt64Group, ref booleanGroup, ref stringGroup, ref int64Group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["required_string_group"] = requiredStringGroup.ToString();
                    parseQueryStringLocalVar["required_int64_group"] = requiredInt64Group.ToString();

                    if (stringGroup.IsSet)
                        parseQueryStringLocalVar["string_group"] = stringGroup.Value.ToString();

                    if (int64Group.IsSet)
                        parseQueryStringLocalVar["int64_group"] = int64Group.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Headers.Add("required_boolean_group", ClientUtils.ParameterToString(requiredBooleanGroup));

                    if (booleanGroup.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("boolean_group", ClientUtils.ParameterToString(booleanGroup.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar = (BearerToken) await BearerTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar);

                    bearerTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake", requestedAtLocalVar);

                        TestGroupParametersResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterTestGroupParametersDefaultImplementation(responseLocalVar, requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group);

                        Events.ExecuteOnTestGroupParameters(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestGroupParametersDefaultImplementation(e, "/fake", uriBuilderLocalVar.Path, requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group);
                Events.ExecuteOnErrorTestGroupParameters(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestGroupParametersResponse"/>
        /// </summary>
        public partial class TestGroupParametersResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestGroupParametersResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public TestGroupParametersResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestGroupParametersResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestGroupParametersResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;
        }

        partial void FormatTestInlineAdditionalProperties(Dictionary<string, string> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateTestInlineAdditionalProperties(Dictionary<string, string> requestBody)
        {
            if (requestBody == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testInlineAdditionalPropertiesResponseLocalVar"></param>
        /// <param name="requestBody"></param>
        private void AfterTestInlineAdditionalPropertiesDefaultImplementation(TestInlineAdditionalPropertiesResponse testInlineAdditionalPropertiesResponseLocalVar, Dictionary<string, string> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterTestInlineAdditionalProperties(ref suppressDefaultLog, testInlineAdditionalPropertiesResponseLocalVar, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testInlineAdditionalPropertiesResponseLocalVar.Content.DownloadedAt - testInlineAdditionalPropertiesResponseLocalVar.Content.RequestedAt).TotalSeconds, testInlineAdditionalPropertiesResponseLocalVar.Content.StatusCode, testInlineAdditionalPropertiesResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testInlineAdditionalPropertiesResponseLocalVar"></param>
        /// <param name="requestBody"></param>
        partial void AfterTestInlineAdditionalProperties(ref bool suppressDefaultLog, TestInlineAdditionalPropertiesResponse testInlineAdditionalPropertiesResponseLocalVar, Dictionary<string, string> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requestBody"></param>
        private void OnErrorTestInlineAdditionalPropertiesDefaultImplementation(Exception exception, string pathFormat, string path, Dictionary<string, string> requestBody)
        {
            bool suppressDefaultLog = false;
            OnErrorTestInlineAdditionalProperties(ref suppressDefaultLog, exception, pathFormat, path, requestBody);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorTestInlineAdditionalProperties(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Dictionary<string, string> requestBody);

        /// <summary>
        /// test inline additionalProperties 
        /// </summary>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestInlineAdditionalPropertiesOrDefaultAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInlineAdditionalPropertiesAsync(requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// test inline additionalProperties 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestInlineAdditionalPropertiesResponse"/>&gt;</returns>
        public async Task<TestInlineAdditionalPropertiesResponse> TestInlineAdditionalPropertiesAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInlineAdditionalProperties(requestBody);

                FormatTestInlineAdditionalProperties(requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/inline-additionalProperties";

                    httpRequestMessageLocalVar.Content = (requestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/inline-additionalProperties", requestedAtLocalVar);

                        TestInlineAdditionalPropertiesResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterTestInlineAdditionalPropertiesDefaultImplementation(responseLocalVar, requestBody);

                        Events.ExecuteOnTestInlineAdditionalProperties(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInlineAdditionalPropertiesDefaultImplementation(e, "/fake/inline-additionalProperties", uriBuilderLocalVar.Path, requestBody);
                Events.ExecuteOnErrorTestInlineAdditionalProperties(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInlineAdditionalPropertiesResponse"/>
        /// </summary>
        public partial class TestInlineAdditionalPropertiesResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestInlineAdditionalPropertiesResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public TestInlineAdditionalPropertiesResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestInlineAdditionalPropertiesResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestInlineAdditionalPropertiesResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;
        }

        partial void FormatTestJsonFormData(ref string param, ref string param2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        /// <returns></returns>
        private void ValidateTestJsonFormData(string param, string param2)
        {
            if (param == null)
                throw new ArgumentNullException(nameof(param));

            if (param2 == null)
                throw new ArgumentNullException(nameof(param2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testJsonFormDataResponseLocalVar"></param>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        private void AfterTestJsonFormDataDefaultImplementation(TestJsonFormDataResponse testJsonFormDataResponseLocalVar, string param, string param2)
        {
            bool suppressDefaultLog = false;
            AfterTestJsonFormData(ref suppressDefaultLog, testJsonFormDataResponseLocalVar, param, param2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testJsonFormDataResponseLocalVar.Content.DownloadedAt - testJsonFormDataResponseLocalVar.Content.RequestedAt).TotalSeconds, testJsonFormDataResponseLocalVar.Content.StatusCode, testJsonFormDataResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testJsonFormDataResponseLocalVar"></param>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        partial void AfterTestJsonFormData(ref bool suppressDefaultLog, TestJsonFormDataResponse testJsonFormDataResponseLocalVar, string param, string param2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        private void OnErrorTestJsonFormDataDefaultImplementation(Exception exception, string pathFormat, string path, string param, string param2)
        {
            bool suppressDefaultLog = false;
            OnErrorTestJsonFormData(ref suppressDefaultLog, exception, pathFormat, path, param, param2);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        partial void OnErrorTestJsonFormData(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string param, string param2);

        /// <summary>
        /// test json serialization of form data 
        /// </summary>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestJsonFormDataOrDefaultAsync(string param, string param2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestJsonFormDataAsync(param, param2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// test json serialization of form data 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestJsonFormDataResponse"/>&gt;</returns>
        public async Task<TestJsonFormDataResponse> TestJsonFormDataAsync(string param, string param2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestJsonFormData(param, param2);

                FormatTestJsonFormData(ref param, ref param2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/jsonFormData";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("param", ClientUtils.ParameterToString(param)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("param2", ClientUtils.ParameterToString(param2)));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/jsonFormData", requestedAtLocalVar);

                        TestJsonFormDataResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterTestJsonFormDataDefaultImplementation(responseLocalVar, param, param2);

                        Events.ExecuteOnTestJsonFormData(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestJsonFormDataDefaultImplementation(e, "/fake/jsonFormData", uriBuilderLocalVar.Path, param, param2);
                Events.ExecuteOnErrorTestJsonFormData(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestJsonFormDataResponse"/>
        /// </summary>
        public partial class TestJsonFormDataResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestJsonFormDataResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public TestJsonFormDataResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestJsonFormDataResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestJsonFormDataResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;
        }

        partial void FormatTestQueryParameterCollectionFormat(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, ref string requiredNotNullable, ref string? requiredNullable, ref Option<string> notRequiredNotNullable, ref Option<string?> notRequiredNullable);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="notRequiredNotNullable"></param>
        /// <returns></returns>
        private void ValidateTestQueryParameterCollectionFormat(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, Option<string> notRequiredNotNullable)
        {
            if (pipe == null)
                throw new ArgumentNullException(nameof(pipe));

            if (ioutil == null)
                throw new ArgumentNullException(nameof(ioutil));

            if (http == null)
                throw new ArgumentNullException(nameof(http));

            if (url == null)
                throw new ArgumentNullException(nameof(url));

            if (context == null)
                throw new ArgumentNullException(nameof(context));

            if (requiredNotNullable == null)
                throw new ArgumentNullException(nameof(requiredNotNullable));

            if (notRequiredNotNullable.IsSet && notRequiredNotNullable.Value == null)
                throw new ArgumentNullException(nameof(notRequiredNotNullable));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="testQueryParameterCollectionFormatResponseLocalVar"></param>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"></param>
        /// <param name="notRequiredNullable"></param>
        private void AfterTestQueryParameterCollectionFormatDefaultImplementation(TestQueryParameterCollectionFormatResponse testQueryParameterCollectionFormatResponseLocalVar, List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable, Option<string> notRequiredNotNullable, Option<string?> notRequiredNullable)
        {
            bool suppressDefaultLog = false;
            AfterTestQueryParameterCollectionFormat(ref suppressDefaultLog, testQueryParameterCollectionFormatResponseLocalVar, pipe, ioutil, http, url, context, requiredNotNullable, requiredNullable, notRequiredNotNullable, notRequiredNullable);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (testQueryParameterCollectionFormatResponseLocalVar.Content.DownloadedAt - testQueryParameterCollectionFormatResponseLocalVar.Content.RequestedAt).TotalSeconds, testQueryParameterCollectionFormatResponseLocalVar.Content.StatusCode, testQueryParameterCollectionFormatResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="testQueryParameterCollectionFormatResponseLocalVar"></param>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"></param>
        /// <param name="notRequiredNullable"></param>
        partial void AfterTestQueryParameterCollectionFormat(ref bool suppressDefaultLog, TestQueryParameterCollectionFormatResponse testQueryParameterCollectionFormatResponseLocalVar, List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable, Option<string> notRequiredNotNullable, Option<string?> notRequiredNullable);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"></param>
        /// <param name="notRequiredNullable"></param>
        private void OnErrorTestQueryParameterCollectionFormatDefaultImplementation(Exception exception, string pathFormat, string path, List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable, Option<string> notRequiredNotNullable, Option<string?> notRequiredNullable)
        {
            bool suppressDefaultLog = false;
            OnErrorTestQueryParameterCollectionFormat(ref suppressDefaultLog, exception, pathFormat, path, pipe, ioutil, http, url, context, requiredNotNullable, requiredNullable, notRequiredNotNullable, notRequiredNullable);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"></param>
        /// <param name="notRequiredNullable"></param>
        partial void OnErrorTestQueryParameterCollectionFormat(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable, Option<string> notRequiredNotNullable, Option<string?> notRequiredNullable);

        /// <summary>
        ///  To test the collection format in query parameters
        /// </summary>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"> (optional)</param>
        /// <param name="notRequiredNullable"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> TestQueryParameterCollectionFormatOrDefaultAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable = default, Option<string> notRequiredNotNullable = default, Option<string?> notRequiredNullable = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestQueryParameterCollectionFormatAsync(pipe, ioutil, http, url, context, requiredNotNullable, requiredNullable, notRequiredNotNullable, notRequiredNullable, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  To test the collection format in query parameters
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="requiredNotNullable"></param>
        /// <param name="requiredNullable"></param>
        /// <param name="notRequiredNotNullable"> (optional)</param>
        /// <param name="notRequiredNullable"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="TestQueryParameterCollectionFormatResponse"/>&gt;</returns>
        public async Task<TestQueryParameterCollectionFormatResponse> TestQueryParameterCollectionFormatAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, string requiredNotNullable, string? requiredNullable = default, Option<string> notRequiredNotNullable = default, Option<string?> notRequiredNullable = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestQueryParameterCollectionFormat(pipe, ioutil, http, url, context, requiredNotNullable, notRequiredNotNullable);

                FormatTestQueryParameterCollectionFormat(pipe, ioutil, http, url, context, ref requiredNotNullable, ref requiredNullable, ref notRequiredNotNullable, ref notRequiredNullable);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/test-query-parameters";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["pipe"] = pipe.ToString();
                    parseQueryStringLocalVar["ioutil"] = ioutil.ToString();
                    parseQueryStringLocalVar["http"] = http.ToString();
                    parseQueryStringLocalVar["url"] = url.ToString();
                    parseQueryStringLocalVar["context"] = context.ToString();
                    parseQueryStringLocalVar["requiredNotNullable"] = requiredNotNullable.ToString();
                    parseQueryStringLocalVar["requiredNullable"] = requiredNullable?.ToString();

                    if (notRequiredNotNullable.IsSet)
                        parseQueryStringLocalVar["notRequiredNotNullable"] = notRequiredNotNullable.Value.ToString();

                    if (notRequiredNullable.IsSet)
                        parseQueryStringLocalVar["notRequiredNullable"] = notRequiredNullable.Value?.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/test-query-parameters", requestedAtLocalVar);

                        TestQueryParameterCollectionFormatResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterTestQueryParameterCollectionFormatDefaultImplementation(responseLocalVar, pipe, ioutil, http, url, context, requiredNotNullable, requiredNullable, notRequiredNotNullable, notRequiredNullable);

                        Events.ExecuteOnTestQueryParameterCollectionFormat(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestQueryParameterCollectionFormatDefaultImplementation(e, "/fake/test-query-parameters", uriBuilderLocalVar.Path, pipe, ioutil, http, url, context, requiredNotNullable, requiredNullable, notRequiredNotNullable, notRequiredNullable);
                Events.ExecuteOnErrorTestQueryParameterCollectionFormat(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestQueryParameterCollectionFormatResponse"/>
        /// </summary>
        public partial class TestQueryParameterCollectionFormatResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="TestQueryParameterCollectionFormatResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public TestQueryParameterCollectionFormatResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="TestQueryParameterCollectionFormatResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public TestQueryParameterCollectionFormatResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;
        }
    }
}
