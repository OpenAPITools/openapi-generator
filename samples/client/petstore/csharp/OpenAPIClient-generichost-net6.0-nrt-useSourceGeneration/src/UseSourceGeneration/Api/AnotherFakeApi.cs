// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using UseSourceGeneration.Client;
using UseSourceGeneration.Api;
using UseSourceGeneration.Model;
using System.Diagnostics.CodeAnalysis;

namespace UseSourceGeneration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAnotherFakeApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AnotherFakeApiEvents Events { get; }

        /// <summary>
        /// To test special tags
        /// </summary>
        /// <remarks>
        /// To test special tags and operation ID starting with number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ModelClient&gt;&gt;</returns>
        Task<ApiResponse<ModelClient>> Call123TestSpecialTagsAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// To test special tags
        /// </summary>
        /// <remarks>
        /// To test special tags and operation ID starting with number
        /// </remarks>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;ModelClient&gt;?&gt;</returns>
        Task<ModelClient?> Call123TestSpecialTagsOrDefaultAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class AnotherFakeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<ModelClient>>? OnCall123TestSpecialTags;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCall123TestSpecialTags;

        internal void ExecuteOnCall123TestSpecialTags(AnotherFakeApi.Call123TestSpecialTagsResponse call123TestSpecialTagsResponse)
        {
            OnCall123TestSpecialTags?.Invoke(this, new ApiResponseEventArgs<Call123TestSpecialTagsResponse>(call123TestSpecialTagsResponse));
        }

        internal void ExecuteOnErrorCall123TestSpecialTags(Exception exception)
        {
            OnErrorCall123TestSpecialTags?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AnotherFakeApi : IAnotherFakeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        private ModelClientDeserializationContext _modelClientDeserializationContext;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AnotherFakeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AnotherFakeApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="HttpSignatureTokenProvider"/>
        /// </summary>
        public TokenProvider<HttpSignatureToken> HttpSignatureTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnotherFakeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnotherFakeApi(ILogger<AnotherFakeApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AnotherFakeApiEvents anotherFakeApiEvents,
            ModelClientDeserializationContext modelClientDeserializationContext,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            _modelClientDeserializationContext = modelClientDeserializationContext;
            Logger = logger;
            HttpClient = httpClient;
            Events = anotherFakeApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
            HttpSignatureTokenProvider = httpSignatureTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCall123TestSpecialTags(ModelClient modelClient);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelClient"></param>
        /// <returns></returns>
        private void ValidateCall123TestSpecialTags(ModelClient modelClient)
        {
            if (modelClient == null)
                throw new ArgumentNullException(nameof(modelClient));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="call123TestSpecialTagsResponseLocalVar"></param>
        /// <param name="modelClient"></param>
        private void AfterCall123TestSpecialTagsDefaultImplementation(Call123TestSpecialTagsResponse call123TestSpecialTagsResponseLocalVar, ModelClient modelClient)
        {
            bool suppressDefaultLog = false;
            AfterCall123TestSpecialTags(ref suppressDefaultLog, call123TestSpecialTagsResponseLocalVar, modelClient);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (call123TestSpecialTagsResponseLocalVar.Content.DownloadedAt - call123TestSpecialTagsResponseLocalVar.Content.RequestedAt).TotalSeconds, call123TestSpecialTagsResponseLocalVar.Content.StatusCode, call123TestSpecialTagsResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="call123TestSpecialTagsResponseLocalVar"></param>
        /// <param name="modelClient"></param>
        partial void AfterCall123TestSpecialTags(ref bool suppressDefaultLog, Call123TestSpecialTagsResponse call123TestSpecialTagsResponseLocalVar, ModelClient modelClient);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="modelClient"></param>
        private void OnErrorCall123TestSpecialTagsDefaultImplementation(Exception exception, string pathFormat, string path, ModelClient modelClient)
        {
            bool suppressDefaultLog = false;
            OnErrorCall123TestSpecialTags(ref suppressDefaultLog, exception, pathFormat, path, modelClient);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="modelClient"></param>
        partial void OnErrorCall123TestSpecialTags(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, ModelClient modelClient);

        /// <summary>
        /// To test special tags To test special tags and operation ID starting with number
        /// </summary>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Call123TestSpecialTagsResponse"/>&gt;</returns>
        public async Task<Call123TestSpecialTagsResponse?> Call123TestSpecialTagsOrDefaultAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await Call123TestSpecialTagsAsync(modelClient, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// To test special tags To test special tags and operation ID starting with number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="Call123TestSpecialTagsResponse"/>&gt;</returns>
        public async Task<Call123TestSpecialTagsResponse> Call123TestSpecialTagsAsync(ModelClient modelClient, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCall123TestSpecialTags(modelClient);

                FormatCall123TestSpecialTags(modelClient);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/another-fake/dummy";

                    httpRequestMessageLocalVar.Content = (modelClient as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelClient, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/another-fake/dummy", requestedAtLocalVar);

                        Call123TestSpecialTagsResponse responseLocalVar = new(apiResponseLocalVar, _modelClientDeserializationContext);

                        AfterCall123TestSpecialTagsDefaultImplementation(responseLocalVar, modelClient);

                        Events.ExecuteOnCall123TestSpecialTags(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCall123TestSpecialTagsDefaultImplementation(e, "/another-fake/dummy", uriBuilderLocalVar.Path, modelClient);
                Events.ExecuteOnErrorCall123TestSpecialTags(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="Call123TestSpecialTagsResponse"/>
        /// </summary>
        public partial class Call123TestSpecialTagsResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            // isContainer: 
            // items: 
            // datatype 
            private readonly ModelClientDeserializationContext? _modelClientDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="Call123TestSpecialTagsResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="modelClientDeserializationContext"></param>
            public Call123TestSpecialTagsResponse(UseSourceGeneration.Client.ApiResponse content,
                ModelClientDeserializationContext modelClientDeserializationContext)
            {
                _modelClientDeserializationContext = modelClientDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="Call123TestSpecialTagsResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public Call123TestSpecialTagsResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out ModelClient? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _modelClientDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<ModelClient>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<ModelClient>(Content.RawContent, _modelClientDeserializationContext.ModelClient);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out ModelClient? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<ModelClient>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }
    }
}
