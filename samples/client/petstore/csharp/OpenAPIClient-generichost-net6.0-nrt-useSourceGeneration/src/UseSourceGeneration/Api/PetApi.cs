// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using UseSourceGeneration.Client;
using UseSourceGeneration.Api;
using UseSourceGeneration.Model;
using System.Diagnostics.CodeAnalysis;

namespace UseSourceGeneration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPetApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PetApiEvents Events { get; }

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> AddPetAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> AddPetOrDefaultAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> DeletePetAsync(long petId, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="petId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> DeletePetOrDefaultAsync(long petId, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>
        /// Multiple status values can be provided with comma separated strings
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;Pet&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<Pet>>> FindPetsByStatusAsync(List<string> status, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>
        /// Multiple status values can be provided with comma separated strings
        /// </remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;Pet&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<Pet>>?> FindPetsByStatusOrDefaultAsync(List<string> status, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>
        /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Tags to filter by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;Pet&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<Pet>>> FindPetsByTagsAsync(List<string> tags, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>
        /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;Pet&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<Pet>>?> FindPetsByTagsOrDefaultAsync(List<string> tags, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">ID of pet to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Pet&gt;&gt;</returns>
        Task<ApiResponse<Pet>> GetPetByIdAsync(long petId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <param name="petId">ID of pet to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;Pet&gt;?&gt;</returns>
        Task<ApiResponse<Pet>?> GetPetByIdOrDefaultAsync(long petId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;UpdatePet200Response&gt;&gt;</returns>
        Task<ApiResponse<UpdatePet200Response>> UpdatePetAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;UpdatePet200Response&gt;?&gt;</returns>
        Task<ApiResponse<UpdatePet200Response>?> UpdatePetOrDefaultAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet (optional)</param>
        /// <param name="status">Updated status of the pet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> UpdatePetWithFormAsync(long petId, Option<string> name = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet (optional)</param>
        /// <param name="status">Updated status of the pet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> UpdatePetWithFormOrDefaultAsync(long petId, Option<string> name = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ApiResponse&gt;&gt;</returns>
        Task<ApiResponse<ApiResponse>> UploadFileAsync(long petId, Option<System.IO.Stream> file = default, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;ApiResponse&gt;?&gt;</returns>
        Task<ApiResponse<ApiResponse>?> UploadFileOrDefaultAsync(long petId, Option<System.IO.Stream> file = default, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// uploads an image (required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredFile">file to upload</param>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ApiResponse&gt;&gt;</returns>
        Task<ApiResponse<ApiResponse>> UploadFileWithRequiredFileAsync(System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// uploads an image (required)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="requiredFile">file to upload</param>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;ApiResponse&gt;?&gt;</returns>
        Task<ApiResponse<ApiResponse>?> UploadFileWithRequiredFileOrDefaultAsync(System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class PetApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnAddPet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddPet;

        internal void ExecuteOnAddPet(PetApi.AddPetResponse addPetResponse)
        {
            OnAddPet?.Invoke(this, new ApiResponseEventArgs<AddPetResponse>(addPetResponse));
        }

        internal void ExecuteOnErrorAddPet(Exception exception)
        {
            OnErrorAddPet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnDeletePet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePet;

        internal void ExecuteOnDeletePet(PetApi.DeletePetResponse deletePetResponse)
        {
            OnDeletePet?.Invoke(this, new ApiResponseEventArgs<DeletePetResponse>(deletePetResponse));
        }

        internal void ExecuteOnErrorDeletePet(Exception exception)
        {
            OnErrorDeletePet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<Pet>>>? OnFindPetsByStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindPetsByStatus;

        internal void ExecuteOnFindPetsByStatus(PetApi.FindPetsByStatusResponse findPetsByStatusResponse)
        {
            OnFindPetsByStatus?.Invoke(this, new ApiResponseEventArgs<FindPetsByStatusResponse>(findPetsByStatusResponse));
        }

        internal void ExecuteOnErrorFindPetsByStatus(Exception exception)
        {
            OnErrorFindPetsByStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<Pet>>>? OnFindPetsByTags;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindPetsByTags;

        internal void ExecuteOnFindPetsByTags(PetApi.FindPetsByTagsResponse findPetsByTagsResponse)
        {
            OnFindPetsByTags?.Invoke(this, new ApiResponseEventArgs<FindPetsByTagsResponse>(findPetsByTagsResponse));
        }

        internal void ExecuteOnErrorFindPetsByTags(Exception exception)
        {
            OnErrorFindPetsByTags?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<Pet>>? OnGetPetById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPetById;

        internal void ExecuteOnGetPetById(PetApi.GetPetByIdResponse getPetByIdResponse)
        {
            OnGetPetById?.Invoke(this, new ApiResponseEventArgs<GetPetByIdResponse>(getPetByIdResponse));
        }

        internal void ExecuteOnErrorGetPetById(Exception exception)
        {
            OnErrorGetPetById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<UpdatePet200Response>>? OnUpdatePet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdatePet;

        internal void ExecuteOnUpdatePet(PetApi.UpdatePetResponse updatePetResponse)
        {
            OnUpdatePet?.Invoke(this, new ApiResponseEventArgs<UpdatePetResponse>(updatePetResponse));
        }

        internal void ExecuteOnErrorUpdatePet(Exception exception)
        {
            OnErrorUpdatePet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnUpdatePetWithForm;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdatePetWithForm;

        internal void ExecuteOnUpdatePetWithForm(PetApi.UpdatePetWithFormResponse updatePetWithFormResponse)
        {
            OnUpdatePetWithForm?.Invoke(this, new ApiResponseEventArgs<UpdatePetWithFormResponse>(updatePetWithFormResponse));
        }

        internal void ExecuteOnErrorUpdatePetWithForm(Exception exception)
        {
            OnErrorUpdatePetWithForm?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<ApiResponse>>? OnUploadFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadFile;

        internal void ExecuteOnUploadFile(PetApi.UploadFileResponse uploadFileResponse)
        {
            OnUploadFile?.Invoke(this, new ApiResponseEventArgs<UploadFileResponse>(uploadFileResponse));
        }

        internal void ExecuteOnErrorUploadFile(Exception exception)
        {
            OnErrorUploadFile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<ApiResponse>>? OnUploadFileWithRequiredFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadFileWithRequiredFile;

        internal void ExecuteOnUploadFileWithRequiredFile(PetApi.UploadFileWithRequiredFileResponse uploadFileWithRequiredFileResponse)
        {
            OnUploadFileWithRequiredFile?.Invoke(this, new ApiResponseEventArgs<UploadFileWithRequiredFileResponse>(uploadFileWithRequiredFileResponse));
        }

        internal void ExecuteOnErrorUploadFileWithRequiredFile(Exception exception)
        {
            OnErrorUploadFileWithRequiredFile?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PetApi : IPetApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        private PetDeserializationContext _petDeserializationContext;
        private UpdatePet200ResponseDeserializationContext _updatePet200ResponseDeserializationContext;
        private ApiResponseDeserializationContext _apiResponseDeserializationContext;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PetApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PetApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="HttpSignatureTokenProvider"/>
        /// </summary>
        public TokenProvider<HttpSignatureToken> HttpSignatureTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PetApi(ILogger<PetApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PetApiEvents petApiEvents,
            PetDeserializationContext petDeserializationContext,
            UpdatePet200ResponseDeserializationContext updatePet200ResponseDeserializationContext,
            ApiResponseDeserializationContext apiResponseDeserializationContext,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            _petDeserializationContext = petDeserializationContext;
            _updatePet200ResponseDeserializationContext = updatePet200ResponseDeserializationContext;
            _apiResponseDeserializationContext = apiResponseDeserializationContext;
            Logger = logger;
            HttpClient = httpClient;
            Events = petApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
            HttpSignatureTokenProvider = httpSignatureTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddPet(Pet pet);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pet"></param>
        /// <returns></returns>
        private void ValidateAddPet(Pet pet)
        {
            if (pet == null)
                throw new ArgumentNullException(nameof(pet));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="addPetResponseLocalVar"></param>
        /// <param name="pet"></param>
        private void AfterAddPetDefaultImplementation(AddPetResponse addPetResponseLocalVar, Pet pet)
        {
            bool suppressDefaultLog = false;
            AfterAddPet(ref suppressDefaultLog, addPetResponseLocalVar, pet);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (addPetResponseLocalVar.Content.DownloadedAt - addPetResponseLocalVar.Content.RequestedAt).TotalSeconds, addPetResponseLocalVar.Content.StatusCode, addPetResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="addPetResponseLocalVar"></param>
        /// <param name="pet"></param>
        partial void AfterAddPet(ref bool suppressDefaultLog, AddPetResponse addPetResponseLocalVar, Pet pet);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="pet"></param>
        private void OnErrorAddPetDefaultImplementation(Exception exception, string pathFormat, string path, Pet pet)
        {
            bool suppressDefaultLog = false;
            OnErrorAddPet(ref suppressDefaultLog, exception, pathFormat, path, pet);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="pet"></param>
        partial void OnErrorAddPet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Pet pet);

        /// <summary>
        /// Add a new pet to the store 
        /// </summary>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> AddPetOrDefaultAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddPetAsync(pet, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a new pet to the store 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="AddPetResponse"/>&gt;</returns>
        public async Task<AddPetResponse> AddPetAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddPet(pet);

                FormatAddPet(pet);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    Uri urlLocalVar = httpRequestMessageLocalVar.RequestUri = new Uri("http://petstore.swagger.io/v2");
                    uriBuilderLocalVar.Host = urlLocalVar.Authority;
                    uriBuilderLocalVar.Scheme = urlLocalVar.Scheme;
                    uriBuilderLocalVar.Path = urlLocalVar.AbsolutePath;

                    httpRequestMessageLocalVar.Content = (pet as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pet, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    HttpSignatureToken httpSignatureTokenLocalVar = (HttpSignatureToken) await HttpSignatureTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(httpSignatureTokenLocalVar);

                    if (httpRequestMessageLocalVar.Content != null) {
                        string requestBodyLocalVar = await httpRequestMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        httpSignatureTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, requestBodyLocalVar, cancellationToken);
                    }

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/xml"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet", requestedAtLocalVar);

                        AddPetResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterAddPetDefaultImplementation(responseLocalVar, pet);

                        Events.ExecuteOnAddPet(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddPetDefaultImplementation(e, "/pet", uriBuilderLocalVar.Path, pet);
                Events.ExecuteOnErrorAddPet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddPetResponse"/>
        /// </summary>
        public partial class AddPetResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="AddPetResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public AddPetResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="AddPetResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public AddPetResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed() => 405 == (int)Content.StatusCode;
        }

        partial void FormatDeletePet(ref long petId, ref Option<string> apiKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="apiKey"></param>
        /// <returns></returns>
        private void ValidateDeletePet(Option<string> apiKey)
        {
            if (apiKey.IsSet && apiKey.Value == null)
                throw new ArgumentNullException(nameof(apiKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="deletePetResponseLocalVar"></param>
        /// <param name="petId"></param>
        /// <param name="apiKey"></param>
        private void AfterDeletePetDefaultImplementation(DeletePetResponse deletePetResponseLocalVar, long petId, Option<string> apiKey)
        {
            bool suppressDefaultLog = false;
            AfterDeletePet(ref suppressDefaultLog, deletePetResponseLocalVar, petId, apiKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (deletePetResponseLocalVar.Content.DownloadedAt - deletePetResponseLocalVar.Content.RequestedAt).TotalSeconds, deletePetResponseLocalVar.Content.StatusCode, deletePetResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="deletePetResponseLocalVar"></param>
        /// <param name="petId"></param>
        /// <param name="apiKey"></param>
        partial void AfterDeletePet(ref bool suppressDefaultLog, DeletePetResponse deletePetResponseLocalVar, long petId, Option<string> apiKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        /// <param name="apiKey"></param>
        private void OnErrorDeletePetDefaultImplementation(Exception exception, string pathFormat, string path, long petId, Option<string> apiKey)
        {
            bool suppressDefaultLog = false;
            OnErrorDeletePet(ref suppressDefaultLog, exception, pathFormat, path, petId, apiKey);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        /// <param name="apiKey"></param>
        partial void OnErrorDeletePet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, long petId, Option<string> apiKey);

        /// <summary>
        /// Deletes a pet 
        /// </summary>
        /// <param name="petId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> DeletePetOrDefaultAsync(long petId, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePetAsync(petId, apiKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a pet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="DeletePetResponse"/>&gt;</returns>
        public async Task<DeletePetResponse> DeletePetAsync(long petId, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePet(apiKey);

                FormatDeletePet(ref petId, ref apiKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/pet/{petId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpetId%7D", Uri.EscapeDataString(petId.ToString()));

                    if (apiKey.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("api_key", ClientUtils.ParameterToString(apiKey.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet/{petId}", requestedAtLocalVar);

                        DeletePetResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterDeletePetDefaultImplementation(responseLocalVar, petId, apiKey);

                        Events.ExecuteOnDeletePet(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePetDefaultImplementation(e, "/pet/{petId}", uriBuilderLocalVar.Path, petId, apiKey);
                Events.ExecuteOnErrorDeletePet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePetResponse"/>
        /// </summary>
        public partial class DeletePetResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="DeletePetResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public DeletePetResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="DeletePetResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public DeletePetResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;
        }

        partial void FormatFindPetsByStatus(List<string> status);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateFindPetsByStatus(List<string> status)
        {
            if (status == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="findPetsByStatusResponseLocalVar"></param>
        /// <param name="status"></param>
        private void AfterFindPetsByStatusDefaultImplementation(FindPetsByStatusResponse findPetsByStatusResponseLocalVar, List<string> status)
        {
            bool suppressDefaultLog = false;
            AfterFindPetsByStatus(ref suppressDefaultLog, findPetsByStatusResponseLocalVar, status);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (findPetsByStatusResponseLocalVar.Content.DownloadedAt - findPetsByStatusResponseLocalVar.Content.RequestedAt).TotalSeconds, findPetsByStatusResponseLocalVar.Content.StatusCode, findPetsByStatusResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="findPetsByStatusResponseLocalVar"></param>
        /// <param name="status"></param>
        partial void AfterFindPetsByStatus(ref bool suppressDefaultLog, FindPetsByStatusResponse findPetsByStatusResponseLocalVar, List<string> status);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="status"></param>
        private void OnErrorFindPetsByStatusDefaultImplementation(Exception exception, string pathFormat, string path, List<string> status)
        {
            bool suppressDefaultLog = false;
            OnErrorFindPetsByStatus(ref suppressDefaultLog, exception, pathFormat, path, status);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="status"></param>
        partial void OnErrorFindPetsByStatus(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, List<string> status);

        /// <summary>
        /// Finds Pets by status Multiple status values can be provided with comma separated strings
        /// </summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<Pet>>?> FindPetsByStatusOrDefaultAsync(List<string> status, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindPetsByStatusAsync(status, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Finds Pets by status Multiple status values can be provided with comma separated strings
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FindPetsByStatusResponse"/>&gt;</returns>
        public async Task<FindPetsByStatusResponse> FindPetsByStatusAsync(List<string> status, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindPetsByStatus(status);

                FormatFindPetsByStatus(status);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/pet/findByStatus";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["status"] = status.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    HttpSignatureToken httpSignatureTokenLocalVar = (HttpSignatureToken) await HttpSignatureTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(httpSignatureTokenLocalVar);

                    if (httpRequestMessageLocalVar.Content != null) {
                        string requestBodyLocalVar = await httpRequestMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        httpSignatureTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, requestBodyLocalVar, cancellationToken);
                    }

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet/findByStatus", requestedAtLocalVar);

                        FindPetsByStatusResponse responseLocalVar = new(apiResponseLocalVar, _listltPetgtDeserializationContext_DeserializationContext);

                        AfterFindPetsByStatusDefaultImplementation(responseLocalVar, status);

                        Events.ExecuteOnFindPetsByStatus(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindPetsByStatusDefaultImplementation(e, "/pet/findByStatus", uriBuilderLocalVar.Path, status);
                Events.ExecuteOnErrorFindPetsByStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindPetsByStatusResponse"/>
        /// </summary>
        public partial class FindPetsByStatusResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly List&lt;Pet&gt;DeserializationContext? _listltPetgtDeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FindPetsByStatusResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="listltPetgtDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public FindPetsByStatusResponse(UseSourceGeneration.Client.ApiResponse content,
                List&lt;Pet&gt;DeserializationContext listltPetgtDeserializationContext                DeserializationContext DeserializationContext)
            {
                _listltPetgtDeserializationContext = listltPetgtDeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FindPetsByStatusResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FindPetsByStatusResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out List<Pet>? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _listltPetgtDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<List&lt;Pet&gt;>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<List&lt;Pet&gt;>(Content.RawContent, _listltPetgtDeserializationContext.List&lt;Pet&gt;);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out List<Pet>? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<List<Pet>>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;
        }

        partial void FormatFindPetsByTags(List<string> tags);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tags"></param>
        /// <returns></returns>
        private void ValidateFindPetsByTags(List<string> tags)
        {
            if (tags == null)
                throw new ArgumentNullException(nameof(tags));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="findPetsByTagsResponseLocalVar"></param>
        /// <param name="tags"></param>
        private void AfterFindPetsByTagsDefaultImplementation(FindPetsByTagsResponse findPetsByTagsResponseLocalVar, List<string> tags)
        {
            bool suppressDefaultLog = false;
            AfterFindPetsByTags(ref suppressDefaultLog, findPetsByTagsResponseLocalVar, tags);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (findPetsByTagsResponseLocalVar.Content.DownloadedAt - findPetsByTagsResponseLocalVar.Content.RequestedAt).TotalSeconds, findPetsByTagsResponseLocalVar.Content.StatusCode, findPetsByTagsResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="findPetsByTagsResponseLocalVar"></param>
        /// <param name="tags"></param>
        partial void AfterFindPetsByTags(ref bool suppressDefaultLog, FindPetsByTagsResponse findPetsByTagsResponseLocalVar, List<string> tags);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tags"></param>
        private void OnErrorFindPetsByTagsDefaultImplementation(Exception exception, string pathFormat, string path, List<string> tags)
        {
            bool suppressDefaultLog = false;
            OnErrorFindPetsByTags(ref suppressDefaultLog, exception, pathFormat, path, tags);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tags"></param>
        partial void OnErrorFindPetsByTags(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, List<string> tags);

        /// <summary>
        /// Finds Pets by tags Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </summary>
        /// <param name="tags">Tags to filter by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<Pet>>?> FindPetsByTagsOrDefaultAsync(List<string> tags, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindPetsByTagsAsync(tags, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Finds Pets by tags Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Tags to filter by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="FindPetsByTagsResponse"/>&gt;</returns>
        public async Task<FindPetsByTagsResponse> FindPetsByTagsAsync(List<string> tags, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindPetsByTags(tags);

                FormatFindPetsByTags(tags);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/pet/findByTags";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["tags"] = tags.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    HttpSignatureToken httpSignatureTokenLocalVar = (HttpSignatureToken) await HttpSignatureTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(httpSignatureTokenLocalVar);

                    if (httpRequestMessageLocalVar.Content != null) {
                        string requestBodyLocalVar = await httpRequestMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        httpSignatureTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, requestBodyLocalVar, cancellationToken);
                    }

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet/findByTags", requestedAtLocalVar);

                        FindPetsByTagsResponse responseLocalVar = new(apiResponseLocalVar, _listltPetgtDeserializationContext_DeserializationContext);

                        AfterFindPetsByTagsDefaultImplementation(responseLocalVar, tags);

                        Events.ExecuteOnFindPetsByTags(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindPetsByTagsDefaultImplementation(e, "/pet/findByTags", uriBuilderLocalVar.Path, tags);
                Events.ExecuteOnErrorFindPetsByTags(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindPetsByTagsResponse"/>
        /// </summary>
        public partial class FindPetsByTagsResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly List&lt;Pet&gt;DeserializationContext? _listltPetgtDeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="FindPetsByTagsResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="listltPetgtDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public FindPetsByTagsResponse(UseSourceGeneration.Client.ApiResponse content,
                List&lt;Pet&gt;DeserializationContext listltPetgtDeserializationContext                DeserializationContext DeserializationContext)
            {
                _listltPetgtDeserializationContext = listltPetgtDeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="FindPetsByTagsResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public FindPetsByTagsResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out List<Pet>? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _listltPetgtDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<List&lt;Pet&gt;>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<List&lt;Pet&gt;>(Content.RawContent, _listltPetgtDeserializationContext.List&lt;Pet&gt;);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out List<Pet>? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<List<Pet>>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;
        }

        partial void FormatGetPetById(ref long petId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="getPetByIdResponseLocalVar"></param>
        /// <param name="petId"></param>
        private void AfterGetPetByIdDefaultImplementation(GetPetByIdResponse getPetByIdResponseLocalVar, long petId)
        {
            bool suppressDefaultLog = false;
            AfterGetPetById(ref suppressDefaultLog, getPetByIdResponseLocalVar, petId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (getPetByIdResponseLocalVar.Content.DownloadedAt - getPetByIdResponseLocalVar.Content.RequestedAt).TotalSeconds, getPetByIdResponseLocalVar.Content.StatusCode, getPetByIdResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="getPetByIdResponseLocalVar"></param>
        /// <param name="petId"></param>
        partial void AfterGetPetById(ref bool suppressDefaultLog, GetPetByIdResponse getPetByIdResponseLocalVar, long petId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        private void OnErrorGetPetByIdDefaultImplementation(Exception exception, string pathFormat, string path, long petId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetPetById(ref suppressDefaultLog, exception, pathFormat, path, petId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        partial void OnErrorGetPetById(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, long petId);

        /// <summary>
        /// Find pet by ID Returns a single pet
        /// </summary>
        /// <param name="petId">ID of pet to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="Pet"/></returns>
        public async Task<ApiResponse<Pet>?> GetPetByIdOrDefaultAsync(long petId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPetByIdAsync(petId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find pet by ID Returns a single pet
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">ID of pet to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetPetByIdResponse"/>&gt;</returns>
        public async Task<GetPetByIdResponse> GetPetByIdAsync(long petId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPetById(ref petId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/pet/{petId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpetId%7D", Uri.EscapeDataString(petId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "api_key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet/{petId}", requestedAtLocalVar);

                        GetPetByIdResponse responseLocalVar = new(apiResponseLocalVar, _petDeserializationContext_DeserializationContext_DeserializationContext);

                        AfterGetPetByIdDefaultImplementation(responseLocalVar, petId);

                        Events.ExecuteOnGetPetById(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPetByIdDefaultImplementation(e, "/pet/{petId}", uriBuilderLocalVar.Path, petId);
                Events.ExecuteOnErrorGetPetById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPetByIdResponse"/>
        /// </summary>
        public partial class GetPetByIdResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly PetDeserializationContext? _petDeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="GetPetByIdResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="petDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public GetPetByIdResponse(UseSourceGeneration.Client.ApiResponse content,
                PetDeserializationContext petDeserializationContext                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _petDeserializationContext = petDeserializationContext;
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="GetPetByIdResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public GetPetByIdResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out Pet? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _petDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<Pet>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<Pet>(Content.RawContent, _petDeserializationContext.Pet);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out Pet? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<Pet>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        partial void FormatUpdatePet(Pet pet);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pet"></param>
        /// <returns></returns>
        private void ValidateUpdatePet(Pet pet)
        {
            if (pet == null)
                throw new ArgumentNullException(nameof(pet));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="updatePetResponseLocalVar"></param>
        /// <param name="pet"></param>
        private void AfterUpdatePetDefaultImplementation(UpdatePetResponse updatePetResponseLocalVar, Pet pet)
        {
            bool suppressDefaultLog = false;
            AfterUpdatePet(ref suppressDefaultLog, updatePetResponseLocalVar, pet);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (updatePetResponseLocalVar.Content.DownloadedAt - updatePetResponseLocalVar.Content.RequestedAt).TotalSeconds, updatePetResponseLocalVar.Content.StatusCode, updatePetResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="updatePetResponseLocalVar"></param>
        /// <param name="pet"></param>
        partial void AfterUpdatePet(ref bool suppressDefaultLog, UpdatePetResponse updatePetResponseLocalVar, Pet pet);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="pet"></param>
        private void OnErrorUpdatePetDefaultImplementation(Exception exception, string pathFormat, string path, Pet pet)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdatePet(ref suppressDefaultLog, exception, pathFormat, path, pet);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="pet"></param>
        partial void OnErrorUpdatePet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Pet pet);

        /// <summary>
        /// Update an existing pet 
        /// </summary>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="UpdatePet200Response"/></returns>
        public async Task<ApiResponse<UpdatePet200Response>?> UpdatePetOrDefaultAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdatePetAsync(pet, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an existing pet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pet">Pet object that needs to be added to the store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="UpdatePetResponse"/>&gt;</returns>
        public async Task<UpdatePetResponse> UpdatePetAsync(Pet pet, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdatePet(pet);

                FormatUpdatePet(pet);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    Uri urlLocalVar = httpRequestMessageLocalVar.RequestUri = new Uri("http://petstore.swagger.io/v2");
                    uriBuilderLocalVar.Host = urlLocalVar.Authority;
                    uriBuilderLocalVar.Scheme = urlLocalVar.Scheme;
                    uriBuilderLocalVar.Path = urlLocalVar.AbsolutePath;

                    httpRequestMessageLocalVar.Content = (pet as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pet, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    HttpSignatureToken httpSignatureTokenLocalVar = (HttpSignatureToken) await HttpSignatureTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(httpSignatureTokenLocalVar);

                    if (httpRequestMessageLocalVar.Content != null) {
                        string requestBodyLocalVar = await httpRequestMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        httpSignatureTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, requestBodyLocalVar, cancellationToken);
                    }

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/xml"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet", requestedAtLocalVar);

                        UpdatePetResponse responseLocalVar = new(apiResponseLocalVar, _updatePet200ResponseDeserializationContext_DeserializationContext_DeserializationContext_DeserializationContext_updatePet200ResponseDeserializationContext);

                        AfterUpdatePetDefaultImplementation(responseLocalVar, pet);

                        Events.ExecuteOnUpdatePet(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdatePetDefaultImplementation(e, "/pet", uriBuilderLocalVar.Path, pet);
                Events.ExecuteOnErrorUpdatePet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdatePetResponse"/>
        /// </summary>
        public partial class UpdatePetResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly UpdatePet200ResponseDeserializationContext? _updatePet200ResponseDeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;
            private readonly UpdatePet200ResponseDeserializationContext? _updatePet200ResponseDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="UpdatePetResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="updatePet200ResponseDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="updatePet200ResponseDeserializationContext"></param>
            public UpdatePetResponse(UseSourceGeneration.Client.ApiResponse content,
                UpdatePet200ResponseDeserializationContext updatePet200ResponseDeserializationContext                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext                UpdatePet200ResponseDeserializationContext updatePet200ResponseDeserializationContext)
            {
                _updatePet200ResponseDeserializationContext = updatePet200ResponseDeserializationContext;
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                _updatePet200ResponseDeserializationContext = updatePet200ResponseDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="UpdatePetResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public UpdatePetResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out UpdatePet200Response? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _updatePet200ResponseDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<UpdatePet200Response>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<UpdatePet200Response>(Content.RawContent, _updatePet200ResponseDeserializationContext.UpdatePet200Response);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out UpdatePet200Response? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<UpdatePet200Response>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed() => 405 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault() => !IsOk() && !IsBadRequest() && !IsNotFound() && !IsMethodNotAllowed();

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsDefault([NotNullWhen(true)]out UpdatePet200Response? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsDefault())
                    return false;

                result = _updatePet200ResponseDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<UpdatePet200Response>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<UpdatePet200Response>(Content.RawContent, _updatePet200ResponseDeserializationContext.UpdatePet200Response);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsDefault([NotNullWhen(true)]out UpdatePet200Response? result)
            {
                result = null;
                if (!IsDefault())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<UpdatePet200Response>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatUpdatePetWithForm(ref long petId, ref Option<string> name, ref Option<string> status);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateUpdatePetWithForm(Option<string> name, Option<string> status)
        {
            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="updatePetWithFormResponseLocalVar"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        private void AfterUpdatePetWithFormDefaultImplementation(UpdatePetWithFormResponse updatePetWithFormResponseLocalVar, long petId, Option<string> name, Option<string> status)
        {
            bool suppressDefaultLog = false;
            AfterUpdatePetWithForm(ref suppressDefaultLog, updatePetWithFormResponseLocalVar, petId, name, status);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (updatePetWithFormResponseLocalVar.Content.DownloadedAt - updatePetWithFormResponseLocalVar.Content.RequestedAt).TotalSeconds, updatePetWithFormResponseLocalVar.Content.StatusCode, updatePetWithFormResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="updatePetWithFormResponseLocalVar"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        partial void AfterUpdatePetWithForm(ref bool suppressDefaultLog, UpdatePetWithFormResponse updatePetWithFormResponseLocalVar, long petId, Option<string> name, Option<string> status);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        private void OnErrorUpdatePetWithFormDefaultImplementation(Exception exception, string pathFormat, string path, long petId, Option<string> name, Option<string> status)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdatePetWithForm(ref suppressDefaultLog, exception, pathFormat, path, petId, name, status);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        partial void OnErrorUpdatePetWithForm(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, long petId, Option<string> name, Option<string> status);

        /// <summary>
        /// Updates a pet in the store with form data 
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet (optional)</param>
        /// <param name="status">Updated status of the pet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> UpdatePetWithFormOrDefaultAsync(long petId, Option<string> name = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdatePetWithFormAsync(petId, name, status, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a pet in the store with form data 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet (optional)</param>
        /// <param name="status">Updated status of the pet (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="UpdatePetWithFormResponse"/>&gt;</returns>
        public async Task<UpdatePetWithFormResponse> UpdatePetWithFormAsync(long petId, Option<string> name = default, Option<string> status = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdatePetWithForm(name, status);

                FormatUpdatePetWithForm(ref petId, ref name, ref status);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/pet/{petId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpetId%7D", Uri.EscapeDataString(petId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (name.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("name", ClientUtils.ParameterToString(name.Value)));

                    if (status.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("status", ClientUtils.ParameterToString(status.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet/{petId}", requestedAtLocalVar);

                        UpdatePetWithFormResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterUpdatePetWithFormDefaultImplementation(responseLocalVar, petId, name, status);

                        Events.ExecuteOnUpdatePetWithForm(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdatePetWithFormDefaultImplementation(e, "/pet/{petId}", uriBuilderLocalVar.Path, petId, name, status);
                Events.ExecuteOnErrorUpdatePetWithForm(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdatePetWithFormResponse"/>
        /// </summary>
        public partial class UpdatePetWithFormResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="UpdatePetWithFormResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public UpdatePetWithFormResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="UpdatePetWithFormResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public UpdatePetWithFormResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed() => 405 == (int)Content.StatusCode;
        }

        partial void FormatUploadFile(ref long petId, ref Option<System.IO.Stream> file, ref Option<string> additionalMetadata);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        /// <returns></returns>
        private void ValidateUploadFile(Option<System.IO.Stream> file, Option<string> additionalMetadata)
        {
            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));

            if (additionalMetadata.IsSet && additionalMetadata.Value == null)
                throw new ArgumentNullException(nameof(additionalMetadata));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="uploadFileResponseLocalVar"></param>
        /// <param name="petId"></param>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        private void AfterUploadFileDefaultImplementation(UploadFileResponse uploadFileResponseLocalVar, long petId, Option<System.IO.Stream> file, Option<string> additionalMetadata)
        {
            bool suppressDefaultLog = false;
            AfterUploadFile(ref suppressDefaultLog, uploadFileResponseLocalVar, petId, file, additionalMetadata);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (uploadFileResponseLocalVar.Content.DownloadedAt - uploadFileResponseLocalVar.Content.RequestedAt).TotalSeconds, uploadFileResponseLocalVar.Content.StatusCode, uploadFileResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="uploadFileResponseLocalVar"></param>
        /// <param name="petId"></param>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        partial void AfterUploadFile(ref bool suppressDefaultLog, UploadFileResponse uploadFileResponseLocalVar, long petId, Option<System.IO.Stream> file, Option<string> additionalMetadata);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        private void OnErrorUploadFileDefaultImplementation(Exception exception, string pathFormat, string path, long petId, Option<System.IO.Stream> file, Option<string> additionalMetadata)
        {
            bool suppressDefaultLog = false;
            OnErrorUploadFile(ref suppressDefaultLog, exception, pathFormat, path, petId, file, additionalMetadata);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="petId"></param>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        partial void OnErrorUploadFile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, long petId, Option<System.IO.Stream> file, Option<string> additionalMetadata);

        /// <summary>
        /// uploads an image 
        /// </summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ApiResponse"/></returns>
        public async Task<ApiResponse<ApiResponse>?> UploadFileOrDefaultAsync(long petId, Option<System.IO.Stream> file = default, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadFileAsync(petId, file, additionalMetadata, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// uploads an image 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="UploadFileResponse"/>&gt;</returns>
        public async Task<UploadFileResponse> UploadFileAsync(long petId, Option<System.IO.Stream> file = default, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadFile(file, additionalMetadata);

                FormatUploadFile(ref petId, ref file, ref additionalMetadata);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/pet/{petId}/uploadImage";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpetId%7D", Uri.EscapeDataString(petId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    if (additionalMetadata.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("additionalMetadata", ClientUtils.ParameterToString(additionalMetadata.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/pet/{petId}/uploadImage", requestedAtLocalVar);

                        UploadFileResponse responseLocalVar = new(apiResponseLocalVar, _apiResponseDeserializationContext);

                        AfterUploadFileDefaultImplementation(responseLocalVar, petId, file, additionalMetadata);

                        Events.ExecuteOnUploadFile(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadFileDefaultImplementation(e, "/pet/{petId}/uploadImage", uriBuilderLocalVar.Path, petId, file, additionalMetadata);
                Events.ExecuteOnErrorUploadFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadFileResponse"/>
        /// </summary>
        public partial class UploadFileResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly ApiResponseDeserializationContext? _apiResponseDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="UploadFileResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="apiResponseDeserializationContext"></param>
            public UploadFileResponse(UseSourceGeneration.Client.ApiResponse content,
                ApiResponseDeserializationContext apiResponseDeserializationContext)
            {
                _apiResponseDeserializationContext = apiResponseDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="UploadFileResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public UploadFileResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out ApiResponse? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _apiResponseDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(Content.RawContent, _apiResponseDeserializationContext.ApiResponse);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out ApiResponse? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatUploadFileWithRequiredFile(ref System.IO.Stream requiredFile, ref long petId, ref Option<string> additionalMetadata);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requiredFile"></param>
        /// <param name="additionalMetadata"></param>
        /// <returns></returns>
        private void ValidateUploadFileWithRequiredFile(System.IO.Stream requiredFile, Option<string> additionalMetadata)
        {
            if (requiredFile == null)
                throw new ArgumentNullException(nameof(requiredFile));

            if (additionalMetadata.IsSet && additionalMetadata.Value == null)
                throw new ArgumentNullException(nameof(additionalMetadata));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="uploadFileWithRequiredFileResponseLocalVar"></param>
        /// <param name="requiredFile"></param>
        /// <param name="petId"></param>
        /// <param name="additionalMetadata"></param>
        private void AfterUploadFileWithRequiredFileDefaultImplementation(UploadFileWithRequiredFileResponse uploadFileWithRequiredFileResponseLocalVar, System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata)
        {
            bool suppressDefaultLog = false;
            AfterUploadFileWithRequiredFile(ref suppressDefaultLog, uploadFileWithRequiredFileResponseLocalVar, requiredFile, petId, additionalMetadata);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (uploadFileWithRequiredFileResponseLocalVar.Content.DownloadedAt - uploadFileWithRequiredFileResponseLocalVar.Content.RequestedAt).TotalSeconds, uploadFileWithRequiredFileResponseLocalVar.Content.StatusCode, uploadFileWithRequiredFileResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="uploadFileWithRequiredFileResponseLocalVar"></param>
        /// <param name="requiredFile"></param>
        /// <param name="petId"></param>
        /// <param name="additionalMetadata"></param>
        partial void AfterUploadFileWithRequiredFile(ref bool suppressDefaultLog, UploadFileWithRequiredFileResponse uploadFileWithRequiredFileResponseLocalVar, System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requiredFile"></param>
        /// <param name="petId"></param>
        /// <param name="additionalMetadata"></param>
        private void OnErrorUploadFileWithRequiredFileDefaultImplementation(Exception exception, string pathFormat, string path, System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata)
        {
            bool suppressDefaultLog = false;
            OnErrorUploadFileWithRequiredFile(ref suppressDefaultLog, exception, pathFormat, path, requiredFile, petId, additionalMetadata);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requiredFile"></param>
        /// <param name="petId"></param>
        /// <param name="additionalMetadata"></param>
        partial void OnErrorUploadFileWithRequiredFile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata);

        /// <summary>
        /// uploads an image (required) 
        /// </summary>
        /// <param name="requiredFile">file to upload</param>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ApiResponse"/></returns>
        public async Task<ApiResponse<ApiResponse>?> UploadFileWithRequiredFileOrDefaultAsync(System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadFileWithRequiredFileAsync(requiredFile, petId, additionalMetadata, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// uploads an image (required) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredFile">file to upload</param>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="UploadFileWithRequiredFileResponse"/>&gt;</returns>
        public async Task<UploadFileWithRequiredFileResponse> UploadFileWithRequiredFileAsync(System.IO.Stream requiredFile, long petId, Option<string> additionalMetadata = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadFileWithRequiredFile(requiredFile, additionalMetadata);

                FormatUploadFileWithRequiredFile(ref requiredFile, ref petId, ref additionalMetadata);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/fake/{petId}/uploadImageWithRequiredFile";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpetId%7D", Uri.EscapeDataString(petId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(requiredFile));

                    if (additionalMetadata.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("additionalMetadata", ClientUtils.ParameterToString(additionalMetadata.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar = (OAuthToken) await OauthTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar);

                    oauthTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/fake/{petId}/uploadImageWithRequiredFile", requestedAtLocalVar);

                        UploadFileWithRequiredFileResponse responseLocalVar = new(apiResponseLocalVar, _apiResponseDeserializationContext);

                        AfterUploadFileWithRequiredFileDefaultImplementation(responseLocalVar, requiredFile, petId, additionalMetadata);

                        Events.ExecuteOnUploadFileWithRequiredFile(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadFileWithRequiredFileDefaultImplementation(e, "/fake/{petId}/uploadImageWithRequiredFile", uriBuilderLocalVar.Path, requiredFile, petId, additionalMetadata);
                Events.ExecuteOnErrorUploadFileWithRequiredFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadFileWithRequiredFileResponse"/>
        /// </summary>
        public partial class UploadFileWithRequiredFileResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly ApiResponseDeserializationContext? _apiResponseDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="UploadFileWithRequiredFileResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="apiResponseDeserializationContext"></param>
            public UploadFileWithRequiredFileResponse(UseSourceGeneration.Client.ApiResponse content,
                ApiResponseDeserializationContext apiResponseDeserializationContext)
            {
                _apiResponseDeserializationContext = apiResponseDeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="UploadFileWithRequiredFileResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public UploadFileWithRequiredFileResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out ApiResponse? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _apiResponseDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(Content.RawContent, _apiResponseDeserializationContext.ApiResponse);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out ApiResponse? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }
    }
}
