// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using UseSourceGeneration.Client;
using UseSourceGeneration.Api;
using UseSourceGeneration.Model;
using System.Diagnostics.CodeAnalysis;

namespace UseSourceGeneration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUserApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UserApiEvents Events { get; }

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Created user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> CreateUserAsync(User user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="user">Created user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> CreateUserOrDefaultAsync(User user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> CreateUsersWithArrayInputAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> CreateUsersWithArrayInputOrDefaultAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> CreateUsersWithListInputAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> CreateUsersWithListInputOrDefaultAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The name that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> DeleteUserAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="username">The name that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> DeleteUserOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;User&gt;&gt;</returns>
        Task<ApiResponse<User>> GetUserByNameAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;User&gt;?&gt;</returns>
        Task<ApiResponse<User>?> GetUserByNameOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> LoginUserAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> LoginUserOrDefaultAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> LogoutUserAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> LogoutUserOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Updated user object</param>
        /// <param name="username">name that need to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> UpdateUserAsync(User user, string username, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="user">Updated user object</param>
        /// <param name="username">name that need to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<ApiResponse<object>?> UpdateUserOrDefaultAsync(User user, string username, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class UserApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnCreateUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateUser;

        internal void ExecuteOnCreateUser(UserApi.CreateUserResponse createUserResponse)
        {
            OnCreateUser?.Invoke(this, new ApiResponseEventArgs<CreateUserResponse>(createUserResponse));
        }

        internal void ExecuteOnErrorCreateUser(Exception exception)
        {
            OnErrorCreateUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnCreateUsersWithArrayInput;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateUsersWithArrayInput;

        internal void ExecuteOnCreateUsersWithArrayInput(UserApi.CreateUsersWithArrayInputResponse createUsersWithArrayInputResponse)
        {
            OnCreateUsersWithArrayInput?.Invoke(this, new ApiResponseEventArgs<CreateUsersWithArrayInputResponse>(createUsersWithArrayInputResponse));
        }

        internal void ExecuteOnErrorCreateUsersWithArrayInput(Exception exception)
        {
            OnErrorCreateUsersWithArrayInput?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnCreateUsersWithListInput;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateUsersWithListInput;

        internal void ExecuteOnCreateUsersWithListInput(UserApi.CreateUsersWithListInputResponse createUsersWithListInputResponse)
        {
            OnCreateUsersWithListInput?.Invoke(this, new ApiResponseEventArgs<CreateUsersWithListInputResponse>(createUsersWithListInputResponse));
        }

        internal void ExecuteOnErrorCreateUsersWithListInput(Exception exception)
        {
            OnErrorCreateUsersWithListInput?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnDeleteUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteUser;

        internal void ExecuteOnDeleteUser(UserApi.DeleteUserResponse deleteUserResponse)
        {
            OnDeleteUser?.Invoke(this, new ApiResponseEventArgs<DeleteUserResponse>(deleteUserResponse));
        }

        internal void ExecuteOnErrorDeleteUser(Exception exception)
        {
            OnErrorDeleteUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<User>>? OnGetUserByName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserByName;

        internal void ExecuteOnGetUserByName(UserApi.GetUserByNameResponse getUserByNameResponse)
        {
            OnGetUserByName?.Invoke(this, new ApiResponseEventArgs<GetUserByNameResponse>(getUserByNameResponse));
        }

        internal void ExecuteOnErrorGetUserByName(Exception exception)
        {
            OnErrorGetUserByName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnLoginUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLoginUser;

        internal void ExecuteOnLoginUser(UserApi.LoginUserResponse loginUserResponse)
        {
            OnLoginUser?.Invoke(this, new ApiResponseEventArgs<LoginUserResponse>(loginUserResponse));
        }

        internal void ExecuteOnErrorLoginUser(Exception exception)
        {
            OnErrorLoginUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnLogoutUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLogoutUser;

        internal void ExecuteOnLogoutUser(UserApi.LogoutUserResponse logoutUserResponse)
        {
            OnLogoutUser?.Invoke(this, new ApiResponseEventArgs<LogoutUserResponse>(logoutUserResponse));
        }

        internal void ExecuteOnErrorLogoutUser(Exception exception)
        {
            OnErrorLogoutUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnUpdateUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateUser;

        internal void ExecuteOnUpdateUser(UserApi.UpdateUserResponse updateUserResponse)
        {
            OnUpdateUser?.Invoke(this, new ApiResponseEventArgs<UpdateUserResponse>(updateUserResponse));
        }

        internal void ExecuteOnErrorUpdateUser(Exception exception)
        {
            OnErrorUpdateUser?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UserApi : IUserApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        private UserDeserializationContext _userDeserializationContext;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UserApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UserApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="HttpSignatureTokenProvider"/>
        /// </summary>
        public TokenProvider<HttpSignatureToken> HttpSignatureTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(ILogger<UserApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UserApiEvents userApiEvents,
            UserDeserializationContext userDeserializationContext,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            _userDeserializationContext = userDeserializationContext;
            Logger = logger;
            HttpClient = httpClient;
            Events = userApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
            HttpSignatureTokenProvider = httpSignatureTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateUser(User user);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        private void ValidateCreateUser(User user)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="createUserResponseLocalVar"></param>
        /// <param name="user"></param>
        private void AfterCreateUserDefaultImplementation(CreateUserResponse createUserResponseLocalVar, User user)
        {
            bool suppressDefaultLog = false;
            AfterCreateUser(ref suppressDefaultLog, createUserResponseLocalVar, user);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (createUserResponseLocalVar.Content.DownloadedAt - createUserResponseLocalVar.Content.RequestedAt).TotalSeconds, createUserResponseLocalVar.Content.StatusCode, createUserResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="createUserResponseLocalVar"></param>
        /// <param name="user"></param>
        partial void AfterCreateUser(ref bool suppressDefaultLog, CreateUserResponse createUserResponseLocalVar, User user);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        private void OnErrorCreateUserDefaultImplementation(Exception exception, string pathFormat, string path, User user)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateUser(ref suppressDefaultLog, exception, pathFormat, path, user);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        partial void OnErrorCreateUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, User user);

        /// <summary>
        /// Create user This can only be done by the logged in user.
        /// </summary>
        /// <param name="user">Created user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> CreateUserOrDefaultAsync(User user, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateUserAsync(user, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create user This can only be done by the logged in user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Created user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CreateUserResponse"/>&gt;</returns>
        public async Task<CreateUserResponse> CreateUserAsync(User user, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateUser(user);

                FormatCreateUser(user);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user";

                    httpRequestMessageLocalVar.Content = (user as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(user, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user", requestedAtLocalVar);

                        CreateUserResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterCreateUserDefaultImplementation(responseLocalVar, user);

                        Events.ExecuteOnCreateUser(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateUserDefaultImplementation(e, "/user", uriBuilderLocalVar.Path, user);
                Events.ExecuteOnErrorCreateUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateUserResponse"/>
        /// </summary>
        public partial class CreateUserResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="CreateUserResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public CreateUserResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="CreateUserResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public CreateUserResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault() => true;
        }

        partial void FormatCreateUsersWithArrayInput(List<User> user);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        private void ValidateCreateUsersWithArrayInput(List<User> user)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="createUsersWithArrayInputResponseLocalVar"></param>
        /// <param name="user"></param>
        private void AfterCreateUsersWithArrayInputDefaultImplementation(CreateUsersWithArrayInputResponse createUsersWithArrayInputResponseLocalVar, List<User> user)
        {
            bool suppressDefaultLog = false;
            AfterCreateUsersWithArrayInput(ref suppressDefaultLog, createUsersWithArrayInputResponseLocalVar, user);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (createUsersWithArrayInputResponseLocalVar.Content.DownloadedAt - createUsersWithArrayInputResponseLocalVar.Content.RequestedAt).TotalSeconds, createUsersWithArrayInputResponseLocalVar.Content.StatusCode, createUsersWithArrayInputResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="createUsersWithArrayInputResponseLocalVar"></param>
        /// <param name="user"></param>
        partial void AfterCreateUsersWithArrayInput(ref bool suppressDefaultLog, CreateUsersWithArrayInputResponse createUsersWithArrayInputResponseLocalVar, List<User> user);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        private void OnErrorCreateUsersWithArrayInputDefaultImplementation(Exception exception, string pathFormat, string path, List<User> user)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateUsersWithArrayInput(ref suppressDefaultLog, exception, pathFormat, path, user);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        partial void OnErrorCreateUsersWithArrayInput(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, List<User> user);

        /// <summary>
        /// Creates list of users with given input array 
        /// </summary>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> CreateUsersWithArrayInputOrDefaultAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateUsersWithArrayInputAsync(user, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates list of users with given input array 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CreateUsersWithArrayInputResponse"/>&gt;</returns>
        public async Task<CreateUsersWithArrayInputResponse> CreateUsersWithArrayInputAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateUsersWithArrayInput(user);

                FormatCreateUsersWithArrayInput(user);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/createWithArray";

                    httpRequestMessageLocalVar.Content = (user as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(user, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/createWithArray", requestedAtLocalVar);

                        CreateUsersWithArrayInputResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterCreateUsersWithArrayInputDefaultImplementation(responseLocalVar, user);

                        Events.ExecuteOnCreateUsersWithArrayInput(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateUsersWithArrayInputDefaultImplementation(e, "/user/createWithArray", uriBuilderLocalVar.Path, user);
                Events.ExecuteOnErrorCreateUsersWithArrayInput(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateUsersWithArrayInputResponse"/>
        /// </summary>
        public partial class CreateUsersWithArrayInputResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="CreateUsersWithArrayInputResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public CreateUsersWithArrayInputResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="CreateUsersWithArrayInputResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public CreateUsersWithArrayInputResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault() => true;
        }

        partial void FormatCreateUsersWithListInput(List<User> user);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        private void ValidateCreateUsersWithListInput(List<User> user)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="createUsersWithListInputResponseLocalVar"></param>
        /// <param name="user"></param>
        private void AfterCreateUsersWithListInputDefaultImplementation(CreateUsersWithListInputResponse createUsersWithListInputResponseLocalVar, List<User> user)
        {
            bool suppressDefaultLog = false;
            AfterCreateUsersWithListInput(ref suppressDefaultLog, createUsersWithListInputResponseLocalVar, user);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (createUsersWithListInputResponseLocalVar.Content.DownloadedAt - createUsersWithListInputResponseLocalVar.Content.RequestedAt).TotalSeconds, createUsersWithListInputResponseLocalVar.Content.StatusCode, createUsersWithListInputResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="createUsersWithListInputResponseLocalVar"></param>
        /// <param name="user"></param>
        partial void AfterCreateUsersWithListInput(ref bool suppressDefaultLog, CreateUsersWithListInputResponse createUsersWithListInputResponseLocalVar, List<User> user);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        private void OnErrorCreateUsersWithListInputDefaultImplementation(Exception exception, string pathFormat, string path, List<User> user)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateUsersWithListInput(ref suppressDefaultLog, exception, pathFormat, path, user);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        partial void OnErrorCreateUsersWithListInput(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, List<User> user);

        /// <summary>
        /// Creates list of users with given input array 
        /// </summary>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> CreateUsersWithListInputOrDefaultAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateUsersWithListInputAsync(user, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates list of users with given input array 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">List of user object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CreateUsersWithListInputResponse"/>&gt;</returns>
        public async Task<CreateUsersWithListInputResponse> CreateUsersWithListInputAsync(List<User> user, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateUsersWithListInput(user);

                FormatCreateUsersWithListInput(user);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/createWithList";

                    httpRequestMessageLocalVar.Content = (user as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(user, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/createWithList", requestedAtLocalVar);

                        CreateUsersWithListInputResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterCreateUsersWithListInputDefaultImplementation(responseLocalVar, user);

                        Events.ExecuteOnCreateUsersWithListInput(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateUsersWithListInputDefaultImplementation(e, "/user/createWithList", uriBuilderLocalVar.Path, user);
                Events.ExecuteOnErrorCreateUsersWithListInput(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateUsersWithListInputResponse"/>
        /// </summary>
        public partial class CreateUsersWithListInputResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="CreateUsersWithListInputResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public CreateUsersWithListInputResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="CreateUsersWithListInputResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public CreateUsersWithListInputResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault() => true;
        }

        partial void FormatDeleteUser(ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateDeleteUser(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="deleteUserResponseLocalVar"></param>
        /// <param name="username"></param>
        private void AfterDeleteUserDefaultImplementation(DeleteUserResponse deleteUserResponseLocalVar, string username)
        {
            bool suppressDefaultLog = false;
            AfterDeleteUser(ref suppressDefaultLog, deleteUserResponseLocalVar, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (deleteUserResponseLocalVar.Content.DownloadedAt - deleteUserResponseLocalVar.Content.RequestedAt).TotalSeconds, deleteUserResponseLocalVar.Content.StatusCode, deleteUserResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="deleteUserResponseLocalVar"></param>
        /// <param name="username"></param>
        partial void AfterDeleteUser(ref bool suppressDefaultLog, DeleteUserResponse deleteUserResponseLocalVar, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="username"></param>
        private void OnErrorDeleteUserDefaultImplementation(Exception exception, string pathFormat, string path, string username)
        {
            bool suppressDefaultLog = false;
            OnErrorDeleteUser(ref suppressDefaultLog, exception, pathFormat, path, username);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="username"></param>
        partial void OnErrorDeleteUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string username);

        /// <summary>
        /// Delete user This can only be done by the logged in user.
        /// </summary>
        /// <param name="username">The name that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> DeleteUserOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteUserAsync(username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete user This can only be done by the logged in user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The name that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="DeleteUserResponse"/>&gt;</returns>
        public async Task<DeleteUserResponse> DeleteUserAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteUser(username);

                FormatDeleteUser(ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/{username}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/{username}", requestedAtLocalVar);

                        DeleteUserResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext_DeserializationContext);

                        AfterDeleteUserDefaultImplementation(responseLocalVar, username);

                        Events.ExecuteOnDeleteUser(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteUserDefaultImplementation(e, "/user/{username}", uriBuilderLocalVar.Path, username);
                Events.ExecuteOnErrorDeleteUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteUserResponse"/>
        /// </summary>
        public partial class DeleteUserResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="DeleteUserResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public DeleteUserResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="DeleteUserResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public DeleteUserResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        partial void FormatGetUserByName(ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateGetUserByName(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="getUserByNameResponseLocalVar"></param>
        /// <param name="username"></param>
        private void AfterGetUserByNameDefaultImplementation(GetUserByNameResponse getUserByNameResponseLocalVar, string username)
        {
            bool suppressDefaultLog = false;
            AfterGetUserByName(ref suppressDefaultLog, getUserByNameResponseLocalVar, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (getUserByNameResponseLocalVar.Content.DownloadedAt - getUserByNameResponseLocalVar.Content.RequestedAt).TotalSeconds, getUserByNameResponseLocalVar.Content.StatusCode, getUserByNameResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="getUserByNameResponseLocalVar"></param>
        /// <param name="username"></param>
        partial void AfterGetUserByName(ref bool suppressDefaultLog, GetUserByNameResponse getUserByNameResponseLocalVar, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="username"></param>
        private void OnErrorGetUserByNameDefaultImplementation(Exception exception, string pathFormat, string path, string username)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserByName(ref suppressDefaultLog, exception, pathFormat, path, username);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="username"></param>
        partial void OnErrorGetUserByName(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string username);

        /// <summary>
        /// Get user by user name 
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="User"/></returns>
        public async Task<ApiResponse<User>?> GetUserByNameOrDefaultAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserByNameAsync(username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get user by user name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetUserByNameResponse"/>&gt;</returns>
        public async Task<GetUserByNameResponse> GetUserByNameAsync(string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserByName(username);

                FormatGetUserByName(ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/{username}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/{username}", requestedAtLocalVar);

                        GetUserByNameResponse responseLocalVar = new(apiResponseLocalVar, _userDeserializationContext_DeserializationContext_DeserializationContext);

                        AfterGetUserByNameDefaultImplementation(responseLocalVar, username);

                        Events.ExecuteOnGetUserByName(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserByNameDefaultImplementation(e, "/user/{username}", uriBuilderLocalVar.Path, username);
                Events.ExecuteOnErrorGetUserByName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserByNameResponse"/>
        /// </summary>
        public partial class GetUserByNameResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly UserDeserializationContext? _userDeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="GetUserByNameResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="userDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public GetUserByNameResponse(UseSourceGeneration.Client.ApiResponse content,
                UserDeserializationContext userDeserializationContext                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _userDeserializationContext = userDeserializationContext;
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="GetUserByNameResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public GetUserByNameResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out User? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _userDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<User>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<User>(Content.RawContent, _userDeserializationContext.User);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out User? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<User>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        partial void FormatLoginUser(ref string username, ref string password);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        private void ValidateLoginUser(string username, string password)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (password == null)
                throw new ArgumentNullException(nameof(password));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="loginUserResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        private void AfterLoginUserDefaultImplementation(LoginUserResponse loginUserResponseLocalVar, string username, string password)
        {
            bool suppressDefaultLog = false;
            AfterLoginUser(ref suppressDefaultLog, loginUserResponseLocalVar, username, password);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (loginUserResponseLocalVar.Content.DownloadedAt - loginUserResponseLocalVar.Content.RequestedAt).TotalSeconds, loginUserResponseLocalVar.Content.StatusCode, loginUserResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="loginUserResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        partial void AfterLoginUser(ref bool suppressDefaultLog, LoginUserResponse loginUserResponseLocalVar, string username, string password);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        private void OnErrorLoginUserDefaultImplementation(Exception exception, string pathFormat, string path, string username, string password)
        {
            bool suppressDefaultLog = false;
            OnErrorLoginUser(ref suppressDefaultLog, exception, pathFormat, path, username, password);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        partial void OnErrorLoginUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string username, string password);

        /// <summary>
        /// Logs user into the system 
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> LoginUserOrDefaultAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LoginUserAsync(username, password, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Logs user into the system 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="LoginUserResponse"/>&gt;</returns>
        public async Task<LoginUserResponse> LoginUserAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLoginUser(username, password);

                FormatLoginUser(ref username, ref password);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/login";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["username"] = username.ToString();
                    parseQueryStringLocalVar["password"] = password.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/login", requestedAtLocalVar);

                        LoginUserResponse responseLocalVar = new(apiResponseLocalVar, _varStringDeserializationContext_DeserializationContext);

                        AfterLoginUserDefaultImplementation(responseLocalVar, username, password);

                        Events.ExecuteOnLoginUser(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLoginUserDefaultImplementation(e, "/user/login", uriBuilderLocalVar.Path, username, password);
                Events.ExecuteOnErrorLoginUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LoginUserResponse"/>
        /// </summary>
        public partial class LoginUserResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly stringDeserializationContext? _varStringDeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="LoginUserResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="varStringDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public LoginUserResponse(UseSourceGeneration.Client.ApiResponse content,
                stringDeserializationContext varStringDeserializationContext                DeserializationContext DeserializationContext)
            {
                _varStringDeserializationContext = varStringDeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="LoginUserResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public LoginUserResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out string? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _varStringDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<string>(Content.RawContent, _varStringDeserializationContext.string);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out string? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<string>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="logoutUserResponseLocalVar"></param>
        private void AfterLogoutUserDefaultImplementation(LogoutUserResponse logoutUserResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterLogoutUser(ref suppressDefaultLog, logoutUserResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (logoutUserResponseLocalVar.Content.DownloadedAt - logoutUserResponseLocalVar.Content.RequestedAt).TotalSeconds, logoutUserResponseLocalVar.Content.StatusCode, logoutUserResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="logoutUserResponseLocalVar"></param>
        partial void AfterLogoutUser(ref bool suppressDefaultLog, LogoutUserResponse logoutUserResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorLogoutUserDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorLogoutUser(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorLogoutUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Logs out current logged in user session 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> LogoutUserOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LogoutUserAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Logs out current logged in user session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="LogoutUserResponse"/>&gt;</returns>
        public async Task<LogoutUserResponse> LogoutUserAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/logout";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/logout", requestedAtLocalVar);

                        LogoutUserResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext);

                        AfterLogoutUserDefaultImplementation(responseLocalVar);

                        Events.ExecuteOnLogoutUser(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLogoutUserDefaultImplementation(e, "/user/logout", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorLogoutUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LogoutUserResponse"/>
        /// </summary>
        public partial class LogoutUserResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="LogoutUserResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            public LogoutUserResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="LogoutUserResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public LogoutUserResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault() => true;
        }

        partial void FormatUpdateUser(User user, ref string username);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        private void ValidateUpdateUser(User user, string username)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));

            if (username == null)
                throw new ArgumentNullException(nameof(username));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="updateUserResponseLocalVar"></param>
        /// <param name="user"></param>
        /// <param name="username"></param>
        private void AfterUpdateUserDefaultImplementation(UpdateUserResponse updateUserResponseLocalVar, User user, string username)
        {
            bool suppressDefaultLog = false;
            AfterUpdateUser(ref suppressDefaultLog, updateUserResponseLocalVar, user, username);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (updateUserResponseLocalVar.Content.DownloadedAt - updateUserResponseLocalVar.Content.RequestedAt).TotalSeconds, updateUserResponseLocalVar.Content.StatusCode, updateUserResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="updateUserResponseLocalVar"></param>
        /// <param name="user"></param>
        /// <param name="username"></param>
        partial void AfterUpdateUser(ref bool suppressDefaultLog, UpdateUserResponse updateUserResponseLocalVar, User user, string username);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        /// <param name="username"></param>
        private void OnErrorUpdateUserDefaultImplementation(Exception exception, string pathFormat, string path, User user, string username)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateUser(ref suppressDefaultLog, exception, pathFormat, path, user, username);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="user"></param>
        /// <param name="username"></param>
        partial void OnErrorUpdateUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, User user, string username);

        /// <summary>
        /// Updated user This can only be done by the logged in user.
        /// </summary>
        /// <param name="user">Updated user object</param>
        /// <param name="username">name that need to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>?> UpdateUserOrDefaultAsync(User user, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateUserAsync(user, username, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updated user This can only be done by the logged in user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Updated user object</param>
        /// <param name="username">name that need to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="UpdateUserResponse"/>&gt;</returns>
        public async Task<UpdateUserResponse> UpdateUserAsync(User user, string username, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateUser(user, username);

                FormatUpdateUser(user, ref username);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/user/{username}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    httpRequestMessageLocalVar.Content = (user as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(user, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/{username}", requestedAtLocalVar);

                        UpdateUserResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext_DeserializationContext);

                        AfterUpdateUserDefaultImplementation(responseLocalVar, user, username);

                        Events.ExecuteOnUpdateUser(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateUserDefaultImplementation(e, "/user/{username}", uriBuilderLocalVar.Path, user, username);
                Events.ExecuteOnErrorUpdateUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateUserResponse"/>
        /// </summary>
        public partial class UpdateUserResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            private readonly DeserializationContext? _DeserializationContext;
            private readonly DeserializationContext? _DeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="UpdateUserResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public UpdateUserResponse(UseSourceGeneration.Client.ApiResponse content,
                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="UpdateUserResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public UpdateUserResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }
    }
}
