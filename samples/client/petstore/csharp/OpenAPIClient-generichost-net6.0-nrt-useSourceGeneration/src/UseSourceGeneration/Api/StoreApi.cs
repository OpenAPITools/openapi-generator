// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using UseSourceGeneration.Client;
using UseSourceGeneration.Api;
using UseSourceGeneration.Model;
using System.Diagnostics.CodeAnalysis;

namespace UseSourceGeneration.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStoreApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StoreApiEvents Events { get; }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> DeleteOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
        /// </remarks>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;object&gt;?&gt;</returns>
        Task<object?> DeleteOrderOrDefaultAsync(string orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>
        /// Returns a map of status codes to quantities
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Dictionary&lt;string, int&gt;&gt;&gt;</returns>
        Task<ApiResponse<Dictionary<string, int>>> GetInventoryAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>
        /// Returns a map of status codes to quantities
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;Dictionary&lt;string, int&gt;&gt;?&gt;</returns>
        Task<Dictionary<string, int>?> GetInventoryOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Order&gt;&gt;</returns>
        Task<ApiResponse<Order>> GetOrderByIdAsync(long orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions
        /// </remarks>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;Order&gt;?&gt;</returns>
        Task<Order?> GetOrderByIdOrDefaultAsync(long orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order placed for purchasing the pet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;Order&gt;&gt;</returns>
        Task<ApiResponse<Order>> PlaceOrderAsync(Order order, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="order">order placed for purchasing the pet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;Order&gt;?&gt;</returns>
        Task<Order?> PlaceOrderOrDefaultAsync(Order order, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class StoreApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<object>>? OnDeleteOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrder;

        internal void ExecuteOnDeleteOrder(StoreApi.DeleteOrderResponse deleteOrderResponse)
        {
            OnDeleteOrder?.Invoke(this, new ApiResponseEventArgs<DeleteOrderResponse>(deleteOrderResponse));
        }

        internal void ExecuteOnErrorDeleteOrder(Exception exception)
        {
            OnErrorDeleteOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<Dictionary<string, int>>>? OnGetInventory;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInventory;

        internal void ExecuteOnGetInventory(StoreApi.GetInventoryResponse getInventoryResponse)
        {
            OnGetInventory?.Invoke(this, new ApiResponseEventArgs<GetInventoryResponse>(getInventoryResponse));
        }

        internal void ExecuteOnErrorGetInventory(Exception exception)
        {
            OnErrorGetInventory?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<Order>>? OnGetOrderById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrderById;

        internal void ExecuteOnGetOrderById(StoreApi.GetOrderByIdResponse getOrderByIdResponse)
        {
            OnGetOrderById?.Invoke(this, new ApiResponseEventArgs<GetOrderByIdResponse>(getOrderByIdResponse));
        }

        internal void ExecuteOnErrorGetOrderById(Exception exception)
        {
            OnErrorGetOrderById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<Order>>? OnPlaceOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPlaceOrder;

        internal void ExecuteOnPlaceOrder(StoreApi.PlaceOrderResponse placeOrderResponse)
        {
            OnPlaceOrder?.Invoke(this, new ApiResponseEventArgs<PlaceOrderResponse>(placeOrderResponse));
        }

        internal void ExecuteOnErrorPlaceOrder(Exception exception)
        {
            OnErrorPlaceOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StoreApi : IStoreApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        private OrderDeserializationContext _orderDeserializationContext;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StoreApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StoreApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="HttpSignatureTokenProvider"/>
        /// </summary>
        public TokenProvider<HttpSignatureToken> HttpSignatureTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoreApi(ILogger<StoreApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StoreApiEvents storeApiEvents,
            OrderDeserializationContext orderDeserializationContext,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            _orderDeserializationContext = orderDeserializationContext;
            Logger = logger;
            HttpClient = httpClient;
            Events = storeApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
            HttpSignatureTokenProvider = httpSignatureTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteOrder(ref string orderId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        private void ValidateDeleteOrder(string orderId)
        {
            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="deleteOrderResponseLocalVar"></param>
        /// <param name="orderId"></param>
        private void AfterDeleteOrderDefaultImplementation(DeleteOrderResponse deleteOrderResponseLocalVar, string orderId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrder(ref suppressDefaultLog, deleteOrderResponseLocalVar, orderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (deleteOrderResponseLocalVar.Content.DownloadedAt - deleteOrderResponseLocalVar.Content.RequestedAt).TotalSeconds, deleteOrderResponseLocalVar.Content.StatusCode, deleteOrderResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="deleteOrderResponseLocalVar"></param>
        /// <param name="orderId"></param>
        partial void AfterDeleteOrder(ref bool suppressDefaultLog, DeleteOrderResponse deleteOrderResponseLocalVar, string orderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="orderId"></param>
        private void OnErrorDeleteOrderDefaultImplementation(Exception exception, string pathFormat, string path, string orderId)
        {
            bool suppressDefaultLog = false;
            OnErrorDeleteOrder(ref suppressDefaultLog, exception, pathFormat, path, orderId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="orderId"></param>
        partial void OnErrorDeleteOrder(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string orderId);

        /// <summary>
        /// Delete purchase order by ID For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
        /// </summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="DeleteOrderResponse"/>&gt;</returns>
        public async Task<DeleteOrderResponse?> DeleteOrderOrDefaultAsync(string orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrderAsync(orderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete purchase order by ID For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="DeleteOrderResponse"/>&gt;</returns>
        public async Task<DeleteOrderResponse> DeleteOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrder(orderId);

                FormatDeleteOrder(ref orderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/store/order/{order_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Border_id%7D", Uri.EscapeDataString(orderId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/store/order/{order_id}", requestedAtLocalVar);

                        DeleteOrderResponse responseLocalVar = new(apiResponseLocalVar, _DeserializationContext_DeserializationContext);

                        AfterDeleteOrderDefaultImplementation(responseLocalVar, orderId);

                        Events.ExecuteOnDeleteOrder(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrderDefaultImplementation(e, "/store/order/{order_id}", uriBuilderLocalVar.Path, orderId);
                Events.ExecuteOnErrorDeleteOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrderResponse"/>
        /// </summary>
        public partial class DeleteOrderResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="DeleteOrderResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public DeleteOrderResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="getInventoryResponseLocalVar"></param>
        private void AfterGetInventoryDefaultImplementation(GetInventoryResponse getInventoryResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetInventory(ref suppressDefaultLog, getInventoryResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (getInventoryResponseLocalVar.Content.DownloadedAt - getInventoryResponseLocalVar.Content.RequestedAt).TotalSeconds, getInventoryResponseLocalVar.Content.StatusCode, getInventoryResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="getInventoryResponseLocalVar"></param>
        partial void AfterGetInventory(ref bool suppressDefaultLog, GetInventoryResponse getInventoryResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetInventoryDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetInventory(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetInventory(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Returns pet inventories by status Returns a map of status codes to quantities
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetInventoryResponse"/>&gt;</returns>
        public async Task<GetInventoryResponse?> GetInventoryOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInventoryAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns pet inventories by status Returns a map of status codes to quantities
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetInventoryResponse"/>&gt;</returns>
        public async Task<GetInventoryResponse> GetInventoryAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/store/inventory";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "api_key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/store/inventory", requestedAtLocalVar);

                        GetInventoryResponse responseLocalVar = new(apiResponseLocalVar, _dictionaryltstringIntgtDeserializationContext);

                        AfterGetInventoryDefaultImplementation(responseLocalVar);

                        Events.ExecuteOnGetInventory(responseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInventoryDefaultImplementation(e, "/store/inventory", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetInventory(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInventoryResponse"/>
        /// </summary>
        public partial class GetInventoryResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="GetInventoryResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public GetInventoryResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out Dictionary<string, int>? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, int>>(Content.RawContent, _jsonSerializerOptions);
                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out Dictionary<string, int>? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, int>>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }
        }

        partial void FormatGetOrderById(ref long orderId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="getOrderByIdResponseLocalVar"></param>
        /// <param name="orderId"></param>
        private void AfterGetOrderByIdDefaultImplementation(GetOrderByIdResponse getOrderByIdResponseLocalVar, long orderId)
        {
            bool suppressDefaultLog = false;
            AfterGetOrderById(ref suppressDefaultLog, getOrderByIdResponseLocalVar, orderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (getOrderByIdResponseLocalVar.Content.DownloadedAt - getOrderByIdResponseLocalVar.Content.RequestedAt).TotalSeconds, getOrderByIdResponseLocalVar.Content.StatusCode, getOrderByIdResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="getOrderByIdResponseLocalVar"></param>
        /// <param name="orderId"></param>
        partial void AfterGetOrderById(ref bool suppressDefaultLog, GetOrderByIdResponse getOrderByIdResponseLocalVar, long orderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="orderId"></param>
        private void OnErrorGetOrderByIdDefaultImplementation(Exception exception, string pathFormat, string path, long orderId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetOrderById(ref suppressDefaultLog, exception, pathFormat, path, orderId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="orderId"></param>
        partial void OnErrorGetOrderById(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, long orderId);

        /// <summary>
        /// Find purchase order by ID For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions
        /// </summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetOrderByIdResponse"/>&gt;</returns>
        public async Task<GetOrderByIdResponse?> GetOrderByIdOrDefaultAsync(long orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrderByIdAsync(orderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find purchase order by ID For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GetOrderByIdResponse"/>&gt;</returns>
        public async Task<GetOrderByIdResponse> GetOrderByIdAsync(long orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOrderById(ref orderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/store/order/{order_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Border_id%7D", Uri.EscapeDataString(orderId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/store/order/{order_id}", requestedAtLocalVar);

                        GetOrderByIdResponse responseLocalVar = new(apiResponseLocalVar, _orderDeserializationContext_DeserializationContext_DeserializationContext);

                        AfterGetOrderByIdDefaultImplementation(responseLocalVar, orderId);

                        Events.ExecuteOnGetOrderById(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrderByIdDefaultImplementation(e, "/store/order/{order_id}", uriBuilderLocalVar.Path, orderId);
                Events.ExecuteOnErrorGetOrderById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrderByIdResponse"/>
        /// </summary>
        public partial class GetOrderByIdResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            // isContainer: 
            // items: 
            // datatype 
            private readonly OrderDeserializationContext? _orderDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="GetOrderByIdResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="orderDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public GetOrderByIdResponse(UseSourceGeneration.Client.ApiResponse content,
                OrderDeserializationContext orderDeserializationContext                DeserializationContext DeserializationContext                DeserializationContext DeserializationContext)
            {
                _orderDeserializationContext = orderDeserializationContext;
                _DeserializationContext = DeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="GetOrderByIdResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public GetOrderByIdResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out Order? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _orderDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<Order>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<Order>(Content.RawContent, _orderDeserializationContext.Order);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out Order? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<Order>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound() => 404 == (int)Content.StatusCode;
        }

        partial void FormatPlaceOrder(Order order);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        private void ValidatePlaceOrder(Order order)
        {
            if (order == null)
                throw new ArgumentNullException(nameof(order));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="placeOrderResponseLocalVar"></param>
        /// <param name="order"></param>
        private void AfterPlaceOrderDefaultImplementation(PlaceOrderResponse placeOrderResponseLocalVar, Order order)
        {
            bool suppressDefaultLog = false;
            AfterPlaceOrder(ref suppressDefaultLog, placeOrderResponseLocalVar, order);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (placeOrderResponseLocalVar.Content.DownloadedAt - placeOrderResponseLocalVar.Content.RequestedAt).TotalSeconds, placeOrderResponseLocalVar.Content.StatusCode, placeOrderResponseLocalVar.Content.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="placeOrderResponseLocalVar"></param>
        /// <param name="order"></param>
        partial void AfterPlaceOrder(ref bool suppressDefaultLog, PlaceOrderResponse placeOrderResponseLocalVar, Order order);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="order"></param>
        private void OnErrorPlaceOrderDefaultImplementation(Exception exception, string pathFormat, string path, Order order)
        {
            bool suppressDefaultLog = false;
            OnErrorPlaceOrder(ref suppressDefaultLog, exception, pathFormat, path, order);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="order"></param>
        partial void OnErrorPlaceOrder(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Order order);

        /// <summary>
        /// Place an order for a pet 
        /// </summary>
        /// <param name="order">order placed for purchasing the pet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="PlaceOrderResponse"/>&gt;</returns>
        public async Task<PlaceOrderResponse?> PlaceOrderOrDefaultAsync(Order order, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PlaceOrderAsync(order, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Place an order for a pet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order placed for purchasing the pet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="PlaceOrderResponse"/>&gt;</returns>
        public async Task<PlaceOrderResponse> PlaceOrderAsync(Order order, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePlaceOrder(order);

                FormatPlaceOrder(order);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/store/order";

                    httpRequestMessageLocalVar.Content = (order as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(order, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/xml",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        UseSourceGeneration.Client.ApiResponse apiResponseLocalVar = new(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/store/order", requestedAtLocalVar);

                        PlaceOrderResponse responseLocalVar = new(apiResponseLocalVar, _orderDeserializationContext_DeserializationContext);

                        AfterPlaceOrderDefaultImplementation(responseLocalVar, order);

                        Events.ExecuteOnPlaceOrder(responseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPlaceOrderDefaultImplementation(e, "/store/order", uriBuilderLocalVar.Path, order);
                Events.ExecuteOnErrorPlaceOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PlaceOrderResponse"/>
        /// </summary>
        public partial class PlaceOrderResponse
        {
            /// <summary>
            /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
            /// </summary>
            private System.Text.Json.JsonSerializerOptions? _jsonSerializerOptions;

            // isContainer: 
            // items: 
            // datatype 
            private readonly OrderDeserializationContext? _orderDeserializationContext;

            /// <summary>
            /// The <see cref="UseSourceGeneration.Client.ApiResponse"/>
            /// </summary>
            public UseSourceGeneration.Client.ApiResponse Content { get; }

            /// <summary>
            /// The <see cref="PlaceOrderResponse"/>
            /// </summary>
            /// <param name="content"></param>
            /// <param name="orderDeserializationContext"></param>
            /// <param name="DeserializationContext"></param>
            public PlaceOrderResponse(UseSourceGeneration.Client.ApiResponse content,
                OrderDeserializationContext orderDeserializationContext                DeserializationContext DeserializationContext)
            {
                _orderDeserializationContext = orderDeserializationContext;
                _DeserializationContext = DeserializationContext;
                Content = content;
                OnCreated();
            }

            /// <summary>
            /// The <see cref="PlaceOrderResponse"/>
            /// </summary>
            /// <param name="jsonSerializerOptions"></param>
            /// <param name="content"></param>
            public PlaceOrderResponse(UseSourceGeneration.Client.ApiResponse content, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
            {
                _jsonSerializerOptions = jsonSerializerOptions;
                Content = content;
                OnCreated();
            }

            partial void OnCreated();

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk() => 200 == (int)Content.StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool AsOk([NotNullWhen(true)]out Order? result)
            {
                // This logic may be modified with the AsModel.mustache template
                result = null;
                if (!IsOk())
                    return false;

                result = _orderDeserializationContext == null
                    ? System.Text.Json.JsonSerializer.Deserialize<Order>(Content.RawContent, _jsonSerializerOptions)
                    : System.Text.Json.JsonSerializer.Deserialize<Order>(Content.RawContent, _orderDeserializationContext.Order);

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAsOk([NotNullWhen(true)]out Order? result)
            {
                result = null;
                if (!IsOk())
                    return false;

                try
                {
                    result = System.Text.Json.JsonSerializer.Deserialize<Order>(Content.RawContent, _jsonSerializerOptions);
                } catch (Exception e)
                {
                    // log the exception
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest() => 400 == (int)Content.StatusCode;
        }
    }
}
