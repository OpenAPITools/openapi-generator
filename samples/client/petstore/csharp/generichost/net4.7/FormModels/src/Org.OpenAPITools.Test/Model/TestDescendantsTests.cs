/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing TestDescendants
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class TestDescendantsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for TestDescendants
        //private TestDescendants instance;

        public TestDescendantsTests()
        {
            // TODO uncomment below to create an instance of TestDescendants
            //instance = new TestDescendants();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TestDescendants
        /// </summary>
        [Fact]
        public void TestDescendantsInstanceTest()
        {
            // TODO uncomment below to test "IsType" TestDescendants
            //Assert.IsType<TestDescendants>(instance);
        }

        /// <summary>
        /// Test deserialize a Descendant1 from type TestDescendants
        /// </summary>
        [Fact]
        public void Descendant1DeserializeFromTestDescendantsTest()
        {
            // TODO uncomment below to test deserialize a Descendant1 from type TestDescendants
            //Assert.IsType<TestDescendants>(JsonConvert.DeserializeObject<TestDescendants>(new Descendant1().ToJson()));
        }

        /// <summary>
        /// Test deserialize a Descendant2 from type TestDescendants
        /// </summary>
        [Fact]
        public void Descendant2DeserializeFromTestDescendantsTest()
        {
            // TODO uncomment below to test deserialize a Descendant2 from type TestDescendants
            //Assert.IsType<TestDescendants>(JsonConvert.DeserializeObject<TestDescendants>(new Descendant2().ToJson()));
        }

        /// <summary>
        /// Test the property 'AlternativeName'
        /// </summary>
        [Fact]
        public void AlternativeNameTest()
        {
            // TODO unit test for the property 'AlternativeName'
        }

        /// <summary>
        /// Test the property 'ObjectType'
        /// </summary>
        [Fact]
        public void ObjectTypeTest()
        {
            // TODO unit test for the property 'ObjectType'
        }
    }
}
