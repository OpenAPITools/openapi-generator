// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines RequiredClass_required_notnullable_enum_string
    /// </summary>
    public enum RequiredClassRequiredNotnullableEnumString
    {
        /// <summary>
        /// Enum UPPER for value: UPPER
        /// </summary>
        UPPER = 1,

        /// <summary>
        /// Enum Lower for value: lower
        /// </summary>
        Lower = 2,

        /// <summary>
        /// Enum Empty for value: 
        /// </summary>
        Empty = 3,

        /// <summary>
        /// Enum ValuewithTab for value: Value\twith tab
        /// </summary>
        ValuewithTab = 4,

        /// <summary>
        /// Enum ValueWithQuote for value: Value with \&quot; quote
        /// </summary>
        ValueWithQuote = 5,

        /// <summary>
        /// Enum ValueWithEscapedQuote for value: Value with escaped \&quot; quote
        /// </summary>
        ValueWithEscapedQuote = 6,

        /// <summary>
        /// Enum Duplicatevalue for value: Duplicate\nvalue
        /// </summary>
        Duplicatevalue = 7,

        /// <summary>
        /// Enum Duplicatevalue2 for value: Duplicate\r\nvalue
        /// </summary>
        Duplicatevalue2 = 8
    }

    /// <summary>
    /// Converts <see cref="RequiredClassRequiredNotnullableEnumString"/> to and from the JSON value
    /// </summary>
    public static class RequiredClassRequiredNotnullableEnumStringValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RequiredClassRequiredNotnullableEnumString"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RequiredClassRequiredNotnullableEnumString FromString(string value)
        {
            if (value.Equals("UPPER"))
                return RequiredClassRequiredNotnullableEnumString.UPPER;

            if (value.Equals("lower"))
                return RequiredClassRequiredNotnullableEnumString.Lower;

            if (value.Equals(""))
                return RequiredClassRequiredNotnullableEnumString.Empty;

            if (value.Equals("Value\twith tab"))
                return RequiredClassRequiredNotnullableEnumString.ValuewithTab;

            if (value.Equals("Value with \" quote"))
                return RequiredClassRequiredNotnullableEnumString.ValueWithQuote;

            if (value.Equals("Value with escaped \" quote"))
                return RequiredClassRequiredNotnullableEnumString.ValueWithEscapedQuote;

            if (value.Equals("Duplicate\nvalue"))
                return RequiredClassRequiredNotnullableEnumString.Duplicatevalue;

            if (value.Equals("Duplicate\r\nvalue"))
                return RequiredClassRequiredNotnullableEnumString.Duplicatevalue2;

            throw new NotImplementedException($"Could not convert value to type RequiredClassRequiredNotnullableEnumString: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RequiredClassRequiredNotnullableEnumString"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RequiredClassRequiredNotnullableEnumString? FromStringOrDefault(string value)
        {
            if (value.Equals("UPPER"))
                return RequiredClassRequiredNotnullableEnumString.UPPER;

            if (value.Equals("lower"))
                return RequiredClassRequiredNotnullableEnumString.Lower;

            if (value.Equals(""))
                return RequiredClassRequiredNotnullableEnumString.Empty;

            if (value.Equals("Value\twith tab"))
                return RequiredClassRequiredNotnullableEnumString.ValuewithTab;

            if (value.Equals("Value with \" quote"))
                return RequiredClassRequiredNotnullableEnumString.ValueWithQuote;

            if (value.Equals("Value with escaped \" quote"))
                return RequiredClassRequiredNotnullableEnumString.ValueWithEscapedQuote;

            if (value.Equals("Duplicate\nvalue"))
                return RequiredClassRequiredNotnullableEnumString.Duplicatevalue;

            if (value.Equals("Duplicate\r\nvalue"))
                return RequiredClassRequiredNotnullableEnumString.Duplicatevalue2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RequiredClassRequiredNotnullableEnumString"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RequiredClassRequiredNotnullableEnumString value)
        {
            if (value == RequiredClassRequiredNotnullableEnumString.UPPER)
                return "UPPER";

            if (value == RequiredClassRequiredNotnullableEnumString.Lower)
                return "lower";

            if (value == RequiredClassRequiredNotnullableEnumString.Empty)
                return "";

            if (value == RequiredClassRequiredNotnullableEnumString.ValuewithTab)
                return "Value\twith tab";

            if (value == RequiredClassRequiredNotnullableEnumString.ValueWithQuote)
                return "Value with \" quote";

            if (value == RequiredClassRequiredNotnullableEnumString.ValueWithEscapedQuote)
                return "Value with escaped \" quote";

            if (value == RequiredClassRequiredNotnullableEnumString.Duplicatevalue)
                return "Duplicate\nvalue";

            if (value == RequiredClassRequiredNotnullableEnumString.Duplicatevalue2)
                return "Duplicate\r\nvalue";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequiredClassRequiredNotnullableEnumString"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RequiredClassRequiredNotnullableEnumStringJsonConverter : JsonConverter<RequiredClassRequiredNotnullableEnumString>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RequiredClassRequiredNotnullableEnumString Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            RequiredClassRequiredNotnullableEnumString? result = rawValue == null
                ? null
                : RequiredClassRequiredNotnullableEnumStringValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RequiredClassRequiredNotnullableEnumString to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requiredClassRequiredNotnullableEnumString"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RequiredClassRequiredNotnullableEnumString requiredClassRequiredNotnullableEnumString, JsonSerializerOptions options)
        {
            writer.WriteStringValue(requiredClassRequiredNotnullableEnumString.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequiredClassRequiredNotnullableEnumString"/>
    /// </summary>
    public class RequiredClassRequiredNotnullableEnumStringNullableJsonConverter : JsonConverter<RequiredClassRequiredNotnullableEnumString?>
    {
        /// <summary>
        /// Returns a RequiredClassRequiredNotnullableEnumString from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RequiredClassRequiredNotnullableEnumString? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            RequiredClassRequiredNotnullableEnumString? result = rawValue == null
                ? null
                : RequiredClassRequiredNotnullableEnumStringValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requiredClassRequiredNotnullableEnumString"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RequiredClassRequiredNotnullableEnumString? requiredClassRequiredNotnullableEnumString, JsonSerializerOptions options)
        {
            writer.WriteStringValue(requiredClassRequiredNotnullableEnumString?.ToString() ?? "null");
        }
    }
}
