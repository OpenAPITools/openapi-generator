// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines testEnumParameters_enum_header_string_parameter
    /// </summary>
    public enum TestEnumParametersEnumHeaderStringParameter
    {
        /// <summary>
        /// Enum Abc for value: _abc
        /// </summary>
        Abc = 1,

        /// <summary>
        /// Enum Efg for value: -efg
        /// </summary>
        Efg = 2,

        /// <summary>
        /// Enum Xyz for value: (xyz)
        /// </summary>
        Xyz = 3
    }

    /// <summary>
    /// Converts <see cref="TestEnumParametersEnumHeaderStringParameter"/> to and from the JSON value
    /// </summary>
    public static class TestEnumParametersEnumHeaderStringParameterValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TestEnumParametersEnumHeaderStringParameter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TestEnumParametersEnumHeaderStringParameter FromString(string value)
        {
            if (value.Equals("_abc"))
                return TestEnumParametersEnumHeaderStringParameter.Abc;

            if (value.Equals("-efg"))
                return TestEnumParametersEnumHeaderStringParameter.Efg;

            if (value.Equals("(xyz)"))
                return TestEnumParametersEnumHeaderStringParameter.Xyz;

            throw new NotImplementedException($"Could not convert value to type TestEnumParametersEnumHeaderStringParameter: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TestEnumParametersEnumHeaderStringParameter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TestEnumParametersEnumHeaderStringParameter? FromStringOrDefault(string value)
        {
            if (value.Equals("_abc"))
                return TestEnumParametersEnumHeaderStringParameter.Abc;

            if (value.Equals("-efg"))
                return TestEnumParametersEnumHeaderStringParameter.Efg;

            if (value.Equals("(xyz)"))
                return TestEnumParametersEnumHeaderStringParameter.Xyz;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TestEnumParametersEnumHeaderStringParameter"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TestEnumParametersEnumHeaderStringParameter value)
        {
            if (value == TestEnumParametersEnumHeaderStringParameter.Abc)
                return "_abc";

            if (value == TestEnumParametersEnumHeaderStringParameter.Efg)
                return "-efg";

            if (value == TestEnumParametersEnumHeaderStringParameter.Xyz)
                return "(xyz)";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestEnumParametersEnumHeaderStringParameter"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TestEnumParametersEnumHeaderStringParameterJsonConverter : JsonConverter<TestEnumParametersEnumHeaderStringParameter>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TestEnumParametersEnumHeaderStringParameter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            TestEnumParametersEnumHeaderStringParameter? result = rawValue == null
                ? null
                : TestEnumParametersEnumHeaderStringParameterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TestEnumParametersEnumHeaderStringParameter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testEnumParametersEnumHeaderStringParameter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TestEnumParametersEnumHeaderStringParameter testEnumParametersEnumHeaderStringParameter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(testEnumParametersEnumHeaderStringParameter.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestEnumParametersEnumHeaderStringParameter"/>
    /// </summary>
    public class TestEnumParametersEnumHeaderStringParameterNullableJsonConverter : JsonConverter<TestEnumParametersEnumHeaderStringParameter?>
    {
        /// <summary>
        /// Returns a TestEnumParametersEnumHeaderStringParameter from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TestEnumParametersEnumHeaderStringParameter? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            TestEnumParametersEnumHeaderStringParameter? result = rawValue == null
                ? null
                : TestEnumParametersEnumHeaderStringParameterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testEnumParametersEnumHeaderStringParameter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TestEnumParametersEnumHeaderStringParameter? testEnumParametersEnumHeaderStringParameter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(testEnumParametersEnumHeaderStringParameter?.ToString() ?? "null");
        }
    }
}
