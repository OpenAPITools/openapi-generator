// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines MapTest_map_of_enum_string_value
    /// </summary>
    public enum MapTestMapOfEnumStringValue
    {
        /// <summary>
        /// Enum UPPER for value: UPPER
        /// </summary>
        UPPER = 1,

        /// <summary>
        /// Enum Lower for value: lower
        /// </summary>
        Lower = 2
    }

    /// <summary>
    /// Converts <see cref="MapTestMapOfEnumStringValue"/> to and from the JSON value
    /// </summary>
    public static class MapTestMapOfEnumStringValueValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MapTestMapOfEnumStringValue"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MapTestMapOfEnumStringValue FromString(string value)
        {
            if (value.Equals("UPPER"))
                return MapTestMapOfEnumStringValue.UPPER;

            if (value.Equals("lower"))
                return MapTestMapOfEnumStringValue.Lower;

            throw new NotImplementedException($"Could not convert value to type MapTestMapOfEnumStringValue: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MapTestMapOfEnumStringValue"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MapTestMapOfEnumStringValue? FromStringOrDefault(string value)
        {
            if (value.Equals("UPPER"))
                return MapTestMapOfEnumStringValue.UPPER;

            if (value.Equals("lower"))
                return MapTestMapOfEnumStringValue.Lower;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MapTestMapOfEnumStringValue"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MapTestMapOfEnumStringValue value)
        {
            if (value == MapTestMapOfEnumStringValue.UPPER)
                return "UPPER";

            if (value == MapTestMapOfEnumStringValue.Lower)
                return "lower";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MapTestMapOfEnumStringValue"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MapTestMapOfEnumStringValueJsonConverter : JsonConverter<MapTestMapOfEnumStringValue>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MapTestMapOfEnumStringValue Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            MapTestMapOfEnumStringValue? result = rawValue == null
                ? null
                : MapTestMapOfEnumStringValueValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MapTestMapOfEnumStringValue to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mapTestMapOfEnumStringValue"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MapTestMapOfEnumStringValue mapTestMapOfEnumStringValue, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mapTestMapOfEnumStringValue.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MapTestMapOfEnumStringValue"/>
    /// </summary>
    public class MapTestMapOfEnumStringValueNullableJsonConverter : JsonConverter<MapTestMapOfEnumStringValue?>
    {
        /// <summary>
        /// Returns a MapTestMapOfEnumStringValue from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MapTestMapOfEnumStringValue? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            MapTestMapOfEnumStringValue? result = rawValue == null
                ? null
                : MapTestMapOfEnumStringValueValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mapTestMapOfEnumStringValue"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MapTestMapOfEnumStringValue? mapTestMapOfEnumStringValue, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mapTestMapOfEnumStringValue?.ToString() ?? "null");
        }
    }
}
