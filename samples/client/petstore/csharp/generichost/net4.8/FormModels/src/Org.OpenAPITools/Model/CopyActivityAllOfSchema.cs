// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines CopyActivity_allOf__schema
    /// </summary>
    public enum CopyActivityAllOfSchema
    {
        /// <summary>
        /// Enum ScopeActivity for value: ScopeActivity
        /// </summary>
        ScopeActivity = 1
    }

    /// <summary>
    /// Converts <see cref="CopyActivityAllOfSchema"/> to and from the JSON value
    /// </summary>
    public static class CopyActivityAllOfSchemaValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CopyActivityAllOfSchema"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CopyActivityAllOfSchema FromString(string value)
        {
            if (value.Equals("ScopeActivity"))
                return CopyActivityAllOfSchema.ScopeActivity;

            throw new NotImplementedException($"Could not convert value to type CopyActivityAllOfSchema: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CopyActivityAllOfSchema"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CopyActivityAllOfSchema? FromStringOrDefault(string value)
        {
            if (value.Equals("ScopeActivity"))
                return CopyActivityAllOfSchema.ScopeActivity;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CopyActivityAllOfSchema"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CopyActivityAllOfSchema value)
        {
            if (value == CopyActivityAllOfSchema.ScopeActivity)
                return "ScopeActivity";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CopyActivityAllOfSchema"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CopyActivityAllOfSchemaJsonConverter : JsonConverter<CopyActivityAllOfSchema>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CopyActivityAllOfSchema Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            CopyActivityAllOfSchema? result = rawValue == null
                ? null
                : CopyActivityAllOfSchemaValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CopyActivityAllOfSchema to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="copyActivityAllOfSchema"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CopyActivityAllOfSchema copyActivityAllOfSchema, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CopyActivityAllOfSchemaValueConverter.ToJsonValue(copyActivityAllOfSchema).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CopyActivityAllOfSchema"/>
    /// </summary>
    public class CopyActivityAllOfSchemaNullableJsonConverter : JsonConverter<CopyActivityAllOfSchema?>
    {
        /// <summary>
        /// Returns a CopyActivityAllOfSchema from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CopyActivityAllOfSchema? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            CopyActivityAllOfSchema? result = rawValue == null
                ? null
                : CopyActivityAllOfSchemaValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CopyActivityAllOfSchema to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="copyActivityAllOfSchema"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CopyActivityAllOfSchema? copyActivityAllOfSchema, JsonSerializerOptions options)
        {
            writer.WriteStringValue(copyActivityAllOfSchema.HasValue ? CopyActivityAllOfSchemaValueConverter.ToJsonValue(copyActivityAllOfSchema.Value).ToString() : "null");
        }
    }
}
