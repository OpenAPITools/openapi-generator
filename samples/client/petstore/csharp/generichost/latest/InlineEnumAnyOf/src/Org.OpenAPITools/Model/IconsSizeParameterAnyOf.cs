// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines icons_size_parameter_anyOf
    /// </summary>
    public enum IconsSizeParameterAnyOf
    {
        /// <summary>
        /// Enum Small for value: small
        /// </summary>
        Small = 1,

        /// <summary>
        /// Enum Medium for value: medium
        /// </summary>
        Medium = 2,

        /// <summary>
        /// Enum Large for value: large
        /// </summary>
        Large = 3
    }

    /// <summary>
    /// Converts <see cref="IconsSizeParameterAnyOf"/> to and from the JSON value
    /// </summary>
    public static class IconsSizeParameterAnyOfValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="IconsSizeParameterAnyOf"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IconsSizeParameterAnyOf FromString(string value)
        {
            if (value.Equals("small"))
                return IconsSizeParameterAnyOf.Small;

            if (value.Equals("medium"))
                return IconsSizeParameterAnyOf.Medium;

            if (value.Equals("large"))
                return IconsSizeParameterAnyOf.Large;

            throw new NotImplementedException($"Could not convert value to type IconsSizeParameterAnyOf: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="IconsSizeParameterAnyOf"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IconsSizeParameterAnyOf? FromStringOrDefault(string value)
        {
            if (value.Equals("small"))
                return IconsSizeParameterAnyOf.Small;

            if (value.Equals("medium"))
                return IconsSizeParameterAnyOf.Medium;

            if (value.Equals("large"))
                return IconsSizeParameterAnyOf.Large;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IconsSizeParameterAnyOf"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(IconsSizeParameterAnyOf value)
        {
            if (value == IconsSizeParameterAnyOf.Small)
                return "small";

            if (value == IconsSizeParameterAnyOf.Medium)
                return "medium";

            if (value == IconsSizeParameterAnyOf.Large)
                return "large";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IconsSizeParameterAnyOf"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class IconsSizeParameterAnyOfJsonConverter : JsonConverter<IconsSizeParameterAnyOf>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IconsSizeParameterAnyOf Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IconsSizeParameterAnyOf? result = rawValue == null
                ? null
                : IconsSizeParameterAnyOfValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IconsSizeParameterAnyOf to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iconsSizeParameterAnyOf"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IconsSizeParameterAnyOf iconsSizeParameterAnyOf, JsonSerializerOptions options)
        {
            writer.WriteStringValue(IconsSizeParameterAnyOfValueConverter.ToJsonValue(iconsSizeParameterAnyOf).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IconsSizeParameterAnyOf"/>
    /// </summary>
    public class IconsSizeParameterAnyOfNullableJsonConverter : JsonConverter<IconsSizeParameterAnyOf?>
    {
        /// <summary>
        /// Returns a IconsSizeParameterAnyOf from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IconsSizeParameterAnyOf? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IconsSizeParameterAnyOf? result = rawValue == null
                ? null
                : IconsSizeParameterAnyOfValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IconsSizeParameterAnyOf to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iconsSizeParameterAnyOf"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IconsSizeParameterAnyOf? iconsSizeParameterAnyOf, JsonSerializerOptions options)
        {
            writer.WriteStringValue(iconsSizeParameterAnyOf.HasValue ? IconsSizeParameterAnyOfValueConverter.ToJsonValue(iconsSizeParameterAnyOf.Value).ToString() : "null");
        }
    }
}
