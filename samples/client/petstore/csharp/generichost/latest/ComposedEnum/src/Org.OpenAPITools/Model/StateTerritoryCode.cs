// <auto-generated>
/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines StateTerritoryCode
    /// </summary>
    public enum StateTerritoryCode
    {
        /// <summary>
        /// Enum AL for value: AL
        /// </summary>
        AL = 1,

        /// <summary>
        /// Enum AK for value: AK
        /// </summary>
        AK = 2
    }

    /// <summary>
    /// Converts <see cref="StateTerritoryCode"/> to and from the JSON value
    /// </summary>
    public static class StateTerritoryCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="StateTerritoryCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StateTerritoryCode FromString(string value)
        {
            if (value.Equals("AL"))
                return StateTerritoryCode.AL;

            if (value.Equals("AK"))
                return StateTerritoryCode.AK;

            throw new NotImplementedException($"Could not convert value to type StateTerritoryCode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="StateTerritoryCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StateTerritoryCode? FromStringOrDefault(string value)
        {
            if (value.Equals("AL"))
                return StateTerritoryCode.AL;

            if (value.Equals("AK"))
                return StateTerritoryCode.AK;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StateTerritoryCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(StateTerritoryCode value)
        {
            if (value == StateTerritoryCode.AL)
                return "AL";

            if (value == StateTerritoryCode.AK)
                return "AK";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StateTerritoryCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class StateTerritoryCodeJsonConverter : JsonConverter<StateTerritoryCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override StateTerritoryCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            StateTerritoryCode? result = rawValue == null
                ? null
                : StateTerritoryCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the StateTerritoryCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stateTerritoryCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, StateTerritoryCode stateTerritoryCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(StateTerritoryCodeValueConverter.ToJsonValue(stateTerritoryCode).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StateTerritoryCode"/>
    /// </summary>
    public class StateTerritoryCodeNullableJsonConverter : JsonConverter<StateTerritoryCode?>
    {
        /// <summary>
        /// Returns a StateTerritoryCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override StateTerritoryCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            StateTerritoryCode? result = rawValue == null
                ? null
                : StateTerritoryCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the StateTerritoryCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stateTerritoryCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, StateTerritoryCode? stateTerritoryCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(stateTerritoryCode.HasValue ? StateTerritoryCodeValueConverter.ToJsonValue(stateTerritoryCode.Value).ToString() : "null");
        }
    }
}
