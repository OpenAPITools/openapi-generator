// <auto-generated>
/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines MarineAreaCode
    /// </summary>
    public enum MarineAreaCode
    {
        /// <summary>
        /// Enum AM for value: AM
        /// </summary>
        AM = 1,

        /// <summary>
        /// Enum AN for value: AN
        /// </summary>
        AN = 2
    }

    /// <summary>
    /// Converts <see cref="MarineAreaCode"/> to and from the JSON value
    /// </summary>
    public static class MarineAreaCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MarineAreaCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MarineAreaCode FromString(string value)
        {
            if (value.Equals("AM"))
                return MarineAreaCode.AM;

            if (value.Equals("AN"))
                return MarineAreaCode.AN;

            throw new NotImplementedException($"Could not convert value to type MarineAreaCode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MarineAreaCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MarineAreaCode? FromStringOrDefault(string value)
        {
            if (value.Equals("AM"))
                return MarineAreaCode.AM;

            if (value.Equals("AN"))
                return MarineAreaCode.AN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MarineAreaCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MarineAreaCode value)
        {
            if (value == MarineAreaCode.AM)
                return "AM";

            if (value == MarineAreaCode.AN)
                return "AN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MarineAreaCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MarineAreaCodeJsonConverter : JsonConverter<MarineAreaCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MarineAreaCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MarineAreaCode? result = rawValue == null
                ? null
                : MarineAreaCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MarineAreaCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="marineAreaCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MarineAreaCode marineAreaCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(MarineAreaCodeValueConverter.ToJsonValue(marineAreaCode).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MarineAreaCode"/>
    /// </summary>
    public class MarineAreaCodeNullableJsonConverter : JsonConverter<MarineAreaCode?>
    {
        /// <summary>
        /// Returns a MarineAreaCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MarineAreaCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MarineAreaCode? result = rawValue == null
                ? null
                : MarineAreaCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MarineAreaCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="marineAreaCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MarineAreaCode? marineAreaCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(marineAreaCode.HasValue ? MarineAreaCodeValueConverter.ToJsonValue(marineAreaCode.Value).ToString() : "null");
        }
    }
}
