// <auto-generated>
/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines testEnumParameters_enum_query_double_parameter
    /// </summary>
    public enum TestEnumParametersEnumQueryDoubleParameter
    {
        /// <summary>
        /// Enum NUMBER_1_DOT_1 for value: 1.1
        /// </summary>
        NUMBER_1_DOT_1 = 1,

        /// <summary>
        /// Enum NUMBER_MINUS_1_DOT_2 for value: -1.2
        /// </summary>
        NUMBER_MINUS_1_DOT_2 = 2
    }

    /// <summary>
    /// Converts <see cref="TestEnumParametersEnumQueryDoubleParameter"/> to and from the JSON value
    /// </summary>
    public static class TestEnumParametersEnumQueryDoubleParameterValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TestEnumParametersEnumQueryDoubleParameter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TestEnumParametersEnumQueryDoubleParameter FromString(string value)
        {
            if (value.Equals("1.1"))
                return TestEnumParametersEnumQueryDoubleParameter.NUMBER_1_DOT_1;

            if (value.Equals("-1.2"))
                return TestEnumParametersEnumQueryDoubleParameter.NUMBER_MINUS_1_DOT_2;

            throw new NotImplementedException($"Could not convert value to type TestEnumParametersEnumQueryDoubleParameter: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TestEnumParametersEnumQueryDoubleParameter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TestEnumParametersEnumQueryDoubleParameter? FromStringOrDefault(string value)
        {
            if (value.Equals("1.1"))
                return TestEnumParametersEnumQueryDoubleParameter.NUMBER_1_DOT_1;

            if (value.Equals("-1.2"))
                return TestEnumParametersEnumQueryDoubleParameter.NUMBER_MINUS_1_DOT_2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TestEnumParametersEnumQueryDoubleParameter"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static double ToJsonValue(TestEnumParametersEnumQueryDoubleParameter value)
        {
            return (double) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestEnumParametersEnumQueryDoubleParameter"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TestEnumParametersEnumQueryDoubleParameterJsonConverter : JsonConverter<TestEnumParametersEnumQueryDoubleParameter>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TestEnumParametersEnumQueryDoubleParameter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            TestEnumParametersEnumQueryDoubleParameter? result = rawValue == null
                ? null
                : TestEnumParametersEnumQueryDoubleParameterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TestEnumParametersEnumQueryDoubleParameter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testEnumParametersEnumQueryDoubleParameter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TestEnumParametersEnumQueryDoubleParameter testEnumParametersEnumQueryDoubleParameter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(testEnumParametersEnumQueryDoubleParameter.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestEnumParametersEnumQueryDoubleParameter"/>
    /// </summary>
    public class TestEnumParametersEnumQueryDoubleParameterNullableJsonConverter : JsonConverter<TestEnumParametersEnumQueryDoubleParameter?>
    {
        /// <summary>
        /// Returns a TestEnumParametersEnumQueryDoubleParameter from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TestEnumParametersEnumQueryDoubleParameter? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            TestEnumParametersEnumQueryDoubleParameter? result = rawValue == null
                ? null
                : TestEnumParametersEnumQueryDoubleParameterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testEnumParametersEnumQueryDoubleParameter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TestEnumParametersEnumQueryDoubleParameter? testEnumParametersEnumQueryDoubleParameter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(testEnumParametersEnumQueryDoubleParameter?.ToString() ?? "null");
        }
    }
}
