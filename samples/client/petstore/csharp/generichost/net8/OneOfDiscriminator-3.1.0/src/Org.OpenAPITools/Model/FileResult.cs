// <auto-generated>
/*
 * oneof
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileResult
    /// </summary>
    public partial class FileResult : Result, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileResult" /> class.
        /// </summary>
        /// <param name="checksum">checksum</param>
        /// <param name="downloadUrl">downloadUrl</param>
        [JsonConstructor]
        public FileResult(string checksum, string downloadUrl) : base(checksum)
        {
            DownloadUrl = downloadUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The discriminator
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public new string Type { get; } = "FileResult";

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [JsonPropertyName("downloadUrl")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileResult {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileResult" />
    /// </summary>
    public class FileResultJsonConverter : JsonConverter<FileResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> checksum = default;
            Option<string?> type = default;
            Option<string?> downloadUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "checksum":
                            checksum = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "downloadUrl":
                            downloadUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!checksum.IsSet)
                throw new ArgumentException("Property is required for class FileResult.", nameof(checksum));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FileResult.", nameof(type));

            if (!downloadUrl.IsSet)
                throw new ArgumentException("Property is required for class FileResult.", nameof(downloadUrl));

            if (checksum.IsSet && checksum.Value == null)
                throw new ArgumentNullException(nameof(checksum), "Property is not nullable for class FileResult.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FileResult.");

            if (downloadUrl.IsSet && downloadUrl.Value == null)
                throw new ArgumentNullException(nameof(downloadUrl), "Property is not nullable for class FileResult.");

            return new FileResult(checksum.Value!, downloadUrl.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FileResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileResult fileResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileResult fileResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileResult.Checksum == null)
                throw new ArgumentNullException(nameof(fileResult.Checksum), "Property is required for class FileResult.");

            if (fileResult.DownloadUrl == null)
                throw new ArgumentNullException(nameof(fileResult.DownloadUrl), "Property is required for class FileResult.");

            writer.WriteString("checksum", fileResult.Checksum);

            writer.WriteString("type", fileResult.Type);

            writer.WriteString("downloadUrl", fileResult.DownloadUrl);
        }
    }
}
