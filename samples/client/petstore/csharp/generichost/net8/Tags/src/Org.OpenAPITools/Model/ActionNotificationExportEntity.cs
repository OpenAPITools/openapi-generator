// <auto-generated>
/*
 * Files.com API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActionNotificationExportEntity model
    /// </summary>
    public partial class ActionNotificationExportEntity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionNotificationExportEntity" /> class.
        /// </summary>
        /// <param name="endAt">End date/time of export range.</param>
        /// <param name="exportVersion">Version of the underlying records for the export.</param>
        /// <param name="id">History Export ID</param>
        /// <param name="queryFolder">Return notifications that were triggered by actions in this folder.</param>
        /// <param name="queryMessage">Error message associated with the request, if any.</param>
        /// <param name="queryPath">Return notifications that were triggered by actions on this specific path.</param>
        /// <param name="queryRequestMethod">The HTTP request method used by the webhook.</param>
        /// <param name="queryRequestUrl">The target webhook URL.</param>
        /// <param name="queryStatus">The HTTP status returned from the server in response to the webhook request.</param>
        /// <param name="querySuccess">true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise.</param>
        /// <param name="resultsUrl">If &#x60;status&#x60; is &#x60;ready&#x60;, this will be a URL where all the results can be downloaded at once as a CSV.</param>
        /// <param name="startAt">Start date/time of export range.</param>
        /// <param name="status">Status of export.  Valid values: &#x60;building&#x60;, &#x60;ready&#x60;, or &#x60;failed&#x60;</param>
        [JsonConstructor]
        public ActionNotificationExportEntity(Option<DateTime?> endAt = default, Option<string?> exportVersion = default, Option<int?> id = default, Option<string?> queryFolder = default, Option<string?> queryMessage = default, Option<string?> queryPath = default, Option<string?> queryRequestMethod = default, Option<string?> queryRequestUrl = default, Option<string?> queryStatus = default, Option<bool?> querySuccess = default, Option<string?> resultsUrl = default, Option<DateTime?> startAt = default, Option<string?> status = default)
        {
            EndAtOption = endAt;
            ExportVersionOption = exportVersion;
            IdOption = id;
            QueryFolderOption = queryFolder;
            QueryMessageOption = queryMessage;
            QueryPathOption = queryPath;
            QueryRequestMethodOption = queryRequestMethod;
            QueryRequestUrlOption = queryRequestUrl;
            QueryStatusOption = queryStatus;
            QuerySuccessOption = querySuccess;
            ResultsUrlOption = resultsUrl;
            StartAtOption = startAt;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EndAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndAtOption { get; private set; }

        /// <summary>
        /// End date/time of export range.
        /// </summary>
        /// <value>End date/time of export range.</value>
        /* <example>2000-01-01T01:00Z</example> */
        [JsonPropertyName("end_at")]
        public DateTime? EndAt { get { return this.EndAtOption; } set { this.EndAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExportVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExportVersionOption { get; private set; }

        /// <summary>
        /// Version of the underlying records for the export.
        /// </summary>
        /// <value>Version of the underlying records for the export.</value>
        /* <example>example</example> */
        [JsonPropertyName("export_version")]
        public string? ExportVersion { get { return this.ExportVersionOption; } set { this.ExportVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// History Export ID
        /// </summary>
        /// <value>History Export ID</value>
        /* <example>1</example> */
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryFolder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryFolderOption { get; private set; }

        /// <summary>
        /// Return notifications that were triggered by actions in this folder.
        /// </summary>
        /// <value>Return notifications that were triggered by actions in this folder.</value>
        /* <example>MyFolder</example> */
        [JsonPropertyName("query_folder")]
        public string? QueryFolder { get { return this.QueryFolderOption; } set { this.QueryFolderOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryMessageOption { get; private set; }

        /// <summary>
        /// Error message associated with the request, if any.
        /// </summary>
        /// <value>Error message associated with the request, if any.</value>
        /* <example>Connection Refused</example> */
        [JsonPropertyName("query_message")]
        public string? QueryMessage { get { return this.QueryMessageOption; } set { this.QueryMessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryPathOption { get; private set; }

        /// <summary>
        /// Return notifications that were triggered by actions on this specific path.
        /// </summary>
        /// <value>Return notifications that were triggered by actions on this specific path.</value>
        /* <example>MyFile.txt</example> */
        [JsonPropertyName("query_path")]
        public string? QueryPath { get { return this.QueryPathOption; } set { this.QueryPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryRequestMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryRequestMethodOption { get; private set; }

        /// <summary>
        /// The HTTP request method used by the webhook.
        /// </summary>
        /// <value>The HTTP request method used by the webhook.</value>
        /* <example>GET</example> */
        [JsonPropertyName("query_request_method")]
        public string? QueryRequestMethod { get { return this.QueryRequestMethodOption; } set { this.QueryRequestMethodOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryRequestUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryRequestUrlOption { get; private set; }

        /// <summary>
        /// The target webhook URL.
        /// </summary>
        /// <value>The target webhook URL.</value>
        /* <example>http://example.com/webhook</example> */
        [JsonPropertyName("query_request_url")]
        public string? QueryRequestUrl { get { return this.QueryRequestUrlOption; } set { this.QueryRequestUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryStatusOption { get; private set; }

        /// <summary>
        /// The HTTP status returned from the server in response to the webhook request.
        /// </summary>
        /// <value>The HTTP status returned from the server in response to the webhook request.</value>
        /* <example>200</example> */
        [JsonPropertyName("query_status")]
        public string? QueryStatus { get { return this.QueryStatusOption; } set { this.QueryStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuerySuccess
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> QuerySuccessOption { get; private set; }

        /// <summary>
        /// true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise.
        /// </summary>
        /// <value>true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise.</value>
        /* <example>true</example> */
        [JsonPropertyName("query_success")]
        public bool? QuerySuccess { get { return this.QuerySuccessOption; } set { this.QuerySuccessOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResultsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResultsUrlOption { get; private set; }

        /// <summary>
        /// If &#x60;status&#x60; is &#x60;ready&#x60;, this will be a URL where all the results can be downloaded at once as a CSV.
        /// </summary>
        /// <value>If &#x60;status&#x60; is &#x60;ready&#x60;, this will be a URL where all the results can be downloaded at once as a CSV.</value>
        /* <example>https://files.com/action_notification_results.csv</example> */
        [JsonPropertyName("results_url")]
        public string? ResultsUrl { get { return this.ResultsUrlOption; } set { this.ResultsUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartAtOption { get; private set; }

        /// <summary>
        /// Start date/time of export range.
        /// </summary>
        /// <value>Start date/time of export range.</value>
        /* <example>2000-01-01T01:00Z</example> */
        [JsonPropertyName("start_at")]
        public DateTime? StartAt { get { return this.StartAtOption; } set { this.StartAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Status of export.  Valid values: &#x60;building&#x60;, &#x60;ready&#x60;, or &#x60;failed&#x60;
        /// </summary>
        /// <value>Status of export.  Valid values: &#x60;building&#x60;, &#x60;ready&#x60;, or &#x60;failed&#x60;</value>
        /* <example>ready</example> */
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionNotificationExportEntity {\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  ExportVersion: ").Append(ExportVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QueryFolder: ").Append(QueryFolder).Append("\n");
            sb.Append("  QueryMessage: ").Append(QueryMessage).Append("\n");
            sb.Append("  QueryPath: ").Append(QueryPath).Append("\n");
            sb.Append("  QueryRequestMethod: ").Append(QueryRequestMethod).Append("\n");
            sb.Append("  QueryRequestUrl: ").Append(QueryRequestUrl).Append("\n");
            sb.Append("  QueryStatus: ").Append(QueryStatus).Append("\n");
            sb.Append("  QuerySuccess: ").Append(QuerySuccess).Append("\n");
            sb.Append("  ResultsUrl: ").Append(ResultsUrl).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ActionNotificationExportEntity" />
    /// </summary>
    public class ActionNotificationExportEntityJsonConverter : JsonConverter<ActionNotificationExportEntity>
    {
        /// <summary>
        /// The format to use to serialize EndAt
        /// </summary>
        public static string EndAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartAt
        /// </summary>
        public static string StartAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ActionNotificationExportEntity" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ActionNotificationExportEntity Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> endAt = default;
            Option<string?> exportVersion = default;
            Option<int?> id = default;
            Option<string?> queryFolder = default;
            Option<string?> queryMessage = default;
            Option<string?> queryPath = default;
            Option<string?> queryRequestMethod = default;
            Option<string?> queryRequestUrl = default;
            Option<string?> queryStatus = default;
            Option<bool?> querySuccess = default;
            Option<string?> resultsUrl = default;
            Option<DateTime?> startAt = default;
            Option<string?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "end_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "export_version":
                            exportVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "query_folder":
                            queryFolder = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_message":
                            queryMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_path":
                            queryPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_request_method":
                            queryRequestMethod = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_request_url":
                            queryRequestUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_status":
                            queryStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_success":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                querySuccess = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "results_url":
                            resultsUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (endAt.IsSet && endAt.Value == null)
                throw new ArgumentNullException(nameof(endAt), "Property is not nullable for class ActionNotificationExportEntity.");

            if (exportVersion.IsSet && exportVersion.Value == null)
                throw new ArgumentNullException(nameof(exportVersion), "Property is not nullable for class ActionNotificationExportEntity.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ActionNotificationExportEntity.");

            if (queryFolder.IsSet && queryFolder.Value == null)
                throw new ArgumentNullException(nameof(queryFolder), "Property is not nullable for class ActionNotificationExportEntity.");

            if (queryMessage.IsSet && queryMessage.Value == null)
                throw new ArgumentNullException(nameof(queryMessage), "Property is not nullable for class ActionNotificationExportEntity.");

            if (queryPath.IsSet && queryPath.Value == null)
                throw new ArgumentNullException(nameof(queryPath), "Property is not nullable for class ActionNotificationExportEntity.");

            if (queryRequestMethod.IsSet && queryRequestMethod.Value == null)
                throw new ArgumentNullException(nameof(queryRequestMethod), "Property is not nullable for class ActionNotificationExportEntity.");

            if (queryRequestUrl.IsSet && queryRequestUrl.Value == null)
                throw new ArgumentNullException(nameof(queryRequestUrl), "Property is not nullable for class ActionNotificationExportEntity.");

            if (queryStatus.IsSet && queryStatus.Value == null)
                throw new ArgumentNullException(nameof(queryStatus), "Property is not nullable for class ActionNotificationExportEntity.");

            if (querySuccess.IsSet && querySuccess.Value == null)
                throw new ArgumentNullException(nameof(querySuccess), "Property is not nullable for class ActionNotificationExportEntity.");

            if (resultsUrl.IsSet && resultsUrl.Value == null)
                throw new ArgumentNullException(nameof(resultsUrl), "Property is not nullable for class ActionNotificationExportEntity.");

            if (startAt.IsSet && startAt.Value == null)
                throw new ArgumentNullException(nameof(startAt), "Property is not nullable for class ActionNotificationExportEntity.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ActionNotificationExportEntity.");

            return new ActionNotificationExportEntity(endAt, exportVersion, id, queryFolder, queryMessage, queryPath, queryRequestMethod, queryRequestUrl, queryStatus, querySuccess, resultsUrl, startAt, status);
        }

        /// <summary>
        /// Serializes a <see cref="ActionNotificationExportEntity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="actionNotificationExportEntity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ActionNotificationExportEntity actionNotificationExportEntity, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, actionNotificationExportEntity, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ActionNotificationExportEntity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="actionNotificationExportEntity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ActionNotificationExportEntity actionNotificationExportEntity, JsonSerializerOptions jsonSerializerOptions)
        {
            if (actionNotificationExportEntity.ExportVersionOption.IsSet && actionNotificationExportEntity.ExportVersion == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.ExportVersion), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.QueryFolderOption.IsSet && actionNotificationExportEntity.QueryFolder == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.QueryFolder), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.QueryMessageOption.IsSet && actionNotificationExportEntity.QueryMessage == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.QueryMessage), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.QueryPathOption.IsSet && actionNotificationExportEntity.QueryPath == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.QueryPath), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.QueryRequestMethodOption.IsSet && actionNotificationExportEntity.QueryRequestMethod == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.QueryRequestMethod), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.QueryRequestUrlOption.IsSet && actionNotificationExportEntity.QueryRequestUrl == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.QueryRequestUrl), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.QueryStatusOption.IsSet && actionNotificationExportEntity.QueryStatus == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.QueryStatus), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.ResultsUrlOption.IsSet && actionNotificationExportEntity.ResultsUrl == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.ResultsUrl), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.StatusOption.IsSet && actionNotificationExportEntity.Status == null)
                throw new ArgumentNullException(nameof(actionNotificationExportEntity.Status), "Property is required for class ActionNotificationExportEntity.");

            if (actionNotificationExportEntity.EndAtOption.IsSet)
                writer.WriteString("end_at", actionNotificationExportEntity.EndAtOption.Value!.Value.ToString(EndAtFormat));

            if (actionNotificationExportEntity.ExportVersionOption.IsSet)
                writer.WriteString("export_version", actionNotificationExportEntity.ExportVersion);

            if (actionNotificationExportEntity.IdOption.IsSet)
                writer.WriteNumber("id", actionNotificationExportEntity.IdOption.Value!.Value);

            if (actionNotificationExportEntity.QueryFolderOption.IsSet)
                writer.WriteString("query_folder", actionNotificationExportEntity.QueryFolder);

            if (actionNotificationExportEntity.QueryMessageOption.IsSet)
                writer.WriteString("query_message", actionNotificationExportEntity.QueryMessage);

            if (actionNotificationExportEntity.QueryPathOption.IsSet)
                writer.WriteString("query_path", actionNotificationExportEntity.QueryPath);

            if (actionNotificationExportEntity.QueryRequestMethodOption.IsSet)
                writer.WriteString("query_request_method", actionNotificationExportEntity.QueryRequestMethod);

            if (actionNotificationExportEntity.QueryRequestUrlOption.IsSet)
                writer.WriteString("query_request_url", actionNotificationExportEntity.QueryRequestUrl);

            if (actionNotificationExportEntity.QueryStatusOption.IsSet)
                writer.WriteString("query_status", actionNotificationExportEntity.QueryStatus);

            if (actionNotificationExportEntity.QuerySuccessOption.IsSet)
                writer.WriteBoolean("query_success", actionNotificationExportEntity.QuerySuccessOption.Value!.Value);

            if (actionNotificationExportEntity.ResultsUrlOption.IsSet)
                writer.WriteString("results_url", actionNotificationExportEntity.ResultsUrl);

            if (actionNotificationExportEntity.StartAtOption.IsSet)
                writer.WriteString("start_at", actionNotificationExportEntity.StartAtOption.Value!.Value.ToString(StartAtFormat));

            if (actionNotificationExportEntity.StatusOption.IsSet)
                writer.WriteString("status", actionNotificationExportEntity.Status);
        }
    }
}
