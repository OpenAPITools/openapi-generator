openapi: 3.0.1
info:
  contact:
    email: support@files.com
    name: Files.com Customer Success Team
  title: Files.com API
  version: 0.0.1
servers:
- url: //app.files.com/api/rest/v1
tags:
- description: Operations about api_keys
  name: api_key
- description: Operations about API Keys
  name: API Keys
- description: Operations about API keys
  name: a_p_i_k_e_y_s
paths:
  /api_keys/{id}:
    get:
      description: Show API Key
      operationId: GetApiKeysId
      parameters:
      - description: Api Key ID.
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
          x-ms-summary: Api Key ID.
        x-ms-summary: Api Key ID.
      responses:
        "400":
          content: {}
          description: Bad Request
          x-ms-summary: Bad Request
      summary: Show API Key
      tags:
      - api_keys
      - API Keys
      - a_p_i_k_e_y_s
      x-authentication:
      - self_managed
      x-category:
      - developers
components:
  schemas:
    ActionNotificationExportEntity:
      description: ActionNotificationExportEntity model
      properties:
        id:
          description: History Export ID
          example: 1
          format: int32
          type: integer
        export_version:
          description: Version of the underlying records for the export.
          example: example
          type: string
        start_at:
          description: Start date/time of export range.
          example: 2000-01-01T01:00:00Z
          format: date-time
          type: string
        end_at:
          description: End date/time of export range.
          example: 2000-01-01T01:00:00Z
          format: date-time
          type: string
        status:
          description: "Status of export.  Valid values: `building`, `ready`, or `failed`"
          example: ready
          type: string
        query_path:
          description: Return notifications that were triggered by actions on this
            specific path.
          example: MyFile.txt
          type: string
        query_folder:
          description: Return notifications that were triggered by actions in this
            folder.
          example: MyFolder
          type: string
        query_message:
          description: "Error message associated with the request, if any."
          example: Connection Refused
          type: string
        query_request_method:
          description: The HTTP request method used by the webhook.
          example: GET
          type: string
        query_request_url:
          description: The target webhook URL.
          example: http://example.com/webhook
          type: string
        query_status:
          description: The HTTP status returned from the server in response to the
            webhook request.
          example: "200"
          type: string
        query_success:
          description: true if the webhook request succeeded (i.e. returned a 200
            or 204 response status). false otherwise.
          example: true
          type: boolean
        results_url:
          description: "If `status` is `ready`, this will be a URL where all the results\
            \ can be downloaded at once as a CSV."
          example: https://files.com/action_notification_results.csv
          type: string
      type: object
      x-docs: |
        An ActionNotificationExport is an operation that provides access to outgoing webhook logs. Querying webhook logs is a little different than other APIs.

        All queries against the archive must be submitted as Exports.  (Even our Web UI creates an Export behind the scenes.)

        In any query field in this API, you may specify multiple values separated by commas.  That means that commas
        cannot be searched for themselves, and neither can single quotation marks.

        Use the following steps to complete an export:

        1. Initiate the export by using the Create Action Notification Export endpoint. Non Site Admins must query by folder or path.
        2. Using the `id` from the response to step 1, poll the Show Action Notification Export endpoint. Check the `status` field until it is `ready`.
        3. You can download the results of the export as a CSV file using the `results_url` field in the response from step 2. If you want to page through the records in JSON format, use the List Action Notification Export Results endpoint, passing the `id` that you got in step 1 as the `action_notification_export_id` parameter. Check the `X-Files-Cursor-Next` header to see if there are more records available, and resubmit the same request with a `cursor` parameter to fetch the next page of results.  Unlike most API Endpoints, this endpoint does not provide `X-Files-Cursor-Prev` cursors allowing reverse pagination through the results.  This is due to limitations in Amazon Athena, the underlying data lake for these records.

        If you intend to use this API for high volume or automated use, please contact us with more information
        about your use case.

        ## Example Queries

        * History for a folder: `{ "query_folder": "path/to/folder" }`
        * History for a range of time: `{ "start_at": "2021-03-18 12:00:00", "end_at": "2021-03-19 12:00:00" }`
        * History of all notifications that used GET or POST: `{ "query_request_method": "GET,POST" }`
  securitySchemes:
    api_key:
      description: API Key - supports user-based or site-wide API keys
      in: header
      name: XFilesAPIKey
      type: apiKey
x-original-swagger-version: "2.0"

