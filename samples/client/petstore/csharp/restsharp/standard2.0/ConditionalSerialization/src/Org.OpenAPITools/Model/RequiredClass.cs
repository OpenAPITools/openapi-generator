/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RequiredClass
    /// </summary>
    [DataContract(Name = "RequiredClass")]
    public partial class RequiredClass : IEquatable<RequiredClass>, IValidatableObject
    {
        /// <summary>
        /// Defines RequiredNullableEnumInteger
        /// </summary>
        public enum RequiredNullableEnumIntegerEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1
        }


        /// <summary>
        /// Gets or Sets RequiredNullableEnumInteger
        /// </summary>

        [DataMember(Name = "required_nullable_enum_integer", IsRequired = true, EmitDefaultValue = true)]
        public RequiredNullableEnumIntegerEnum RequiredNullableEnumInteger
        {
            get{ return _RequiredNullableEnumInteger;}
            set
            {
                _RequiredNullableEnumInteger = value;
                _flagRequiredNullableEnumInteger = true;
            }
        }
        private RequiredNullableEnumIntegerEnum _RequiredNullableEnumInteger;
        private bool _flagRequiredNullableEnumInteger;

        /// <summary>
        /// Returns false as RequiredNullableEnumInteger should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableEnumInteger()
        {
            return _flagRequiredNullableEnumInteger;
        }
        /// <summary>
        /// Defines RequiredNotnullableEnumInteger
        /// </summary>
        public enum RequiredNotnullableEnumIntegerEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1
        }


        /// <summary>
        /// Gets or Sets RequiredNotnullableEnumInteger
        /// </summary>

        [DataMember(Name = "required_notnullable_enum_integer", IsRequired = true, EmitDefaultValue = true)]
        public RequiredNotnullableEnumIntegerEnum RequiredNotnullableEnumInteger
        {
            get{ return _RequiredNotnullableEnumInteger;}
            set
            {
                _RequiredNotnullableEnumInteger = value;
                _flagRequiredNotnullableEnumInteger = true;
            }
        }
        private RequiredNotnullableEnumIntegerEnum _RequiredNotnullableEnumInteger;
        private bool _flagRequiredNotnullableEnumInteger;

        /// <summary>
        /// Returns false as RequiredNotnullableEnumInteger should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableEnumInteger()
        {
            return _flagRequiredNotnullableEnumInteger;
        }
        /// <summary>
        /// Defines NotrequiredNullableEnumInteger
        /// </summary>
        public enum NotrequiredNullableEnumIntegerEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1
        }


        /// <summary>
        /// Gets or Sets NotrequiredNullableEnumInteger
        /// </summary>

        [DataMember(Name = "notrequired_nullable_enum_integer", EmitDefaultValue = true)]
        public NotrequiredNullableEnumIntegerEnum? NotrequiredNullableEnumInteger
        {
            get{ return _NotrequiredNullableEnumInteger;}
            set
            {
                _NotrequiredNullableEnumInteger = value;
                _flagNotrequiredNullableEnumInteger = true;
            }
        }
        private NotrequiredNullableEnumIntegerEnum? _NotrequiredNullableEnumInteger;
        private bool _flagNotrequiredNullableEnumInteger;

        /// <summary>
        /// Returns false as NotrequiredNullableEnumInteger should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableEnumInteger()
        {
            return _flagNotrequiredNullableEnumInteger;
        }
        /// <summary>
        /// Defines NotrequiredNotnullableEnumInteger
        /// </summary>
        public enum NotrequiredNotnullableEnumIntegerEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1
        }


        /// <summary>
        /// Gets or Sets NotrequiredNotnullableEnumInteger
        /// </summary>

        [DataMember(Name = "notrequired_notnullable_enum_integer", EmitDefaultValue = false)]
        public NotrequiredNotnullableEnumIntegerEnum? NotrequiredNotnullableEnumInteger
        {
            get{ return _NotrequiredNotnullableEnumInteger;}
            set
            {
                _NotrequiredNotnullableEnumInteger = value;
                _flagNotrequiredNotnullableEnumInteger = true;
            }
        }
        private NotrequiredNotnullableEnumIntegerEnum? _NotrequiredNotnullableEnumInteger;
        private bool _flagNotrequiredNotnullableEnumInteger;

        /// <summary>
        /// Returns false as NotrequiredNotnullableEnumInteger should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableEnumInteger()
        {
            return _flagNotrequiredNotnullableEnumInteger;
        }
        /// <summary>
        /// Defines RequiredNullableEnumIntegerOnly
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequiredNullableEnumIntegerOnlyEnum
        {
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_MINUS_2 for value: -2
            /// </summary>
            NUMBER_MINUS_2 = -2
        }


        /// <summary>
        /// Gets or Sets RequiredNullableEnumIntegerOnly
        /// </summary>

        [DataMember(Name = "required_nullable_enum_integer_only", IsRequired = true, EmitDefaultValue = true)]
        public RequiredNullableEnumIntegerOnlyEnum RequiredNullableEnumIntegerOnly
        {
            get{ return _RequiredNullableEnumIntegerOnly;}
            set
            {
                _RequiredNullableEnumIntegerOnly = value;
                _flagRequiredNullableEnumIntegerOnly = true;
            }
        }
        private RequiredNullableEnumIntegerOnlyEnum _RequiredNullableEnumIntegerOnly;
        private bool _flagRequiredNullableEnumIntegerOnly;

        /// <summary>
        /// Returns false as RequiredNullableEnumIntegerOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableEnumIntegerOnly()
        {
            return _flagRequiredNullableEnumIntegerOnly;
        }
        /// <summary>
        /// Defines RequiredNotnullableEnumIntegerOnly
        /// </summary>
        public enum RequiredNotnullableEnumIntegerOnlyEnum
        {
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_MINUS_2 for value: -2
            /// </summary>
            NUMBER_MINUS_2 = -2
        }


        /// <summary>
        /// Gets or Sets RequiredNotnullableEnumIntegerOnly
        /// </summary>

        [DataMember(Name = "required_notnullable_enum_integer_only", IsRequired = true, EmitDefaultValue = true)]
        public RequiredNotnullableEnumIntegerOnlyEnum RequiredNotnullableEnumIntegerOnly
        {
            get{ return _RequiredNotnullableEnumIntegerOnly;}
            set
            {
                _RequiredNotnullableEnumIntegerOnly = value;
                _flagRequiredNotnullableEnumIntegerOnly = true;
            }
        }
        private RequiredNotnullableEnumIntegerOnlyEnum _RequiredNotnullableEnumIntegerOnly;
        private bool _flagRequiredNotnullableEnumIntegerOnly;

        /// <summary>
        /// Returns false as RequiredNotnullableEnumIntegerOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableEnumIntegerOnly()
        {
            return _flagRequiredNotnullableEnumIntegerOnly;
        }
        /// <summary>
        /// Defines NotrequiredNullableEnumIntegerOnly
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotrequiredNullableEnumIntegerOnlyEnum
        {
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_MINUS_2 for value: -2
            /// </summary>
            NUMBER_MINUS_2 = -2
        }


        /// <summary>
        /// Gets or Sets NotrequiredNullableEnumIntegerOnly
        /// </summary>

        [DataMember(Name = "notrequired_nullable_enum_integer_only", EmitDefaultValue = true)]
        public NotrequiredNullableEnumIntegerOnlyEnum? NotrequiredNullableEnumIntegerOnly
        {
            get{ return _NotrequiredNullableEnumIntegerOnly;}
            set
            {
                _NotrequiredNullableEnumIntegerOnly = value;
                _flagNotrequiredNullableEnumIntegerOnly = true;
            }
        }
        private NotrequiredNullableEnumIntegerOnlyEnum? _NotrequiredNullableEnumIntegerOnly;
        private bool _flagNotrequiredNullableEnumIntegerOnly;

        /// <summary>
        /// Returns false as NotrequiredNullableEnumIntegerOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableEnumIntegerOnly()
        {
            return _flagNotrequiredNullableEnumIntegerOnly;
        }
        /// <summary>
        /// Defines NotrequiredNotnullableEnumIntegerOnly
        /// </summary>
        public enum NotrequiredNotnullableEnumIntegerOnlyEnum
        {
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_MINUS_2 for value: -2
            /// </summary>
            NUMBER_MINUS_2 = -2
        }


        /// <summary>
        /// Gets or Sets NotrequiredNotnullableEnumIntegerOnly
        /// </summary>

        [DataMember(Name = "notrequired_notnullable_enum_integer_only", EmitDefaultValue = false)]
        public NotrequiredNotnullableEnumIntegerOnlyEnum? NotrequiredNotnullableEnumIntegerOnly
        {
            get{ return _NotrequiredNotnullableEnumIntegerOnly;}
            set
            {
                _NotrequiredNotnullableEnumIntegerOnly = value;
                _flagNotrequiredNotnullableEnumIntegerOnly = true;
            }
        }
        private NotrequiredNotnullableEnumIntegerOnlyEnum? _NotrequiredNotnullableEnumIntegerOnly;
        private bool _flagNotrequiredNotnullableEnumIntegerOnly;

        /// <summary>
        /// Returns false as NotrequiredNotnullableEnumIntegerOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableEnumIntegerOnly()
        {
            return _flagNotrequiredNotnullableEnumIntegerOnly;
        }
        /// <summary>
        /// Defines RequiredNotnullableEnumString
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequiredNotnullableEnumStringEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3,

            /// <summary>
            /// Enum ValuewithTab for value: Value\twith tab
            /// </summary>
            [EnumMember(Value = "Value\twith tab")]
            ValuewithTab = 4,

            /// <summary>
            /// Enum ValueWithQuote for value: Value with \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with \" quote")]
            ValueWithQuote = 5,

            /// <summary>
            /// Enum ValueWithEscapedQuote for value: Value with escaped \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with escaped \" quote")]
            ValueWithEscapedQuote = 6,

            /// <summary>
            /// Enum Duplicatevalue for value: Duplicate\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\nvalue")]
            Duplicatevalue = 7,

            /// <summary>
            /// Enum Duplicatevalue2 for value: Duplicate\r\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\r\nvalue")]
            Duplicatevalue2 = 8
        }


        /// <summary>
        /// Gets or Sets RequiredNotnullableEnumString
        /// </summary>

        [DataMember(Name = "required_notnullable_enum_string", IsRequired = true, EmitDefaultValue = true)]
        public RequiredNotnullableEnumStringEnum RequiredNotnullableEnumString
        {
            get{ return _RequiredNotnullableEnumString;}
            set
            {
                _RequiredNotnullableEnumString = value;
                _flagRequiredNotnullableEnumString = true;
            }
        }
        private RequiredNotnullableEnumStringEnum _RequiredNotnullableEnumString;
        private bool _flagRequiredNotnullableEnumString;

        /// <summary>
        /// Returns false as RequiredNotnullableEnumString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableEnumString()
        {
            return _flagRequiredNotnullableEnumString;
        }
        /// <summary>
        /// Defines RequiredNullableEnumString
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequiredNullableEnumStringEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3,

            /// <summary>
            /// Enum ValuewithTab for value: Value\twith tab
            /// </summary>
            [EnumMember(Value = "Value\twith tab")]
            ValuewithTab = 4,

            /// <summary>
            /// Enum ValueWithQuote for value: Value with \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with \" quote")]
            ValueWithQuote = 5,

            /// <summary>
            /// Enum ValueWithEscapedQuote for value: Value with escaped \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with escaped \" quote")]
            ValueWithEscapedQuote = 6,

            /// <summary>
            /// Enum Duplicatevalue for value: Duplicate\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\nvalue")]
            Duplicatevalue = 7,

            /// <summary>
            /// Enum Duplicatevalue2 for value: Duplicate\r\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\r\nvalue")]
            Duplicatevalue2 = 8
        }


        /// <summary>
        /// Gets or Sets RequiredNullableEnumString
        /// </summary>

        [DataMember(Name = "required_nullable_enum_string", IsRequired = true, EmitDefaultValue = true)]
        public RequiredNullableEnumStringEnum RequiredNullableEnumString
        {
            get{ return _RequiredNullableEnumString;}
            set
            {
                _RequiredNullableEnumString = value;
                _flagRequiredNullableEnumString = true;
            }
        }
        private RequiredNullableEnumStringEnum _RequiredNullableEnumString;
        private bool _flagRequiredNullableEnumString;

        /// <summary>
        /// Returns false as RequiredNullableEnumString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableEnumString()
        {
            return _flagRequiredNullableEnumString;
        }
        /// <summary>
        /// Defines NotrequiredNullableEnumString
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotrequiredNullableEnumStringEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3,

            /// <summary>
            /// Enum ValuewithTab for value: Value\twith tab
            /// </summary>
            [EnumMember(Value = "Value\twith tab")]
            ValuewithTab = 4,

            /// <summary>
            /// Enum ValueWithQuote for value: Value with \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with \" quote")]
            ValueWithQuote = 5,

            /// <summary>
            /// Enum ValueWithEscapedQuote for value: Value with escaped \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with escaped \" quote")]
            ValueWithEscapedQuote = 6,

            /// <summary>
            /// Enum Duplicatevalue for value: Duplicate\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\nvalue")]
            Duplicatevalue = 7,

            /// <summary>
            /// Enum Duplicatevalue2 for value: Duplicate\r\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\r\nvalue")]
            Duplicatevalue2 = 8
        }


        /// <summary>
        /// Gets or Sets NotrequiredNullableEnumString
        /// </summary>

        [DataMember(Name = "notrequired_nullable_enum_string", EmitDefaultValue = true)]
        public NotrequiredNullableEnumStringEnum? NotrequiredNullableEnumString
        {
            get{ return _NotrequiredNullableEnumString;}
            set
            {
                _NotrequiredNullableEnumString = value;
                _flagNotrequiredNullableEnumString = true;
            }
        }
        private NotrequiredNullableEnumStringEnum? _NotrequiredNullableEnumString;
        private bool _flagNotrequiredNullableEnumString;

        /// <summary>
        /// Returns false as NotrequiredNullableEnumString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableEnumString()
        {
            return _flagNotrequiredNullableEnumString;
        }
        /// <summary>
        /// Defines NotrequiredNotnullableEnumString
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotrequiredNotnullableEnumStringEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3,

            /// <summary>
            /// Enum ValuewithTab for value: Value\twith tab
            /// </summary>
            [EnumMember(Value = "Value\twith tab")]
            ValuewithTab = 4,

            /// <summary>
            /// Enum ValueWithQuote for value: Value with \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with \" quote")]
            ValueWithQuote = 5,

            /// <summary>
            /// Enum ValueWithEscapedQuote for value: Value with escaped \&quot; quote
            /// </summary>
            [EnumMember(Value = "Value with escaped \" quote")]
            ValueWithEscapedQuote = 6,

            /// <summary>
            /// Enum Duplicatevalue for value: Duplicate\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\nvalue")]
            Duplicatevalue = 7,

            /// <summary>
            /// Enum Duplicatevalue2 for value: Duplicate\r\nvalue
            /// </summary>
            [EnumMember(Value = "Duplicate\r\nvalue")]
            Duplicatevalue2 = 8
        }


        /// <summary>
        /// Gets or Sets NotrequiredNotnullableEnumString
        /// </summary>

        [DataMember(Name = "notrequired_notnullable_enum_string", EmitDefaultValue = false)]
        public NotrequiredNotnullableEnumStringEnum? NotrequiredNotnullableEnumString
        {
            get{ return _NotrequiredNotnullableEnumString;}
            set
            {
                _NotrequiredNotnullableEnumString = value;
                _flagNotrequiredNotnullableEnumString = true;
            }
        }
        private NotrequiredNotnullableEnumStringEnum? _NotrequiredNotnullableEnumString;
        private bool _flagNotrequiredNotnullableEnumString;

        /// <summary>
        /// Returns false as NotrequiredNotnullableEnumString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableEnumString()
        {
            return _flagNotrequiredNotnullableEnumString;
        }

        /// <summary>
        /// Gets or Sets RequiredNullableOuterEnumDefaultValue
        /// </summary>

        [DataMember(Name = "required_nullable_outerEnumDefaultValue", IsRequired = true, EmitDefaultValue = true)]
        public OuterEnumDefaultValue RequiredNullableOuterEnumDefaultValue
        {
            get{ return _RequiredNullableOuterEnumDefaultValue;}
            set
            {
                _RequiredNullableOuterEnumDefaultValue = value;
                _flagRequiredNullableOuterEnumDefaultValue = true;
            }
        }
        private OuterEnumDefaultValue _RequiredNullableOuterEnumDefaultValue;
        private bool _flagRequiredNullableOuterEnumDefaultValue;

        /// <summary>
        /// Returns false as RequiredNullableOuterEnumDefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableOuterEnumDefaultValue()
        {
            return _flagRequiredNullableOuterEnumDefaultValue;
        }

        /// <summary>
        /// Gets or Sets RequiredNotnullableOuterEnumDefaultValue
        /// </summary>

        [DataMember(Name = "required_notnullable_outerEnumDefaultValue", IsRequired = true, EmitDefaultValue = true)]
        public OuterEnumDefaultValue RequiredNotnullableOuterEnumDefaultValue
        {
            get{ return _RequiredNotnullableOuterEnumDefaultValue;}
            set
            {
                _RequiredNotnullableOuterEnumDefaultValue = value;
                _flagRequiredNotnullableOuterEnumDefaultValue = true;
            }
        }
        private OuterEnumDefaultValue _RequiredNotnullableOuterEnumDefaultValue;
        private bool _flagRequiredNotnullableOuterEnumDefaultValue;

        /// <summary>
        /// Returns false as RequiredNotnullableOuterEnumDefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableOuterEnumDefaultValue()
        {
            return _flagRequiredNotnullableOuterEnumDefaultValue;
        }

        /// <summary>
        /// Gets or Sets NotrequiredNullableOuterEnumDefaultValue
        /// </summary>

        [DataMember(Name = "notrequired_nullable_outerEnumDefaultValue", EmitDefaultValue = true)]
        public OuterEnumDefaultValue? NotrequiredNullableOuterEnumDefaultValue
        {
            get{ return _NotrequiredNullableOuterEnumDefaultValue;}
            set
            {
                _NotrequiredNullableOuterEnumDefaultValue = value;
                _flagNotrequiredNullableOuterEnumDefaultValue = true;
            }
        }
        private OuterEnumDefaultValue? _NotrequiredNullableOuterEnumDefaultValue;
        private bool _flagNotrequiredNullableOuterEnumDefaultValue;

        /// <summary>
        /// Returns false as NotrequiredNullableOuterEnumDefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableOuterEnumDefaultValue()
        {
            return _flagNotrequiredNullableOuterEnumDefaultValue;
        }

        /// <summary>
        /// Gets or Sets NotrequiredNotnullableOuterEnumDefaultValue
        /// </summary>

        [DataMember(Name = "notrequired_notnullable_outerEnumDefaultValue", EmitDefaultValue = false)]
        public OuterEnumDefaultValue? NotrequiredNotnullableOuterEnumDefaultValue
        {
            get{ return _NotrequiredNotnullableOuterEnumDefaultValue;}
            set
            {
                _NotrequiredNotnullableOuterEnumDefaultValue = value;
                _flagNotrequiredNotnullableOuterEnumDefaultValue = true;
            }
        }
        private OuterEnumDefaultValue? _NotrequiredNotnullableOuterEnumDefaultValue;
        private bool _flagNotrequiredNotnullableOuterEnumDefaultValue;

        /// <summary>
        /// Returns false as NotrequiredNotnullableOuterEnumDefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableOuterEnumDefaultValue()
        {
            return _flagNotrequiredNotnullableOuterEnumDefaultValue;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredClass" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequiredClass()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredClass" /> class.
        /// </summary>
        /// <param name="requiredNullableIntegerProp">requiredNullableIntegerProp (required).</param>
        /// <param name="requiredNotnullableintegerProp">requiredNotnullableintegerProp (required).</param>
        /// <param name="notRequiredNullableIntegerProp">notRequiredNullableIntegerProp.</param>
        /// <param name="notRequiredNotnullableintegerProp">notRequiredNotnullableintegerProp.</param>
        /// <param name="requiredNullableStringProp">requiredNullableStringProp (required).</param>
        /// <param name="requiredNotnullableStringProp">requiredNotnullableStringProp (required).</param>
        /// <param name="notrequiredNullableStringProp">notrequiredNullableStringProp.</param>
        /// <param name="notrequiredNotnullableStringProp">notrequiredNotnullableStringProp.</param>
        /// <param name="requiredNullableBooleanProp">requiredNullableBooleanProp (required).</param>
        /// <param name="requiredNotnullableBooleanProp">requiredNotnullableBooleanProp (required).</param>
        /// <param name="notrequiredNullableBooleanProp">notrequiredNullableBooleanProp.</param>
        /// <param name="notrequiredNotnullableBooleanProp">notrequiredNotnullableBooleanProp.</param>
        /// <param name="requiredNullableDateProp">requiredNullableDateProp (required).</param>
        /// <param name="requiredNotNullableDateProp">requiredNotNullableDateProp (required).</param>
        /// <param name="notRequiredNullableDateProp">notRequiredNullableDateProp.</param>
        /// <param name="notRequiredNotnullableDateProp">notRequiredNotnullableDateProp.</param>
        /// <param name="requiredNotnullableDatetimeProp">requiredNotnullableDatetimeProp (required).</param>
        /// <param name="requiredNullableDatetimeProp">requiredNullableDatetimeProp (required).</param>
        /// <param name="notrequiredNullableDatetimeProp">notrequiredNullableDatetimeProp.</param>
        /// <param name="notrequiredNotnullableDatetimeProp">notrequiredNotnullableDatetimeProp.</param>
        /// <param name="requiredNullableEnumInteger">requiredNullableEnumInteger (required).</param>
        /// <param name="requiredNotnullableEnumInteger">requiredNotnullableEnumInteger (required).</param>
        /// <param name="notrequiredNullableEnumInteger">notrequiredNullableEnumInteger.</param>
        /// <param name="notrequiredNotnullableEnumInteger">notrequiredNotnullableEnumInteger.</param>
        /// <param name="requiredNullableEnumIntegerOnly">requiredNullableEnumIntegerOnly (required).</param>
        /// <param name="requiredNotnullableEnumIntegerOnly">requiredNotnullableEnumIntegerOnly (required).</param>
        /// <param name="notrequiredNullableEnumIntegerOnly">notrequiredNullableEnumIntegerOnly.</param>
        /// <param name="notrequiredNotnullableEnumIntegerOnly">notrequiredNotnullableEnumIntegerOnly.</param>
        /// <param name="requiredNotnullableEnumString">requiredNotnullableEnumString (required).</param>
        /// <param name="requiredNullableEnumString">requiredNullableEnumString (required).</param>
        /// <param name="notrequiredNullableEnumString">notrequiredNullableEnumString.</param>
        /// <param name="notrequiredNotnullableEnumString">notrequiredNotnullableEnumString.</param>
        /// <param name="requiredNullableOuterEnumDefaultValue">requiredNullableOuterEnumDefaultValue (required).</param>
        /// <param name="requiredNotnullableOuterEnumDefaultValue">requiredNotnullableOuterEnumDefaultValue (required).</param>
        /// <param name="notrequiredNullableOuterEnumDefaultValue">notrequiredNullableOuterEnumDefaultValue.</param>
        /// <param name="notrequiredNotnullableOuterEnumDefaultValue">notrequiredNotnullableOuterEnumDefaultValue.</param>
        /// <param name="requiredNullableUuid">requiredNullableUuid (required).</param>
        /// <param name="requiredNotnullableUuid">requiredNotnullableUuid (required).</param>
        /// <param name="notrequiredNullableUuid">notrequiredNullableUuid.</param>
        /// <param name="notrequiredNotnullableUuid">notrequiredNotnullableUuid.</param>
        /// <param name="requiredNullableArrayOfString">requiredNullableArrayOfString (required).</param>
        /// <param name="requiredNotnullableArrayOfString">requiredNotnullableArrayOfString (required).</param>
        /// <param name="notrequiredNullableArrayOfString">notrequiredNullableArrayOfString.</param>
        /// <param name="notrequiredNotnullableArrayOfString">notrequiredNotnullableArrayOfString.</param>
        public RequiredClass(int? requiredNullableIntegerProp = default(int?), int requiredNotnullableintegerProp = default(int), int? notRequiredNullableIntegerProp = default(int?), int notRequiredNotnullableintegerProp = default(int), string requiredNullableStringProp = default(string), string requiredNotnullableStringProp = default(string), string notrequiredNullableStringProp = default(string), string notrequiredNotnullableStringProp = default(string), bool? requiredNullableBooleanProp = default(bool?), bool requiredNotnullableBooleanProp = default(bool), bool? notrequiredNullableBooleanProp = default(bool?), bool notrequiredNotnullableBooleanProp = default(bool), DateTime? requiredNullableDateProp = default(DateTime?), DateTime requiredNotNullableDateProp = default(DateTime), DateTime? notRequiredNullableDateProp = default(DateTime?), DateTime notRequiredNotnullableDateProp = default(DateTime), DateTime requiredNotnullableDatetimeProp = default(DateTime), DateTime? requiredNullableDatetimeProp = default(DateTime?), DateTime? notrequiredNullableDatetimeProp = default(DateTime?), DateTime notrequiredNotnullableDatetimeProp = default(DateTime), RequiredNullableEnumIntegerEnum requiredNullableEnumInteger = default(RequiredNullableEnumIntegerEnum), RequiredNotnullableEnumIntegerEnum requiredNotnullableEnumInteger = default(RequiredNotnullableEnumIntegerEnum), NotrequiredNullableEnumIntegerEnum? notrequiredNullableEnumInteger = default(NotrequiredNullableEnumIntegerEnum?), NotrequiredNotnullableEnumIntegerEnum? notrequiredNotnullableEnumInteger = default(NotrequiredNotnullableEnumIntegerEnum?), RequiredNullableEnumIntegerOnlyEnum requiredNullableEnumIntegerOnly = default(RequiredNullableEnumIntegerOnlyEnum), RequiredNotnullableEnumIntegerOnlyEnum requiredNotnullableEnumIntegerOnly = default(RequiredNotnullableEnumIntegerOnlyEnum), NotrequiredNullableEnumIntegerOnlyEnum? notrequiredNullableEnumIntegerOnly = default(NotrequiredNullableEnumIntegerOnlyEnum?), NotrequiredNotnullableEnumIntegerOnlyEnum? notrequiredNotnullableEnumIntegerOnly = default(NotrequiredNotnullableEnumIntegerOnlyEnum?), RequiredNotnullableEnumStringEnum requiredNotnullableEnumString = default(RequiredNotnullableEnumStringEnum), RequiredNullableEnumStringEnum requiredNullableEnumString = default(RequiredNullableEnumStringEnum), NotrequiredNullableEnumStringEnum? notrequiredNullableEnumString = default(NotrequiredNullableEnumStringEnum?), NotrequiredNotnullableEnumStringEnum? notrequiredNotnullableEnumString = default(NotrequiredNotnullableEnumStringEnum?), OuterEnumDefaultValue requiredNullableOuterEnumDefaultValue = default(OuterEnumDefaultValue), OuterEnumDefaultValue requiredNotnullableOuterEnumDefaultValue = default(OuterEnumDefaultValue), OuterEnumDefaultValue? notrequiredNullableOuterEnumDefaultValue = default(OuterEnumDefaultValue?), OuterEnumDefaultValue? notrequiredNotnullableOuterEnumDefaultValue = default(OuterEnumDefaultValue?), Guid? requiredNullableUuid = default(Guid?), Guid requiredNotnullableUuid = default(Guid), Guid? notrequiredNullableUuid = default(Guid?), Guid notrequiredNotnullableUuid = default(Guid), List<string> requiredNullableArrayOfString = default(List<string>), List<string> requiredNotnullableArrayOfString = default(List<string>), List<string> notrequiredNullableArrayOfString = default(List<string>), List<string> notrequiredNotnullableArrayOfString = default(List<string>))
        {
            // to ensure "requiredNullableIntegerProp" is required (not null)
            if (requiredNullableIntegerProp == null)
            {
                throw new ArgumentNullException("requiredNullableIntegerProp is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableIntegerProp = requiredNullableIntegerProp;
            this._RequiredNotnullableintegerProp = requiredNotnullableintegerProp;
            // to ensure "requiredNullableStringProp" is required (not null)
            if (requiredNullableStringProp == null)
            {
                throw new ArgumentNullException("requiredNullableStringProp is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableStringProp = requiredNullableStringProp;
            // to ensure "requiredNotnullableStringProp" is required (not null)
            if (requiredNotnullableStringProp == null)
            {
                throw new ArgumentNullException("requiredNotnullableStringProp is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNotnullableStringProp = requiredNotnullableStringProp;
            // to ensure "requiredNullableBooleanProp" is required (not null)
            if (requiredNullableBooleanProp == null)
            {
                throw new ArgumentNullException("requiredNullableBooleanProp is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableBooleanProp = requiredNullableBooleanProp;
            this._RequiredNotnullableBooleanProp = requiredNotnullableBooleanProp;
            // to ensure "requiredNullableDateProp" is required (not null)
            if (requiredNullableDateProp == null)
            {
                throw new ArgumentNullException("requiredNullableDateProp is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableDateProp = requiredNullableDateProp;
            this._RequiredNotNullableDateProp = requiredNotNullableDateProp;
            this._RequiredNotnullableDatetimeProp = requiredNotnullableDatetimeProp;
            // to ensure "requiredNullableDatetimeProp" is required (not null)
            if (requiredNullableDatetimeProp == null)
            {
                throw new ArgumentNullException("requiredNullableDatetimeProp is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableDatetimeProp = requiredNullableDatetimeProp;
            this._RequiredNullableEnumInteger = requiredNullableEnumInteger;
            this._RequiredNotnullableEnumInteger = requiredNotnullableEnumInteger;
            this._RequiredNullableEnumIntegerOnly = requiredNullableEnumIntegerOnly;
            this._RequiredNotnullableEnumIntegerOnly = requiredNotnullableEnumIntegerOnly;
            this._RequiredNotnullableEnumString = requiredNotnullableEnumString;
            this._RequiredNullableEnumString = requiredNullableEnumString;
            this._RequiredNullableOuterEnumDefaultValue = requiredNullableOuterEnumDefaultValue;
            this._RequiredNotnullableOuterEnumDefaultValue = requiredNotnullableOuterEnumDefaultValue;
            // to ensure "requiredNullableUuid" is required (not null)
            if (requiredNullableUuid == null)
            {
                throw new ArgumentNullException("requiredNullableUuid is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableUuid = requiredNullableUuid;
            this._RequiredNotnullableUuid = requiredNotnullableUuid;
            // to ensure "requiredNullableArrayOfString" is required (not null)
            if (requiredNullableArrayOfString == null)
            {
                throw new ArgumentNullException("requiredNullableArrayOfString is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNullableArrayOfString = requiredNullableArrayOfString;
            // to ensure "requiredNotnullableArrayOfString" is required (not null)
            if (requiredNotnullableArrayOfString == null)
            {
                throw new ArgumentNullException("requiredNotnullableArrayOfString is a required property for RequiredClass and cannot be null");
            }
            this._RequiredNotnullableArrayOfString = requiredNotnullableArrayOfString;
            this._NotRequiredNullableIntegerProp = notRequiredNullableIntegerProp;
            if (this.NotRequiredNullableIntegerProp != null)
            {
                this._flagNotRequiredNullableIntegerProp = true;
            }
            this._NotRequiredNotnullableintegerProp = notRequiredNotnullableintegerProp;
            if (this.NotRequiredNotnullableintegerProp != null)
            {
                this._flagNotRequiredNotnullableintegerProp = true;
            }
            this._NotrequiredNullableStringProp = notrequiredNullableStringProp;
            if (this.NotrequiredNullableStringProp != null)
            {
                this._flagNotrequiredNullableStringProp = true;
            }
            this._NotrequiredNotnullableStringProp = notrequiredNotnullableStringProp;
            if (this.NotrequiredNotnullableStringProp != null)
            {
                this._flagNotrequiredNotnullableStringProp = true;
            }
            this._NotrequiredNullableBooleanProp = notrequiredNullableBooleanProp;
            if (this.NotrequiredNullableBooleanProp != null)
            {
                this._flagNotrequiredNullableBooleanProp = true;
            }
            this._NotrequiredNotnullableBooleanProp = notrequiredNotnullableBooleanProp;
            if (this.NotrequiredNotnullableBooleanProp != null)
            {
                this._flagNotrequiredNotnullableBooleanProp = true;
            }
            this._NotRequiredNullableDateProp = notRequiredNullableDateProp;
            if (this.NotRequiredNullableDateProp != null)
            {
                this._flagNotRequiredNullableDateProp = true;
            }
            this._NotRequiredNotnullableDateProp = notRequiredNotnullableDateProp;
            if (this.NotRequiredNotnullableDateProp != null)
            {
                this._flagNotRequiredNotnullableDateProp = true;
            }
            this._NotrequiredNullableDatetimeProp = notrequiredNullableDatetimeProp;
            if (this.NotrequiredNullableDatetimeProp != null)
            {
                this._flagNotrequiredNullableDatetimeProp = true;
            }
            this._NotrequiredNotnullableDatetimeProp = notrequiredNotnullableDatetimeProp;
            if (this.NotrequiredNotnullableDatetimeProp != null)
            {
                this._flagNotrequiredNotnullableDatetimeProp = true;
            }
            this._NotrequiredNullableEnumInteger = notrequiredNullableEnumInteger;
            if (this.NotrequiredNullableEnumInteger != null)
            {
                this._flagNotrequiredNullableEnumInteger = true;
            }
            this._NotrequiredNotnullableEnumInteger = notrequiredNotnullableEnumInteger;
            if (this.NotrequiredNotnullableEnumInteger != null)
            {
                this._flagNotrequiredNotnullableEnumInteger = true;
            }
            this._NotrequiredNullableEnumIntegerOnly = notrequiredNullableEnumIntegerOnly;
            if (this.NotrequiredNullableEnumIntegerOnly != null)
            {
                this._flagNotrequiredNullableEnumIntegerOnly = true;
            }
            this._NotrequiredNotnullableEnumIntegerOnly = notrequiredNotnullableEnumIntegerOnly;
            if (this.NotrequiredNotnullableEnumIntegerOnly != null)
            {
                this._flagNotrequiredNotnullableEnumIntegerOnly = true;
            }
            this._NotrequiredNullableEnumString = notrequiredNullableEnumString;
            if (this.NotrequiredNullableEnumString != null)
            {
                this._flagNotrequiredNullableEnumString = true;
            }
            this._NotrequiredNotnullableEnumString = notrequiredNotnullableEnumString;
            if (this.NotrequiredNotnullableEnumString != null)
            {
                this._flagNotrequiredNotnullableEnumString = true;
            }
            this._NotrequiredNullableOuterEnumDefaultValue = notrequiredNullableOuterEnumDefaultValue;
            if (this.NotrequiredNullableOuterEnumDefaultValue != null)
            {
                this._flagNotrequiredNullableOuterEnumDefaultValue = true;
            }
            this._NotrequiredNotnullableOuterEnumDefaultValue = notrequiredNotnullableOuterEnumDefaultValue;
            if (this.NotrequiredNotnullableOuterEnumDefaultValue != null)
            {
                this._flagNotrequiredNotnullableOuterEnumDefaultValue = true;
            }
            this._NotrequiredNullableUuid = notrequiredNullableUuid;
            if (this.NotrequiredNullableUuid != null)
            {
                this._flagNotrequiredNullableUuid = true;
            }
            this._NotrequiredNotnullableUuid = notrequiredNotnullableUuid;
            if (this.NotrequiredNotnullableUuid != null)
            {
                this._flagNotrequiredNotnullableUuid = true;
            }
            this._NotrequiredNullableArrayOfString = notrequiredNullableArrayOfString;
            if (this.NotrequiredNullableArrayOfString != null)
            {
                this._flagNotrequiredNullableArrayOfString = true;
            }
            this._NotrequiredNotnullableArrayOfString = notrequiredNotnullableArrayOfString;
            if (this.NotrequiredNotnullableArrayOfString != null)
            {
                this._flagNotrequiredNotnullableArrayOfString = true;
            }
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets RequiredNullableIntegerProp
        /// </summary>
        [DataMember(Name = "required_nullable_integer_prop", IsRequired = true, EmitDefaultValue = true)]
        public int? RequiredNullableIntegerProp
        {
            get{ return _RequiredNullableIntegerProp;}
            set
            {
                _RequiredNullableIntegerProp = value;
                _flagRequiredNullableIntegerProp = true;
            }
        }
        private int? _RequiredNullableIntegerProp;
        private bool _flagRequiredNullableIntegerProp;

        /// <summary>
        /// Returns false as RequiredNullableIntegerProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableIntegerProp()
        {
            return _flagRequiredNullableIntegerProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNotnullableintegerProp
        /// </summary>
        [DataMember(Name = "required_notnullableinteger_prop", IsRequired = true, EmitDefaultValue = true)]
        public int RequiredNotnullableintegerProp
        {
            get{ return _RequiredNotnullableintegerProp;}
            set
            {
                _RequiredNotnullableintegerProp = value;
                _flagRequiredNotnullableintegerProp = true;
            }
        }
        private int _RequiredNotnullableintegerProp;
        private bool _flagRequiredNotnullableintegerProp;

        /// <summary>
        /// Returns false as RequiredNotnullableintegerProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableintegerProp()
        {
            return _flagRequiredNotnullableintegerProp;
        }
        /// <summary>
        /// Gets or Sets NotRequiredNullableIntegerProp
        /// </summary>
        [DataMember(Name = "not_required_nullable_integer_prop", EmitDefaultValue = true)]
        public int? NotRequiredNullableIntegerProp
        {
            get{ return _NotRequiredNullableIntegerProp;}
            set
            {
                _NotRequiredNullableIntegerProp = value;
                _flagNotRequiredNullableIntegerProp = true;
            }
        }
        private int? _NotRequiredNullableIntegerProp;
        private bool _flagNotRequiredNullableIntegerProp;

        /// <summary>
        /// Returns false as NotRequiredNullableIntegerProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotRequiredNullableIntegerProp()
        {
            return _flagNotRequiredNullableIntegerProp;
        }
        /// <summary>
        /// Gets or Sets NotRequiredNotnullableintegerProp
        /// </summary>
        [DataMember(Name = "not_required_notnullableinteger_prop", EmitDefaultValue = false)]
        public int NotRequiredNotnullableintegerProp
        {
            get{ return _NotRequiredNotnullableintegerProp;}
            set
            {
                _NotRequiredNotnullableintegerProp = value;
                _flagNotRequiredNotnullableintegerProp = true;
            }
        }
        private int _NotRequiredNotnullableintegerProp;
        private bool _flagNotRequiredNotnullableintegerProp;

        /// <summary>
        /// Returns false as NotRequiredNotnullableintegerProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotRequiredNotnullableintegerProp()
        {
            return _flagNotRequiredNotnullableintegerProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNullableStringProp
        /// </summary>
        [DataMember(Name = "required_nullable_string_prop", IsRequired = true, EmitDefaultValue = true)]
        public string RequiredNullableStringProp
        {
            get{ return _RequiredNullableStringProp;}
            set
            {
                _RequiredNullableStringProp = value;
                _flagRequiredNullableStringProp = true;
            }
        }
        private string _RequiredNullableStringProp;
        private bool _flagRequiredNullableStringProp;

        /// <summary>
        /// Returns false as RequiredNullableStringProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableStringProp()
        {
            return _flagRequiredNullableStringProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNotnullableStringProp
        /// </summary>
        [DataMember(Name = "required_notnullable_string_prop", IsRequired = true, EmitDefaultValue = true)]
        public string RequiredNotnullableStringProp
        {
            get{ return _RequiredNotnullableStringProp;}
            set
            {
                _RequiredNotnullableStringProp = value;
                _flagRequiredNotnullableStringProp = true;
            }
        }
        private string _RequiredNotnullableStringProp;
        private bool _flagRequiredNotnullableStringProp;

        /// <summary>
        /// Returns false as RequiredNotnullableStringProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableStringProp()
        {
            return _flagRequiredNotnullableStringProp;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNullableStringProp
        /// </summary>
        [DataMember(Name = "notrequired_nullable_string_prop", EmitDefaultValue = true)]
        public string NotrequiredNullableStringProp
        {
            get{ return _NotrequiredNullableStringProp;}
            set
            {
                _NotrequiredNullableStringProp = value;
                _flagNotrequiredNullableStringProp = true;
            }
        }
        private string _NotrequiredNullableStringProp;
        private bool _flagNotrequiredNullableStringProp;

        /// <summary>
        /// Returns false as NotrequiredNullableStringProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableStringProp()
        {
            return _flagNotrequiredNullableStringProp;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNotnullableStringProp
        /// </summary>
        [DataMember(Name = "notrequired_notnullable_string_prop", EmitDefaultValue = false)]
        public string NotrequiredNotnullableStringProp
        {
            get{ return _NotrequiredNotnullableStringProp;}
            set
            {
                _NotrequiredNotnullableStringProp = value;
                _flagNotrequiredNotnullableStringProp = true;
            }
        }
        private string _NotrequiredNotnullableStringProp;
        private bool _flagNotrequiredNotnullableStringProp;

        /// <summary>
        /// Returns false as NotrequiredNotnullableStringProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableStringProp()
        {
            return _flagNotrequiredNotnullableStringProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNullableBooleanProp
        /// </summary>
        [DataMember(Name = "required_nullable_boolean_prop", IsRequired = true, EmitDefaultValue = true)]
        public bool? RequiredNullableBooleanProp
        {
            get{ return _RequiredNullableBooleanProp;}
            set
            {
                _RequiredNullableBooleanProp = value;
                _flagRequiredNullableBooleanProp = true;
            }
        }
        private bool? _RequiredNullableBooleanProp;
        private bool _flagRequiredNullableBooleanProp;

        /// <summary>
        /// Returns false as RequiredNullableBooleanProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableBooleanProp()
        {
            return _flagRequiredNullableBooleanProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNotnullableBooleanProp
        /// </summary>
        [DataMember(Name = "required_notnullable_boolean_prop", IsRequired = true, EmitDefaultValue = true)]
        public bool RequiredNotnullableBooleanProp
        {
            get{ return _RequiredNotnullableBooleanProp;}
            set
            {
                _RequiredNotnullableBooleanProp = value;
                _flagRequiredNotnullableBooleanProp = true;
            }
        }
        private bool _RequiredNotnullableBooleanProp;
        private bool _flagRequiredNotnullableBooleanProp;

        /// <summary>
        /// Returns false as RequiredNotnullableBooleanProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableBooleanProp()
        {
            return _flagRequiredNotnullableBooleanProp;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNullableBooleanProp
        /// </summary>
        [DataMember(Name = "notrequired_nullable_boolean_prop", EmitDefaultValue = true)]
        public bool? NotrequiredNullableBooleanProp
        {
            get{ return _NotrequiredNullableBooleanProp;}
            set
            {
                _NotrequiredNullableBooleanProp = value;
                _flagNotrequiredNullableBooleanProp = true;
            }
        }
        private bool? _NotrequiredNullableBooleanProp;
        private bool _flagNotrequiredNullableBooleanProp;

        /// <summary>
        /// Returns false as NotrequiredNullableBooleanProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableBooleanProp()
        {
            return _flagNotrequiredNullableBooleanProp;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNotnullableBooleanProp
        /// </summary>
        [DataMember(Name = "notrequired_notnullable_boolean_prop", EmitDefaultValue = true)]
        public bool NotrequiredNotnullableBooleanProp
        {
            get{ return _NotrequiredNotnullableBooleanProp;}
            set
            {
                _NotrequiredNotnullableBooleanProp = value;
                _flagNotrequiredNotnullableBooleanProp = true;
            }
        }
        private bool _NotrequiredNotnullableBooleanProp;
        private bool _flagNotrequiredNotnullableBooleanProp;

        /// <summary>
        /// Returns false as NotrequiredNotnullableBooleanProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableBooleanProp()
        {
            return _flagNotrequiredNotnullableBooleanProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNullableDateProp
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "required_nullable_date_prop", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? RequiredNullableDateProp
        {
            get{ return _RequiredNullableDateProp;}
            set
            {
                _RequiredNullableDateProp = value;
                _flagRequiredNullableDateProp = true;
            }
        }
        private DateTime? _RequiredNullableDateProp;
        private bool _flagRequiredNullableDateProp;

        /// <summary>
        /// Returns false as RequiredNullableDateProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableDateProp()
        {
            return _flagRequiredNullableDateProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNotNullableDateProp
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "required_not_nullable_date_prop", IsRequired = true, EmitDefaultValue = true)]
        public DateTime RequiredNotNullableDateProp
        {
            get{ return _RequiredNotNullableDateProp;}
            set
            {
                _RequiredNotNullableDateProp = value;
                _flagRequiredNotNullableDateProp = true;
            }
        }
        private DateTime _RequiredNotNullableDateProp;
        private bool _flagRequiredNotNullableDateProp;

        /// <summary>
        /// Returns false as RequiredNotNullableDateProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotNullableDateProp()
        {
            return _flagRequiredNotNullableDateProp;
        }
        /// <summary>
        /// Gets or Sets NotRequiredNullableDateProp
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "not_required_nullable_date_prop", EmitDefaultValue = true)]
        public DateTime? NotRequiredNullableDateProp
        {
            get{ return _NotRequiredNullableDateProp;}
            set
            {
                _NotRequiredNullableDateProp = value;
                _flagNotRequiredNullableDateProp = true;
            }
        }
        private DateTime? _NotRequiredNullableDateProp;
        private bool _flagNotRequiredNullableDateProp;

        /// <summary>
        /// Returns false as NotRequiredNullableDateProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotRequiredNullableDateProp()
        {
            return _flagNotRequiredNullableDateProp;
        }
        /// <summary>
        /// Gets or Sets NotRequiredNotnullableDateProp
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "not_required_notnullable_date_prop", EmitDefaultValue = false)]
        public DateTime NotRequiredNotnullableDateProp
        {
            get{ return _NotRequiredNotnullableDateProp;}
            set
            {
                _NotRequiredNotnullableDateProp = value;
                _flagNotRequiredNotnullableDateProp = true;
            }
        }
        private DateTime _NotRequiredNotnullableDateProp;
        private bool _flagNotRequiredNotnullableDateProp;

        /// <summary>
        /// Returns false as NotRequiredNotnullableDateProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotRequiredNotnullableDateProp()
        {
            return _flagNotRequiredNotnullableDateProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNotnullableDatetimeProp
        /// </summary>
        [DataMember(Name = "required_notnullable_datetime_prop", IsRequired = true, EmitDefaultValue = true)]
        public DateTime RequiredNotnullableDatetimeProp
        {
            get{ return _RequiredNotnullableDatetimeProp;}
            set
            {
                _RequiredNotnullableDatetimeProp = value;
                _flagRequiredNotnullableDatetimeProp = true;
            }
        }
        private DateTime _RequiredNotnullableDatetimeProp;
        private bool _flagRequiredNotnullableDatetimeProp;

        /// <summary>
        /// Returns false as RequiredNotnullableDatetimeProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableDatetimeProp()
        {
            return _flagRequiredNotnullableDatetimeProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNullableDatetimeProp
        /// </summary>
        [DataMember(Name = "required_nullable_datetime_prop", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? RequiredNullableDatetimeProp
        {
            get{ return _RequiredNullableDatetimeProp;}
            set
            {
                _RequiredNullableDatetimeProp = value;
                _flagRequiredNullableDatetimeProp = true;
            }
        }
        private DateTime? _RequiredNullableDatetimeProp;
        private bool _flagRequiredNullableDatetimeProp;

        /// <summary>
        /// Returns false as RequiredNullableDatetimeProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableDatetimeProp()
        {
            return _flagRequiredNullableDatetimeProp;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNullableDatetimeProp
        /// </summary>
        [DataMember(Name = "notrequired_nullable_datetime_prop", EmitDefaultValue = true)]
        public DateTime? NotrequiredNullableDatetimeProp
        {
            get{ return _NotrequiredNullableDatetimeProp;}
            set
            {
                _NotrequiredNullableDatetimeProp = value;
                _flagNotrequiredNullableDatetimeProp = true;
            }
        }
        private DateTime? _NotrequiredNullableDatetimeProp;
        private bool _flagNotrequiredNullableDatetimeProp;

        /// <summary>
        /// Returns false as NotrequiredNullableDatetimeProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableDatetimeProp()
        {
            return _flagNotrequiredNullableDatetimeProp;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNotnullableDatetimeProp
        /// </summary>
        [DataMember(Name = "notrequired_notnullable_datetime_prop", EmitDefaultValue = false)]
        public DateTime NotrequiredNotnullableDatetimeProp
        {
            get{ return _NotrequiredNotnullableDatetimeProp;}
            set
            {
                _NotrequiredNotnullableDatetimeProp = value;
                _flagNotrequiredNotnullableDatetimeProp = true;
            }
        }
        private DateTime _NotrequiredNotnullableDatetimeProp;
        private bool _flagNotrequiredNotnullableDatetimeProp;

        /// <summary>
        /// Returns false as NotrequiredNotnullableDatetimeProp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableDatetimeProp()
        {
            return _flagNotrequiredNotnullableDatetimeProp;
        }
        /// <summary>
        /// Gets or Sets RequiredNullableUuid
        /// </summary>
        /// <example>72f98069-206d-4f12-9f12-3d1e525a8e84</example>
        [DataMember(Name = "required_nullable_uuid", IsRequired = true, EmitDefaultValue = true)]
        public Guid? RequiredNullableUuid
        {
            get{ return _RequiredNullableUuid;}
            set
            {
                _RequiredNullableUuid = value;
                _flagRequiredNullableUuid = true;
            }
        }
        private Guid? _RequiredNullableUuid;
        private bool _flagRequiredNullableUuid;

        /// <summary>
        /// Returns false as RequiredNullableUuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableUuid()
        {
            return _flagRequiredNullableUuid;
        }
        /// <summary>
        /// Gets or Sets RequiredNotnullableUuid
        /// </summary>
        /// <example>72f98069-206d-4f12-9f12-3d1e525a8e84</example>
        [DataMember(Name = "required_notnullable_uuid", IsRequired = true, EmitDefaultValue = true)]
        public Guid RequiredNotnullableUuid
        {
            get{ return _RequiredNotnullableUuid;}
            set
            {
                _RequiredNotnullableUuid = value;
                _flagRequiredNotnullableUuid = true;
            }
        }
        private Guid _RequiredNotnullableUuid;
        private bool _flagRequiredNotnullableUuid;

        /// <summary>
        /// Returns false as RequiredNotnullableUuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableUuid()
        {
            return _flagRequiredNotnullableUuid;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNullableUuid
        /// </summary>
        /// <example>72f98069-206d-4f12-9f12-3d1e525a8e84</example>
        [DataMember(Name = "notrequired_nullable_uuid", EmitDefaultValue = true)]
        public Guid? NotrequiredNullableUuid
        {
            get{ return _NotrequiredNullableUuid;}
            set
            {
                _NotrequiredNullableUuid = value;
                _flagNotrequiredNullableUuid = true;
            }
        }
        private Guid? _NotrequiredNullableUuid;
        private bool _flagNotrequiredNullableUuid;

        /// <summary>
        /// Returns false as NotrequiredNullableUuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableUuid()
        {
            return _flagNotrequiredNullableUuid;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNotnullableUuid
        /// </summary>
        /// <example>72f98069-206d-4f12-9f12-3d1e525a8e84</example>
        [DataMember(Name = "notrequired_notnullable_uuid", EmitDefaultValue = false)]
        public Guid NotrequiredNotnullableUuid
        {
            get{ return _NotrequiredNotnullableUuid;}
            set
            {
                _NotrequiredNotnullableUuid = value;
                _flagNotrequiredNotnullableUuid = true;
            }
        }
        private Guid _NotrequiredNotnullableUuid;
        private bool _flagNotrequiredNotnullableUuid;

        /// <summary>
        /// Returns false as NotrequiredNotnullableUuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableUuid()
        {
            return _flagNotrequiredNotnullableUuid;
        }
        /// <summary>
        /// Gets or Sets RequiredNullableArrayOfString
        /// </summary>
        [DataMember(Name = "required_nullable_array_of_string", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RequiredNullableArrayOfString
        {
            get{ return _RequiredNullableArrayOfString;}
            set
            {
                _RequiredNullableArrayOfString = value;
                _flagRequiredNullableArrayOfString = true;
            }
        }
        private List<string> _RequiredNullableArrayOfString;
        private bool _flagRequiredNullableArrayOfString;

        /// <summary>
        /// Returns false as RequiredNullableArrayOfString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNullableArrayOfString()
        {
            return _flagRequiredNullableArrayOfString;
        }
        /// <summary>
        /// Gets or Sets RequiredNotnullableArrayOfString
        /// </summary>
        [DataMember(Name = "required_notnullable_array_of_string", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RequiredNotnullableArrayOfString
        {
            get{ return _RequiredNotnullableArrayOfString;}
            set
            {
                _RequiredNotnullableArrayOfString = value;
                _flagRequiredNotnullableArrayOfString = true;
            }
        }
        private List<string> _RequiredNotnullableArrayOfString;
        private bool _flagRequiredNotnullableArrayOfString;

        /// <summary>
        /// Returns false as RequiredNotnullableArrayOfString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequiredNotnullableArrayOfString()
        {
            return _flagRequiredNotnullableArrayOfString;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNullableArrayOfString
        /// </summary>
        [DataMember(Name = "notrequired_nullable_array_of_string", EmitDefaultValue = true)]
        public List<string> NotrequiredNullableArrayOfString
        {
            get{ return _NotrequiredNullableArrayOfString;}
            set
            {
                _NotrequiredNullableArrayOfString = value;
                _flagNotrequiredNullableArrayOfString = true;
            }
        }
        private List<string> _NotrequiredNullableArrayOfString;
        private bool _flagNotrequiredNullableArrayOfString;

        /// <summary>
        /// Returns false as NotrequiredNullableArrayOfString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNullableArrayOfString()
        {
            return _flagNotrequiredNullableArrayOfString;
        }
        /// <summary>
        /// Gets or Sets NotrequiredNotnullableArrayOfString
        /// </summary>
        [DataMember(Name = "notrequired_notnullable_array_of_string", EmitDefaultValue = false)]
        public List<string> NotrequiredNotnullableArrayOfString
        {
            get{ return _NotrequiredNotnullableArrayOfString;}
            set
            {
                _NotrequiredNotnullableArrayOfString = value;
                _flagNotrequiredNotnullableArrayOfString = true;
            }
        }
        private List<string> _NotrequiredNotnullableArrayOfString;
        private bool _flagNotrequiredNotnullableArrayOfString;

        /// <summary>
        /// Returns false as NotrequiredNotnullableArrayOfString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotrequiredNotnullableArrayOfString()
        {
            return _flagNotrequiredNotnullableArrayOfString;
        }
        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequiredClass {\n");
            sb.Append("  RequiredNullableIntegerProp: ").Append(RequiredNullableIntegerProp).Append("\n");
            sb.Append("  RequiredNotnullableintegerProp: ").Append(RequiredNotnullableintegerProp).Append("\n");
            sb.Append("  NotRequiredNullableIntegerProp: ").Append(NotRequiredNullableIntegerProp).Append("\n");
            sb.Append("  NotRequiredNotnullableintegerProp: ").Append(NotRequiredNotnullableintegerProp).Append("\n");
            sb.Append("  RequiredNullableStringProp: ").Append(RequiredNullableStringProp).Append("\n");
            sb.Append("  RequiredNotnullableStringProp: ").Append(RequiredNotnullableStringProp).Append("\n");
            sb.Append("  NotrequiredNullableStringProp: ").Append(NotrequiredNullableStringProp).Append("\n");
            sb.Append("  NotrequiredNotnullableStringProp: ").Append(NotrequiredNotnullableStringProp).Append("\n");
            sb.Append("  RequiredNullableBooleanProp: ").Append(RequiredNullableBooleanProp).Append("\n");
            sb.Append("  RequiredNotnullableBooleanProp: ").Append(RequiredNotnullableBooleanProp).Append("\n");
            sb.Append("  NotrequiredNullableBooleanProp: ").Append(NotrequiredNullableBooleanProp).Append("\n");
            sb.Append("  NotrequiredNotnullableBooleanProp: ").Append(NotrequiredNotnullableBooleanProp).Append("\n");
            sb.Append("  RequiredNullableDateProp: ").Append(RequiredNullableDateProp).Append("\n");
            sb.Append("  RequiredNotNullableDateProp: ").Append(RequiredNotNullableDateProp).Append("\n");
            sb.Append("  NotRequiredNullableDateProp: ").Append(NotRequiredNullableDateProp).Append("\n");
            sb.Append("  NotRequiredNotnullableDateProp: ").Append(NotRequiredNotnullableDateProp).Append("\n");
            sb.Append("  RequiredNotnullableDatetimeProp: ").Append(RequiredNotnullableDatetimeProp).Append("\n");
            sb.Append("  RequiredNullableDatetimeProp: ").Append(RequiredNullableDatetimeProp).Append("\n");
            sb.Append("  NotrequiredNullableDatetimeProp: ").Append(NotrequiredNullableDatetimeProp).Append("\n");
            sb.Append("  NotrequiredNotnullableDatetimeProp: ").Append(NotrequiredNotnullableDatetimeProp).Append("\n");
            sb.Append("  RequiredNullableEnumInteger: ").Append(RequiredNullableEnumInteger).Append("\n");
            sb.Append("  RequiredNotnullableEnumInteger: ").Append(RequiredNotnullableEnumInteger).Append("\n");
            sb.Append("  NotrequiredNullableEnumInteger: ").Append(NotrequiredNullableEnumInteger).Append("\n");
            sb.Append("  NotrequiredNotnullableEnumInteger: ").Append(NotrequiredNotnullableEnumInteger).Append("\n");
            sb.Append("  RequiredNullableEnumIntegerOnly: ").Append(RequiredNullableEnumIntegerOnly).Append("\n");
            sb.Append("  RequiredNotnullableEnumIntegerOnly: ").Append(RequiredNotnullableEnumIntegerOnly).Append("\n");
            sb.Append("  NotrequiredNullableEnumIntegerOnly: ").Append(NotrequiredNullableEnumIntegerOnly).Append("\n");
            sb.Append("  NotrequiredNotnullableEnumIntegerOnly: ").Append(NotrequiredNotnullableEnumIntegerOnly).Append("\n");
            sb.Append("  RequiredNotnullableEnumString: ").Append(RequiredNotnullableEnumString).Append("\n");
            sb.Append("  RequiredNullableEnumString: ").Append(RequiredNullableEnumString).Append("\n");
            sb.Append("  NotrequiredNullableEnumString: ").Append(NotrequiredNullableEnumString).Append("\n");
            sb.Append("  NotrequiredNotnullableEnumString: ").Append(NotrequiredNotnullableEnumString).Append("\n");
            sb.Append("  RequiredNullableOuterEnumDefaultValue: ").Append(RequiredNullableOuterEnumDefaultValue).Append("\n");
            sb.Append("  RequiredNotnullableOuterEnumDefaultValue: ").Append(RequiredNotnullableOuterEnumDefaultValue).Append("\n");
            sb.Append("  NotrequiredNullableOuterEnumDefaultValue: ").Append(NotrequiredNullableOuterEnumDefaultValue).Append("\n");
            sb.Append("  NotrequiredNotnullableOuterEnumDefaultValue: ").Append(NotrequiredNotnullableOuterEnumDefaultValue).Append("\n");
            sb.Append("  RequiredNullableUuid: ").Append(RequiredNullableUuid).Append("\n");
            sb.Append("  RequiredNotnullableUuid: ").Append(RequiredNotnullableUuid).Append("\n");
            sb.Append("  NotrequiredNullableUuid: ").Append(NotrequiredNullableUuid).Append("\n");
            sb.Append("  NotrequiredNotnullableUuid: ").Append(NotrequiredNotnullableUuid).Append("\n");
            sb.Append("  RequiredNullableArrayOfString: ").Append(RequiredNullableArrayOfString).Append("\n");
            sb.Append("  RequiredNotnullableArrayOfString: ").Append(RequiredNotnullableArrayOfString).Append("\n");
            sb.Append("  NotrequiredNullableArrayOfString: ").Append(NotrequiredNullableArrayOfString).Append("\n");
            sb.Append("  NotrequiredNotnullableArrayOfString: ").Append(NotrequiredNotnullableArrayOfString).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input as RequiredClass).AreEqual;
        }

        /// <summary>
        /// Returns true if RequiredClass instances are equal
        /// </summary>
        /// <param name="input">Instance of RequiredClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequiredClass input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequiredNullableIntegerProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableIntegerProp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiredNotnullableintegerProp.GetHashCode();
                if (this.NotRequiredNullableIntegerProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotRequiredNullableIntegerProp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotRequiredNotnullableintegerProp.GetHashCode();
                if (this.RequiredNullableStringProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableStringProp.GetHashCode();
                }
                if (this.RequiredNotnullableStringProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNotnullableStringProp.GetHashCode();
                }
                if (this.NotrequiredNullableStringProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNullableStringProp.GetHashCode();
                }
                if (this.NotrequiredNotnullableStringProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNotnullableStringProp.GetHashCode();
                }
                if (this.RequiredNullableBooleanProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableBooleanProp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiredNotnullableBooleanProp.GetHashCode();
                if (this.NotrequiredNullableBooleanProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNullableBooleanProp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotrequiredNotnullableBooleanProp.GetHashCode();
                if (this.RequiredNullableDateProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableDateProp.GetHashCode();
                }
                if (this.RequiredNotNullableDateProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNotNullableDateProp.GetHashCode();
                }
                if (this.NotRequiredNullableDateProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotRequiredNullableDateProp.GetHashCode();
                }
                if (this.NotRequiredNotnullableDateProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotRequiredNotnullableDateProp.GetHashCode();
                }
                if (this.RequiredNotnullableDatetimeProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNotnullableDatetimeProp.GetHashCode();
                }
                if (this.RequiredNullableDatetimeProp != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableDatetimeProp.GetHashCode();
                }
                if (this.NotrequiredNullableDatetimeProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNullableDatetimeProp.GetHashCode();
                }
                if (this.NotrequiredNotnullableDatetimeProp != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNotnullableDatetimeProp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiredNullableEnumInteger.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNotnullableEnumInteger.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNullableEnumInteger.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNotnullableEnumInteger.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNullableEnumIntegerOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNotnullableEnumIntegerOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNullableEnumIntegerOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNotnullableEnumIntegerOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNotnullableEnumString.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNullableEnumString.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNullableEnumString.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNotnullableEnumString.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNullableOuterEnumDefaultValue.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiredNotnullableOuterEnumDefaultValue.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNullableOuterEnumDefaultValue.GetHashCode();
                hashCode = (hashCode * 59) + this.NotrequiredNotnullableOuterEnumDefaultValue.GetHashCode();
                if (this.RequiredNullableUuid != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableUuid.GetHashCode();
                }
                if (this.RequiredNotnullableUuid != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNotnullableUuid.GetHashCode();
                }
                if (this.NotrequiredNullableUuid != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNullableUuid.GetHashCode();
                }
                if (this.NotrequiredNotnullableUuid != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNotnullableUuid.GetHashCode();
                }
                if (this.RequiredNullableArrayOfString != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNullableArrayOfString.GetHashCode();
                }
                if (this.RequiredNotnullableArrayOfString != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredNotnullableArrayOfString.GetHashCode();
                }
                if (this.NotrequiredNullableArrayOfString != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNullableArrayOfString.GetHashCode();
                }
                if (this.NotrequiredNotnullableArrayOfString != null)
                {
                    hashCode = (hashCode * 59) + this.NotrequiredNotnullableArrayOfString.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
