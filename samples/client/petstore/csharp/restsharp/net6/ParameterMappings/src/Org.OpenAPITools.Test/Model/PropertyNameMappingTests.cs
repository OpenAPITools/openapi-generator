/*
 * Dummy
 *
 * To test name, parameter mapping options
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing PropertyNameMapping
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class PropertyNameMappingTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for PropertyNameMapping
        //private PropertyNameMapping instance;

        public PropertyNameMappingTests()
        {
            // TODO uncomment below to create an instance of PropertyNameMapping
            //instance = new PropertyNameMapping();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PropertyNameMapping
        /// </summary>
        [Fact]
        public void PropertyNameMappingInstanceTest()
        {
            // TODO uncomment below to test "IsType" PropertyNameMapping
            //Assert.IsType<PropertyNameMapping>(instance);
        }

        /// <summary>
        /// Test the property 'HttpDebugOperation'
        /// </summary>
        [Fact]
        public void HttpDebugOperationTest()
        {
            // TODO unit test for the property 'HttpDebugOperation'
        }

        /// <summary>
        /// Test the property 'UnderscoreType'
        /// </summary>
        [Fact]
        public void UnderscoreTypeTest()
        {
            // TODO unit test for the property 'UnderscoreType'
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

        /// <summary>
        /// Test the property 'TypeWithUnderscore'
        /// </summary>
        [Fact]
        public void TypeWithUnderscoreTest()
        {
            // TODO unit test for the property 'TypeWithUnderscore'
        }
    }
}
