/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PFXPet.h
 *
 * A pet for sale in the pet store
 */

#ifndef PFXPet_H
#define PFXPet_H

#include <QJsonObject>

#include "PFXCategory.h"
#include "PFXTag.h"
#include <QList>
#include <QString>

#include "PFXEnum.h"
#include "PFXObject.h"

namespace test_namespace {

class PFXPet : public PFXObject {
public:
    PFXPet();
    PFXPet(QString json);
    ~PFXPet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    PFXCategory getCategory() const;
    void setCategory(const PFXCategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getPhotoUrls() const;
    void setPhotoUrls(const QList<QString> &photo_urls);
    bool is_photo_urls_Set() const;
    bool is_photo_urls_Valid() const;

    QList<PFXTag> getTags() const;
    void setTags(const QList<PFXTag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 id;
    bool m_id_isSet;
    bool m_id_isValid;

    PFXCategory category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> photo_urls;
    bool m_photo_urls_isSet;
    bool m_photo_urls_isValid;

    QList<PFXTag> tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace test_namespace

Q_DECLARE_METATYPE(test_namespace::PFXPet)

#endif // PFXPet_H
