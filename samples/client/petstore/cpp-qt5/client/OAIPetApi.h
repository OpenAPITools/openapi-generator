/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIPetApi_H_
#define _OAI_OAIPetApi_H_

#include "OAIHttpRequest.h"

#include "OAIApiResponse.h"
#include "OAIHttpRequest.h"
#include "OAIPet.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIPetApi: public QObject {
    Q_OBJECT

public:
    OAIPetApi();
    OAIPetApi(QString host, QString basePath);
    ~OAIPetApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void addPet(OAIPet& oai_pet);
    void deletePet(qint64 pet_id, QString* api_key);
    void findPetsByStatus(QList<QString*>* status);
    void findPetsByTags(QList<QString*>* tags);
    void getPetById(qint64 pet_id);
    void updatePet(OAIPet& oai_pet);
    void updatePetWithForm(qint64 pet_id, QString* name, QString* status);
    void uploadFile(qint64 pet_id, QString* additional_metadata, OAIHttpRequestInputFileElement* file);
    
private:
    void addPetCallback (OAIHttpRequestWorker * worker);
    void deletePetCallback (OAIHttpRequestWorker * worker);
    void findPetsByStatusCallback (OAIHttpRequestWorker * worker);
    void findPetsByTagsCallback (OAIHttpRequestWorker * worker);
    void getPetByIdCallback (OAIHttpRequestWorker * worker);
    void updatePetCallback (OAIHttpRequestWorker * worker);
    void updatePetWithFormCallback (OAIHttpRequestWorker * worker);
    void uploadFileCallback (OAIHttpRequestWorker * worker);
    
signals:
    void addPetSignal();
    void deletePetSignal();
    void findPetsByStatusSignal(QList<OAIPet*>* summary);
    void findPetsByTagsSignal(QList<OAIPet*>* summary);
    void getPetByIdSignal(OAIPet* summary);
    void updatePetSignal();
    void updatePetWithFormSignal();
    void uploadFileSignal(OAIApiResponse* summary);
    
    void addPetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deletePetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByStatusSignalE(QList<OAIPet*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByTagsSignalE(QList<OAIPet*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPetByIdSignalE(OAIPet* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetWithFormSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileSignalE(OAIApiResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addPetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deletePetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByStatusSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByTagsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPetByIdSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetWithFormSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
