/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPetApi_H
#define OAI_OAIPetApi_H

#include "OAIHttpRequest.h"

#include "OAIApiResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIPet.h"
#include <QString>

#include <QObject>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPetApi : public QObject {
    Q_OBJECT

public:
    OAIPetApi(const QString &scheme = "http", const QString &host = "petstore.swagger.io", int port = 0, const QString &basePath = "/v2", const int timeOut = 0);
    ~OAIPetApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void addPet(const OAIPet &oai_pet);
    void deletePet(const qint64 &pet_id, const QString &api_key);
    void findPetsByStatus(const QList<QString> &status);
    void findPetsByTags(const QList<QString> &tags);
    void getPetById(const qint64 &pet_id);
    void updatePet(const OAIPet &oai_pet);
    void updatePetWithForm(const qint64 &pet_id, const QString &name, const QString &status);
    void uploadFile(const qint64 &pet_id, const QString &additional_metadata, const OAIHttpFileElement &file);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void addPetCallback(OAIHttpRequestWorker *worker);
    void deletePetCallback(OAIHttpRequestWorker *worker);
    void findPetsByStatusCallback(OAIHttpRequestWorker *worker);
    void findPetsByTagsCallback(OAIHttpRequestWorker *worker);
    void getPetByIdCallback(OAIHttpRequestWorker *worker);
    void updatePetCallback(OAIHttpRequestWorker *worker);
    void updatePetWithFormCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);

signals:

    void addPetSignal(OAIPet summary);
    void deletePetSignal();
    void findPetsByStatusSignal(QList<OAIPet> summary);
    void findPetsByTagsSignal(QList<OAIPet> summary);
    void getPetByIdSignal(OAIPet summary);
    void updatePetSignal(OAIPet summary);
    void updatePetWithFormSignal();
    void uploadFileSignal(OAIApiResponse summary);

    void addPetSignalFull(OAIHttpRequestWorker *worker, OAIPet summary);
    void deletePetSignalFull(OAIHttpRequestWorker *worker);
    void findPetsByStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAIPet> summary);
    void findPetsByTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPet> summary);
    void getPetByIdSignalFull(OAIHttpRequestWorker *worker, OAIPet summary);
    void updatePetSignalFull(OAIHttpRequestWorker *worker, OAIPet summary);
    void updatePetWithFormSignalFull(OAIHttpRequestWorker *worker);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);

    void addPetSignalE(OAIPet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findPetsByStatusSignalE(QList<OAIPet> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findPetsByTagsSignalE(QList<OAIPet> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPetByIdSignalE(OAIPet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePetSignalE(OAIPet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePetWithFormSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void addPetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findPetsByStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findPetsByTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePetWithFormSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
