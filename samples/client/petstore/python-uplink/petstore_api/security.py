# coding: utf-8

"""
    OpenAPI Petstore

    This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

# noinspection PyUnresolvedReferences,PyProtectedMember
from uplink.auth import BasicAuth, ProxyAuth, BearerToken, get_auth

__all__ = [
    'ProxyAuth',
    'MultiAuth',
    'ApiKeySecurity',
    'PetstoreAuthSecurity',
]


class ApiTokenParam(object):
    """
    Authorizes requests using a token or key in a query parameter.
    Users should subclass this class to define which parameter is the token parameter.
    """
    def __init__(self, param, token):
        self._param = param
        self._param_value = token

    def __call__(self, request_builder):
        request_builder.info["params"][self._param] = self._param_value


class ApiTokenHeader(object):
    """
    Authorizes requests using a token or key in a header.
    Users should subclass this class to define which header is the token header.
    The subclass may also, optionally, define a token prefix (such as in BearerToken)

    _header and/or _prefix may be defined as class attributes on subclasses,
    but should also override __init__() when they do so.
    """
    _header = None
    _prefix = None

    def __init__(self, header, token, prefix=None):
        self._header = header
        self._prefix = prefix
        self._token = token

    @property
    def _header_value(self):
        if self._prefix:
            return "%s %s" % (self._prefix, self._token)
        else:
            return self._token

    def __call__(self, request_builder):
        request_builder.info["headers"][self._header] = self._header_value


class ApiTokenCookie(object):
    """
    Authorizes requests using a token or key in a cookie.

    _cookie_name may be defined as class attributes on subclasses,
    but should also override __init__() when they do so.
    """
    _cookie_name = None

    def __init__(self, name, token):
        self._cookie_name = name
        self._token = token

    @property
    def _cookie(self):
        return '%s=%s' % (self._cookie_name, self._token)

    def __call__(self, request_builder):
        cookie_header = self._cookie

        headers = request_builder.info['headers']
        cookie_keys = [header for header in headers.keys() if header.lower() == 'cookie']
        for key in cookie_keys:
            cookie_header += '; ' + headers.pop(key)
        cookie_header = cookie_header.strip('; ')

        headers['Cookie'] = cookie_header


class MultiAuth(object):
    """
    Authorizes requests using multiple auth methods at the same time.
        api_auth = MultiAuth(
            BasicAuth(username, password),
            ProxyAuth(proxy_user, proxy_pass)
        )
        api_consumer = SomeApiConsumerClass(
            "https://my.base_url.com/",
            auth=api_auth
        )

    Mostly, this is useful for API users to supply intermediary credentials (such as for a proxy).
    """
    def __init__(self, *auth_methods):
        self._auth_methods = [get_auth(auth_method) for auth_method in auth_methods]

    def __call__(self, request_builder):
        for auth_method in self._auth_methods:
            auth_method(request_builder)

    def __getitem__(self, index):
        return self._auth_methods[index]

    def __len__(self):
        return len(self._auth_methods)

    def append(self, auth_method):
        self._auth_methods.append(get_auth(auth_method))

    def extend(self, auth_methods):
        self._auth_methods.extend([get_auth(auth_method) for auth_method in auth_methods])


class ApiKeySecurity(ApiTokenHeader):
    """
    api_key security definition (apiKey)

    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """

    _header = 'api_key'
    

    # noinspection PyMissingConstructor
    def __init__(self, token, prefix=None):
        self._prefix = prefix
        self._token = token


#class AppApiKeySecurity(OAuth):
class PetstoreAuthSecurity(BearerToken):
    """
    petstore_auth security definition (oauth2)

    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech
    Do not edit the class manually.
    """
    # TODO: Handle OAuth according to oauth flows in spec, not just as a BearerToken
    # implicit true
    # password false
    # application(v2)|clientCredentials(v3) false
    # accessCode(v2)|authorizationCode(v3) false

