<?xml version="1.0" encoding="UTF-8"?>
<project name="PHPUnit" default="build">
 <property name="php" value="php"/>

 <target name="build"
   depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpunit,phpdox"/>

 <target name="clean" description="Cleanup build artifacts">
  <delete dir="${basedir}/bin"/>
  <delete dir="${basedir}/vendor"/>
  <delete file="${basedir}/composer.lock"/>
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/code-browser"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <delete dir="${basedir}/build/phar"/>
  <delete dir="${basedir}/build/phpdox"/>

  <delete>
   <fileset dir="${basedir}/build">
    <include name="**/*.phar" />
    <include name="**/*.phar.asc" />
   </fileset>
  </delete>
 </target>

 <target name="prepare" description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/code-browser"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <mkdir dir="${basedir}/build/phpdox"/>
 </target>

 <target name="download-composer" description="Downloads composer.phar (when it does not exist or is older than 30 days)">
  <tstamp>
   <format property="thirty.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-30" unit="day"/>
  </tstamp>
  <delete>
   <fileset dir="${basedir}">
    <include name="composer.phar" />
    <date datetime="${thirty.days.ago}" when="before"/>
   </fileset>
  </delete>

  <get src="https://getcomposer.org/composer.phar" dest="${basedir}/composer.phar" skipexisting="true"/>
 </target>

 <target name="composer" depends="download-composer" description="Install dependencies with Composer">

  <exec executable="php">
   <arg value="composer.phar"/>
   <arg value="install"/>
  </exec>
 </target>

 <target name="lint">
  <apply executable="${php}" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}/src">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/tests">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="phploc">
   <arg value="--log-csv" />
   <arg value="${basedir}/build/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg value="${basedir}/build/logs/phploc.xml" />
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="pdepend"
         description="Calculate software metrics using PHP_Depend">
  <exec executable="pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD">
  <exec executable="phpmd">
   <arg path="${basedir}/src" />
   <arg value="text" />
   <arg value="${basedir}/build/phpmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci"
         description="Perform project mess detection using PHPMD">
  <exec executable="phpmd">
   <arg path="${basedir}/src" />
   <arg value="xml" />
   <arg value="${basedir}/build/phpmd.xml" />
   <arg value="--reportfile" />
   <arg value="${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer">
  <exec executable="phpcs">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="phpcs-ci"
         description="Find coding standard violations using PHP_CodeSniffer">
  <exec executable="phpcs" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="phpcpd">
   <arg value="--log-pmd" />
   <arg value="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="phpunit" description="Run unit tests with PHPUnit">
  <exec executable="${php}" failonerror="true">
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="phpdox"
         description="Generate software project documentation using phpDox">
  <exec executable="phpdox" />
 </target>

 <target name="signed-phar"
         description="Create signed PHAR archive of PHPUnit and all its dependencies (release)"
         depends="phar">
  <exec executable="bash" outputproperty="version">
   <arg value="-c" />
   <arg value="${basedir}/phpunit --version | awk 'BEGIN { ORS = &quot;&quot;; } {print $2}'" />
  </exec>

  <exec executable="gpg" failonerror="true">
   <arg value="--armor" />
   <arg value="--detach-sign" />
   <arg path="${basedir}/build/phpunit-${version}.phar" />
  </exec>
 </target>

 <target name="phar"
         description="Create PHAR archive of PHPUnit and all its dependencies (release)"
         depends="phar-prepare">
  <exec executable="bash" outputproperty="version">
   <arg value="-c" />
   <arg value="${basedir}/phpunit --version | awk 'BEGIN { ORS = &quot;&quot;; } {print $2}'" />
  </exec>

  <antcall target="phar-build">
   <param name="version" value="${version}"/>
  </antcall>
 </target>

 <target name="phar-alpha"
         description="Create PHAR archive of PHPUnit and all its dependencies (alpha)"
         depends="phar-prepare">
  <antcall target="phar-build">
   <param name="version" value="alpha"/>
  </antcall>
 </target>

 <target name="phar-beta"
         description="Create PHAR archive of PHPUnit and all its dependencies (beta)"
         depends="phar-prepare">
  <antcall target="phar-build">
   <param name="version" value="beta"/>
  </antcall>
 </target>

 <target name="phar-prepare" depends="clean,download-composer">
  <mkdir dir="${basedir}/build/phar"/>
  <copy file="${basedir}/composer.json" tofile="${basedir}/composer.json.bak"/>

  <exec executable="php">
   <arg value="composer.phar"/>
   <arg value="require"/>
   <arg value="phpunit/dbunit:~1.3"/>
   <arg value="phpunit/phpunit-selenium:~1.4"/>
   <arg value="phpunit/php-invoker:~1.1"/>
  </exec>

  <move file="${basedir}/composer.json.bak" tofile="${basedir}/composer.json"/>

  <exec executable="${basedir}/build/phar-manifest.php" output="${basedir}/build/phar/manifest.txt"/>
  <copy todir="${basedir}/build/phar" file="${basedir}/build/ca.pem" />

  <copy file="${basedir}/vendor/phpunit/php-code-coverage/LICENSE" tofile="${basedir}/build/phar/php-code-coverage/LICENSE"/>
  <copy todir="${basedir}/build/phar/php-code-coverage">
   <fileset dir="${basedir}/vendor/phpunit/php-code-coverage/src">
    <include name="**/*" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpunit/php-file-iterator/LICENSE" tofile="${basedir}/build/phar/php-file-iterator/LICENSE"/>
  <copy todir="${basedir}/build/phar/php-file-iterator">
   <fileset dir="${basedir}/vendor/phpunit/php-file-iterator/src">
    <include name="**/*.php" />
    <exclude name="**/Autoload.*" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpunit/php-text-template/LICENSE" tofile="${basedir}/build/phar/php-text-template/LICENSE"/>
  <copy todir="${basedir}/build/phar/php-text-template">
   <fileset dir="${basedir}/vendor/phpunit/php-text-template/Text">
    <include name="**/*.php" />
    <exclude name="**/Autoload.*" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpunit/php-timer/LICENSE" tofile="${basedir}/build/phar/php-timer/LICENSE"/>
  <copy todir="${basedir}/build/phar/php-timer">
   <fileset dir="${basedir}/vendor/phpunit/php-timer/PHP">
    <include name="**/*.php" />
    <exclude name="**/Autoload.*" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpunit/php-token-stream/LICENSE" tofile="${basedir}/build/phar/php-token-stream/LICENSE"/>
  <copy todir="${basedir}/build/phar/php-token-stream">
   <fileset dir="${basedir}/vendor/phpunit/php-token-stream/src">
    <include name="**/*.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpunit/phpunit-mock-objects/LICENSE" tofile="${basedir}/build/phar/phpunit-mock-objects/LICENSE"/>
  <copy todir="${basedir}/build/phar/phpunit-mock-objects">
   <fileset dir="${basedir}/vendor/phpunit/phpunit-mock-objects/src">
    <include name="**/*" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/comparator/LICENSE" tofile="${basedir}/build/phar/sebastian-comparator/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-comparator">
   <fileset dir="${basedir}/vendor/sebastian/comparator/src">
    <include name="**/*.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/diff/LICENSE" tofile="${basedir}/build/phar/sebastian-diff/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-diff">
   <fileset dir="${basedir}/vendor/sebastian/diff/src">
    <include name="**/*.php" />
    <exclude name="**/autoload.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/environment/LICENSE" tofile="${basedir}/build/phar/sebastian-environment/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-environment">
   <fileset dir="${basedir}/vendor/sebastian/environment/src">
    <include name="**/*.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/exporter/LICENSE" tofile="${basedir}/build/phar/sebastian-exporter/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-exporter">
   <fileset dir="${basedir}/vendor/sebastian/exporter/src">
    <include name="**/*.php" />
    <exclude name="**/autoload.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/recursion-context/LICENSE" tofile="${basedir}/build/phar/sebastian-recursion-context/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-recursion-context">
   <fileset dir="${basedir}/vendor/sebastian/recursion-context/src">
    <include name="**/*.php" />
    <exclude name="**/autoload.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/global-state/LICENSE" tofile="${basedir}/build/phar/sebastian-global-state/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-global-state">
   <fileset dir="${basedir}/vendor/sebastian/global-state/src">
    <include name="**/*.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/sebastian/version/LICENSE" tofile="${basedir}/build/phar/sebastian-version/LICENSE"/>
  <copy todir="${basedir}/build/phar/sebastian-version">
   <fileset dir="${basedir}/vendor/sebastian/version/src">
    <include name="**/*.php" />
    <exclude name="**/autoload.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/doctrine/instantiator/LICENSE" tofile="${basedir}/build/phar/doctrine-instantiator/LICENSE"/>
  <copy todir="${basedir}/build/phar/doctrine-instantiator">
   <fileset dir="${basedir}/vendor/doctrine/instantiator/src">
    <include name="**/*.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/symfony/yaml/Symfony/Component/Yaml/LICENSE" tofile="${basedir}/build/phar/symfony/LICENSE"/>
  <copy todir="${basedir}/build/phar/symfony">
   <fileset dir="${basedir}/vendor/symfony">
    <include name="**/*.php" />
    <exclude name="**/Tests/**" />
   </fileset>
  </copy>

  <copy todir="${basedir}/build/phar/dbunit">
   <fileset dir="${basedir}/vendor/phpunit/dbunit/PHPUnit">
    <include name="**/*.php" />
    <exclude name="**/Autoload.*" />
   </fileset>
  </copy>

  <copy todir="${basedir}/build/phar/php-invoker">
   <fileset dir="${basedir}/vendor/phpunit/php-invoker/PHP">
    <include name="**/*.php" />
    <exclude name="**/Autoload.*" />
   </fileset>
  </copy>

  <copy todir="${basedir}/build/phar/phpunit-selenium">
   <fileset dir="${basedir}/vendor/phpunit/phpunit-selenium/PHPUnit">
    <include name="**/*.php" />
    <exclude name="**/Autoload.*" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpdocumentor/reflection-docblock/LICENSE" tofile="${basedir}/build/phar/phpdocumentor-reflection-docblock/LICENSE"/>
  <copy todir="${basedir}/build/phar/phpdocumentor-reflection-docblock">
   <fileset dir="${basedir}/vendor/phpdocumentor/reflection-docblock/src">
    <include name="**/*.php" />
   </fileset>
  </copy>

  <copy file="${basedir}/vendor/phpspec/prophecy/LICENSE" tofile="${basedir}/build/phar/phpspec-prophecy/LICENSE"/>
  <copy todir="${basedir}/build/phar/phpspec-prophecy">
   <fileset dir="${basedir}/vendor/phpspec/prophecy/src">
    <include name="**/*.php" />
   </fileset>
  </copy>
 </target>

 <target name="phar-build">
  <copy todir="${basedir}/build/phar/phpunit">
   <fileset dir="${basedir}/src">
    <include name="**/*.php" />
    <include name="**/*.tpl*" />
   </fileset>
  </copy>

  <exec executable="${basedir}/build/phar-version.php" outputproperty="_version">
   <arg value="${version}" />
  </exec>

  <exec executable="phpab">
   <arg value="--all" />
   <arg value="--static" />
   <arg value="--phar" />
   <arg value="--output" />
   <arg path="${basedir}/build/phpunit-${_version}.phar" />
   <arg value="--template" />
   <arg path="${basedir}/build/phar-autoload.php.in" />
   <arg path="${basedir}/build/phar" />
  </exec>

  <chmod file="${basedir}/build/phpunit-${_version}.phar" perm="ugo+rx"/>
 </target>
</project>

