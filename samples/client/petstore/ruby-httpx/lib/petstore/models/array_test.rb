=begin
#OpenAPI Petstore

#This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.18.0-SNAPSHOT

=end

require 'date'
require 'time'

module Petstore
  class ArrayTest < ApiModelBase
    attr_accessor :array_of_string

    attr_accessor :array_array_of_integer

    attr_accessor :array_array_of_model

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'array_of_string' => :'array_of_string',
        :'array_array_of_integer' => :'array_array_of_integer',
        :'array_array_of_model' => :'array_array_of_model'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'array_of_string' => :'Array<String>',
        :'array_array_of_integer' => :'Array<Array<Integer>>',
        :'array_array_of_model' => :'Array<Array<ReadOnlyFirst>>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Petstore::ArrayTest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Petstore::ArrayTest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'array_of_string')
        if (value = attributes[:'array_of_string']).is_a?(Array)
          self.array_of_string = value
        end
      end

      if attributes.key?(:'array_array_of_integer')
        if (value = attributes[:'array_array_of_integer']).is_a?(Array)
          self.array_array_of_integer = value
        end
      end

      if attributes.key?(:'array_array_of_model')
        if (value = attributes[:'array_array_of_model']).is_a?(Array)
          self.array_array_of_model = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@array_of_string.nil? && @array_of_string.length > 3
        invalid_properties.push('invalid value for "array_of_string", number of items must be less than or equal to 3.')
      end

      if !@array_of_string.nil? && @array_of_string.length < 0
        invalid_properties.push('invalid value for "array_of_string", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@array_of_string.nil? && @array_of_string.length > 3
      return false if !@array_of_string.nil? && @array_of_string.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] array_of_string Value to be assigned
    def array_of_string=(array_of_string)
      if array_of_string.nil?
        fail ArgumentError, 'array_of_string cannot be nil'
      end

      if array_of_string.length > 3
        fail ArgumentError, 'invalid value for "array_of_string", number of items must be less than or equal to 3.'
      end

      if array_of_string.length < 0
        fail ArgumentError, 'invalid value for "array_of_string", number of items must be greater than or equal to 0.'
      end

      @array_of_string = array_of_string
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          array_of_string == o.array_of_string &&
          array_array_of_integer == o.array_array_of_integer &&
          array_array_of_model == o.array_array_of_model
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [array_of_string, array_array_of_integer, array_array_of_model].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

  end

end
