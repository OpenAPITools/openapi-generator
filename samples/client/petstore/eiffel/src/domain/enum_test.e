note
 description:"[
		Swagger Petstore
 		This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
  		OpenAPI spec version: 1.0.0
 	    Contact: apiteam@swagger.io

  	NOTE: This class is auto generated by the swagger code generator program.

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel swagger codegen", "src=https://github.com/swagger-api/swagger-codegen.git", "protocol=uri"

class ENUM_TEST 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    enum_string: detachable STRING_32 
      
    enum_integer: INTEGER_32 
      
    enum_number: REAL_64 
      
    outer_enum: detachable OUTER_ENUM 
      

feature -- Change Element  
 
    set_enum_string (a_name: like enum_string)
        -- Set 'enum_string' with 'a_name'.
      do
        enum_string := a_name
      ensure
        enum_string_set: enum_string = a_name		
      end

    set_enum_integer (a_name: like enum_integer)
        -- Set 'enum_integer' with 'a_name'.
      do
        enum_integer := a_name
      ensure
        enum_integer_set: enum_integer = a_name		
      end

    set_enum_number (a_name: like enum_number)
        -- Set 'enum_number' with 'a_name'.
      do
        enum_number := a_name
      ensure
        enum_number_set: enum_number = a_name		
      end

    set_outer_enum (a_name: like outer_enum)
        -- Set 'outer_enum' with 'a_name'.
      do
        outer_enum := a_name
      ensure
        outer_enum_set: outer_enum = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ENUM_TEST%N")
        if attached enum_string as l_enum_string then
          Result.append ("%N")
          Result.append (l_enum_string.out)
          Result.append ("%N")    
        end  
        if attached enum_integer as l_enum_integer then
          Result.append ("%N")
          Result.append (l_enum_integer.out)
          Result.append ("%N")    
        end  
        if attached enum_number as l_enum_number then
          Result.append ("%N")
          Result.append (l_enum_number.out)
          Result.append ("%N")    
        end  
        if attached outer_enum as l_outer_enum then
          Result.append ("%N")
          Result.append (l_outer_enum.out)
          Result.append ("%N")    
        end  
      end
end
