note
 description:"[
		OpenAPI Petstore
 		This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MAP_TEST 




feature --Access

    map_map_of_string: detachable STRING_TABLE [STRING_TABLE [STRING_32]] 
      
    map_of_enum_string: detachable STRING_TABLE [STRING_32] 
      
 	direct_map: detachable STRING_TABLE [BOOLEAN] 
    	 
 	indirect_map: detachable STRING_TABLE [BOOLEAN] 
    	 

feature -- Change Element  
 
    set_map_map_of_string (a_name: like map_map_of_string)
        -- Set 'map_map_of_string' with 'a_name'.
      do
        map_map_of_string := a_name
      ensure
        map_map_of_string_set: map_map_of_string = a_name		
      end

    set_map_of_enum_string (a_name: like map_of_enum_string)
        -- Set 'map_of_enum_string' with 'a_name'.
      do
        map_of_enum_string := a_name
      ensure
        map_of_enum_string_set: map_of_enum_string = a_name		
      end

    set_direct_map (a_name: like direct_map)
        -- Set 'direct_map' with 'a_name'.
      do
        direct_map := a_name
      ensure
        direct_map_set: direct_map = a_name		
      end

    set_indirect_map (a_name: like indirect_map)
        -- Set 'indirect_map' with 'a_name'.
      do
        indirect_map := a_name
      ensure
        indirect_map_set: indirect_map = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MAP_TEST%N")
        if attached map_map_of_string as l_map_map_of_string then
          Result.append ("%Nmap_map_of_string:")
          across l_map_map_of_string as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
        if attached map_of_enum_string as l_map_of_enum_string then
          Result.append ("%Nmap_of_enum_string:")
          across l_map_of_enum_string as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
        if attached direct_map as l_direct_map then
          Result.append ("%Ndirect_map:")
          across l_direct_map as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
        if attached indirect_map as l_indirect_map then
          Result.append ("%Nindirect_map:")
          across l_indirect_map as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
      end
end


