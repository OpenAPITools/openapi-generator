note
 description:"[
		Swagger Petstore
 		This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
  		OpenAPI spec version: 1.0.0
 	    Contact: apiteam@swagger.io

  	NOTE: This class is auto generated by the swagger code generator program.

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel swagger codegen", "src=https://github.com/swagger-api/swagger-codegen.git", "protocol=uri"

class MAP_TEST 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    map_map_of_string: detachable STRING_TABLE[STRING_TABLE[STRING_32]] 
      
    map_of_enum_string: detachable STRING_TABLE[STRING_32] 
      

feature -- Change Element  
 
    set_map_map_of_string (a_name: like map_map_of_string)
        -- Set 'map_map_of_string' with 'a_name'.
      do
        map_map_of_string := a_name
      ensure
        map_map_of_string_set: map_map_of_string = a_name		
      end

    set_map_of_enum_string (a_name: like map_of_enum_string)
        -- Set 'map_of_enum_string' with 'a_name'.
      do
        map_of_enum_string := a_name
      ensure
        map_of_enum_string_set: map_of_enum_string = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MAP_TEST%N")
        if attached map_map_of_string as l_map_map_of_string then
          across l_map_map_of_string as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
        if attached map_of_enum_string as l_map_of_enum_string then
          across l_map_of_enum_string as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
      end
end
