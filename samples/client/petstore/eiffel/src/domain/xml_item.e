note
 description:"[
		OpenAPI Petstore
 		This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class XML_ITEM 




feature --Access

    attribute_string: detachable STRING_32 
      
 	attribute_number: REAL_32 
    	 
 	attribute_integer: INTEGER_32 
    	 
 	attribute_boolean: BOOLEAN 
    	 
 	wrapped_array: detachable LIST [INTEGER_32] 
    	 
    name_string: detachable STRING_32 
      
 	name_number: REAL_32 
    	 
 	name_integer: INTEGER_32 
    	 
 	name_boolean: BOOLEAN 
    	 
 	name_array: detachable LIST [INTEGER_32] 
    	 
 	name_wrapped_array: detachable LIST [INTEGER_32] 
    	 
    prefix_string: detachable STRING_32 
      
 	prefix_number: REAL_32 
    	 
 	prefix_integer: INTEGER_32 
    	 
 	prefix_boolean: BOOLEAN 
    	 
 	prefix_array: detachable LIST [INTEGER_32] 
    	 
 	prefix_wrapped_array: detachable LIST [INTEGER_32] 
    	 
    namespace_string: detachable STRING_32 
      
 	namespace_number: REAL_32 
    	 
 	namespace_integer: INTEGER_32 
    	 
 	namespace_boolean: BOOLEAN 
    	 
 	namespace_array: detachable LIST [INTEGER_32] 
    	 
 	namespace_wrapped_array: detachable LIST [INTEGER_32] 
    	 
    prefix_ns_string: detachable STRING_32 
      
 	prefix_ns_number: REAL_32 
    	 
 	prefix_ns_integer: INTEGER_32 
    	 
 	prefix_ns_boolean: BOOLEAN 
    	 
 	prefix_ns_array: detachable LIST [INTEGER_32] 
    	 
 	prefix_ns_wrapped_array: detachable LIST [INTEGER_32] 
    	 

feature -- Change Element  
 
    set_attribute_string (a_name: like attribute_string)
        -- Set 'attribute_string' with 'a_name'.
      do
        attribute_string := a_name
      ensure
        attribute_string_set: attribute_string = a_name		
      end

    set_attribute_number (a_name: like attribute_number)
        -- Set 'attribute_number' with 'a_name'.
      do
        attribute_number := a_name
      ensure
        attribute_number_set: attribute_number = a_name		
      end

    set_attribute_integer (a_name: like attribute_integer)
        -- Set 'attribute_integer' with 'a_name'.
      do
        attribute_integer := a_name
      ensure
        attribute_integer_set: attribute_integer = a_name		
      end

    set_attribute_boolean (a_name: like attribute_boolean)
        -- Set 'attribute_boolean' with 'a_name'.
      do
        attribute_boolean := a_name
      ensure
        attribute_boolean_set: attribute_boolean = a_name		
      end

    set_wrapped_array (a_name: like wrapped_array)
        -- Set 'wrapped_array' with 'a_name'.
      do
        wrapped_array := a_name
      ensure
        wrapped_array_set: wrapped_array = a_name		
      end

    set_name_string (a_name: like name_string)
        -- Set 'name_string' with 'a_name'.
      do
        name_string := a_name
      ensure
        name_string_set: name_string = a_name		
      end

    set_name_number (a_name: like name_number)
        -- Set 'name_number' with 'a_name'.
      do
        name_number := a_name
      ensure
        name_number_set: name_number = a_name		
      end

    set_name_integer (a_name: like name_integer)
        -- Set 'name_integer' with 'a_name'.
      do
        name_integer := a_name
      ensure
        name_integer_set: name_integer = a_name		
      end

    set_name_boolean (a_name: like name_boolean)
        -- Set 'name_boolean' with 'a_name'.
      do
        name_boolean := a_name
      ensure
        name_boolean_set: name_boolean = a_name		
      end

    set_name_array (a_name: like name_array)
        -- Set 'name_array' with 'a_name'.
      do
        name_array := a_name
      ensure
        name_array_set: name_array = a_name		
      end

    set_name_wrapped_array (a_name: like name_wrapped_array)
        -- Set 'name_wrapped_array' with 'a_name'.
      do
        name_wrapped_array := a_name
      ensure
        name_wrapped_array_set: name_wrapped_array = a_name		
      end

    set_prefix_string (a_name: like prefix_string)
        -- Set 'prefix_string' with 'a_name'.
      do
        prefix_string := a_name
      ensure
        prefix_string_set: prefix_string = a_name		
      end

    set_prefix_number (a_name: like prefix_number)
        -- Set 'prefix_number' with 'a_name'.
      do
        prefix_number := a_name
      ensure
        prefix_number_set: prefix_number = a_name		
      end

    set_prefix_integer (a_name: like prefix_integer)
        -- Set 'prefix_integer' with 'a_name'.
      do
        prefix_integer := a_name
      ensure
        prefix_integer_set: prefix_integer = a_name		
      end

    set_prefix_boolean (a_name: like prefix_boolean)
        -- Set 'prefix_boolean' with 'a_name'.
      do
        prefix_boolean := a_name
      ensure
        prefix_boolean_set: prefix_boolean = a_name		
      end

    set_prefix_array (a_name: like prefix_array)
        -- Set 'prefix_array' with 'a_name'.
      do
        prefix_array := a_name
      ensure
        prefix_array_set: prefix_array = a_name		
      end

    set_prefix_wrapped_array (a_name: like prefix_wrapped_array)
        -- Set 'prefix_wrapped_array' with 'a_name'.
      do
        prefix_wrapped_array := a_name
      ensure
        prefix_wrapped_array_set: prefix_wrapped_array = a_name		
      end

    set_namespace_string (a_name: like namespace_string)
        -- Set 'namespace_string' with 'a_name'.
      do
        namespace_string := a_name
      ensure
        namespace_string_set: namespace_string = a_name		
      end

    set_namespace_number (a_name: like namespace_number)
        -- Set 'namespace_number' with 'a_name'.
      do
        namespace_number := a_name
      ensure
        namespace_number_set: namespace_number = a_name		
      end

    set_namespace_integer (a_name: like namespace_integer)
        -- Set 'namespace_integer' with 'a_name'.
      do
        namespace_integer := a_name
      ensure
        namespace_integer_set: namespace_integer = a_name		
      end

    set_namespace_boolean (a_name: like namespace_boolean)
        -- Set 'namespace_boolean' with 'a_name'.
      do
        namespace_boolean := a_name
      ensure
        namespace_boolean_set: namespace_boolean = a_name		
      end

    set_namespace_array (a_name: like namespace_array)
        -- Set 'namespace_array' with 'a_name'.
      do
        namespace_array := a_name
      ensure
        namespace_array_set: namespace_array = a_name		
      end

    set_namespace_wrapped_array (a_name: like namespace_wrapped_array)
        -- Set 'namespace_wrapped_array' with 'a_name'.
      do
        namespace_wrapped_array := a_name
      ensure
        namespace_wrapped_array_set: namespace_wrapped_array = a_name		
      end

    set_prefix_ns_string (a_name: like prefix_ns_string)
        -- Set 'prefix_ns_string' with 'a_name'.
      do
        prefix_ns_string := a_name
      ensure
        prefix_ns_string_set: prefix_ns_string = a_name		
      end

    set_prefix_ns_number (a_name: like prefix_ns_number)
        -- Set 'prefix_ns_number' with 'a_name'.
      do
        prefix_ns_number := a_name
      ensure
        prefix_ns_number_set: prefix_ns_number = a_name		
      end

    set_prefix_ns_integer (a_name: like prefix_ns_integer)
        -- Set 'prefix_ns_integer' with 'a_name'.
      do
        prefix_ns_integer := a_name
      ensure
        prefix_ns_integer_set: prefix_ns_integer = a_name		
      end

    set_prefix_ns_boolean (a_name: like prefix_ns_boolean)
        -- Set 'prefix_ns_boolean' with 'a_name'.
      do
        prefix_ns_boolean := a_name
      ensure
        prefix_ns_boolean_set: prefix_ns_boolean = a_name		
      end

    set_prefix_ns_array (a_name: like prefix_ns_array)
        -- Set 'prefix_ns_array' with 'a_name'.
      do
        prefix_ns_array := a_name
      ensure
        prefix_ns_array_set: prefix_ns_array = a_name		
      end

    set_prefix_ns_wrapped_array (a_name: like prefix_ns_wrapped_array)
        -- Set 'prefix_ns_wrapped_array' with 'a_name'.
      do
        prefix_ns_wrapped_array := a_name
      ensure
        prefix_ns_wrapped_array_set: prefix_ns_wrapped_array = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass XML_ITEM%N")
        if attached attribute_string as l_attribute_string then
          Result.append ("%Nattribute_string:")
          Result.append (l_attribute_string.out)
          Result.append ("%N")    
        end  
        if attached attribute_number as l_attribute_number then
          Result.append ("%Nattribute_number:")
          Result.append (l_attribute_number.out)
          Result.append ("%N")    
        end  
        if attached attribute_integer as l_attribute_integer then
          Result.append ("%Nattribute_integer:")
          Result.append (l_attribute_integer.out)
          Result.append ("%N")    
        end  
        if attached attribute_boolean as l_attribute_boolean then
          Result.append ("%Nattribute_boolean:")
          Result.append (l_attribute_boolean.out)
          Result.append ("%N")    
        end  
        if attached wrapped_array as l_wrapped_array then
          across l_wrapped_array as ic loop
            Result.append ("%N wrapped_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached name_string as l_name_string then
          Result.append ("%Nname_string:")
          Result.append (l_name_string.out)
          Result.append ("%N")    
        end  
        if attached name_number as l_name_number then
          Result.append ("%Nname_number:")
          Result.append (l_name_number.out)
          Result.append ("%N")    
        end  
        if attached name_integer as l_name_integer then
          Result.append ("%Nname_integer:")
          Result.append (l_name_integer.out)
          Result.append ("%N")    
        end  
        if attached name_boolean as l_name_boolean then
          Result.append ("%Nname_boolean:")
          Result.append (l_name_boolean.out)
          Result.append ("%N")    
        end  
        if attached name_array as l_name_array then
          across l_name_array as ic loop
            Result.append ("%N name_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached name_wrapped_array as l_name_wrapped_array then
          across l_name_wrapped_array as ic loop
            Result.append ("%N name_wrapped_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached prefix_string as l_prefix_string then
          Result.append ("%Nprefix_string:")
          Result.append (l_prefix_string.out)
          Result.append ("%N")    
        end  
        if attached prefix_number as l_prefix_number then
          Result.append ("%Nprefix_number:")
          Result.append (l_prefix_number.out)
          Result.append ("%N")    
        end  
        if attached prefix_integer as l_prefix_integer then
          Result.append ("%Nprefix_integer:")
          Result.append (l_prefix_integer.out)
          Result.append ("%N")    
        end  
        if attached prefix_boolean as l_prefix_boolean then
          Result.append ("%Nprefix_boolean:")
          Result.append (l_prefix_boolean.out)
          Result.append ("%N")    
        end  
        if attached prefix_array as l_prefix_array then
          across l_prefix_array as ic loop
            Result.append ("%N prefix_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached prefix_wrapped_array as l_prefix_wrapped_array then
          across l_prefix_wrapped_array as ic loop
            Result.append ("%N prefix_wrapped_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached namespace_string as l_namespace_string then
          Result.append ("%Nnamespace_string:")
          Result.append (l_namespace_string.out)
          Result.append ("%N")    
        end  
        if attached namespace_number as l_namespace_number then
          Result.append ("%Nnamespace_number:")
          Result.append (l_namespace_number.out)
          Result.append ("%N")    
        end  
        if attached namespace_integer as l_namespace_integer then
          Result.append ("%Nnamespace_integer:")
          Result.append (l_namespace_integer.out)
          Result.append ("%N")    
        end  
        if attached namespace_boolean as l_namespace_boolean then
          Result.append ("%Nnamespace_boolean:")
          Result.append (l_namespace_boolean.out)
          Result.append ("%N")    
        end  
        if attached namespace_array as l_namespace_array then
          across l_namespace_array as ic loop
            Result.append ("%N namespace_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached namespace_wrapped_array as l_namespace_wrapped_array then
          across l_namespace_wrapped_array as ic loop
            Result.append ("%N namespace_wrapped_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached prefix_ns_string as l_prefix_ns_string then
          Result.append ("%Nprefix_ns_string:")
          Result.append (l_prefix_ns_string.out)
          Result.append ("%N")    
        end  
        if attached prefix_ns_number as l_prefix_ns_number then
          Result.append ("%Nprefix_ns_number:")
          Result.append (l_prefix_ns_number.out)
          Result.append ("%N")    
        end  
        if attached prefix_ns_integer as l_prefix_ns_integer then
          Result.append ("%Nprefix_ns_integer:")
          Result.append (l_prefix_ns_integer.out)
          Result.append ("%N")    
        end  
        if attached prefix_ns_boolean as l_prefix_ns_boolean then
          Result.append ("%Nprefix_ns_boolean:")
          Result.append (l_prefix_ns_boolean.out)
          Result.append ("%N")    
        end  
        if attached prefix_ns_array as l_prefix_ns_array then
          across l_prefix_ns_array as ic loop
            Result.append ("%N prefix_ns_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached prefix_ns_wrapped_array as l_prefix_ns_wrapped_array then
          across l_prefix_ns_wrapped_array as ic loop
            Result.append ("%N prefix_ns_wrapped_array:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


