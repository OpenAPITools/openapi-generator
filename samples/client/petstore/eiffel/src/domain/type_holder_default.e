note
 description:"[
		OpenAPI Petstore
 		This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class TYPE_HOLDER_DEFAULT 




feature --Access

    string_item: detachable STRING_32 
      
 	number_item: REAL_32 
    	 
 	integer_item: INTEGER_32 
    	 
 	bool_item: BOOLEAN 
    	 
 	array_item: detachable LIST [INTEGER_32] 
    	 

feature -- Change Element  
 
    set_string_item (a_name: like string_item)
        -- Set 'string_item' with 'a_name'.
      do
        string_item := a_name
      ensure
        string_item_set: string_item = a_name		
      end

    set_number_item (a_name: like number_item)
        -- Set 'number_item' with 'a_name'.
      do
        number_item := a_name
      ensure
        number_item_set: number_item = a_name		
      end

    set_integer_item (a_name: like integer_item)
        -- Set 'integer_item' with 'a_name'.
      do
        integer_item := a_name
      ensure
        integer_item_set: integer_item = a_name		
      end

    set_bool_item (a_name: like bool_item)
        -- Set 'bool_item' with 'a_name'.
      do
        bool_item := a_name
      ensure
        bool_item_set: bool_item = a_name		
      end

    set_array_item (a_name: like array_item)
        -- Set 'array_item' with 'a_name'.
      do
        array_item := a_name
      ensure
        array_item_set: array_item = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass TYPE_HOLDER_DEFAULT%N")
        if attached string_item as l_string_item then
          Result.append ("%Nstring_item:")
          Result.append (l_string_item.out)
          Result.append ("%N")    
        end  
        if attached number_item as l_number_item then
          Result.append ("%Nnumber_item:")
          Result.append (l_number_item.out)
          Result.append ("%N")    
        end  
        if attached integer_item as l_integer_item then
          Result.append ("%Ninteger_item:")
          Result.append (l_integer_item.out)
          Result.append ("%N")    
        end  
        if attached bool_item as l_bool_item then
          Result.append ("%Nbool_item:")
          Result.append (l_bool_item.out)
          Result.append ("%N")    
        end  
        if attached array_item as l_array_item then
          across l_array_item as ic loop
            Result.append ("%N array_item:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


