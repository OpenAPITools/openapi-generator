/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
@file:Suppress("UnusedImport")

package org.openapitools.client.apis

import org.openapitools.client.models.User

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.client.utils.EmptyContent
import io.ktor.http.*
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.Serializable
import kotlinx.serialization.KSerializer
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

@Suppress(
    "unused",
    "RemoveRedundantQualifierName",
    "DuplicatedCode",
)
public open class UserApi : ApiClientBase {
    public constructor(
        baseUrl: String = "http://petstore.swagger.io/v2",
        httpClientEngine: HttpClientEngine? = null,
        json: Json = Json {}
    ) : super(baseUrl, httpClientEngine, json)

    internal constructor(baseUrl: String, client: HttpClient) : super(
        baseUrl,
        client
    )

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object 
     * @return void
     */
    public suspend fun createUser(
        body: User,
    ) {
        return this.client.request {
            this.method = HttpMethod.parse("POST")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user")
            }

            // Body
            this.body = body
        }
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     * @return void
     */
    public suspend fun createUsersWithArrayInput(
        body: kotlin.collections.List<User>,
    ) {
        return this.client.request {
            this.method = HttpMethod.parse("POST")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/createWithArray")
            }

            // Body
            this.body = body
        }
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     * @return void
     */
    public suspend fun createUsersWithListInput(
        body: kotlin.collections.List<User>,
    ) {
        return this.client.request {
            this.method = HttpMethod.parse("POST")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/createWithList")
            }

            // Body
            this.body = body
        }
    }

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted 
     * @return void
     */
    public suspend fun deleteUser(
        username: kotlin.String,
    ) {
        return this.client.request {
            this.method = HttpMethod.parse("DELETE")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/{username}".replace("{username}", username.toString()))
            }
        }
    }

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing. 
     * @return User
     */
    public suspend fun getUserByName(
        username: kotlin.String,
    ): User {
        return this.client.request {
            this.method = HttpMethod.parse("GET")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/{username}".replace("{username}", username.toString()))
            }
        }
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login 
     * @param password The password for login in clear text 
     * @return kotlin.String
     */
    public suspend fun loginUser(
        username: kotlin.String,
        password: kotlin.String,
    ): kotlin.String {
        return this.client.request {
            this.method = HttpMethod.parse("GET")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/login")
            }

            // Query parameters
            parameter("username", username)
            parameter("password", password)
        }
    }

    /**
     * Logs out current logged in user session
     * 
     * @return void
     */
    public suspend fun logoutUser(
    ) {
        return this.client.request {
            this.method = HttpMethod.parse("GET")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/logout")
            }
        }
    }

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted 
     * @param body Updated user object 
     * @return void
     */
    public suspend fun updateUser(
        username: kotlin.String,
        body: User,
    ) {
        return this.client.request {
            this.method = HttpMethod.parse("PUT")
            url {
                this.takeFrom(this@UserApi.baseUrl)
                appendPath("/user/{username}".replace("{username}", username.toString()))
            }

            // Body
            this.body = body
        }
    }
}
