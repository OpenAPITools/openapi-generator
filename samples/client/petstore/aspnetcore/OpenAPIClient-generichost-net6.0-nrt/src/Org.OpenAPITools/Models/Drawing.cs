/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Drawing : Dictionary<String, Fruit>, IEquatable<Drawing>
    {
        /// <summary>
        /// Gets or Sets MainShape
        /// </summary>
        [DataMember(Name="mainShape", EmitDefaultValue=false)]
        public Shape MainShape { get; set; }

        /// <summary>
        /// Gets or Sets ShapeOrNull
        /// </summary>
        [DataMember(Name="shapeOrNull", EmitDefaultValue=true)]
        public ShapeOrNull ShapeOrNull { get; set; }

        /// <summary>
        /// Gets or Sets NullableShape
        /// </summary>
        [DataMember(Name="nullableShape", EmitDefaultValue=true)]
        public NullableShape NullableShape { get; set; }

        /// <summary>
        /// Gets or Sets Shapes
        /// </summary>
        [DataMember(Name="shapes", EmitDefaultValue=false)]
        public List<Shape> Shapes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Drawing {\n");
            sb.Append("  MainShape: ").Append(MainShape).Append("\n");
            sb.Append("  ShapeOrNull: ").Append(ShapeOrNull).Append("\n");
            sb.Append("  NullableShape: ").Append(NullableShape).Append("\n");
            sb.Append("  Shapes: ").Append(Shapes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Drawing)obj);
        }

        /// <summary>
        /// Returns true if Drawing instances are equal
        /// </summary>
        /// <param name="other">Instance of Drawing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Drawing other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MainShape == other.MainShape ||
                    MainShape != null &&
                    MainShape.Equals(other.MainShape)
                ) && 
                (
                    ShapeOrNull == other.ShapeOrNull ||
                    ShapeOrNull != null &&
                    ShapeOrNull.Equals(other.ShapeOrNull)
                ) && 
                (
                    NullableShape == other.NullableShape ||
                    NullableShape != null &&
                    NullableShape.Equals(other.NullableShape)
                ) && 
                (
                    Shapes == other.Shapes ||
                    Shapes != null &&
                    other.Shapes != null &&
                    Shapes.SequenceEqual(other.Shapes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MainShape != null)
                    hashCode = hashCode * 59 + MainShape.GetHashCode();
                    if (ShapeOrNull != null)
                    hashCode = hashCode * 59 + ShapeOrNull.GetHashCode();
                    if (NullableShape != null)
                    hashCode = hashCode * 59 + NullableShape.GetHashCode();
                    if (Shapes != null)
                    hashCode = hashCode * 59 + Shapes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Drawing left, Drawing right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Drawing left, Drawing right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
