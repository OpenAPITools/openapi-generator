/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FormatTest : IEquatable<FormatTest>
    {
        /// <summary>
        /// Gets or Sets Integer
        /// </summary>
        [Range(10, 100)]
        [DataMember(Name="integer", EmitDefaultValue=true)]
        public int Integer { get; set; }

        /// <summary>
        /// Gets or Sets Int32
        /// </summary>
        [Range(20, 200)]
        [DataMember(Name="int32", EmitDefaultValue=true)]
        public int Int32 { get; set; }

        /// <summary>
        /// Gets or Sets UnsignedInteger
        /// </summary>
        [Range(20, 200)]
        [DataMember(Name="unsigned_integer", EmitDefaultValue=true)]
        public uint UnsignedInteger { get; set; }

        /// <summary>
        /// Gets or Sets Int64
        /// </summary>
        [DataMember(Name="int64", EmitDefaultValue=true)]
        public long Int64 { get; set; }

        /// <summary>
        /// Gets or Sets UnsignedLong
        /// </summary>
        [DataMember(Name="unsigned_long", EmitDefaultValue=true)]
        public ulong UnsignedLong { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [Required]
        [Range(32.1, 543.2)]
        [DataMember(Name="number", EmitDefaultValue=true)]
        public decimal Number { get; set; }

        /// <summary>
        /// Gets or Sets VarFloat
        /// </summary>
        [Range(54.3, 987.6)]
        [DataMember(Name="float", EmitDefaultValue=true)]
        public float VarFloat { get; set; }

        /// <summary>
        /// Gets or Sets VarDouble
        /// </summary>
        [Range(67.8, 123.4)]
        [DataMember(Name="double", EmitDefaultValue=true)]
        public double VarDouble { get; set; }

        /// <summary>
        /// Gets or Sets VarDecimal
        /// </summary>
        [DataMember(Name="decimal", EmitDefaultValue=true)]
        public decimal VarDecimal { get; set; }

        /// <summary>
        /// Gets or Sets VarString
        /// </summary>
        [RegularExpression("/[a-z]/i")]
        [DataMember(Name="string", EmitDefaultValue=false)]
        public string VarString { get; set; }

        /// <summary>
        /// Gets or Sets VarByte
        /// </summary>
        [Required]
        [DataMember(Name="byte", EmitDefaultValue=false)]
        public byte[] VarByte { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name="binary", EmitDefaultValue=false)]
        public System.IO.Stream Binary { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /// <example>Sun Feb 02 00:00:00 UTC 2020</example>
        [Required]
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        /// <example>2007-12-03T10:15:30+01:00</example>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        /// <example>72f98069-206d-4f12-9f12-3d1e525a8e84</example>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [Required]
        [StringLength(64, MinimumLength=10)]
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// A string that is a 10 digit number. Can have leading zeros.
        /// </summary>
        /// <value>A string that is a 10 digit number. Can have leading zeros.</value>
        [RegularExpression("^\\d{10}$")]
        [DataMember(Name="pattern_with_digits", EmitDefaultValue=false)]
        public string PatternWithDigits { get; set; }

        /// <summary>
        /// A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.
        /// </summary>
        /// <value>A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.</value>
        [RegularExpression("/^image_\\d{1,3}$/i")]
        [DataMember(Name="pattern_with_digits_and_delimiter", EmitDefaultValue=false)]
        public string PatternWithDigitsAndDelimiter { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [RegularExpression("^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$")]
        [DataMember(Name="pattern_with_backslash", EmitDefaultValue=false)]
        public string PatternWithBackslash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormatTest {\n");
            sb.Append("  Integer: ").Append(Integer).Append("\n");
            sb.Append("  Int32: ").Append(Int32).Append("\n");
            sb.Append("  UnsignedInteger: ").Append(UnsignedInteger).Append("\n");
            sb.Append("  Int64: ").Append(Int64).Append("\n");
            sb.Append("  UnsignedLong: ").Append(UnsignedLong).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  VarFloat: ").Append(VarFloat).Append("\n");
            sb.Append("  VarDouble: ").Append(VarDouble).Append("\n");
            sb.Append("  VarDecimal: ").Append(VarDecimal).Append("\n");
            sb.Append("  VarString: ").Append(VarString).Append("\n");
            sb.Append("  VarByte: ").Append(VarByte).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PatternWithDigits: ").Append(PatternWithDigits).Append("\n");
            sb.Append("  PatternWithDigitsAndDelimiter: ").Append(PatternWithDigitsAndDelimiter).Append("\n");
            sb.Append("  PatternWithBackslash: ").Append(PatternWithBackslash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FormatTest)obj);
        }

        /// <summary>
        /// Returns true if FormatTest instances are equal
        /// </summary>
        /// <param name="other">Instance of FormatTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormatTest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Integer == other.Integer ||
                    
                    Integer.Equals(other.Integer)
                ) && 
                (
                    Int32 == other.Int32 ||
                    
                    Int32.Equals(other.Int32)
                ) && 
                (
                    UnsignedInteger == other.UnsignedInteger ||
                    
                    UnsignedInteger.Equals(other.UnsignedInteger)
                ) && 
                (
                    Int64 == other.Int64 ||
                    
                    Int64.Equals(other.Int64)
                ) && 
                (
                    UnsignedLong == other.UnsignedLong ||
                    
                    UnsignedLong.Equals(other.UnsignedLong)
                ) && 
                (
                    Number == other.Number ||
                    
                    Number.Equals(other.Number)
                ) && 
                (
                    VarFloat == other.VarFloat ||
                    
                    VarFloat.Equals(other.VarFloat)
                ) && 
                (
                    VarDouble == other.VarDouble ||
                    
                    VarDouble.Equals(other.VarDouble)
                ) && 
                (
                    VarDecimal == other.VarDecimal ||
                    
                    VarDecimal.Equals(other.VarDecimal)
                ) && 
                (
                    VarString == other.VarString ||
                    VarString != null &&
                    VarString.Equals(other.VarString)
                ) && 
                (
                    VarByte == other.VarByte ||
                    VarByte != null &&
                    VarByte.Equals(other.VarByte)
                ) && 
                (
                    Binary == other.Binary ||
                    Binary != null &&
                    Binary.Equals(other.Binary)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.Equals(other.DateTime)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    PatternWithDigits == other.PatternWithDigits ||
                    PatternWithDigits != null &&
                    PatternWithDigits.Equals(other.PatternWithDigits)
                ) && 
                (
                    PatternWithDigitsAndDelimiter == other.PatternWithDigitsAndDelimiter ||
                    PatternWithDigitsAndDelimiter != null &&
                    PatternWithDigitsAndDelimiter.Equals(other.PatternWithDigitsAndDelimiter)
                ) && 
                (
                    PatternWithBackslash == other.PatternWithBackslash ||
                    PatternWithBackslash != null &&
                    PatternWithBackslash.Equals(other.PatternWithBackslash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Integer.GetHashCode();
                    
                    hashCode = hashCode * 59 + Int32.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnsignedInteger.GetHashCode();
                    
                    hashCode = hashCode * 59 + Int64.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnsignedLong.GetHashCode();
                    
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarFloat.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarDouble.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarDecimal.GetHashCode();
                    if (VarString != null)
                    hashCode = hashCode * 59 + VarString.GetHashCode();
                    if (VarByte != null)
                    hashCode = hashCode * 59 + VarByte.GetHashCode();
                    if (Binary != null)
                    hashCode = hashCode * 59 + Binary.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (PatternWithDigits != null)
                    hashCode = hashCode * 59 + PatternWithDigits.GetHashCode();
                    if (PatternWithDigitsAndDelimiter != null)
                    hashCode = hashCode * 59 + PatternWithDigitsAndDelimiter.GetHashCode();
                    if (PatternWithBackslash != null)
                    hashCode = hashCode * 59 + PatternWithBackslash.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FormatTest left, FormatTest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FormatTest left, FormatTest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
