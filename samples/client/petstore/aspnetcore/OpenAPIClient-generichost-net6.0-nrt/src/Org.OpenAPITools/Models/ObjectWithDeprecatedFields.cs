/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ObjectWithDeprecatedFields : IEquatable<ObjectWithDeprecatedFields>
    {
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets DeprecatedRef
        /// </summary>
        [DataMember(Name="deprecatedRef", EmitDefaultValue=false)]
        public DeprecatedObject DeprecatedRef { get; set; }

        /// <summary>
        /// Gets or Sets Bars
        /// </summary>
        [DataMember(Name="bars", EmitDefaultValue=false)]
        public List<string> Bars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectWithDeprecatedFields {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeprecatedRef: ").Append(DeprecatedRef).Append("\n");
            sb.Append("  Bars: ").Append(Bars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObjectWithDeprecatedFields)obj);
        }

        /// <summary>
        /// Returns true if ObjectWithDeprecatedFields instances are equal
        /// </summary>
        /// <param name="other">Instance of ObjectWithDeprecatedFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectWithDeprecatedFields other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    DeprecatedRef == other.DeprecatedRef ||
                    DeprecatedRef != null &&
                    DeprecatedRef.Equals(other.DeprecatedRef)
                ) && 
                (
                    Bars == other.Bars ||
                    Bars != null &&
                    other.Bars != null &&
                    Bars.SequenceEqual(other.Bars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (DeprecatedRef != null)
                    hashCode = hashCode * 59 + DeprecatedRef.GetHashCode();
                    if (Bars != null)
                    hashCode = hashCode * 59 + Bars.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ObjectWithDeprecatedFields left, ObjectWithDeprecatedFields right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObjectWithDeprecatedFields left, ObjectWithDeprecatedFields right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
