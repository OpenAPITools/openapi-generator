/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdditionalPropertiesClass : IEquatable<AdditionalPropertiesClass>
    {
        /// <summary>
        /// Gets or Sets MapProperty
        /// </summary>
        [DataMember(Name="map_property", EmitDefaultValue=false)]
        public Dictionary<string, string> MapProperty { get; set; }

        /// <summary>
        /// Gets or Sets MapOfMapProperty
        /// </summary>
        [DataMember(Name="map_of_map_property", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, string>> MapOfMapProperty { get; set; }

        /// <summary>
        /// Gets or Sets Anytype1
        /// </summary>
        [DataMember(Name="anytype_1", EmitDefaultValue=true)]
        public Object Anytype1 { get; set; }

        /// <summary>
        /// Gets or Sets MapWithUndeclaredPropertiesAnytype1
        /// </summary>
        [DataMember(Name="map_with_undeclared_properties_anytype_1", EmitDefaultValue=false)]
        public Object MapWithUndeclaredPropertiesAnytype1 { get; set; }

        /// <summary>
        /// Gets or Sets MapWithUndeclaredPropertiesAnytype2
        /// </summary>
        [DataMember(Name="map_with_undeclared_properties_anytype_2", EmitDefaultValue=false)]
        public Object MapWithUndeclaredPropertiesAnytype2 { get; set; }

        /// <summary>
        /// Gets or Sets MapWithUndeclaredPropertiesAnytype3
        /// </summary>
        [DataMember(Name="map_with_undeclared_properties_anytype_3", EmitDefaultValue=false)]
        public Dictionary<string, Object> MapWithUndeclaredPropertiesAnytype3 { get; set; }

        /// <summary>
        /// an object with no declared properties and no undeclared properties, hence it&#39;s an empty map.
        /// </summary>
        /// <value>an object with no declared properties and no undeclared properties, hence it&#39;s an empty map.</value>
        [DataMember(Name="empty_map", EmitDefaultValue=false)]
        public Object EmptyMap { get; set; }

        /// <summary>
        /// Gets or Sets MapWithUndeclaredPropertiesString
        /// </summary>
        [DataMember(Name="map_with_undeclared_properties_string", EmitDefaultValue=false)]
        public Dictionary<string, string> MapWithUndeclaredPropertiesString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalPropertiesClass {\n");
            sb.Append("  MapProperty: ").Append(MapProperty).Append("\n");
            sb.Append("  MapOfMapProperty: ").Append(MapOfMapProperty).Append("\n");
            sb.Append("  Anytype1: ").Append(Anytype1).Append("\n");
            sb.Append("  MapWithUndeclaredPropertiesAnytype1: ").Append(MapWithUndeclaredPropertiesAnytype1).Append("\n");
            sb.Append("  MapWithUndeclaredPropertiesAnytype2: ").Append(MapWithUndeclaredPropertiesAnytype2).Append("\n");
            sb.Append("  MapWithUndeclaredPropertiesAnytype3: ").Append(MapWithUndeclaredPropertiesAnytype3).Append("\n");
            sb.Append("  EmptyMap: ").Append(EmptyMap).Append("\n");
            sb.Append("  MapWithUndeclaredPropertiesString: ").Append(MapWithUndeclaredPropertiesString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdditionalPropertiesClass)obj);
        }

        /// <summary>
        /// Returns true if AdditionalPropertiesClass instances are equal
        /// </summary>
        /// <param name="other">Instance of AdditionalPropertiesClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalPropertiesClass other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MapProperty == other.MapProperty ||
                    MapProperty != null &&
                    other.MapProperty != null &&
                    MapProperty.SequenceEqual(other.MapProperty)
                ) && 
                (
                    MapOfMapProperty == other.MapOfMapProperty ||
                    MapOfMapProperty != null &&
                    other.MapOfMapProperty != null &&
                    MapOfMapProperty.SequenceEqual(other.MapOfMapProperty)
                ) && 
                (
                    Anytype1 == other.Anytype1 ||
                    Anytype1 != null &&
                    Anytype1.Equals(other.Anytype1)
                ) && 
                (
                    MapWithUndeclaredPropertiesAnytype1 == other.MapWithUndeclaredPropertiesAnytype1 ||
                    MapWithUndeclaredPropertiesAnytype1 != null &&
                    MapWithUndeclaredPropertiesAnytype1.Equals(other.MapWithUndeclaredPropertiesAnytype1)
                ) && 
                (
                    MapWithUndeclaredPropertiesAnytype2 == other.MapWithUndeclaredPropertiesAnytype2 ||
                    MapWithUndeclaredPropertiesAnytype2 != null &&
                    MapWithUndeclaredPropertiesAnytype2.Equals(other.MapWithUndeclaredPropertiesAnytype2)
                ) && 
                (
                    MapWithUndeclaredPropertiesAnytype3 == other.MapWithUndeclaredPropertiesAnytype3 ||
                    MapWithUndeclaredPropertiesAnytype3 != null &&
                    other.MapWithUndeclaredPropertiesAnytype3 != null &&
                    MapWithUndeclaredPropertiesAnytype3.SequenceEqual(other.MapWithUndeclaredPropertiesAnytype3)
                ) && 
                (
                    EmptyMap == other.EmptyMap ||
                    EmptyMap != null &&
                    EmptyMap.Equals(other.EmptyMap)
                ) && 
                (
                    MapWithUndeclaredPropertiesString == other.MapWithUndeclaredPropertiesString ||
                    MapWithUndeclaredPropertiesString != null &&
                    other.MapWithUndeclaredPropertiesString != null &&
                    MapWithUndeclaredPropertiesString.SequenceEqual(other.MapWithUndeclaredPropertiesString)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MapProperty != null)
                    hashCode = hashCode * 59 + MapProperty.GetHashCode();
                    if (MapOfMapProperty != null)
                    hashCode = hashCode * 59 + MapOfMapProperty.GetHashCode();
                    if (Anytype1 != null)
                    hashCode = hashCode * 59 + Anytype1.GetHashCode();
                    if (MapWithUndeclaredPropertiesAnytype1 != null)
                    hashCode = hashCode * 59 + MapWithUndeclaredPropertiesAnytype1.GetHashCode();
                    if (MapWithUndeclaredPropertiesAnytype2 != null)
                    hashCode = hashCode * 59 + MapWithUndeclaredPropertiesAnytype2.GetHashCode();
                    if (MapWithUndeclaredPropertiesAnytype3 != null)
                    hashCode = hashCode * 59 + MapWithUndeclaredPropertiesAnytype3.GetHashCode();
                    if (EmptyMap != null)
                    hashCode = hashCode * 59 + EmptyMap.GetHashCode();
                    if (MapWithUndeclaredPropertiesString != null)
                    hashCode = hashCode * 59 + MapWithUndeclaredPropertiesString.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdditionalPropertiesClass left, AdditionalPropertiesClass right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdditionalPropertiesClass left, AdditionalPropertiesClass right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
