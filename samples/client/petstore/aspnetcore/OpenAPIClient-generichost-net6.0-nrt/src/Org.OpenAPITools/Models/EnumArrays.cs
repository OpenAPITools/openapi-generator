/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnumArrays : IEquatable<EnumArrays>
    {

        /// <summary>
        /// Gets or Sets JustSymbol
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<JustSymbolEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum JustSymbolEnum
        {
            
            /// <summary>
            /// Enum GreaterThanOrEqualTo for >=
            /// </summary>
            [EnumMember(Value = ">=")]
            GreaterThanOrEqualTo = 1,
            
            /// <summary>
            /// Enum Dollar for $
            /// </summary>
            [EnumMember(Value = "$")]
            Dollar = 2
        }

        /// <summary>
        /// Gets or Sets JustSymbol
        /// </summary>
        [DataMember(Name="just_symbol", EmitDefaultValue=true)]
        public JustSymbolEnum JustSymbol { get; set; }


        /// <summary>
        /// Gets or Sets ArrayEnum
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ArrayEnumEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ArrayEnumEnum
        {
            
            /// <summary>
            /// Enum FishEnum for fish
            /// </summary>
            [EnumMember(Value = "fish")]
            FishEnum = 1,
            
            /// <summary>
            /// Enum CrabEnum for crab
            /// </summary>
            [EnumMember(Value = "crab")]
            CrabEnum = 2
        }

        /// <summary>
        /// Gets or Sets ArrayEnum
        /// </summary>
        [DataMember(Name="array_enum", EmitDefaultValue=false)]
        public List<EnumArrays.ArrayEnumEnum> ArrayEnum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnumArrays {\n");
            sb.Append("  JustSymbol: ").Append(JustSymbol).Append("\n");
            sb.Append("  ArrayEnum: ").Append(ArrayEnum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnumArrays)obj);
        }

        /// <summary>
        /// Returns true if EnumArrays instances are equal
        /// </summary>
        /// <param name="other">Instance of EnumArrays to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumArrays other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JustSymbol == other.JustSymbol ||
                    
                    JustSymbol.Equals(other.JustSymbol)
                ) && 
                (
                    ArrayEnum == other.ArrayEnum ||
                    ArrayEnum != null &&
                    other.ArrayEnum != null &&
                    ArrayEnum.SequenceEqual(other.ArrayEnum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + JustSymbol.GetHashCode();
                    if (ArrayEnum != null)
                    hashCode = hashCode * 59 + ArrayEnum.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnumArrays left, EnumArrays right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnumArrays left, EnumArrays right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
