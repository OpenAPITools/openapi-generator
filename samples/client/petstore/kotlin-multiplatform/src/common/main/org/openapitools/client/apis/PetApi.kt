/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.apis

import org.openapitools.client.models.ApiResponse
import org.openapitools.client.models.Pet

import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.forms.FormPart
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.builtins.list
import kotlinx.serialization.builtins.serializer

class PetApi constructor(
    baseUrl: kotlin.String = "http://petstore.swagger.io/v2",
    httpClientEngine: HttpClientEngine? = null,
    serializer: KotlinxSerializer
) : ApiClientBase(baseUrl, httpClientEngine, serializer) {
    constructor(
        baseUrl: String = "http://petstore.swagger.io/v2",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Stable
    ) : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store 
     * @return void
     */
    suspend fun addPet(
        body: Pet
    ): HttpResponse<Unit> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = body

        val queries_ = Queries()

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.POST,
            "/pet",
            queries = queries_,
            headers = headers_
        )

        return jsonRequest(
            config_,
            body_,
            authNames_
        ).wrap()
    }


    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete 
     * @param apiKey  (optional)
     * @return void
     */
    suspend fun deletePet(
        petId: kotlin.Long,
        apiKey: kotlin.String? = null
    ): HttpResponse<Unit> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = 
            io.ktor.client.utils.EmptyContent

        val queries_ = Queries()

        val headers_ = mutableMapOf<String, String?>(
            "api_key" to this?.toString()
        )

        val config_ = RequestConfig(
            RequestMethod.DELETE,
            "/pet/{petId}".replace("petId", "$petId"),
            queries = queries_,
            headers = headers_
        )

        return request(
            config_,
            body_,
            authNames_
        ).wrap()
    }
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter 
     * @return kotlin.collections.List<Pet>
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun findPetsByStatus(
        status: kotlin.collections.List<kotlin.String>
    ): HttpResponse<kotlin.collections.List<Pet>> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = 
            io.ktor.client.utils.EmptyContent

        val queries_ = Queries()
        queries_.addMulti("status", status, "csv")

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.GET,
            "/pet/findByStatus",
            queries = queries_,
            headers = headers_
        )

        return request(
            config_,
            body_,
            authNames_
        ).wrap<FindPetsByStatusResponse>().map { value }
    }
    @Serializable
    private class FindPetsByStatusResponse(val value: List<Pet>) {
        @Serializer(FindPetsByStatusResponse::class)
        companion object : KSerializer<FindPetsByStatusResponse> {
            private val serializer = Pet.serializer().list
            override val descriptor = PrimitiveDescriptor("FindPetsByStatusResponse", PrimitiveKind.STRING)

            override fun serialize(encoder: Encoder, value: FindPetsByStatusResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = FindPetsByStatusResponse(serializer.deserialize(decoder))
        }
    }
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by 
     * @return kotlin.collections.List<Pet>
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun findPetsByTags(
        tags: kotlin.collections.List<kotlin.String>
    ): HttpResponse<kotlin.collections.List<Pet>> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = 
            io.ktor.client.utils.EmptyContent

        val queries_ = Queries()
        queries_.addMulti("tags", tags, "csv")

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.GET,
            "/pet/findByTags",
            queries = queries_,
            headers = headers_
        )

        return request(
            config_,
            body_,
            authNames_
        ).wrap<FindPetsByTagsResponse>().map { value }
    }
    @Serializable
    private class FindPetsByTagsResponse(val value: List<Pet>) {
        @Serializer(FindPetsByTagsResponse::class)
        companion object : KSerializer<FindPetsByTagsResponse> {
            private val serializer = Pet.serializer().list
            override val descriptor = PrimitiveDescriptor("FindPetsByTagsResponse", PrimitiveKind.STRING)

            override fun serialize(encoder: Encoder, value: FindPetsByTagsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = FindPetsByTagsResponse(serializer.deserialize(decoder))
        }
    }
    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return 
     * @return Pet
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getPetById(
        petId: kotlin.Long
    ): HttpResponse<Pet> {
        val authNames_ = listOf<String>("api_key")

        val body_ = 
            io.ktor.client.utils.EmptyContent

        val queries_ = Queries()

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.GET,
            "/pet/{petId}".replace("petId", "$petId"),
            queries = queries_,
            headers = headers_
        )

        return request(
            config_,
            body_,
            authNames_
        ).wrap()
    }
    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store 
     * @return void
     */
    suspend fun updatePet(
        body: Pet
    ): HttpResponse<Unit> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = body

        val queries_ = Queries()

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.PUT,
            "/pet",
            queries = queries_,
            headers = headers_
        )

        return jsonRequest(
            config_,
            body_,
            authNames_
        ).wrap()
    }


    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated 
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     * @return void
     */
    suspend fun updatePetWithForm(
        petId: kotlin.Long,
        name: kotlin.String? = null,
        status: kotlin.String? = null
    ): HttpResponse<Unit> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = 
            ParametersBuilder().also {
                name?.apply { it.append("name", name.toString()) }
                status?.apply { it.append("status", status.toString()) }
            }.build()

        val queries_ = Queries()

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.POST,
            "/pet/{petId}".replace("petId", "$petId"),
            queries = queries_,
            headers = headers_
        )

        return urlEncodedFormRequest(
            config_,
            body_,
            authNames_
        ).wrap()
    }
    /**
     * uploads an image
     * 
     * @param petId ID of pet to update 
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     * @return ApiResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun uploadFile(
        petId: kotlin.Long,
        additionalMetadata: kotlin.String? = null,
        file: io.ktor.client.request.forms.InputProvider? = null
    ): HttpResponse<ApiResponse> {
        val authNames_ = listOf<String>("petstore_auth")

        val body_ = 
            formData {
                additionalMetadata?.let { append(FormPart("additionalMetadata", additionalMetadata)) }
                file?.let { append(FormPart("file", file)) }
            }

        val queries_ = Queries()

        val headers_ = mutableMapOf<String, String?>(
        )

        val config_ = RequestConfig(
            RequestMethod.POST,
            "/pet/{petId}/uploadImage".replace("petId", "$petId"),
            queries = queries_,
            headers = headers_
        )

        return multipartFormRequest(
            config_,
            body_,
            authNames_
        ).wrap()
    }
}
