/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPetApi.h"

#include "OpenAPIPetApiOperations.h"
#include "OpenAPIModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace OpenAPI
{

OpenAPIPetApi::OpenAPIPetApi()
: Url(TEXT("http://petstore.swagger.io/v2"))
{
}

OpenAPIPetApi::~OpenAPIPetApi() {}

void OpenAPIPetApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void OpenAPIPetApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void OpenAPIPetApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool OpenAPIPetApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogOpenAPI, Error, TEXT("OpenAPIPetApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void OpenAPIPetApi::SetHttpRetryManager(FHttpRetrySystem::FManager& InRetryManager)
{
	if(&InRetryManager != RetryManager)
	{
		DefaultRetryManager.Reset();
		RetryManager = &InRetryManager;
	}
}

FHttpRetrySystem::FManager& OpenAPIPetApi::GetHttpRetryManager()
{
	checkf(RetryManager, TEXT("OpenAPIPetApi: RetryManager is null.  You may have meant to set it with SetHttpRetryManager first, or you may not be using a custom RetryManager at all."))
	return *RetryManager;
}

FHttpRequestRef OpenAPIPetApi::CreateHttpRequest(const Request& Request) const
{
	if (!Request.GetRetryParams().IsSet())
	{
		return FHttpModule::Get().CreateRequest();
	}
	else
	{
		if (!RetryManager)
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeUnique<HttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.Get();
		}

		const HttpRetryParams& Params = Request.GetRetryParams().GetValue();
		return RetryManager->CreateRequest(Params.RetryLimitCountOverride, Params.RetryTimeoutRelativeSecondsOverride, Params.RetryResponseCodes, Params.RetryVerbs, Params.RetryDomains);
	}
}

void OpenAPIPetApi::TryBuildResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpRequest(HttpRequest); //publish the request
	InOutResponse.SetHttpResponse(HttpResponse); //might be nullptr
	InOutResponse.SetHttpRequestSuccessful(bHttpSucceeded); //false is going to be client Failed or Failed_ConnectionError

	//A ConnectionError is a failure where the client knows the server never received the request.  Often safe to retry but only the application knows for sure.
	InOutResponse.SetHttpClientConnectionError((HttpRequest->GetStatus() == EHttpRequestStatus::Failed_ConnectionError)); //publish knowledge of initial connection error

	//handle the potentially null response.
	if (!HttpResponse.IsValid()){
		return; //nothing else can be gleaned.
	}

	//the response code and raw content are retrieved.
	InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode()); //also sets RestResponseDescription based on Schema
	FString ContentType = HttpResponse->GetContentType();
	if (ContentType.IsEmpty())
	{
		return; // Nothing to parse.  Nothing else to glean.
	}
	FString Content;
	Content = HttpResponse->GetContentAsString();
	InOutResponse.SetRestResponseContent(Content);  //publish the raw string content, as we may not successfully parse it

	//Strictly speaking, we should probably only try to parse the expected return based on the response code.
	//And it should return different types based on the code's definition in the Schema.
	//However we're doing a simpler thing here.  We try to parse an expected successful content type
	//regardless of response code and provide it if we can.

	if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
	{
		TSharedPtr<FJsonValue> JsonValue;
		auto Reader = TJsonReaderFactory<>::Create(Content);

		if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
		{
			if (InOutResponse.FromJson(JsonValue)) //sets the parsed value as best it can
			{
				InOutResponse.SetRestContentFullyParsed(true); //informs if the parse was fully successful
				return; // nothing more to glean.
			}
		}
		// note: we could try parsing some conventional alternative returns here such as 3.3 in:
		// https://www.baeldung.com/rest-api-error-handling-best-practices
	}
	else if(ContentType.StartsWith(TEXT("text/plain")))
	{
		return; // raw text was already published. nothing more to glean.
	}
	//note: we could parse other potential return types here.  Such as https://datatracker.ietf.org/doc/html/rfc7807 which
	//would have content type: application/problem+json

}

FHttpRequestPtr OpenAPIPetApi::AddPet(const AddPetRequest& Request, const FAddPetDelegate& Delegate /*= FAddPetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnAddPetProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnAddPetProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FAddPetDelegate Delegate) const
{
	AddPetResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::DeletePet(const DeletePetRequest& Request, const FDeletePetDelegate& Delegate /*= FDeletePetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnDeletePetProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnDeletePetProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FDeletePetDelegate Delegate) const
{
	DeletePetResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::FindPetsByStatus(const FindPetsByStatusRequest& Request, const FFindPetsByStatusDelegate& Delegate /*= FFindPetsByStatusDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnFindPetsByStatusProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnFindPetsByStatusProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FFindPetsByStatusDelegate Delegate) const
{
	FindPetsByStatusResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::FindPetsByTags(const FindPetsByTagsRequest& Request, const FFindPetsByTagsDelegate& Delegate /*= FFindPetsByTagsDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnFindPetsByTagsProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnFindPetsByTagsProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FFindPetsByTagsDelegate Delegate) const
{
	FindPetsByTagsResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::GetPetById(const GetPetByIdRequest& Request, const FGetPetByIdDelegate& Delegate /*= FGetPetByIdDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnGetPetByIdProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnGetPetByIdProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FGetPetByIdDelegate Delegate) const
{
	GetPetByIdResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::UpdatePet(const UpdatePetRequest& Request, const FUpdatePetDelegate& Delegate /*= FUpdatePetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnUpdatePetProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnUpdatePetProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FUpdatePetDelegate Delegate) const
{
	UpdatePetResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::UpdatePetWithForm(const UpdatePetWithFormRequest& Request, const FUpdatePetWithFormDelegate& Delegate /*= FUpdatePetWithFormDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnUpdatePetWithFormProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnUpdatePetWithFormProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FUpdatePetWithFormDelegate Delegate) const
{
	UpdatePetWithFormResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIPetApi::UploadFile(const UploadFileRequest& Request, const FUploadFileDelegate& Delegate /*= FUploadFileDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &OpenAPIPetApi::OnUploadFileProcessRequestComplete, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIPetApi::OnUploadFileProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bHttpSucceeded, FUploadFileDelegate Delegate) const
{
	UploadFileResponse Response;
	TryBuildResponse(HttpRequest, HttpResponse, bHttpSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
