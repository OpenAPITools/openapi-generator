/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import kotlin.properties.Delegates

/**
 * An order for a pets from the pet store
 *
 * @param id 
 * @param petId 
 * @param quantity 
 * @param shipDate 
 * @param status Order Status
 * @param complete 
 */


class Order internal constructor(

    @Json(name = "id")
    val id: kotlin.Long? = null,

    @Json(name = "petId")
    val petId: kotlin.Long? = null,

    @Json(name = "quantity")
    val quantity: kotlin.Int? = null,

    @Json(name = "shipDate")
    val shipDate: java.time.OffsetDateTime? = null,

    /* Order Status */
    @Json(name = "status")
    val status: Order.Status? = null,

    @Json(name = "complete")
    val complete: kotlin.Boolean? = false

) {

    /**
     * Mutable builder for Order
     */
    class Builder internal constructor() {
            var id: kotlin.Long? = null
            var petId: kotlin.Long? = null
            var quantity: kotlin.Int? = null
            var shipDate: java.time.OffsetDateTime? = null
            var status: kotlin.String? = null
            var complete: kotlin.Boolean? = null

        internal fun build(): Order = Order(
            id = id,
            petId = petId,
            quantity = quantity,
            shipDate = shipDate,
            status = status,
            complete = complete
        )
    }

    /**
     * Order Status
     *
     * Values: placed,approved,delivered
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "placed") placed("placed"),
        @Json(name = "approved") approved("approved"),
        @Json(name = "delivered") delivered("delivered");
    }

}

/**
 * Kotlin DSL for Order
 */
fun Order(block: Order.Builder.() -> Unit): Order =
    Order.Builder().apply(block).build()

