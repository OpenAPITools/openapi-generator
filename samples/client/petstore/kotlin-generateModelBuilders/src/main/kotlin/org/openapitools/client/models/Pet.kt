/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Category
import org.openapitools.client.models.Tag

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import kotlin.properties.Delegates

/**
 * A pet for sale in the pet store
 *
 * @param name 
 * @param photoUrls 
 * @param id 
 * @param category 
 * @param tags 
 * @param status pet status in the store
 */


class Pet internal constructor(

    @Json(name = "name")
    val name: kotlin.String,

    @Json(name = "photoUrls")
    val photoUrls: kotlin.collections.List<kotlin.String>,

    @Json(name = "id")
    val id: kotlin.Long? = null,

    @Json(name = "category")
    val category: Category? = null,

    @Json(name = "tags")
    val tags: kotlin.collections.List<Tag>? = null,

    /* pet status in the store */
    @Json(name = "status")
    @Deprecated(message = "This property is deprecated.")
    val status: Pet.Status? = null

) {

    /**
     * Mutable builder for Pet
     */
    class Builder internal constructor() {
            lateinit var name: kotlin.String
            var photoUrls: kotlin.collections.List<kotlin.String> by Delegates.notNull()
            var id: kotlin.Long? = null
            var category: Category? = null
            var tags: kotlin.collections.List<Tag>? = null
            var status: kotlin.String? = null

        internal fun build(): Pet = Pet(
            name = name,
            photoUrls = photoUrls,
            id = id,
            category = category,
            tags = tags,
            status = status
        )
    }

    /**
     * pet status in the store
     *
     * Values: available,pending,sold
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "available") available("available"),
        @Json(name = "pending") pending("pending"),
        @Json(name = "sold") sold("sold");
    }

}

/**
 * Kotlin DSL for Pet
 */
fun Pet(block: Pet.Builder.() -> Unit): Pet =
    Pet.Builder().apply(block).build()

