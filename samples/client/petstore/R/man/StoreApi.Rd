% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/store_api.R
\docType{class}
\name{StoreApi}
\alias{StoreApi}
\title{Store operations}
\format{An \code{R6Class} generator object}
\usage{
StoreApi
}
\description{
petstore.Store
}
\section{Fields}{

\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}}

\section{Methods}{

\describe{
\strong{ DeleteOrder } \emph{ Delete purchase order by ID }
For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors

\itemize{
\item \emph{ @param } order.id character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Order not found


\item response headers :

\tabular{ll}{
}
}

\strong{ GetInventory } \emph{ Returns pet inventories by status }
Returns a map of status codes to quantities

\itemize{

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : map(integer) 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetOrderById } \emph{ Find purchase order by ID }
For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions

\itemize{
\item \emph{ @param } order.id integer
\item \emph{ @returnType } \link[petstore:Order]{ Order }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Order 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Order not found


\item response headers :

\tabular{ll}{
}
}

\strong{ PlaceOrder } \emph{ Place an order for a pet }


\itemize{
\item \emph{ @param } body \link[petstore:Order]{ Order }
\item \emph{ @returnType } \link[petstore:Order]{ Order }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Order 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid Order


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\donttest{
####################  DeleteOrder  ####################

library(petstore)
var.order.id <- 'order.id_example' # character | ID of the order that needs to be deleted

#Delete purchase order by ID
api.instance <- StoreApi$new()

result <- tryCatch(
            api.instance$DeleteOrder(var.order.id),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  GetInventory  ####################

library(petstore)

#Returns pet inventories by status
api.instance <- StoreApi$new()

#Configure API key authorization: api_key
api.instance$apiClient$apiKeys['api_key'] <- 'TODO_YOUR_API_KEY';

result <- tryCatch(
            api.instance$GetInventory(),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  GetOrderById  ####################

library(petstore)
var.order.id <- 56 # integer | ID of pet that needs to be fetched

#Find purchase order by ID
api.instance <- StoreApi$new()

result <- tryCatch(
            api.instance$GetOrderById(var.order.id),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  PlaceOrder  ####################

library(petstore)
var.body <- Order$new() # Order | order placed for purchasing the pet

#Place an order for a pet
api.instance <- StoreApi$new()

result <- tryCatch(
            api.instance$PlaceOrder(var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\keyword{datasets}
