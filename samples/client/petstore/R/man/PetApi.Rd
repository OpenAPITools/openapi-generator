% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pet_api.R
\docType{class}
\name{PetApi}
\alias{PetApi}
\title{Pet operations}
\format{An \code{R6Class} generator object}
\usage{
PetApi
}
\description{
petstore.Pet
}
\section{Fields}{

\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}}

\section{Methods}{

\describe{
\strong{ AddPet } \emph{ Add a new pet to the store }


\itemize{
\item \emph{ @param } body \link[petstore:Pet]{ Pet }

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 405 | Invalid input


\item response headers :

\tabular{ll}{
}
}

\strong{ DeletePet } \emph{ Deletes a pet }


\itemize{
\item \emph{ @param } pet.id integer
\item \emph{ @param } api.key character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid pet value


\item response headers :

\tabular{ll}{
}
}

\strong{ FindPetsByStatus } \emph{ Finds Pets by status }
Multiple status values can be provided with comma separated strings

\itemize{
\item \emph{ @param } status Enum < [available, pending, sold] > 
\item \emph{ @returnType } \link[petstore:Pet]{ list(Pet) }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : array[Pet] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid status value


\item response headers :

\tabular{ll}{
}
}

\strong{ FindPetsByTags } \emph{ Finds Pets by tags }
Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

\itemize{
\item \emph{ @param } tags list( character )
\item \emph{ @returnType } \link[petstore:Pet]{ list(Pet) }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : array[Pet] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid tag value


\item response headers :

\tabular{ll}{
}
}

\strong{ GetPetById } \emph{ Find pet by ID }
Returns a single pet

\itemize{
\item \emph{ @param } pet.id integer
\item \emph{ @returnType } \link[petstore:Pet]{ Pet }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : Pet 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Pet not found


\item response headers :

\tabular{ll}{
}
}

\strong{ UpdatePet } \emph{ Update an existing pet }


\itemize{
\item \emph{ @param } body \link[petstore:Pet]{ Pet }

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid ID supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | Pet not found


\item response headers :

\tabular{ll}{
}
\item status code : 405 | Validation exception


\item response headers :

\tabular{ll}{
}
}

\strong{ UpdatePetWithForm } \emph{ Updates a pet in the store with form data }


\itemize{
\item \emph{ @param } pet.id integer
\item \emph{ @param } name character
\item \emph{ @param } status character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 405 | Invalid input


\item response headers :

\tabular{ll}{
}
}

\strong{ UploadFile } \emph{ uploads an image }


\itemize{
\item \emph{ @param } pet.id integer
\item \emph{ @param } additional.metadata character
\item \emph{ @param } file data.frame
\item \emph{ @returnType } \link[petstore:ApiResponse]{ ModelApiResponse }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : ModelApiResponse 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\donttest{
####################  AddPet  ####################

library(petstore)
var.body <- Pet$new() # Pet | Pet object that needs to be added to the store

#Add a new pet to the store
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$AddPet(var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  DeletePet  ####################

library(petstore)
var.pet.id <- 56 # integer | Pet id to delete
var.api.key <- 'api.key_example' # character | 

#Deletes a pet
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$DeletePet(var.pet.id, api.key=var.api.key),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  FindPetsByStatus  ####################

library(petstore)
var.status <- ['status_example'] # array[character] | Status values that need to be considered for filter

#Finds Pets by status
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$FindPetsByStatus(var.status),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  FindPetsByTags  ####################

library(petstore)
var.tags <- ['tags_example'] # array[character] | Tags to filter by

#Finds Pets by tags
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$FindPetsByTags(var.tags),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  GetPetById  ####################

library(petstore)
var.pet.id <- 56 # integer | ID of pet to return

#Find pet by ID
api.instance <- PetApi$new()

#Configure API key authorization: api_key
api.instance$apiClient$apiKeys['api_key'] <- 'TODO_YOUR_API_KEY';

result <- tryCatch(
            api.instance$GetPetById(var.pet.id),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  UpdatePet  ####################

library(petstore)
var.body <- Pet$new() # Pet | Pet object that needs to be added to the store

#Update an existing pet
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$UpdatePet(var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  UpdatePetWithForm  ####################

library(petstore)
var.pet.id <- 56 # integer | ID of pet that needs to be updated
var.name <- 'name_example' # character | Updated name of the pet
var.status <- 'status_example' # character | Updated status of the pet

#Updates a pet in the store with form data
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$UpdatePetWithForm(var.pet.id, name=var.name, status=var.status),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  UploadFile  ####################

library(petstore)
var.pet.id <- 56 # integer | ID of pet to update
var.additional.metadata <- 'additional.metadata_example' # character | Additional data to pass to server
var.file <- File.new('/path/to/file') # data.frame | file to upload

#uploads an image
api.instance <- PetApi$new()

# Configure OAuth2 access token for authorization: petstore_auth
api.instance$apiClient$accessToken <- 'TODO_YOUR_ACCESS_TOKEN';

result <- tryCatch(
            api.instance$UploadFile(var.pet.id, additional.metadata=var.additional.metadata, file=var.file),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\keyword{datasets}
