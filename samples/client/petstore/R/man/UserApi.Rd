% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_api.R
\docType{class}
\name{UserApi}
\alias{UserApi}
\title{User operations}
\format{An \code{R6Class} generator object}
\usage{
UserApi
}
\description{
petstore.User
}
\section{Fields}{

\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}}

\section{Methods}{

\describe{
\strong{ CreateUser } \emph{ Create user }
This can only be done by the logged in user.

\itemize{
\item \emph{ @param } body \link[petstore:User]{ User }

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ CreateUsersWithArrayInput } \emph{ Creates list of users with given input array }


\itemize{
\item \emph{ @param } body list( \link[petstore:User]{ User } )

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ CreateUsersWithListInput } \emph{ Creates list of users with given input array }


\itemize{
\item \emph{ @param } body list( \link[petstore:User]{ User } )

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteUser } \emph{ Delete user }
This can only be done by the logged in user.

\itemize{
\item \emph{ @param } username character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid username supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
}

\strong{ GetUserByName } \emph{ Get user by user name }


\itemize{
\item \emph{ @param } username character
\item \emph{ @returnType } \link[petstore:User]{ User }   \cr

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : User 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Invalid username supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
}

\strong{ LoginUser } \emph{ Logs user into the system }


\itemize{
\item \emph{ @param } username character
\item \emph{ @param } password character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | successful operation

\item return type : character 
\item response headers :

\tabular{ll}{
X-Rate-Limit \tab calls per hour allowed by the user \cr
X-Expires-After \tab date in UTC when toekn expires \cr
}
\item status code : 400 | Invalid username/password supplied


\item response headers :

\tabular{ll}{
}
}

\strong{ LogoutUser } \emph{ Logs out current logged in user session }


\itemize{

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 0 | successful operation


\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateUser } \emph{ Updated user }
This can only be done by the logged in user.

\itemize{
\item \emph{ @param } username character
\item \emph{ @param } body \link[petstore:User]{ User }

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 400 | Invalid user supplied


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\donttest{
####################  CreateUser  ####################

library(petstore)
var.body <- User$new() # User | Created user object

#Create user
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$CreateUser(var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  CreateUsersWithArrayInput  ####################

library(petstore)
var.body <- [User$new()] # array[User] | List of user object

#Creates list of users with given input array
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$CreateUsersWithArrayInput(var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  CreateUsersWithListInput  ####################

library(petstore)
var.body <- [User$new()] # array[User] | List of user object

#Creates list of users with given input array
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$CreateUsersWithListInput(var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  DeleteUser  ####################

library(petstore)
var.username <- 'username_example' # character | The name that needs to be deleted

#Delete user
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$DeleteUser(var.username),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  GetUserByName  ####################

library(petstore)
var.username <- 'username_example' # character | The name that needs to be fetched. Use user1 for testing.

#Get user by user name
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$GetUserByName(var.username),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  LoginUser  ####################

library(petstore)
var.username <- 'username_example' # character | The user name for login
var.password <- 'password_example' # character | The password for login in clear text

#Logs user into the system
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$LoginUser(var.username, var.password),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  LogoutUser  ####################

library(petstore)

#Logs out current logged in user session
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$LogoutUser(),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  UpdateUser  ####################

library(petstore)
var.username <- 'username_example' # character | name that need to be deleted
var.body <- User$new() # User | Updated user object

#Updated user
api.instance <- UserApi$new()

result <- tryCatch(
            api.instance$UpdateUser(var.username, var.body),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\keyword{datasets}
