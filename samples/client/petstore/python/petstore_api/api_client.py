# coding: utf-8
"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

from collections import OrderedDict
import copy
import inspect
import json
import mimetypes
from multiprocessing.pool import ThreadPool
import os
import re
import tempfile

from dateutil.parser import parse
# python 2 and python 3 compatibility library
import six
from six.moves.urllib.parse import quote

from petstore_api.configuration import Configuration
from petstore_api.utils import (
    ApiTypeError,
    ApiValueError,
    OpenApiModel,
    date,
    datetime,
    file_type,
    model_to_dict,
    none_type,
    validate_type
)
import petstore_api.models
from petstore_api import rest

COERCION_INDEX_BY_TYPE = {
    none_type: 0,
    list: 1,
    OpenApiModel: 2,
    dict: 3,
    float: 4,
    int: 5,
    bool: 6,
    datetime: 7,
    date: 8,
    str: 9
}
COERCIBLE_TYPE_PAIRS = (
    (dict, OpenApiModel),
    (str, int),
    (str, float),
    (str, datetime),
    (str, date),
    (int, str),
    (float, str),
    (str, file_type)
)

def order_response_types(required_types):
    """Returns the required types sorted in coercion order

    Args:
        required_types (list/tuple): collection of classes or instance of
            list or dict with classs information inside it

    Returns:
        (list/tuple): coercion order sorted collection of classes or instance
            of list or dict with classs information inside it
    """

    def index_getter(class_or_instance):
        if isinstance(class_or_instance, list):
            return COERCION_INDEX_BY_TYPE[list]
        elif isinstance(class_or_instance, dict):
            return COERCION_INDEX_BY_TYPE[dict]
        elif isinstance(class_or_instance, OpenApiModel):
            return COERCION_INDEX_BY_TYPE[OpenApiModel]
        return COERCION_INDEX_BY_TYPE[class_or_instance]

    sorted_types = sorted(
        required_types,
        key=lambda class_or_instance: index_getter(class_or_instance)
    )
    return sorted_types


def remove_uncoercible(required_types_classes, current_item):
    """Only keeps the type conversions that are possible

    Args:
        required_types_classes (tuple): tuple of classes that are required
        current_item (any): the current item to be converted

    Returns:
        (list): the remaining coercible required types, classes only
    """
    if isinstance(current_item, OpenApiModel):
        current_type = OpenApiModel
    elif isinstance(current_item, file_type):
        current_type = file_type
    else:
        current_type = type(current_item)

    results_classes = []
    for required_type_class in required_types_classes:
        class_pair = (current_type, required_type_class)
        if class_pair in COERCIBLE_TYPE_PAIRS:
            results_classes.append(required_type_class)
    return results_classes


class ApiClient(object):
    """Generic API client for OpenAPI client library builds.

    OpenAPI generic API client. This client handles the client-
    server communication, and is invariant across implementations. Specifics of
    the methods and models for each application are generated from the OpenAPI
    templates.

    NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech
    Do not edit the class manually.

    :param configuration: .Configuration object for this client
    :param header_name: a header to pass when making calls to the API.
    :param header_value: a header value to pass when making calls to
        the API.
    :param cookie: a cookie to include in the header when making calls
        to the API
    :param pool_threads: The number of threads to use for async requests
        to the API. More threads means more concurrent API requests.
    """

    PRIMITIVE_TYPES = (float, bool, bytes, six.text_type) + six.integer_types
    _pool = None

    def __init__(self, configuration=None, header_name=None, header_value=None,
                 cookie=None, pool_threads=1):
        if configuration is None:
            configuration = Configuration()
        self.configuration = configuration
        self.pool_threads = pool_threads

        self.rest_client = rest.RESTClientObject(configuration)
        self.default_headers = {}
        if header_name is not None:
            self.default_headers[header_name] = header_value
        self.cookie = cookie
        # Set default User-Agent.
        self.user_agent = 'OpenAPI-Generator/1.0.0/python'

    def __del__(self):
        if self._pool:
            self._pool.close()
            self._pool.join()
            self._pool = None

    @property
    def pool(self):
        """Create thread pool on first request
         avoids instantiating unused threadpool for blocking clients.
        """
        if self._pool is None:
            self._pool = ThreadPool(self.pool_threads)
        return self._pool

    @property
    def user_agent(self):
        """User agent for this API client"""
        return self.default_headers['User-Agent']

    @user_agent.setter
    def user_agent(self, value):
        self.default_headers['User-Agent'] = value

    def set_default_header(self, header_name, header_value):
        self.default_headers[header_name] = header_value

    def __call_api(
            self, resource_path, method, path_params=None,
            query_params=None, header_params=None, body=None, post_params=None,
            files=None, response_types_mixed=None, auth_settings=None,
            _return_http_data_only=None, collection_formats=None,
            _preload_content=True, _request_timeout=None, _host=None):

        config = self.configuration

        # header parameters
        header_params = header_params or {}
        header_params.update(self.default_headers)
        if self.cookie:
            header_params['Cookie'] = self.cookie
        if header_params:
            header_params = self.sanitize_for_serialization(header_params)
            header_params = dict(self.parameters_to_tuples(header_params,
                                                           collection_formats))

        # path parameters
        if path_params:
            path_params = self.sanitize_for_serialization(path_params)
            path_params = self.parameters_to_tuples(path_params,
                                                    collection_formats)
            for k, v in path_params:
                # specified safe chars, encode everything
                resource_path = resource_path.replace(
                    '{%s}' % k,
                    quote(str(v), safe=config.safe_chars_for_path_param)
                )

        # query parameters
        if query_params:
            query_params = self.sanitize_for_serialization(query_params)
            query_params = self.parameters_to_tuples(query_params,
                                                     collection_formats)

        # post parameters
        if post_params or files:
            post_params = self.prepare_post_parameters(post_params, files)
            post_params = self.sanitize_for_serialization(post_params)
            post_params = self.parameters_to_tuples(post_params,
                                                    collection_formats)

        # auth setting
        self.update_params_for_auth(header_params, query_params, auth_settings)

        # body
        if body:
            body = self.sanitize_for_serialization(body)

        # request url
        if _host is None:
            url = self.configuration.host + resource_path
        else:
            # use server/host defined in path or operation instead
            url = _host + resource_path

        # perform request and return response
        response_data = self.request(
            method, url, query_params=query_params, headers=header_params,
            post_params=post_params, body=body,
            _preload_content=_preload_content,
            _request_timeout=_request_timeout)

        self.last_response = response_data

        return_data = response_data
        if _preload_content:
            # deserialize response data
            if response_types_mixed:
                return_data = self.deserialize(response_data,
                                               response_types_mixed)
            else:
                return_data = None

        if _return_http_data_only:
            return (return_data)
        else:
            return (return_data, response_data.status,
                    response_data.getheaders())

    def sanitize_for_serialization(self, obj):
        """Builds a JSON POST object.

        If obj is None, return None.
        If obj is str, int, long, float, bool, return directly.
        If obj is datetime.datetime, datetime.date
            convert to string in iso8601 format.
        If obj is list, sanitize each element in the list.
        If obj is dict, return the dict.
        If obj is OpenAPI model, return the properties dict.

        :param obj: The data to serialize.
        :return: The serialized form of data.
        """
        if obj is None:
            return None
        elif isinstance(obj, self.PRIMITIVE_TYPES):
            return obj
        elif isinstance(obj, list):
            return [self.sanitize_for_serialization(sub_obj)
                    for sub_obj in obj]
        elif isinstance(obj, tuple):
            return tuple(self.sanitize_for_serialization(sub_obj)
                         for sub_obj in obj)
        elif isinstance(obj, (datetime, date)):
            return obj.isoformat()

        if isinstance(obj, dict):
            obj_dict = obj
        else:
            # Convert model obj to dict
            # Convert attribute name to json key in
            # model definition for request.
            obj_dict = model_to_dict(obj, serialize=True)

        return {key: self.sanitize_for_serialization(val)
                for key, val in six.iteritems(obj_dict)}

    def deserialize(self, response, response_types_mixed):
        """Deserializes response into an object.

        :param response: RESTResponse object to be deserialized.
        :param response_types_mixed: For the response, a list of
            valid classes, or a list tuples of valid classes, or a dict where
            the value is a tuple of value classes.

        :return: deserialized object.
        """
        # handle file downloading
        # save response body into a tmp file and return the instance
        if response_types_mixed == [file_type]:
            content_disposition = response.getheader("Content-Disposition")
            return self.__deserialize_file(response.data,
                content_disposition=content_disposition)

        # fetch data from response object
        try:
            data = json.loads(response.data)
        except ValueError:
            data = response.data

        return self.__deserialize(data, response_types_mixed)

    def __deserialize(self, data, response_types_mixed):
        """Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param response_types_mixed: For the response, a list of
            valid classes, or a list tuples of valid classes, or a dict where
            the value is a tuple of value classes.

        :return: object.
        """
        serialized_data_by_index = {}
        response_types_ordered = order_response_types(response_types_mixed)
        input_data = {'received': data}
        for index, response_type in enumerate(response_types_ordered):
            try:
                validate_type(
                    input_data['received'],
                    response_type,
                    ['received']
                )
                serialized_data_by_index[index] = input_data['received']
            except ApiTypeError as exc:
                pass

        for index, response_type in enumerate(response_types_ordered):
            # we put our data in a dict so our deserialization functions
            # can be passed a parent and a key and update our data structure
            # this is needed if we are passed a str and need to convert it
            input_data = {'received': copy.deepcopy(data)}
            deserializing = True
            validated = False
            while deserializing:
                try:
                    validate_type(
                        input_data['received'],
                        response_type,
                        ['received']
                    )
                    validated = True
                    serialized_data_by_index[index] = input_data['received']
                    deserializing = False
                except ApiTypeError as exc:
                    valid_classes = exc.required_types
                    valid_classes_ordered = order_response_types(valid_classes)
                    valid_classes_coercible = remove_uncoercible(
                        valid_classes_ordered, type(exc.current_item))
                    if not valid_classes_coercible or exc.key_type:
                        # we do not handle keytype errors, json will take care
                        # of this for us
                        deserializing = False
                        continue
                    deserialized_item = False
                    parent, key_or_index = get_parent_key_or_index(
                        input_data, exc.path_to_item)
                    for valid_class in valid_classes_coercible:
                        if isinstance(valid_class, OpenApiModel):
                            deserialized_item = self.__deserialize_model(
                                parent[key_or_index], valid_class)
                        elif isinstance(valid_class, file_type):
                            deserialized_item = self.__deserialize_file(
                                parent[key_or_index])
                        else:
                            deserialized_item = self.__deserialize_primitive(
                                parent[key_or_index], valid_class)
                        if deserialized_item:
                            parent[key_or_index] = deserialized_item
                            break
                    if not deserialized_item:
                        deserializing = False
            if validated:
                break

        # compare and choose the best value here
        if not serialized_data_by_index:
            # we were unable to deserialize the results, raise an exception
            validate_type(data, response_types_mixed, ['received'])
        min_index = min(list(serialized_data_by_index.keys()))
        return serialized_data_by_index[min_index]

    def call_api(self, resource_path, method,
                 path_params=None, query_params=None, header_params=None,
                 body=None, post_params=None, files=None,
                 response_types_mixed=None, auth_settings=None, async_req=None,
                 _return_http_data_only=None, collection_formats=None,
                 _preload_content=True, _request_timeout=None, _host=None):
        """Makes the HTTP request (synchronous) and returns deserialized data.

        To make an async_req request, set the async_req parameter.

        :param resource_path: Path to method endpoint.
        :param method: Method to call.
        :param path_params: Path parameters in the url.
        :param query_params: Query parameters in the url.
        :param header_params: Header parameters to be
            placed in the request header.
        :param body: Request body.
        :param post_params dict: Request post form parameters,
            for `application/x-www-form-urlencoded`, `multipart/form-data`.
        :param auth_settings list: Auth Settings names for the request.
        :param response_types_mixed: For the response, a list of
            valid classes, or a list tuples of valid classes, or a dict where
            the value is a tuple of value classes.
            Example values:
            [str]
            [Pet]
            [float, none_type],
            [[(int, none_type)]],
            [{str: (bool, str, int, float, date, datetime, str, none_type)}]
        :param files dict: key -> filename, value -> filepath,
            for `multipart/form-data`.
        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param collection_formats: dict of collection formats for path, query,
            header, and post parameters.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return:
            If async_req parameter is True,
            the request will be called asynchronously.
            The method will return the request thread.
            If parameter async_req is False or missing,
            then the method will return the response directly.
        """
        if not async_req:
            return self.__call_api(resource_path, method,
                                   path_params, query_params, header_params,
                                   body, post_params, files,
                                   response_types_mixed, auth_settings,
                                   _return_http_data_only, collection_formats,
                                   _preload_content, _request_timeout, _host)
        else:
            thread = self.pool.apply_async(self.__call_api, (resource_path,
                                           method, path_params, query_params,
                                           header_params, body,
                                           post_params, files,
                                           response_types_mixed, auth_settings,
                                           _return_http_data_only,
                                           collection_formats,
                                           _preload_content,
                                           _request_timeout,
                                           _host))
        return thread

    def request(self, method, url, query_params=None, headers=None,
                post_params=None, body=None, _preload_content=True,
                _request_timeout=None):
        """Makes the HTTP request using RESTClient."""
        if method == "GET":
            return self.rest_client.GET(url,
                                        query_params=query_params,
                                        _preload_content=_preload_content,
                                        _request_timeout=_request_timeout,
                                        headers=headers)
        elif method == "HEAD":
            return self.rest_client.HEAD(url,
                                         query_params=query_params,
                                         _preload_content=_preload_content,
                                         _request_timeout=_request_timeout,
                                         headers=headers)
        elif method == "OPTIONS":
            return self.rest_client.OPTIONS(url,
                                            query_params=query_params,
                                            headers=headers,
                                            post_params=post_params,
                                            _preload_content=_preload_content,
                                            _request_timeout=_request_timeout,
                                            body=body)
        elif method == "POST":
            return self.rest_client.POST(url,
                                         query_params=query_params,
                                         headers=headers,
                                         post_params=post_params,
                                         _preload_content=_preload_content,
                                         _request_timeout=_request_timeout,
                                         body=body)
        elif method == "PUT":
            return self.rest_client.PUT(url,
                                        query_params=query_params,
                                        headers=headers,
                                        post_params=post_params,
                                        _preload_content=_preload_content,
                                        _request_timeout=_request_timeout,
                                        body=body)
        elif method == "PATCH":
            return self.rest_client.PATCH(url,
                                          query_params=query_params,
                                          headers=headers,
                                          post_params=post_params,
                                          _preload_content=_preload_content,
                                          _request_timeout=_request_timeout,
                                          body=body)
        elif method == "DELETE":
            return self.rest_client.DELETE(url,
                                           query_params=query_params,
                                           headers=headers,
                                           _preload_content=_preload_content,
                                           _request_timeout=_request_timeout,
                                           body=body)
        else:
            raise ValueError(
                "http method must be `GET`, `HEAD`, `OPTIONS`,"
                " `POST`, `PATCH`, `PUT` or `DELETE`."
            )

    def parameters_to_tuples(self, params, collection_formats):
        """Get parameters as list of tuples, formatting collections.

        :param params: Parameters as dict or list of two-tuples
        :param dict collection_formats: Parameter collection formats
        :return: Parameters as list of tuples, collections formatted
        """
        new_params = []
        if collection_formats is None:
            collection_formats = {}
        for k, v in six.iteritems(params) if isinstance(params, dict) else params:  # noqa: E501
            if k in collection_formats:
                collection_format = collection_formats[k]
                if collection_format == 'multi':
                    new_params.extend((k, value) for value in v)
                else:
                    if collection_format == 'ssv':
                        delimiter = ' '
                    elif collection_format == 'tsv':
                        delimiter = '\t'
                    elif collection_format == 'pipes':
                        delimiter = '|'
                    else:  # csv is the default
                        delimiter = ','
                    new_params.append(
                        (k, delimiter.join(str(value) for value in v)))
            else:
                new_params.append((k, v))
        return new_params

    def prepare_post_parameters(self, post_params=None, files=None):
        """Builds form parameters.

        :param post_params: Normal form parameters.
        :param files: File parameters.
        :return: Form parameters with files.
        """
        params = []

        if post_params:
            params = post_params

        if files:
            for k, v in six.iteritems(files):
                if not v:
                    continue
                file_names = v if type(v) is list else [v]
                for n in file_names:
                    with open(n, 'rb') as f:
                        filename = os.path.basename(f.name)
                        filedata = f.read()
                        mimetype = (mimetypes.guess_type(filename)[0] or
                                    'application/octet-stream')
                        params.append(
                            tuple([k, tuple([filename, filedata, mimetype])]))

        return params

    def select_header_accept(self, accepts):
        """Returns `Accept` based on an array of accepts provided.

        :param accepts: List of headers.
        :return: Accept (e.g. application/json).
        """
        if not accepts:
            return

        accepts = [x.lower() for x in accepts]

        if 'application/json' in accepts:
            return 'application/json'
        else:
            return ', '.join(accepts)

    def select_header_content_type(self, content_types):
        """Returns `Content-Type` based on an array of content_types provided.

        :param content_types: List of content-types.
        :return: Content-Type (e.g. application/json).
        """
        if not content_types:
            return 'application/json'

        content_types = [x.lower() for x in content_types]

        if 'application/json' in content_types or '*/*' in content_types:
            return 'application/json'
        else:
            return content_types[0]

    def update_params_for_auth(self, headers, querys, auth_settings):
        """Updates header and query params based on authentication setting.

        :param headers: Header parameters dict to be updated.
        :param querys: Query parameters tuple list to be updated.
        :param auth_settings: Authentication setting identifiers list.
        """
        if not auth_settings:
            return

        for auth in auth_settings:
            auth_setting = self.configuration.auth_settings().get(auth)
            if auth_setting:
                if not auth_setting['value']:
                    continue
                elif auth_setting['in'] == 'header':
                    headers[auth_setting['key']] = auth_setting['value']
                elif auth_setting['in'] == 'query':
                    querys.append((auth_setting['key'], auth_setting['value']))
                else:
                    raise ValueError(
                        'Authentication token must be in `query` or `header`'
                    )

    def __deserialize_file(self, response_data, content_disposition=None):
        """Deserializes body to file

        Saves response body into a file in a temporary folder,
        using the filename from the `Content-Disposition` header if provided.

        :param response_data:  the file data to write
        :param content_disposition:  the value of the Content-Disposition
            header
        :return: file path.
        """
        fd, path = tempfile.mkstemp(dir=self.configuration.temp_folder_path)
        os.close(fd)
        os.remove(path)

        if content_disposition:
            filename = re.search(r'filename=[\'"]?([^\'"\s]+)[\'"]?',
                                 content_disposition).group(1)
            path = os.path.join(os.path.dirname(path), filename)

        with open(path, "wb") as f:
            f.write(response_data)

        return path

    def __deserialize_primitive(self, data, klass):
        """Deserializes string to primitive type.

        :param data: str/int/float
        :param klass: str/class the class to convert to

        :return: int, float, str, bool, date, datetime
        """
        additional_message = ""
        try:
            if klass in {datetime, date}:
                additional_message = (
                    ". If you need your parameter to have a fallback "
                    "string value, please set its type as `type: {}` in your "
                    "spec. That allows the value to be any type."
                )
                if klass == datetime:
                    # The string should be in iso8601 datetime format.
                    return parse(data)
                elif klass == date:
                    return parse(data).date()
            else:
                return klass(data)
        except (OverflowError, ValueError):
            # parse can raise OverflowError
            raise ApiValueError(
                "Failed to parse {0} as {1}{2}".format(
                    data, klass, additional_message
                )
            )

    def __get_model_instance(self, model_data, model_class):
        if isinstance(model_data, list):
            instance = model_class(*model_data, _check_type=True)
        elif isinstance(model_data, dict):
            instance = model_class(**model_data, _check_type=True)

        if hasattr(instance, 'get_real_child_model'):
            discriminator_class = instance.get_real_child_model(model_data)
            if discriminator_class:
                if isinstance(model_data, list):
                    instance = discriminator_class(*model_data,
                                                   _check_type=True)
                elif isinstance(model_data, dict):
                    instance = discriminator_class(**model_data,
                                                   _check_type=True)
        return instance

    def __deserialize_model(self, model_data, model_class):
        """Deserializes dict to model.

        :param model_data: list or dict
        :param model_class: model class
        :return: model instance
        """

        deserializing = True
        instance = None
        while deserializing:
            try:
                instance = self.__get_model_instance(model_data, model_class)
                deserializing = False
            except ApiTypeError as exc:
                valid_classes = exc.required_types
                valid_classes_ordered = order_response_types(valid_classes)
                valid_classes_coercible = remove_uncoercible(
                    valid_classes_ordered, type(exc.current_item))
                if not valid_classes_coercible or exc.key_type:
                    # we do not handle keytype errors, json will take care
                    # of this for us
                    deserializing = False
                    continue
                deserialized_item = False
                parent, key_or_index = get_parent_key_or_index(
                    model_data, exc.path_to_item)
                for valid_class in valid_classes_coercible:
                    if isinstance(valid_class, OpenApiModel):
                        deserialized_item = self.__deserialize_model(
                            parent[key_or_index], valid_class)
                    elif isinstance(valid_class, file_type):
                        deserialized_item = self.__deserialize_file(
                            parent[key_or_index])
                    else:
                        deserialized_item = self.__deserialize_primitive(
                            parent[key_or_index], valid_class)
                    if deserialized_item:
                        parent[key_or_index] = deserialized_item
                        break
                if not deserialized_item:
                    deserializing = False
        if not instance:
            # raise the exception
            instance = self.__get_model_instance(model_data, model_class)
        return instance
