# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.exceptions import (
    ApiKeyError,
    ApiTypeError,
    ApiValueError,
)
from petstore_api.model_utils import (  # noqa: F401
    OpenApiModel,
    date,
    datetime,
    file_type,
    model_to_dict,
    none_type,
    validate_type
)


class AdditionalPropertiesClass(OpenApiModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional, required variables, and
                            additional properties.
    """
    openapi_types = {
        'map_string': [{str: (str,)}],  # noqa: E501
        'map_number': [{str: (float,)}],  # noqa: E501
        'map_integer': [{str: (int,)}],  # noqa: E501
        'map_boolean': [{str: (bool,)}],  # noqa: E501
        'map_array_integer': [{str: ([(int,)],)}],  # noqa: E501
        'map_array_anytype': [{str: ([(bool, date, datetime, dict, float, int, list, str)],)}],  # noqa: E501
        'map_map_string': [{str: ({str: (str,)},)}],  # noqa: E501
        'map_map_anytype': [{str: ({str: (bool, date, datetime, dict, float, int, list, str)},)}],  # noqa: E501
        'anytype_1': [bool, date, datetime, dict, float, int, list, str],  # noqa: E501
        'anytype_2': [bool, date, datetime, dict, float, int, list, str],  # noqa: E501
        'anytype_3': [bool, date, datetime, dict, float, int, list, str]  # noqa: E501
    }
    attribute_map = {
        'map_string': 'map_string',  # noqa: E501
        'map_number': 'map_number',  # noqa: E501
        'map_integer': 'map_integer',  # noqa: E501
        'map_boolean': 'map_boolean',  # noqa: E501
        'map_array_integer': 'map_array_integer',  # noqa: E501
        'map_array_anytype': 'map_array_anytype',  # noqa: E501
        'map_map_string': 'map_map_string',  # noqa: E501
        'map_map_anytype': 'map_map_anytype',  # noqa: E501
        'anytype_1': 'anytype_1',  # noqa: E501
        'anytype_2': 'anytype_2',  # noqa: E501
        'anytype_3': 'anytype_3'  # noqa: E501
    }

    def __init__(self, _check_type=False, **kwargs):  # noqa: E501
        """AdditionalPropertiesClass - a model defined in OpenAPI



        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            map_string ({str: (str,)}): [optional]  # noqa: E501
            map_number ({str: (float,)}): [optional]  # noqa: E501
            map_integer ({str: (int,)}): [optional]  # noqa: E501
            map_boolean ({str: (bool,)}): [optional]  # noqa: E501
            map_array_integer ({str: ([(int,)],)}): [optional]  # noqa: E501
            map_array_anytype ({str: ([(bool, date, datetime, dict, float, int, list, str)],)}): [optional]  # noqa: E501
            map_map_string ({str: ({str: (str,)},)}): [optional]  # noqa: E501
            map_map_anytype ({str: ({str: (bool, date, datetime, dict, float, int, list, str)},)}): [optional]  # noqa: E501
            anytype_1 (bool, date, datetime, dict, float, int, list, str): [optional]  # noqa: E501
            anytype_2 (bool, date, datetime, dict, float, int, list, str): [optional]  # noqa: E501
            anytype_3 (bool, date, datetime, dict, float, int, list, str): [optional]  # noqa: E501
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type

        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_type = self.openapi_types[name]
        else:
            raise ApiKeyError("{0} has no key '{1}'".format(
                type(self).__name__, name))

        variable_path = [name]
        if not isinstance(name, str):
            raise ApiTypeError(
                (str,),
                name,
                variable_path,
                value_type=False
            )
        if check_type:
            validate_type(value, required_type, variable_path)

        self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]
        raise ApiKeyError("{0} has no key {1}".format(
            type(self).__name__, name))

    @property
    def map_string(self):
        """Gets the map_string of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: (str,)}): The map_string of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_string')

    @map_string.setter
    def map_string(
            self, map_string):
        """Sets the map_string of this AdditionalPropertiesClass.


        Returns:
            ({str: (str,)}): The map_string of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_string',
            map_string
        )

    @property
    def map_number(self):
        """Gets the map_number of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: (float,)}): The map_number of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_number')

    @map_number.setter
    def map_number(
            self, map_number):
        """Sets the map_number of this AdditionalPropertiesClass.


        Returns:
            ({str: (float,)}): The map_number of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_number',
            map_number
        )

    @property
    def map_integer(self):
        """Gets the map_integer of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: (int,)}): The map_integer of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_integer')

    @map_integer.setter
    def map_integer(
            self, map_integer):
        """Sets the map_integer of this AdditionalPropertiesClass.


        Returns:
            ({str: (int,)}): The map_integer of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_integer',
            map_integer
        )

    @property
    def map_boolean(self):
        """Gets the map_boolean of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: (bool,)}): The map_boolean of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_boolean')

    @map_boolean.setter
    def map_boolean(
            self, map_boolean):
        """Sets the map_boolean of this AdditionalPropertiesClass.


        Returns:
            ({str: (bool,)}): The map_boolean of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_boolean',
            map_boolean
        )

    @property
    def map_array_integer(self):
        """Gets the map_array_integer of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: ([(int,)],)}): The map_array_integer of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_array_integer')

    @map_array_integer.setter
    def map_array_integer(
            self, map_array_integer):
        """Sets the map_array_integer of this AdditionalPropertiesClass.


        Returns:
            ({str: ([(int,)],)}): The map_array_integer of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_array_integer',
            map_array_integer
        )

    @property
    def map_array_anytype(self):
        """Gets the map_array_anytype of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: ([(bool, date, datetime, dict, float, int, list, str)],)}): The map_array_anytype of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_array_anytype')

    @map_array_anytype.setter
    def map_array_anytype(
            self, map_array_anytype):
        """Sets the map_array_anytype of this AdditionalPropertiesClass.


        Returns:
            ({str: ([(bool, date, datetime, dict, float, int, list, str)],)}): The map_array_anytype of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_array_anytype',
            map_array_anytype
        )

    @property
    def map_map_string(self):
        """Gets the map_map_string of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: ({str: (str,)},)}): The map_map_string of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_map_string')

    @map_map_string.setter
    def map_map_string(
            self, map_map_string):
        """Sets the map_map_string of this AdditionalPropertiesClass.


        Returns:
            ({str: ({str: (str,)},)}): The map_map_string of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_map_string',
            map_map_string
        )

    @property
    def map_map_anytype(self):
        """Gets the map_map_anytype of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            ({str: ({str: (bool, date, datetime, dict, float, int, list, str)},)}): The map_map_anytype of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('map_map_anytype')

    @map_map_anytype.setter
    def map_map_anytype(
            self, map_map_anytype):
        """Sets the map_map_anytype of this AdditionalPropertiesClass.


        Returns:
            ({str: ({str: (bool, date, datetime, dict, float, int, list, str)},)}): The map_map_anytype of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'map_map_anytype',
            map_map_anytype
        )

    @property
    def anytype_1(self):
        """Gets the anytype_1 of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            (bool, date, datetime, dict, float, int, list, str): The anytype_1 of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('anytype_1')

    @anytype_1.setter
    def anytype_1(
            self, anytype_1):
        """Sets the anytype_1 of this AdditionalPropertiesClass.


        Returns:
            (bool, date, datetime, dict, float, int, list, str): The anytype_1 of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'anytype_1',
            anytype_1
        )

    @property
    def anytype_2(self):
        """Gets the anytype_2 of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            (bool, date, datetime, dict, float, int, list, str): The anytype_2 of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('anytype_2')

    @anytype_2.setter
    def anytype_2(
            self, anytype_2):
        """Sets the anytype_2 of this AdditionalPropertiesClass.


        Returns:
            (bool, date, datetime, dict, float, int, list, str): The anytype_2 of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'anytype_2',
            anytype_2
        )

    @property
    def anytype_3(self):
        """Gets the anytype_3 of this AdditionalPropertiesClass.  # noqa: E501


        Returns:
            (bool, date, datetime, dict, float, int, list, str): The anytype_3 of this AdditionalPropertiesClass.  # noqa: E501
        """
        return self._data_store.get('anytype_3')

    @anytype_3.setter
    def anytype_3(
            self, anytype_3):
        """Sets the anytype_3 of this AdditionalPropertiesClass.


        Returns:
            (bool, date, datetime, dict, float, int, list, str): The anytype_3 of this AdditionalPropertiesClass.  # noqa: E501
        """

        self.__setitem__(
            'anytype_3',
            anytype_3
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalPropertiesClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
