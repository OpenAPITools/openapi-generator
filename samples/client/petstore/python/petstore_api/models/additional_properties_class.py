# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.utils import recursive_type, valid_type


class AdditionalPropertiesClass(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional and required variables only.
    """
    openapi_types = {
        'map_string': 'dict(str, str)',
        'map_number': 'dict(str, float)',
        'map_integer': 'dict(str, int)',
        'map_boolean': 'dict(str, bool)',
        'map_array_integer': 'dict(str, list[int])',
        'map_array_anytype': 'dict(str, list[str|float|int|bool|list|dict])',
        'map_map_string': 'dict(str, dict(str, str))',
        'map_map_anytype': 'dict(str, dict(str, str|float|int|bool|list|dict))',
        'anytype_1': 'str|float|int|bool|list|dict',
        'anytype_2': 'str|float|int|bool|list|dict',
        'anytype_3': 'str|float|int|bool|list|dict'
    }
    attribute_map = {
        'map_string': 'map_string',
        'map_number': 'map_number',
        'map_integer': 'map_integer',
        'map_boolean': 'map_boolean',
        'map_array_integer': 'map_array_integer',
        'map_array_anytype': 'map_array_anytype',
        'map_map_string': 'map_map_string',
        'map_map_anytype': 'map_map_anytype',
        'anytype_1': 'anytype_1',
        'anytype_2': 'anytype_2',
        'anytype_3': 'anytype_3'
    }

    def __init__(self, _check_type=False, **kwargs):  # noqa: E501
        """AdditionalPropertiesClass - a model defined in OpenAPI



        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            map_string (dict(str, str)): [optional]
            map_number (dict(str, float)): [optional]
            map_integer (dict(str, int)): [optional]
            map_boolean (dict(str, bool)): [optional]
            map_array_integer (dict(str, list[int])): [optional]
            map_array_anytype (dict(str, list[str|float|int|bool|list|dict])): [optional]
            map_map_string (dict(str, dict(str, str))): [optional]
            map_map_anytype (dict(str, dict(str, str|float|int|bool|list|dict))): [optional]
            anytype_1 (str|float|int|bool|list|dict): [optional]
            anytype_2 (str|float|int|bool|list|dict): [optional]
            anytype_3 (str|float|int|bool|list|dict): [optional]
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type

        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_type = self.openapi_types[name]
        else:
            raise KeyError("{0} has no key '{1}'".format(
                type(self).__name__, name))

        passed_type = recursive_type(value)
        if type(name) != str:
            raise TypeError('Variable name must be type string and %s was not' % name)
        elif check_type and not valid_type(passed_type, required_type):
            raise TypeError('Variable value must be type %s but you passed in %s' %
                            (required_type, passed_type))

        self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]
        raise KeyError("{0} has no key {1}".format(
            type(self).__name__, name))

    @property
    def map_string(self):
        """Gets the map_string of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_string of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._data_store.get('map_string')

    @map_string.setter
    def map_string(self, map_string):
        """Sets the map_string of this AdditionalPropertiesClass.


        :param map_string: The map_string of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, str)
        """

        self.__setitem__('map_string', map_string)

    @property
    def map_number(self):
        """Gets the map_number of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_number of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._data_store.get('map_number')

    @map_number.setter
    def map_number(self, map_number):
        """Sets the map_number of this AdditionalPropertiesClass.


        :param map_number: The map_number of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, float)
        """

        self.__setitem__('map_number', map_number)

    @property
    def map_integer(self):
        """Gets the map_integer of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_integer of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._data_store.get('map_integer')

    @map_integer.setter
    def map_integer(self, map_integer):
        """Sets the map_integer of this AdditionalPropertiesClass.


        :param map_integer: The map_integer of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, int)
        """

        self.__setitem__('map_integer', map_integer)

    @property
    def map_boolean(self):
        """Gets the map_boolean of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_boolean of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._data_store.get('map_boolean')

    @map_boolean.setter
    def map_boolean(self, map_boolean):
        """Sets the map_boolean of this AdditionalPropertiesClass.


        :param map_boolean: The map_boolean of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, bool)
        """

        self.__setitem__('map_boolean', map_boolean)

    @property
    def map_array_integer(self):
        """Gets the map_array_integer of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_array_integer of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, list[int])
        """
        return self._data_store.get('map_array_integer')

    @map_array_integer.setter
    def map_array_integer(self, map_array_integer):
        """Sets the map_array_integer of this AdditionalPropertiesClass.


        :param map_array_integer: The map_array_integer of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, list[int])
        """

        self.__setitem__('map_array_integer', map_array_integer)

    @property
    def map_array_anytype(self):
        """Gets the map_array_anytype of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_array_anytype of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, list[str|float|int|bool|list|dict])
        """
        return self._data_store.get('map_array_anytype')

    @map_array_anytype.setter
    def map_array_anytype(self, map_array_anytype):
        """Sets the map_array_anytype of this AdditionalPropertiesClass.


        :param map_array_anytype: The map_array_anytype of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, list[str|float|int|bool|list|dict])
        """

        self.__setitem__('map_array_anytype', map_array_anytype)

    @property
    def map_map_string(self):
        """Gets the map_map_string of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_map_string of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._data_store.get('map_map_string')

    @map_map_string.setter
    def map_map_string(self, map_map_string):
        """Sets the map_map_string of this AdditionalPropertiesClass.


        :param map_map_string: The map_map_string of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self.__setitem__('map_map_string', map_map_string)

    @property
    def map_map_anytype(self):
        """Gets the map_map_anytype of this AdditionalPropertiesClass.  # noqa: E501


        :return: The map_map_anytype of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: dict(str, dict(str, str|float|int|bool|list|dict))
        """
        return self._data_store.get('map_map_anytype')

    @map_map_anytype.setter
    def map_map_anytype(self, map_map_anytype):
        """Sets the map_map_anytype of this AdditionalPropertiesClass.


        :param map_map_anytype: The map_map_anytype of this AdditionalPropertiesClass.  # noqa: E501
        :type: dict(str, dict(str, str|float|int|bool|list|dict))
        """

        self.__setitem__('map_map_anytype', map_map_anytype)

    @property
    def anytype_1(self):
        """Gets the anytype_1 of this AdditionalPropertiesClass.  # noqa: E501


        :return: The anytype_1 of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: str|float|int|bool|list|dict
        """
        return self._data_store.get('anytype_1')

    @anytype_1.setter
    def anytype_1(self, anytype_1):
        """Sets the anytype_1 of this AdditionalPropertiesClass.


        :param anytype_1: The anytype_1 of this AdditionalPropertiesClass.  # noqa: E501
        :type: str|float|int|bool|list|dict
        """

        self.__setitem__('anytype_1', anytype_1)

    @property
    def anytype_2(self):
        """Gets the anytype_2 of this AdditionalPropertiesClass.  # noqa: E501


        :return: The anytype_2 of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: str|float|int|bool|list|dict
        """
        return self._data_store.get('anytype_2')

    @anytype_2.setter
    def anytype_2(self, anytype_2):
        """Sets the anytype_2 of this AdditionalPropertiesClass.


        :param anytype_2: The anytype_2 of this AdditionalPropertiesClass.  # noqa: E501
        :type: str|float|int|bool|list|dict
        """

        self.__setitem__('anytype_2', anytype_2)

    @property
    def anytype_3(self):
        """Gets the anytype_3 of this AdditionalPropertiesClass.  # noqa: E501


        :return: The anytype_3 of this AdditionalPropertiesClass.  # noqa: E501
        :rtype: str|float|int|bool|list|dict
        """
        return self._data_store.get('anytype_3')

    @anytype_3.setter
    def anytype_3(self, anytype_3):
        """Sets the anytype_3 of this AdditionalPropertiesClass.


        :param anytype_3: The anytype_3 of this AdditionalPropertiesClass.  # noqa: E501
        :type: str|float|int|bool|list|dict
        """

        self.__setitem__('anytype_3', anytype_3)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, value in six.iteritems(self._data_store):
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalPropertiesClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
