# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.exceptions import (
    ApiKeyError,
    ApiTypeError,
    ApiValueError,
)
from petstore_api.model_utils import (  # noqa: F401
    OpenApiModel,
    date,
    datetime,
    file_type,
    model_to_dict,
    none_type,
    validate_type
)


class MapTest(OpenApiModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional, required variables, and
                            additional properties.
    """
    openapi_types = {
        'map_map_of_string': [{str: ({str: (str,)},)}],  # noqa: E501
        'map_of_enum_string': [{str: (str,)}],  # noqa: E501
        'direct_map': [{str: (bool,)}],  # noqa: E501
        'indirect_map': [{str: (bool,)}]  # noqa: E501
    }
    attribute_map = {
        'map_map_of_string': 'map_map_of_string',  # noqa: E501
        'map_of_enum_string': 'map_of_enum_string',  # noqa: E501
        'direct_map': 'direct_map',  # noqa: E501
        'indirect_map': 'indirect_map'  # noqa: E501
    }

    def __init__(self, _check_type=False, **kwargs):  # noqa: E501
        """MapTest - a model defined in OpenAPI



        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            map_map_of_string ({str: ({str: (str,)},)}): [optional]  # noqa: E501
            map_of_enum_string ({str: (str,)}): [optional]  # noqa: E501
            direct_map ({str: (bool,)}): [optional]  # noqa: E501
            indirect_map ({str: (bool,)}): [optional]  # noqa: E501
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type

        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_type = self.openapi_types[name]
        else:
            raise ApiKeyError("{0} has no key '{1}'".format(
                type(self).__name__, name))

        variable_path = [name]
        if not isinstance(name, str):
            raise ApiTypeError(
                (str,),
                name,
                variable_path,
                value_type=False
            )
        if check_type:
            validate_type(value, required_type, variable_path)

        self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]
        raise ApiKeyError("{0} has no key {1}".format(
            type(self).__name__, name))

    @property
    def map_map_of_string(self):
        """Gets the map_map_of_string of this MapTest.  # noqa: E501


        Returns:
            ({str: ({str: (str,)},)}): The map_map_of_string of this MapTest.  # noqa: E501
        """
        return self._data_store.get('map_map_of_string')

    @map_map_of_string.setter
    def map_map_of_string(
            self, map_map_of_string):
        """Sets the map_map_of_string of this MapTest.


        Returns:
            ({str: ({str: (str,)},)}): The map_map_of_string of this MapTest.  # noqa: E501
        """

        self.__setitem__(
            'map_map_of_string',
            map_map_of_string
        )

    @property
    def map_of_enum_string(self):
        """Gets the map_of_enum_string of this MapTest.  # noqa: E501


        Returns:
            ({str: (str,)}): The map_of_enum_string of this MapTest.  # noqa: E501
        """
        return self._data_store.get('map_of_enum_string')

    @map_of_enum_string.setter
    def map_of_enum_string(
            self, map_of_enum_string):
        """Sets the map_of_enum_string of this MapTest.


        Returns:
            ({str: (str,)}): The map_of_enum_string of this MapTest.  # noqa: E501
        """
        allowed_values = ["UPPER", "lower"]  # noqa: E501
        if not set(map_of_enum_string.keys()).issubset(set(allowed_values)):
            raise ApiValueError(
                "Invalid keys in `map_of_enum_string` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(map_of_enum_string.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self.__setitem__(
            'map_of_enum_string',
            map_of_enum_string
        )

    @property
    def direct_map(self):
        """Gets the direct_map of this MapTest.  # noqa: E501


        Returns:
            ({str: (bool,)}): The direct_map of this MapTest.  # noqa: E501
        """
        return self._data_store.get('direct_map')

    @direct_map.setter
    def direct_map(
            self, direct_map):
        """Sets the direct_map of this MapTest.


        Returns:
            ({str: (bool,)}): The direct_map of this MapTest.  # noqa: E501
        """

        self.__setitem__(
            'direct_map',
            direct_map
        )

    @property
    def indirect_map(self):
        """Gets the indirect_map of this MapTest.  # noqa: E501


        Returns:
            ({str: (bool,)}): The indirect_map of this MapTest.  # noqa: E501
        """
        return self._data_store.get('indirect_map')

    @indirect_map.setter
    def indirect_map(
            self, indirect_map):
        """Sets the indirect_map of this MapTest.


        Returns:
            ({str: (bool,)}): The indirect_map of this MapTest.  # noqa: E501
        """

        self.__setitem__(
            'indirect_map',
            indirect_map
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
