# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class XmlItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attribute_string': 'str',
        'attribute_number': 'float',
        'attribute_integer': 'int',
        'attribute_boolean': 'bool',
        'wrapped_array': 'list[int]',
        'name_string': 'str',
        'name_number': 'float',
        'name_integer': 'int',
        'name_boolean': 'bool',
        'name_array': 'list[int]',
        'name_wrapped_array': 'list[int]',
        'prefix_string': 'str',
        'prefix_number': 'float',
        'prefix_integer': 'int',
        'prefix_boolean': 'bool',
        'prefix_array': 'list[int]',
        'prefix_wrapped_array': 'list[int]',
        'namespace_string': 'str',
        'namespace_number': 'float',
        'namespace_integer': 'int',
        'namespace_boolean': 'bool',
        'namespace_array': 'list[int]',
        'namespace_wrapped_array': 'list[int]',
        'prefix_ns_string': 'str',
        'prefix_ns_number': 'float',
        'prefix_ns_integer': 'int',
        'prefix_ns_boolean': 'bool',
        'prefix_ns_array': 'list[int]',
        'prefix_ns_wrapped_array': 'list[int]'
    }
    attribute_map = {
        'attribute_string': 'attribute_string',
        'attribute_number': 'attribute_number',
        'attribute_integer': 'attribute_integer',
        'attribute_boolean': 'attribute_boolean',
        'wrapped_array': 'wrapped_array',
        'name_string': 'name_string',
        'name_number': 'name_number',
        'name_integer': 'name_integer',
        'name_boolean': 'name_boolean',
        'name_array': 'name_array',
        'name_wrapped_array': 'name_wrapped_array',
        'prefix_string': 'prefix_string',
        'prefix_number': 'prefix_number',
        'prefix_integer': 'prefix_integer',
        'prefix_boolean': 'prefix_boolean',
        'prefix_array': 'prefix_array',
        'prefix_wrapped_array': 'prefix_wrapped_array',
        'namespace_string': 'namespace_string',
        'namespace_number': 'namespace_number',
        'namespace_integer': 'namespace_integer',
        'namespace_boolean': 'namespace_boolean',
        'namespace_array': 'namespace_array',
        'namespace_wrapped_array': 'namespace_wrapped_array',
        'prefix_ns_string': 'prefix_ns_string',
        'prefix_ns_number': 'prefix_ns_number',
        'prefix_ns_integer': 'prefix_ns_integer',
        'prefix_ns_boolean': 'prefix_ns_boolean',
        'prefix_ns_array': 'prefix_ns_array',
        'prefix_ns_wrapped_array': 'prefix_ns_wrapped_array'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """XmlItem - a model defined in OpenAPI



        Keyword Args:
            attribute_string (str): [optional] if omitted the server will use the default value of 'string'
            attribute_number (float): [optional] if omitted the server will use the default value of 1.234
            attribute_integer (int): [optional] if omitted the server will use the default value of -2
            attribute_boolean (bool): [optional] if omitted the server will use the default value of True
            wrapped_array (list[int]): [optional]
            name_string (str): [optional] if omitted the server will use the default value of 'string'
            name_number (float): [optional] if omitted the server will use the default value of 1.234
            name_integer (int): [optional] if omitted the server will use the default value of -2
            name_boolean (bool): [optional] if omitted the server will use the default value of True
            name_array (list[int]): [optional]
            name_wrapped_array (list[int]): [optional]
            prefix_string (str): [optional] if omitted the server will use the default value of 'string'
            prefix_number (float): [optional] if omitted the server will use the default value of 1.234
            prefix_integer (int): [optional] if omitted the server will use the default value of -2
            prefix_boolean (bool): [optional] if omitted the server will use the default value of True
            prefix_array (list[int]): [optional]
            prefix_wrapped_array (list[int]): [optional]
            namespace_string (str): [optional] if omitted the server will use the default value of 'string'
            namespace_number (float): [optional] if omitted the server will use the default value of 1.234
            namespace_integer (int): [optional] if omitted the server will use the default value of -2
            namespace_boolean (bool): [optional] if omitted the server will use the default value of True
            namespace_array (list[int]): [optional]
            namespace_wrapped_array (list[int]): [optional]
            prefix_ns_string (str): [optional] if omitted the server will use the default value of 'string'
            prefix_ns_number (float): [optional] if omitted the server will use the default value of 1.234
            prefix_ns_integer (int): [optional] if omitted the server will use the default value of -2
            prefix_ns_boolean (bool): [optional] if omitted the server will use the default value of True
            prefix_ns_array (list[int]): [optional]
            prefix_ns_wrapped_array (list[int]): [optional]

        """  # noqa: E501

        self._data_store = {}

        self.discriminator = None

        for var_name, var_value in six.iteritems(kwargs):
            self.__setitem__(var_name, var_value)

    def recursive_type(self, item):
        """Gets a string describing the full the recursive type of a value"""
        item_type = type(item)
        if item_type == dict:
            child_key_types = set()
            child_value_types = set()
            for child_key, child_value in six.iteritems(item):
                child_key_types.add(self.recursive_type(child_key))
                child_value_types.add(self.recursive_type(child_value))
            if child_key_types != set(['str']):
                raise ValueError('Invalid dict key type. All Openapi dict keys must be strings')
            child_value_types = '|'.join(sorted(list(child_value_types)))
            return "dict(str, {0})".format(child_value_types)
        elif item_type == list:
            child_value_types = set()
            for child_item in item:
                child_value_types.add(self.recursive_type(child_item))
            child_value_types = '|'.join(sorted(list(child_value_types)))
            return "list[{0}]".format(child_value_types)
        else:
            return type(item).__name__

    def __setitem__(self, name, value):
        check_type = False
        if name in self.openapi_types:
            required_type = self.openapi_types[name]
        else:
            raise KeyError("{0} has no key '{1}'".format(
                type(self).__name__, name))

        passed_type = self.recursive_type(value)
        if type(name) != str:
            raise ValueError('Variable name must be type string and %s was not' % name)
        elif passed_type != required_type and check_type:
            raise ValueError('Variable value must be type %s but you passed in %s' %
                             (required_type, passed_type))

        if name in self.openapi_types:
            setattr(self, name, value)
        else:
            self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]
        raise KeyError("{0} has no key {1}".format(
            type(self).__name__, name))

    @property
    def attribute_string(self):
        """Gets the attribute_string of this XmlItem.  # noqa: E501


        :return: The attribute_string of this XmlItem.  # noqa: E501
        :rtype: str
        """
        return self._data_store.get('attribute_string')

    @attribute_string.setter
    def attribute_string(self, attribute_string):
        """Sets the attribute_string of this XmlItem.


        :param attribute_string: The attribute_string of this XmlItem.  # noqa: E501
        :type: str
        """

        self._data_store['attribute_string'] = attribute_string

    @property
    def attribute_number(self):
        """Gets the attribute_number of this XmlItem.  # noqa: E501


        :return: The attribute_number of this XmlItem.  # noqa: E501
        :rtype: float
        """
        return self._data_store.get('attribute_number')

    @attribute_number.setter
    def attribute_number(self, attribute_number):
        """Sets the attribute_number of this XmlItem.


        :param attribute_number: The attribute_number of this XmlItem.  # noqa: E501
        :type: float
        """

        self._data_store['attribute_number'] = attribute_number

    @property
    def attribute_integer(self):
        """Gets the attribute_integer of this XmlItem.  # noqa: E501


        :return: The attribute_integer of this XmlItem.  # noqa: E501
        :rtype: int
        """
        return self._data_store.get('attribute_integer')

    @attribute_integer.setter
    def attribute_integer(self, attribute_integer):
        """Sets the attribute_integer of this XmlItem.


        :param attribute_integer: The attribute_integer of this XmlItem.  # noqa: E501
        :type: int
        """

        self._data_store['attribute_integer'] = attribute_integer

    @property
    def attribute_boolean(self):
        """Gets the attribute_boolean of this XmlItem.  # noqa: E501


        :return: The attribute_boolean of this XmlItem.  # noqa: E501
        :rtype: bool
        """
        return self._data_store.get('attribute_boolean')

    @attribute_boolean.setter
    def attribute_boolean(self, attribute_boolean):
        """Sets the attribute_boolean of this XmlItem.


        :param attribute_boolean: The attribute_boolean of this XmlItem.  # noqa: E501
        :type: bool
        """

        self._data_store['attribute_boolean'] = attribute_boolean

    @property
    def wrapped_array(self):
        """Gets the wrapped_array of this XmlItem.  # noqa: E501


        :return: The wrapped_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('wrapped_array')

    @wrapped_array.setter
    def wrapped_array(self, wrapped_array):
        """Sets the wrapped_array of this XmlItem.


        :param wrapped_array: The wrapped_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['wrapped_array'] = wrapped_array

    @property
    def name_string(self):
        """Gets the name_string of this XmlItem.  # noqa: E501


        :return: The name_string of this XmlItem.  # noqa: E501
        :rtype: str
        """
        return self._data_store.get('name_string')

    @name_string.setter
    def name_string(self, name_string):
        """Sets the name_string of this XmlItem.


        :param name_string: The name_string of this XmlItem.  # noqa: E501
        :type: str
        """

        self._data_store['name_string'] = name_string

    @property
    def name_number(self):
        """Gets the name_number of this XmlItem.  # noqa: E501


        :return: The name_number of this XmlItem.  # noqa: E501
        :rtype: float
        """
        return self._data_store.get('name_number')

    @name_number.setter
    def name_number(self, name_number):
        """Sets the name_number of this XmlItem.


        :param name_number: The name_number of this XmlItem.  # noqa: E501
        :type: float
        """

        self._data_store['name_number'] = name_number

    @property
    def name_integer(self):
        """Gets the name_integer of this XmlItem.  # noqa: E501


        :return: The name_integer of this XmlItem.  # noqa: E501
        :rtype: int
        """
        return self._data_store.get('name_integer')

    @name_integer.setter
    def name_integer(self, name_integer):
        """Sets the name_integer of this XmlItem.


        :param name_integer: The name_integer of this XmlItem.  # noqa: E501
        :type: int
        """

        self._data_store['name_integer'] = name_integer

    @property
    def name_boolean(self):
        """Gets the name_boolean of this XmlItem.  # noqa: E501


        :return: The name_boolean of this XmlItem.  # noqa: E501
        :rtype: bool
        """
        return self._data_store.get('name_boolean')

    @name_boolean.setter
    def name_boolean(self, name_boolean):
        """Sets the name_boolean of this XmlItem.


        :param name_boolean: The name_boolean of this XmlItem.  # noqa: E501
        :type: bool
        """

        self._data_store['name_boolean'] = name_boolean

    @property
    def name_array(self):
        """Gets the name_array of this XmlItem.  # noqa: E501


        :return: The name_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('name_array')

    @name_array.setter
    def name_array(self, name_array):
        """Sets the name_array of this XmlItem.


        :param name_array: The name_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['name_array'] = name_array

    @property
    def name_wrapped_array(self):
        """Gets the name_wrapped_array of this XmlItem.  # noqa: E501


        :return: The name_wrapped_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('name_wrapped_array')

    @name_wrapped_array.setter
    def name_wrapped_array(self, name_wrapped_array):
        """Sets the name_wrapped_array of this XmlItem.


        :param name_wrapped_array: The name_wrapped_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['name_wrapped_array'] = name_wrapped_array

    @property
    def prefix_string(self):
        """Gets the prefix_string of this XmlItem.  # noqa: E501


        :return: The prefix_string of this XmlItem.  # noqa: E501
        :rtype: str
        """
        return self._data_store.get('prefix_string')

    @prefix_string.setter
    def prefix_string(self, prefix_string):
        """Sets the prefix_string of this XmlItem.


        :param prefix_string: The prefix_string of this XmlItem.  # noqa: E501
        :type: str
        """

        self._data_store['prefix_string'] = prefix_string

    @property
    def prefix_number(self):
        """Gets the prefix_number of this XmlItem.  # noqa: E501


        :return: The prefix_number of this XmlItem.  # noqa: E501
        :rtype: float
        """
        return self._data_store.get('prefix_number')

    @prefix_number.setter
    def prefix_number(self, prefix_number):
        """Sets the prefix_number of this XmlItem.


        :param prefix_number: The prefix_number of this XmlItem.  # noqa: E501
        :type: float
        """

        self._data_store['prefix_number'] = prefix_number

    @property
    def prefix_integer(self):
        """Gets the prefix_integer of this XmlItem.  # noqa: E501


        :return: The prefix_integer of this XmlItem.  # noqa: E501
        :rtype: int
        """
        return self._data_store.get('prefix_integer')

    @prefix_integer.setter
    def prefix_integer(self, prefix_integer):
        """Sets the prefix_integer of this XmlItem.


        :param prefix_integer: The prefix_integer of this XmlItem.  # noqa: E501
        :type: int
        """

        self._data_store['prefix_integer'] = prefix_integer

    @property
    def prefix_boolean(self):
        """Gets the prefix_boolean of this XmlItem.  # noqa: E501


        :return: The prefix_boolean of this XmlItem.  # noqa: E501
        :rtype: bool
        """
        return self._data_store.get('prefix_boolean')

    @prefix_boolean.setter
    def prefix_boolean(self, prefix_boolean):
        """Sets the prefix_boolean of this XmlItem.


        :param prefix_boolean: The prefix_boolean of this XmlItem.  # noqa: E501
        :type: bool
        """

        self._data_store['prefix_boolean'] = prefix_boolean

    @property
    def prefix_array(self):
        """Gets the prefix_array of this XmlItem.  # noqa: E501


        :return: The prefix_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('prefix_array')

    @prefix_array.setter
    def prefix_array(self, prefix_array):
        """Sets the prefix_array of this XmlItem.


        :param prefix_array: The prefix_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['prefix_array'] = prefix_array

    @property
    def prefix_wrapped_array(self):
        """Gets the prefix_wrapped_array of this XmlItem.  # noqa: E501


        :return: The prefix_wrapped_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('prefix_wrapped_array')

    @prefix_wrapped_array.setter
    def prefix_wrapped_array(self, prefix_wrapped_array):
        """Sets the prefix_wrapped_array of this XmlItem.


        :param prefix_wrapped_array: The prefix_wrapped_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['prefix_wrapped_array'] = prefix_wrapped_array

    @property
    def namespace_string(self):
        """Gets the namespace_string of this XmlItem.  # noqa: E501


        :return: The namespace_string of this XmlItem.  # noqa: E501
        :rtype: str
        """
        return self._data_store.get('namespace_string')

    @namespace_string.setter
    def namespace_string(self, namespace_string):
        """Sets the namespace_string of this XmlItem.


        :param namespace_string: The namespace_string of this XmlItem.  # noqa: E501
        :type: str
        """

        self._data_store['namespace_string'] = namespace_string

    @property
    def namespace_number(self):
        """Gets the namespace_number of this XmlItem.  # noqa: E501


        :return: The namespace_number of this XmlItem.  # noqa: E501
        :rtype: float
        """
        return self._data_store.get('namespace_number')

    @namespace_number.setter
    def namespace_number(self, namespace_number):
        """Sets the namespace_number of this XmlItem.


        :param namespace_number: The namespace_number of this XmlItem.  # noqa: E501
        :type: float
        """

        self._data_store['namespace_number'] = namespace_number

    @property
    def namespace_integer(self):
        """Gets the namespace_integer of this XmlItem.  # noqa: E501


        :return: The namespace_integer of this XmlItem.  # noqa: E501
        :rtype: int
        """
        return self._data_store.get('namespace_integer')

    @namespace_integer.setter
    def namespace_integer(self, namespace_integer):
        """Sets the namespace_integer of this XmlItem.


        :param namespace_integer: The namespace_integer of this XmlItem.  # noqa: E501
        :type: int
        """

        self._data_store['namespace_integer'] = namespace_integer

    @property
    def namespace_boolean(self):
        """Gets the namespace_boolean of this XmlItem.  # noqa: E501


        :return: The namespace_boolean of this XmlItem.  # noqa: E501
        :rtype: bool
        """
        return self._data_store.get('namespace_boolean')

    @namespace_boolean.setter
    def namespace_boolean(self, namespace_boolean):
        """Sets the namespace_boolean of this XmlItem.


        :param namespace_boolean: The namespace_boolean of this XmlItem.  # noqa: E501
        :type: bool
        """

        self._data_store['namespace_boolean'] = namespace_boolean

    @property
    def namespace_array(self):
        """Gets the namespace_array of this XmlItem.  # noqa: E501


        :return: The namespace_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('namespace_array')

    @namespace_array.setter
    def namespace_array(self, namespace_array):
        """Sets the namespace_array of this XmlItem.


        :param namespace_array: The namespace_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['namespace_array'] = namespace_array

    @property
    def namespace_wrapped_array(self):
        """Gets the namespace_wrapped_array of this XmlItem.  # noqa: E501


        :return: The namespace_wrapped_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('namespace_wrapped_array')

    @namespace_wrapped_array.setter
    def namespace_wrapped_array(self, namespace_wrapped_array):
        """Sets the namespace_wrapped_array of this XmlItem.


        :param namespace_wrapped_array: The namespace_wrapped_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['namespace_wrapped_array'] = namespace_wrapped_array

    @property
    def prefix_ns_string(self):
        """Gets the prefix_ns_string of this XmlItem.  # noqa: E501


        :return: The prefix_ns_string of this XmlItem.  # noqa: E501
        :rtype: str
        """
        return self._data_store.get('prefix_ns_string')

    @prefix_ns_string.setter
    def prefix_ns_string(self, prefix_ns_string):
        """Sets the prefix_ns_string of this XmlItem.


        :param prefix_ns_string: The prefix_ns_string of this XmlItem.  # noqa: E501
        :type: str
        """

        self._data_store['prefix_ns_string'] = prefix_ns_string

    @property
    def prefix_ns_number(self):
        """Gets the prefix_ns_number of this XmlItem.  # noqa: E501


        :return: The prefix_ns_number of this XmlItem.  # noqa: E501
        :rtype: float
        """
        return self._data_store.get('prefix_ns_number')

    @prefix_ns_number.setter
    def prefix_ns_number(self, prefix_ns_number):
        """Sets the prefix_ns_number of this XmlItem.


        :param prefix_ns_number: The prefix_ns_number of this XmlItem.  # noqa: E501
        :type: float
        """

        self._data_store['prefix_ns_number'] = prefix_ns_number

    @property
    def prefix_ns_integer(self):
        """Gets the prefix_ns_integer of this XmlItem.  # noqa: E501


        :return: The prefix_ns_integer of this XmlItem.  # noqa: E501
        :rtype: int
        """
        return self._data_store.get('prefix_ns_integer')

    @prefix_ns_integer.setter
    def prefix_ns_integer(self, prefix_ns_integer):
        """Sets the prefix_ns_integer of this XmlItem.


        :param prefix_ns_integer: The prefix_ns_integer of this XmlItem.  # noqa: E501
        :type: int
        """

        self._data_store['prefix_ns_integer'] = prefix_ns_integer

    @property
    def prefix_ns_boolean(self):
        """Gets the prefix_ns_boolean of this XmlItem.  # noqa: E501


        :return: The prefix_ns_boolean of this XmlItem.  # noqa: E501
        :rtype: bool
        """
        return self._data_store.get('prefix_ns_boolean')

    @prefix_ns_boolean.setter
    def prefix_ns_boolean(self, prefix_ns_boolean):
        """Sets the prefix_ns_boolean of this XmlItem.


        :param prefix_ns_boolean: The prefix_ns_boolean of this XmlItem.  # noqa: E501
        :type: bool
        """

        self._data_store['prefix_ns_boolean'] = prefix_ns_boolean

    @property
    def prefix_ns_array(self):
        """Gets the prefix_ns_array of this XmlItem.  # noqa: E501


        :return: The prefix_ns_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('prefix_ns_array')

    @prefix_ns_array.setter
    def prefix_ns_array(self, prefix_ns_array):
        """Sets the prefix_ns_array of this XmlItem.


        :param prefix_ns_array: The prefix_ns_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['prefix_ns_array'] = prefix_ns_array

    @property
    def prefix_ns_wrapped_array(self):
        """Gets the prefix_ns_wrapped_array of this XmlItem.  # noqa: E501


        :return: The prefix_ns_wrapped_array of this XmlItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_store.get('prefix_ns_wrapped_array')

    @prefix_ns_wrapped_array.setter
    def prefix_ns_wrapped_array(self, prefix_ns_wrapped_array):
        """Sets the prefix_ns_wrapped_array of this XmlItem.


        :param prefix_ns_wrapped_array: The prefix_ns_wrapped_array of this XmlItem.  # noqa: E501
        :type: list[int]
        """

        self._data_store['prefix_ns_wrapped_array'] = prefix_ns_wrapped_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, value in six.iteritems(self._data_store):
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
