# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
try:
    from unittest.mock import patch
except ImportError:
    # python2
    from mock import patch

import petstore_api
from petstore_api.api.fake_api import ApiClient  # noqa: E501
from petstore_api.api.fake_api import FakeApi  # noqa: E501
from petstore_api.rest import ApiException


class TestFakeApi(unittest.TestCase):
    """FakeApi unit test stubs"""

    def setUp(self):
        self.api = petstore_api.api.fake_api.FakeApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_fake_outer_boolean_serialize(self):
        """Test case for fake_outer_boolean_serialize

        """
        pass

    def test_fake_outer_composite_serialize(self):
        """Test case for fake_outer_composite_serialize

        """
        pass

    def test_fake_outer_number_serialize(self):
        """Test case for fake_outer_number_serialize

        """
        pass

    def test_fake_outer_string_serialize(self):
        """Test case for fake_outer_string_serialize

        """
        pass

    def test_test_body_with_query_params(self):
        """Test case for test_body_with_query_params

        """
        pass

    def test_test_client_model(self):
        """Test case for test_client_model

        To test \"client\" model  # noqa: E501
        """
        pass

    def test_test_endpoint_parameters(self):
        """Test case for test_endpoint_parameters

        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트   # noqa: E501
        """
        pass

    def test_test_enum_parameters(self):
        """Test case for test_enum_parameters

        To test enum parameters  # noqa: E501
        """
        with patch.object(ApiClient, 'call_api', return_value=None) as mock_method:
            fake_api = FakeApi()
            fake_api.test_enum_parameters()
            # defaults are used
            mock_method.assert_called_with(
                '/fake',
                'GET',
                {},
                [('enum_query_string', '-efg')],
                {
                    'enum_header_string': '-efg',
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                _preload_content=True,
                _request_timeout=None,
                _return_http_data_only=True,
                async_req=None, auth_settings=[],
                body=None,
                collection_formats={'enum_form_string_array': 'csv'},
                files={},
                post_params=[
                    ('enum_form_string_array', '$'),
                    ('enum_form_string', '-efg')
                ],
                response_type=None
            )
            # we can overwrite the defaults
            enum_header_string = 'def'
            enum_query_string = 'abc'
            enum_form_string = 'ghi'
            enum_form_string_array = 'jkl'
            fake_api.test_enum_parameters(
                enum_header_string=enum_header_string,
                enum_query_string=enum_query_string,
                enum_form_string=enum_form_string,
                enum_form_string_array=enum_form_string_array
            )
            mock_method.assert_called_with(
                '/fake',
                'GET',
                {},
                [('enum_query_string', enum_query_string)],
                {
                    'enum_header_string': enum_header_string,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                _preload_content=True,
                _request_timeout=None,
                _return_http_data_only=True,
                async_req=None, auth_settings=[],
                body=None,
                collection_formats={'enum_form_string_array': 'csv'},
                files={},
                post_params=[
                    ('enum_form_string_array', enum_form_string_array),
                    ('enum_form_string', enum_form_string)
                ],
                response_type=None
            )


    def test_test_inline_additional_properties(self):
        """Test case for test_inline_additional_properties

        test inline additionalProperties  # noqa: E501
        """
        pass

    def test_test_json_form_data(self):
        """Test case for test_json_form_data

        test json serialization of form data  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
