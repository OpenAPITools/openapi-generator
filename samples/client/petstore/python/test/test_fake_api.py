# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
try:
    from unittest.mock import patch
except ImportError:
    # python2
    from mock import patch
import six

import petstore_api
from petstore_api.api.fake_api import ApiClient, FakeApi  # noqa: E501
from petstore_api.rest import ApiException


class TestFakeApi(unittest.TestCase):
    """FakeApi unit test stubs"""

    def setUp(self):
        self.api = petstore_api.api.fake_api.FakeApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_fake_outer_boolean_serialize(self):
        """Test case for fake_outer_boolean_serialize

        """
        pass

    def test_fake_outer_composite_serialize(self):
        """Test case for fake_outer_composite_serialize

        """
        pass

    def test_fake_outer_number_serialize(self):
        """Test case for fake_outer_number_serialize

        """
        pass

    def test_fake_outer_string_serialize(self):
        """Test case for fake_outer_string_serialize

        """
        pass

    def test_test_body_with_query_params(self):
        """Test case for test_body_with_query_params

        """
        pass

    def test_test_client_model(self):
        """Test case for test_client_model

        To test \"client\" model  # noqa: E501
        """
        pass

    def test_test_endpoint_parameters(self):
        """Test case for test_endpoint_parameters

        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트   # noqa: E501
        """
        pass

    def test_test_enum_parameters(self):
        """Test case for test_enum_parameters

        To test enum parameters  # noqa: E501
        """
        pass

    def test_test_inline_additional_properties(self):
        """Test case for test_inline_additional_properties

        test inline additionalProperties  # noqa: E501
        """
        pass

    def test_test_json_form_data(self):
        """Test case for test_json_form_data

        test json serialization of form data  # noqa: E501
        """
        pass

    def test_test_endpoint_enums_length_one(self):
        """Test case for test_endpoint_enums_length_one
         """
        with patch.object(ApiClient, 'call_api', return_value=None) as mock_method:
            fake_api = FakeApi()
            fake_api.test_endpoint_enums_length_one()
            # defaults are used
            mock_method.assert_called_with(
                '/fake/enums-of-length-one/{path_string}/{path_integer}',
                'PUT',
                {'path_string': 'hello', 'path_integer': 34},
                [('query_integer', 3), ('query_string', 'brillig')],
                {'header_number': 1.234},
                _preload_content=True,
                _request_timeout=None,
                _return_http_data_only=True,
                async_req=None,
                auth_settings=[],
                body=None,
                collection_formats={},
                files={},
                post_params=[],
                response_type=None
            )

            # we can pass in valid enum values
            fake_api.test_endpoint_enums_length_one(
                path_string='hello',
                path_integer=34,
                query_integer=3,
                query_string='brillig',
                header_number=1.234
            )
            mock_method.assert_called_with(
                '/fake/enums-of-length-one/{path_string}/{path_integer}',
                'PUT',
                {'path_string': 'hello', 'path_integer': 34},
                [('query_integer', 3), ('query_string', 'brillig')],
                {'header_number': 1.234},
                _preload_content=True,
                _request_timeout=None,
                _return_http_data_only=True,
                async_req=None,
                auth_settings=[],
                body=None,
                collection_formats={},
                files={},
                post_params=[],
                response_type=None
            )

            # we get value errors when we try to pass in invalid values
            invalid_pairs = dict(
                path_string='goodbye',
                path_integer=-12,
                query_integer=421,
                query_string='gyre',
                header_number=3.141
            )
            for param, value in six.iteritems(invalid_pairs):
                with self.assertRaises(ValueError) as exc:
                    keyword_args = {param: value}
                    fake_api.test_endpoint_enums_length_one(**keyword_args)
                self.assertIn("Invalid value", str(exc.exception))
                self.assertIn("must be", str(exc.exception))


if __name__ == '__main__':
    unittest.main()
