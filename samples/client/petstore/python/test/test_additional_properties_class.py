# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import petstore_api
from petstore_api.models.additional_properties_class import AdditionalPropertiesClass  # noqa: E501
from petstore_api.rest import ApiException
from test import get_examples

class TestAdditionalPropertiesClass(unittest.TestCase):
    """AdditionalPropertiesClass unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_addl_props_can_have_any_valye_type_assigned(self):
        for var_name in get_examples(['str']):
            for var_value in get_examples(['int', 'str', 'float', 'bool', 'list', 'dict']):
                keyword_args = {var_name: var_value}
                a = AdditionalPropertiesClass(**keyword_args)
                b = AdditionalPropertiesClass()
                b[var_name] = var_value
        assert True

    def test_errors_thrown_on_wrong_addl_props_value_type(self):
        var_name = 'var1'
        var_value = None
        keyword_args = {var_name: var_value}
        with self.assertRaises(TypeError):
            AdditionalPropertiesClass(**keyword_args)

        with self.assertRaises(TypeError):
            a = AdditionalPropertiesClass()
            a[var_name] = var_value

    def test_errors_thrown_on_wrong_var_name_type(self):
        var_names = get_examples(['int', 'float', 'bool', 'None'])
        for var_name in var_names:
            with self.assertRaises(TypeError):
                a = AdditionalPropertiesClass()
                a[var_name] = 'some string'


if __name__ == '__main__':
    unittest.main()
