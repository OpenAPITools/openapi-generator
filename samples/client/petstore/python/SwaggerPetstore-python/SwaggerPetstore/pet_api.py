#!/usr/bin/env python
# coding: utf-8

"""
PetApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class PetApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def update_pet(self, **kwargs):
        """Update an existing pet
        

        Args:
            body, Pet: Pet object that needs to be added to the store (required)
            

        Returns: 
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_pet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = ['application/json', 'application/xml', ]
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def add_pet(self, **kwargs):
        """Add a new pet to the store
        

        Args:
            body, Pet: Pet object that needs to be added to the store (required)
            

        Returns: 
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method add_pet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = ['application/json', 'application/xml', ]
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def find_pets_by_status(self, **kwargs):
        """Finds Pets by status
        Multiple status values can be provided with comma seperated strings

        Args:
            status, list[str]: Status values that need to be considered for filter (required)
            

        Returns: list[Pet]
        """

        allParams = ['status']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method find_pets_by_status" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet/findByStatus'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = []
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        
        if ('status' in params):
            queryParams['status'] = self.apiClient.toPathValue(params['status'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[Pet]')
        return responseObject
        
        
        
    
    def find_pets_by_tags(self, **kwargs):
        """Finds Pets by tags
        Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.

        Args:
            tags, list[str]: Tags to filter by (required)
            

        Returns: list[Pet]
        """

        allParams = ['tags']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method find_pets_by_tags" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet/findByTags'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = []
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        
        if ('tags' in params):
            queryParams['tags'] = self.apiClient.toPathValue(params['tags'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[Pet]')
        return responseObject
        
        
        
    
    def get_pet_by_id(self, **kwargs):
        """Find pet by ID
        Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions

        Args:
            pet_id, long: ID of pet that needs to be fetched (required)
            

        Returns: Pet
        """

        allParams = ['pet_id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_pet_by_id" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet/{petId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = []
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        

        

        
        if ('pet_id' in params):
            replacement = str(self.apiClient.toPathValue(params['pet_id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'petId' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Pet')
        return responseObject
        
        
        
    
    def update_pet_with_form(self, **kwargs):
        """Updates a pet in the store with form data
        

        Args:
            pet_id, str: ID of pet that needs to be updated (required)
            name, str: Updated name of the pet (required)
            status, str: Updated status of the pet (required)
            

        Returns: 
        """

        allParams = ['pet_id', 'name', 'status']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_pet_with_form" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet/{petId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = ['application/x-www-form-urlencoded', ]
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        

        

        
        if ('pet_id' in params):
            replacement = str(self.apiClient.toPathValue(params['pet_id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'petId' + '}',
                                                replacement)
        

        
        if ('name' in params):
            formParams['name'] = params['name']
        
        if ('status' in params):
            formParams['status'] = params['status']
        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def delete_pet(self, **kwargs):
        """Deletes a pet
        

        Args:
            api_key, str:  (required)
            pet_id, long: Pet id to delete (required)
            

        Returns: 
        """

        allParams = ['api_key', 'pet_id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete_pet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet/{petId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = []
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        

        
        if ('api_key' in params):
            headerParams['api_key'] = params['api_key']
        

        
        if ('pet_id' in params):
            replacement = str(self.apiClient.toPathValue(params['pet_id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'petId' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def upload_file(self, **kwargs):
        """uploads an image
        

        Args:
            pet_id, long: ID of pet to update (required)
            additional_metadata, str: Additional data to pass to server (required)
            file, file: file to upload (required)
            

        Returns: 
        """

        allParams = ['pet_id', 'additional_metadata', 'file']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method upload_file" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/pet/{petId}/uploadImage'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        accepts = ['application/json', 'application/xml']
        headerParams['Accept'] = ', '.join(accepts)

        content_types = ['multipart/form-data', ]
        headerParams['Content-Type'] = content_types[0] if len(content_types) > 0 else 'application/json'

        

        

        
        if ('pet_id' in params):
            replacement = str(self.apiClient.toPathValue(params['pet_id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'petId' + '}',
                                                replacement)
        

        
        if ('additional_metadata' in params):
            formParams['additionalMetadata'] = params['additional_metadata']
        
        if ('file' in params):
            files['file'] = params['file']
        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    


