/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0-SNAPSHOT).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.configuration;

import org.openapitools.api.AnotherFakeApi;
import org.openapitools.api.FakeApi;
import org.openapitools.api.FakeClassnameTags123Api;
import org.openapitools.api.PetApi;
import org.openapitools.api.StoreApi;
import org.openapitools.api.UserApi;

import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestClient;
import org.springframework.web.client.support.RestClientAdapter;
import org.springframework.web.service.invoker.HttpServiceProxyFactory;

public abstract class HttpInterfacesAbstractConfigurator {

    private final HttpServiceProxyFactory factory;

    public HttpInterfacesAbstractConfigurator(final HttpServiceProxyFactory factory) {
        this.factory = factory;
    }

    @Bean(name = "org.openapitools.configuration.HttpInterfacesAbstractConfigurator.anotherFake")
    AnotherFakeApi anotherFakeHttpProxy() {
        return factory.createClient(AnotherFakeApi.class);
    }

    @Bean(name = "org.openapitools.configuration.HttpInterfacesAbstractConfigurator.fake")
    FakeApi fakeHttpProxy() {
        return factory.createClient(FakeApi.class);
    }

    @Bean(name = "org.openapitools.configuration.HttpInterfacesAbstractConfigurator.fakeClassnameTags123")
    FakeClassnameTags123Api fakeClassnameTags123HttpProxy() {
        return factory.createClient(FakeClassnameTags123Api.class);
    }

    @Bean(name = "org.openapitools.configuration.HttpInterfacesAbstractConfigurator.pet")
    PetApi petHttpProxy() {
        return factory.createClient(PetApi.class);
    }

    @Bean(name = "org.openapitools.configuration.HttpInterfacesAbstractConfigurator.store")
    StoreApi storeHttpProxy() {
        return factory.createClient(StoreApi.class);
    }

    @Bean(name = "org.openapitools.configuration.HttpInterfacesAbstractConfigurator.user")
    UserApi userHttpProxy() {
        return factory.createClient(UserApi.class);
    }


}
