(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let fake_big_decimal_map () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/BigDecimalMap" in
    let headers = Request.default_headers in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Fake_big_decimal_map_200_response.of_yojson) resp body

let fake_health_get () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/health" in
    let headers = Request.default_headers in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Health_check_result.of_yojson) resp body

let fake_http_signature_test ~pet_t ?query_1 ?header_1 () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/http-signature-test" in
    let headers = Request.default_headers in
    let headers = Request.maybe_add_header headers "header_1"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 header_1 in
    let uri = Request.maybe_add_query_param uri "query_1"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 query_1 in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                Pet.to_yojson
    
    
    
 pet_t
    in
    Cohttp_lwt_unix.Client.call `GET uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let fake_outer_boolean_serialize ~body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/outer/boolean" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    JsonSupport.of_bool
    
    
    
 body
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_bool) resp body

let fake_outer_composite_serialize ~outer_composite_t () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/outer/composite" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                Outer_composite.to_yojson
    
    
    
 outer_composite_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Outer_composite.of_yojson) resp body

let fake_outer_number_serialize ~body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/outer/number" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    JsonSupport.of_float
    
    
    
    
    
 body
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_float) resp body

let fake_outer_string_serialize ~body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/outer/string" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     JsonSupport.of_string
    
    
    
    
    
    
    
    
    
 body
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_string) resp body

let fake_property_enum_integer_serialize ~outer_object_with_enum_property_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/property/enum-int" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                Outer_object_with_enum_property.to_yojson
    
    
    
 outer_object_with_enum_property_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Outer_object_with_enum_property.of_yojson) resp body

let test_additional_properties_reference ~request_body =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/additionalProperties-reference" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body         (JsonSupport.of_map_of     
    
    
    
    
    
    
    
    (fun x -> x)
    
)
 request_body
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_body_with_binary ~body =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/body-with-binary" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
    JsonSupport.of_string
    
    
 body
    in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_body_with_file_schema ~file_schema_test_class_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/body-with-file-schema" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                File_schema_test_class.to_yojson
    
    
    
 file_schema_test_class_t
    in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_body_with_query_params ~query ~user_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/body-with-query-params" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "query"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 query in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                User.to_yojson
    
    
    
 user_t
    in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_client_model ~client_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                Client.to_yojson
    
    
    
 client_t
    in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Client.of_yojson) resp body

let test_endpoint_parameters ~number ~double ~pattern_without_delimiter ~byte ?integer ?int32 ?int64 ?float ?string ?binary ?date ?date_time ?password ?callback () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake" in
    let headers = Request.default_headers in
    let body = Request.init_form_encoded_body () in
    let body = Request.maybe_add_form_encoded_body_param body "integer"     
    Int32.to_string
    
    
    
    
    
    
    
    
    
    
        
        
 integer in
    let body = Request.maybe_add_form_encoded_body_param body "int32"     
    Int32.to_string
    
    
    
    
    
    
    
    
    
    
        
        
 int32 in
    let body = Request.maybe_add_form_encoded_body_param body "int64"     Int64.to_string
    
    
    
    
    
    
    
    
    
    
    
        
        
 int64 in
    let body = Request.add_form_encoded_body_param body "number"     
    
    
    string_of_float
    
    
    
    
    
    
    
    
        
        
 number in
    let body = Request.maybe_add_form_encoded_body_param body "float"     
    
    string_of_float
    
    
    
    
    
    
    
    
    
        
        
 float in
    let body = Request.add_form_encoded_body_param body "double"     
    
    
    
    string_of_float
    
    
    
    
    
    
    
        
        
 double in
    let body = Request.maybe_add_form_encoded_body_param body "string"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 string in
    let body = Request.add_form_encoded_body_param body "pattern_without_delimiter"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 pattern_without_delimiter in
    let body = Request.add_form_encoded_body_param body "byte"     
    
    
    
    
    
    
    
    
    
    (fun x -> x)
    
        
        
 byte in
    let body = Request.maybe_add_form_encoded_body_param body "binary"     
    
    
    
    
    
    (fun x -> x)
    
    
    
    
    
        
        
 binary in
    let body = Request.maybe_add_form_encoded_body_param body "date"     
    
    
    
    
    
    
    (fun x -> x)
    
    
    
    
        
        
 date in
    let body = Request.maybe_add_form_encoded_body_param body "date_time"     
    
    
    
    
    
    
    
    (fun x -> x)
    
    
    
        
        
 date_time in
    let body = Request.maybe_add_form_encoded_body_param body "password"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 password in
    let body = Request.maybe_add_form_encoded_body_param body "callback"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 callback in
    let body = Request.finalize_form_encoded_body body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_enum_parameters ?(enum_header_string_array = []) ?(enum_header_string = `Minusefg) ?(enum_query_string_array = []) ?(enum_query_string = `Minusefg) ?enum_query_integer ?enum_query_double ?(enum_query_model_array = []) ?(enum_form_string_array = [`Dollar]) ?(enum_form_string = `Minusefg) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake" in
    let headers = Request.default_headers in
    let headers = Request.add_header_multi headers "enum_header_string_array"     (Stdlib.List.map         Enums.show_enum_form_string_array
        
)
 enum_header_string_array in
    let headers = Request.add_header headers "enum_header_string"         Enums.show_enumclass
        
 enum_header_string in
    let uri = Request.add_query_param_list uri "enum_query_string_array"     (Stdlib.List.map         Enums.show_enum_form_string_array
        
)
 enum_query_string_array in
    let uri = Request.add_query_param uri "enum_query_string"         Enums.show_enumclass
        
 enum_query_string in
    let uri = Request.maybe_add_query_param uri "enum_query_integer"         Enums.show_enum_query_integer
        
 enum_query_integer in
    let uri = Request.maybe_add_query_param uri "enum_query_double"         Enums.show_enum_number
        
 enum_query_double in
    let uri = Request.add_query_param_list uri "enum_query_model_array"     (Stdlib.List.map     
    
    
    
    
    
    
    
    
    
    
    
        
        (failwith "Unsupported: enum reference")
)
    
    
    
    
    
    
    
    
    
    
    
    
 enum_query_model_array in
    let body = Request.init_form_encoded_body () in
    let body = Request.add_form_encoded_body_param_list body "enum_form_string_array"     (Stdlib.List.map         Enums.show_enum_form_string_array
        
)
 enum_form_string_array in
    let body = Request.add_form_encoded_body_param body "enum_form_string"         Enums.show_enumclass
        
 enum_form_string in
    let body = Request.finalize_form_encoded_body body in
    Cohttp_lwt_unix.Client.call `GET uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_group_parameters ~required_string_group ~required_boolean_group ~required_int64_group ?string_group ?boolean_group ?int64_group () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake" in
    let headers = Request.default_headers in
    let headers = Request.add_header headers "required_boolean_group"     
    
    
    
    
    string_of_bool
    
    
    
    
    
    
        
        
 required_boolean_group in
    let headers = Request.maybe_add_header headers "boolean_group"     
    
    
    
    
    string_of_bool
    
    
    
    
    
    
        
        
 boolean_group in
    let uri = Request.add_query_param uri "required_string_group"     
    Int32.to_string
    
    
    
    
    
    
    
    
    
    
        
        
 required_string_group in
    let uri = Request.add_query_param uri "required_int64_group"     Int64.to_string
    
    
    
    
    
    
    
    
    
    
    
        
        
 required_int64_group in
    let uri = Request.maybe_add_query_param uri "string_group"     
    Int32.to_string
    
    
    
    
    
    
    
    
    
    
        
        
 string_group in
    let uri = Request.maybe_add_query_param uri "int64_group"     Int64.to_string
    
    
    
    
    
    
    
    
    
    
    
        
        
 int64_group in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_inline_additional_properties ~request_body =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/inline-additionalProperties" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body         (JsonSupport.of_map_of     JsonSupport.of_string
    
    
    
    
    
    
    
    
    
)
 request_body
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_inline_freeform_additional_properties ~test_inline_freeform_additional_properties_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/inline-freeform-additionalProperties" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                Test_inline_freeform_additional_properties_request.to_yojson
    
    
    
 test_inline_freeform_additional_properties_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_json_form_data ~param ~param2 =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/jsonFormData" in
    let headers = Request.default_headers in
    let body = Request.init_form_encoded_body () in
    let body = Request.add_form_encoded_body_param body "param"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 param in
    let body = Request.add_form_encoded_body_param body "param2"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 param2 in
    let body = Request.finalize_form_encoded_body body in
    Cohttp_lwt_unix.Client.call `GET uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_nullable ~child_with_nullable_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/nullable" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body     
    
    
    
    
    
    
                Child_with_nullable.to_yojson
    
    
    
 child_with_nullable_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_query_parameter_collection_format ~pipe ~ioutil ~http ~url ~context ~allow_empty ?(language = []) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/test-query-parameters" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param_list uri "pipe"     (Stdlib.List.map     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
)
    
    
    
    
    
    
    
    
    
    
    
    
 pipe in
    let uri = Request.add_query_param_list uri "ioutil"     (Stdlib.List.map     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
)
    
    
    
    
    
    
    
    
    
    
    
    
 ioutil in
    let uri = Request.add_query_param_list uri "http"     (Stdlib.List.map     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
)
    
    
    
    
    
    
    
    
    
    
    
    
 http in
    let uri = Request.add_query_param_list uri "url"     (Stdlib.List.map     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
)
    
    
    
    
    
    
    
    
    
    
    
    
 url in
    let uri = Request.add_query_param_list uri "context"     (Stdlib.List.map     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
)
    
    
    
    
    
    
    
    
    
    
    
    
 context in
    let uri = Request.add_query_param_exploded_form_object uri "language" 
        
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        

    
    
    
    
    
    
    
    
    
    
    
    
 language in
    let uri = Request.add_query_param uri "allowEmpty"     
    
    
    
    
    
    
    
    
    (fun x -> x)
    
    
        
        
 allow_empty in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let test_string_map_reference ~request_body =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fake/stringMap-reference" in
    let headers = Request.default_headers in
    let body = Request.
        
        write_as_json_body         (JsonSupport.of_map_of     JsonSupport.of_string
    
    
    
    
    
    
    
    
    
)
 request_body
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

