/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestEnumParametersBody model module.
 * @module model/TestEnumParametersBody
 * @version 1.0.0
 */
class TestEnumParametersBody {
    /**
     * Constructs a new <code>TestEnumParametersBody</code>.
     * @alias module:model/TestEnumParametersBody
     */
    constructor() { 
        
        TestEnumParametersBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestEnumParametersBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestEnumParametersBody} obj Optional instance to populate.
     * @return {module:model/TestEnumParametersBody} The populated <code>TestEnumParametersBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestEnumParametersBody();

            if (data.hasOwnProperty('enum_form_string_array')) {
                obj['enum_form_string_array'] = ApiClient.convertToType(data['enum_form_string_array'], ['String']);
            }
            if (data.hasOwnProperty('enum_form_string')) {
                obj['enum_form_string'] = ApiClient.convertToType(data['enum_form_string'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Form parameter enum test (string array)
 * @member {Array.<module:model/TestEnumParametersBody.EnumFormStringArrayEnum>} enum_form_string_array
 */
TestEnumParametersBody.prototype['enum_form_string_array'] = undefined;

/**
 * Form parameter enum test (string)
 * @member {module:model/TestEnumParametersBody.EnumFormStringEnum} enum_form_string
 * @default '-efg'
 */
TestEnumParametersBody.prototype['enum_form_string'] = '-efg';





/**
 * Allowed values for the <code>enumFormStringArray</code> property.
 * @enum {String}
 * @readonly
 */
TestEnumParametersBody['EnumFormStringArrayEnum'] = {

    /**
     * value: ">"
     * @const
     */
    "GREATER_THAN": ">",

    /**
     * value: "$"
     * @const
     */
    "DOLLAR": "$"
};


/**
 * Allowed values for the <code>enum_form_string</code> property.
 * @enum {String}
 * @readonly
 */
TestEnumParametersBody['EnumFormStringEnum'] = {

    /**
     * value: "_abc"
     * @const
     */
    "_abc": "_abc",

    /**
     * value: "-efg"
     * @const
     */
    "-efg": "-efg",

    /**
     * value: "(xyz)"
     * @const
     */
    "(xyz)": "(xyz)"
};



export default TestEnumParametersBody;

