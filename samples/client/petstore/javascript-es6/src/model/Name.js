/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Name model module.
 * @module model/Name
 * @version 1.0.0
 */
class Name {
    /**
     * Constructs a new <code>Name</code>.
     * Model for testing model name same as property name
     * @alias module:model/Name
     * @param name {Number} 
     */
    constructor(name) { 
        
        Name.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Name</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Name} obj Optional instance to populate.
     * @return {module:model/Name} The populated <code>Name</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Name();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'Number');
            }
            if (data.hasOwnProperty('snake_case')) {
                obj['snake_case'] = ApiClient.convertToType(data['snake_case'], 'Number');
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], 'String');
            }
            if (data.hasOwnProperty('123Number')) {
                obj['123Number'] = ApiClient.convertToType(data['123Number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Name</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Name</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Name.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['property'] && !(typeof data['property'] === 'string' || data['property'] instanceof String)) {
            throw new Error("Expected the field `property` to be a primitive type in the JSON string but got " + data['property']);
        }

        return true;
    }


}

Name.RequiredProperties = ["name"];

/**
 * @member {Number} name
 */
Name.prototype['name'] = undefined;

/**
 * @member {Number} snake_case
 */
Name.prototype['snake_case'] = undefined;

/**
 * @member {String} property
 */
Name.prototype['property'] = undefined;

/**
 * @member {Number} 123Number
 */
Name.prototype['123Number'] = undefined;






export default Name;

