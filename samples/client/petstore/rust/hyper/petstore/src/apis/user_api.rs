/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use async_trait::async_trait;
#[allow(unused_imports)]
use std::option::Option;
use std::sync::Arc;

use hyper;
use serde_json;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct UserApiClient<C: hyper::client::connect::Connect> {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + 'static> UserApiClient<C> {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> UserApiClient<C> {
        UserApiClient {
            configuration,
        }
    }
}

#[async_trait]
pub trait UserApi {
    async fn create_user(&self, body: crate::models::User) -> Result<(), Error<serde_json::Value>>;
    async fn create_users_with_array_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<serde_json::Value>>;
    async fn create_users_with_list_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<serde_json::Value>>;
    async fn delete_user(&self, username: &str) -> Result<(), Error<serde_json::Value>>;
    async fn get_user_by_name(&self, username: &str) -> Result<crate::models::User, Error<serde_json::Value>>;
    async fn login_user(&self, username: &str, password: &str) -> Result<String, Error<serde_json::Value>>;
    async fn logout_user(&self, ) -> Result<(), Error<serde_json::Value>>;
    async fn update_user(&self, username: &str, body: crate::models::User) -> Result<(), Error<serde_json::Value>>;
}

#[async_trait]
impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> UserApi for UserApiClient<C> {
    async fn create_user(&self, body: crate::models::User) -> Result<(), Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/user".to_string())
        ;
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn create_users_with_array_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/user/createWithArray".to_string())
        ;
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn create_users_with_list_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/user/createWithList".to_string())
        ;
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn delete_user(&self, username: &str) -> Result<(), Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/user/{username}".to_string())
        ;
        req = req.with_path_param("username".to_string(), username.to_string());
        req = req.returns_nothing();

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn get_user_by_name(&self, username: &str) -> Result<crate::models::User, Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/user/{username}".to_string())
        ;
        req = req.with_path_param("username".to_string(), username.to_string());

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn login_user(&self, username: &str, password: &str) -> Result<String, Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/user/login".to_string())
        ;
        req = req.with_query_param("username".to_string(), username.to_string());
        req = req.with_query_param("password".to_string(), password.to_string());

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn logout_user(&self, ) -> Result<(), Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/user/logout".to_string())
        ;
        req = req.returns_nothing();

        req.execute(Arc::clone(&self.configuration)).await
    }

    async fn update_user(&self, username: &str, body: crate::models::User) -> Result<(), Error<serde_json::Value>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/user/{username}".to_string())
        ;
        req = req.with_path_param("username".to_string(), username.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(Arc::clone(&self.configuration)).await
    }

}
