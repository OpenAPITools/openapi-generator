/*
 * Rust client test spec
 *
 * Special testing for the Rust client generator
 *
 * The version of the OpenAPI document: 1.0.7
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TypeTesting : Test handling of differing types (see \\#3463)



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypeTesting {
    #[serde(rename = "integer", skip_serializing_if = "Option::is_none")]
    pub integer: Option<i32>,
    #[serde(rename = "long", skip_serializing_if = "Option::is_none")]
    pub long: Option<i64>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<f32>,
    #[serde(rename = "float", skip_serializing_if = "Option::is_none")]
    pub float: Option<f32>,
    #[serde(rename = "double", skip_serializing_if = "Option::is_none")]
    pub double: Option<f64>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

impl TypeTesting {
    /// Test handling of differing types (see \\#3463)
    pub fn new() -> TypeTesting {
        TypeTesting {
            integer: None,
            long: None,
            number: None,
            float: None,
            double: None,
            uuid: None,
        }
    }
}


