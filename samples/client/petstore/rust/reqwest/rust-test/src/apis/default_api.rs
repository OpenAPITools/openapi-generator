/*
 * Rust client test spec
 *
 * Special testing for the Rust client generator
 *
 * The version of the OpenAPI document: 1.0.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use async_trait::async_trait;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::sync::Arc;

use reqwest;

use bytes::Bytes;
use futures::{Stream, TryStreamExt};
use tokio::io::AsyncRead;
use tokio_util::codec::{BytesCodec, FramedRead};

use super::{Error, configuration};

#[allow(dead_code)]
fn into_bytes_stream<R>(r: R) -> impl Stream<Item=Result<Bytes, std::io::Error>>
    where
        R: AsyncRead,
{
    FramedRead::new(r, BytesCodec::new())
        .map_ok(|bytes| bytes.freeze())
}

pub struct DefaultApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl DefaultApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> DefaultApiClient {
        DefaultApiClient {
            configuration,
        }
    }
}

#[async_trait]
pub trait DefaultApi {
    async fn dummy_get(&self, ) -> Result<(), Error>;
}

#[async_trait]
impl DefaultApi for DefaultApiClient {
    async fn dummy_get(&self, ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/dummy", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req).await?.error_for_status()?;
        Ok(())
    }

}
