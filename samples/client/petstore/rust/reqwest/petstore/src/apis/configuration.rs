/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

pub struct Configuration<A: ApiKey> {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<A>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

pub trait ApiKey {
    fn get_prefix(&self, name: &str) -> Option<String>,
    fn get_key(&self, name: &str) -> Option<String>,
}

impl ApiKey for String {
    fn get_prefix(&self, _: &str) -> Option<String> {
      None
    }
    fn get_key(&self, _: &str) -> Option<String> {
      self.cloned()
    }
}

impl ApiKey for std::collection::HashMap<String, String> {
    fn get_prefix(&self, _: &str) -> Option<String> {
      None
    }
    fn get_key(&self, name: &str) -> Option<String> {
      self.get(name).cloned()
    }
}

impl<A: ApiKey> Configuration<A> {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl<A: ApiKey> Default for Configuration<A> {
    fn default() -> Self {
        Configuration {
            base_path: "http://petstore.swagger.io/v2".to_owned(),
            user_agent: Some("OpenAPI-Generator/1.0.0/rust".to_owned()),
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
