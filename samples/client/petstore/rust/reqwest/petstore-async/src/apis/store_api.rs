/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;
use std::borrow::Borrow;
use std::option::Option;

use reqwest;

use super::{Error, configuration};

/// struct for passing parameters to the method `delete_order`
#[derive(Clone, Debug)]
pub struct DeleteOrderParams {
    /// ID of the order that needs to be deleted
    pub order_id: String
}

/// struct for passing parameters to the method `get_order_by_id`
#[derive(Clone, Debug)]
pub struct GetOrderByIdParams {
    /// ID of pet that needs to be fetched
    pub order_id: i64
}

/// struct for passing parameters to the method `place_order`
#[derive(Clone, Debug)]
pub struct PlaceOrderParams {
    /// order placed for purchasing the pet
    pub body: crate::models::Order
}


    pub async fn delete_order(configuration: &configuration::Configuration, params: DeleteOrderParams) -> Result<(), Error> {
        // unbox the parameters
        let order_id = params.order_id;

        let client = &configuration.client;

        let uri_str = format!("{}/store/order/{orderId}", configuration.base_path, orderId=crate::apis::urlencode(order_id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        client.execute(req).await?.error_for_status()?;
        Ok(())
    }

    pub async fn get_inventory(configuration: &configuration::Configuration) -> Result<::std::collections::HashMap<String, i32>, Error> {
        // unbox the parameters

        let client = &configuration.client;

        let uri_str = format!("{}/store/inventory", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("api_key", val);
        };

        let req = req_builder.build()?;
        Ok(client.execute(req).await?.error_for_status()?.json::<::std::collections::HashMap<String, i32>>().await?)
    }

    pub async fn get_order_by_id(configuration: &configuration::Configuration, params: GetOrderByIdParams) -> Result<crate::models::Order, Error> {
        // unbox the parameters
        let order_id = params.order_id;

        let client = &configuration.client;

        let uri_str = format!("{}/store/order/{orderId}", configuration.base_path, orderId=order_id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        Ok(client.execute(req).await?.error_for_status()?.json::<crate::models::Order>().await?)
    }

    pub async fn place_order(configuration: &configuration::Configuration, params: PlaceOrderParams) -> Result<crate::models::Order, Error> {
        // unbox the parameters
        let body = params.body;

        let client = &configuration.client;

        let uri_str = format!("{}/store/order", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        let req = req_builder.build()?;
        Ok(client.execute(req).await?.error_for_status()?.json::<crate::models::Order>().await?)
    }

