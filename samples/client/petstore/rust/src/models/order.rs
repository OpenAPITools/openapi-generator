/* 
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Order : An order for a pets from the pet store

#[derive(Debug, Serialize, Deserialize)]
pub struct Order {
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "petId")]
  pet_id: Option<i64>,
  #[serde(rename = "quantity")]
  quantity: Option<i32>,
  #[serde(rename = "shipDate")]
  ship_date: Option<String>,
  /// Order Status
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "complete")]
  complete: Option<bool>
}

impl Order {
  /// An order for a pets from the pet store
  pub fn new() -> Order {
    Order {
      id: None,
      pet_id: None,
      quantity: None,
      ship_date: None,
      status: None,
      complete: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Order {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_pet_id(&mut self, pet_id: i64) {
    self.pet_id = Some(pet_id);
  }

  pub fn with_pet_id(mut self, pet_id: i64) -> Order {
    self.pet_id = Some(pet_id);
    self
  }

  pub fn pet_id(&self) -> Option<&i64> {
    self.pet_id.as_ref()
  }

  pub fn reset_pet_id(&mut self) {
    self.pet_id = None;
  }

  pub fn set_quantity(&mut self, quantity: i32) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: i32) -> Order {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&i32> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

  pub fn set_ship_date(&mut self, ship_date: String) {
    self.ship_date = Some(ship_date);
  }

  pub fn with_ship_date(mut self, ship_date: String) -> Order {
    self.ship_date = Some(ship_date);
    self
  }

  pub fn ship_date(&self) -> Option<&String> {
    self.ship_date.as_ref()
  }

  pub fn reset_ship_date(&mut self) {
    self.ship_date = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> Order {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_complete(&mut self, complete: bool) {
    self.complete = Some(complete);
  }

  pub fn with_complete(mut self, complete: bool) -> Order {
    self.complete = Some(complete);
    self
  }

  pub fn complete(&self) -> Option<&bool> {
    self.complete.as_ref()
  }

  pub fn reset_complete(&mut self) {
    self.complete = None;
  }

}



