# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.exceptions import (
    ApiKeyError,
    ApiTypeError,
    ApiValueError,
)
from petstore_api.model_utils import (  # noqa: F401
    OpenApiModel,
    date,
    datetime,
    file_type,
    get_simple_class,
    int,
    model_to_dict,
    none_type,
    str,
    type_error_message,
    validate_and_convert_types
)
from petstore_api.models.outer_enum import OuterEnum


class EnumTest(OpenApiModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional, required variables, and
                            additional properties.
    """
    openapi_types = {
        'enum_string': [str],  # noqa: E501
        'enum_string_required': [str],  # noqa: E501
        'enum_integer': [int],  # noqa: E501
        'enum_number': [float],  # noqa: E501
        'outer_enum': [OuterEnum]  # noqa: E501
    }
    attribute_map = {
        'enum_string': 'enum_string',  # noqa: E501
        'enum_string_required': 'enum_string_required',  # noqa: E501
        'enum_integer': 'enum_integer',  # noqa: E501
        'enum_number': 'enum_number',  # noqa: E501
        'outer_enum': 'outerEnum'  # noqa: E501
    }

    def __init__(self, enum_string_required, _check_type=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """EnumTest - a model defined in OpenAPI

        Args:
            enum_string_required (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            enum_string (str): [optional]  # noqa: E501
            enum_integer (int): [optional]  # noqa: E501
            enum_number (float): [optional]  # noqa: E501
            outer_enum (OuterEnum): [optional]  # noqa: E501
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        # assign using .var_name to check against nullable and enums
        self.enum_string_required = enum_string_required
        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_types_mixed = self.openapi_types[name]
        else:
            path_to_item = []
            if self._path_to_item:
                path_to_item.extend(self._path_to_item)
            path_to_item.append(name)
            raise ApiKeyError(
                "{0} has no key '{1}'".format(type(self).__name__, name),
                path_to_item
            )

        path_to_item = []
        if self._path_to_item:
            path_to_item.extend(self._path_to_item)
        path_to_item.append(name)

        if get_simple_class(name) != str:
            error_msg = type_error_message(
                var_name=name,
                var_value=name,
                valid_classes=(str,),
                key_type=True
            )
            raise ApiTypeError(
                error_msg,
                path_to_item=path_to_item,
                valid_classes=(str,),
                key_type=True
            )

        if check_type:
            self._data_store[name] = validate_and_convert_types(
                value, required_types_mixed, path_to_item,
                configuration=self._configuration)
        else:
            self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]

        path_to_item = []
        if self._path_to_item:
            path_to_item.extend(self._path_to_item)
        path_to_item.append(name)
        raise ApiKeyError(
            "{0} has no key '{1}'".format(type(self).__name__, name),
            [name]
        )

    @property
    def enum_string(self):
        """Gets the enum_string of this EnumTest.  # noqa: E501


        Returns:
            (str): The enum_string of this EnumTest.  # noqa: E501
        """
        return self._data_store.get('enum_string')

    @enum_string.setter
    def enum_string(
            self, enum_string):
        """Sets the enum_string of this EnumTest.


        Returns:
            (str): The enum_string of this EnumTest.  # noqa: E501
        """
        allowed_values = ["UPPER", "lower", ""]  # noqa: E501
        if enum_string not in allowed_values:
            raise ApiValueError(
                "Invalid value for `enum_string` ({0}), must be one of {1}"  # noqa: E501
                .format(enum_string, allowed_values)
            )

        self.__setitem__(
            'enum_string',
            enum_string
        )

    @property
    def enum_string_required(self):
        """Gets the enum_string_required of this EnumTest.  # noqa: E501


        Returns:
            (str): The enum_string_required of this EnumTest.  # noqa: E501
        """
        return self._data_store.get('enum_string_required')

    @enum_string_required.setter
    def enum_string_required(
            self, enum_string_required):
        """Sets the enum_string_required of this EnumTest.


        Returns:
            (str): The enum_string_required of this EnumTest.  # noqa: E501
        """
        if enum_string_required is None:
            raise ApiValueError("Invalid value for `enum_string_required`, must not be `None`")  # noqa: E501
        allowed_values = ["UPPER", "lower", ""]  # noqa: E501
        if enum_string_required not in allowed_values:
            raise ApiValueError(
                "Invalid value for `enum_string_required` ({0}), must be one of {1}"  # noqa: E501
                .format(enum_string_required, allowed_values)
            )

        self.__setitem__(
            'enum_string_required',
            enum_string_required
        )

    @property
    def enum_integer(self):
        """Gets the enum_integer of this EnumTest.  # noqa: E501


        Returns:
            (int): The enum_integer of this EnumTest.  # noqa: E501
        """
        return self._data_store.get('enum_integer')

    @enum_integer.setter
    def enum_integer(
            self, enum_integer):
        """Sets the enum_integer of this EnumTest.


        Returns:
            (int): The enum_integer of this EnumTest.  # noqa: E501
        """
        allowed_values = [1, -1]  # noqa: E501
        if enum_integer not in allowed_values:
            raise ApiValueError(
                "Invalid value for `enum_integer` ({0}), must be one of {1}"  # noqa: E501
                .format(enum_integer, allowed_values)
            )

        self.__setitem__(
            'enum_integer',
            enum_integer
        )

    @property
    def enum_number(self):
        """Gets the enum_number of this EnumTest.  # noqa: E501


        Returns:
            (float): The enum_number of this EnumTest.  # noqa: E501
        """
        return self._data_store.get('enum_number')

    @enum_number.setter
    def enum_number(
            self, enum_number):
        """Sets the enum_number of this EnumTest.


        Returns:
            (float): The enum_number of this EnumTest.  # noqa: E501
        """
        allowed_values = [1.1, -1.2]  # noqa: E501
        if enum_number not in allowed_values:
            raise ApiValueError(
                "Invalid value for `enum_number` ({0}), must be one of {1}"  # noqa: E501
                .format(enum_number, allowed_values)
            )

        self.__setitem__(
            'enum_number',
            enum_number
        )

    @property
    def outer_enum(self):
        """Gets the outer_enum of this EnumTest.  # noqa: E501


        Returns:
            (OuterEnum): The outer_enum of this EnumTest.  # noqa: E501
        """
        return self._data_store.get('outer_enum')

    @outer_enum.setter
    def outer_enum(
            self, outer_enum):
        """Sets the outer_enum of this EnumTest.


        Returns:
            (OuterEnum): The outer_enum of this EnumTest.  # noqa: E501
        """

        self.__setitem__(
            'outer_enum',
            outer_enum
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
