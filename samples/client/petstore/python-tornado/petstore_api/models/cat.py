# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from dateutil.parser import parse as dateutil_parser  # noqa: F401
import pprint
import re  # noqa: F401

import six


class Cat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'color': 'str',
        'declawed': 'bool'
    }

    attribute_map = {
        'class_name': 'className',
        'color': 'color',
        'declawed': 'declawed'
    }

    def __init__(self, class_name, declawed=None, color=None):  # noqa: E501
        """Cat - a model defined in OpenAPI

        Args:
            class_name (str):

        Keyword Args:  # noqa: E501
            declawed (bool): [optional]  # noqa: E501
            color (str): [optional] if omitted the server will use the default value of 'red'  # noqa: E501
        """

        self._class_name = None
        self._color = None
        self._declawed = None
        self.discriminator = None

        self.class_name = class_name
        if color is not None:
            self.color = color
        if declawed is not None:
            self.declawed = declawed

    @property
    def class_name(self):
        """Gets the class_name of this Cat.  # noqa: E501


        :return: The class_name of this Cat.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this Cat.


        :param class_name: The class_name of this Cat.  # noqa: E501
        :type: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def color(self):
        """Gets the color of this Cat.  # noqa: E501


        :return: The color of this Cat.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Cat.


        :param color: The color of this Cat.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def declawed(self):
        """Gets the declawed of this Cat.  # noqa: E501


        :return: The declawed of this Cat.  # noqa: E501
        :rtype: bool
        """
        return self._declawed

    @declawed.setter
    def declawed(self, declawed):
        """Sets the declawed of this Cat.


        :param declawed: The declawed of this Cat.  # noqa: E501
        :type: bool
        """

        self._declawed = declawed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
