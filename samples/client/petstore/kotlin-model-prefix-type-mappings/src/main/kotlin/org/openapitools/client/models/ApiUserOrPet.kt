/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ApiCategory
import org.openapitools.client.models.ApiPet
import org.openapitools.client.models.ApiTag
import org.openapitools.client.models.ApiUser

import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.TypeAdapter
import com.google.gson.TypeAdapterFactory
import com.google.gson.reflect.TypeToken
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.annotations.SerializedName
import java.io.IOException

/**
 * 
 *
 */


data class ApiUserOrPet(var actualInstance: Any? = null) {

    class CustomTypeAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
            if (!ApiUserOrPet::class.java.isAssignableFrom(type.rawType)) {
                return null // this class only serializes 'ApiUserOrPet' and its subtypes
            }
            val elementAdapter = gson.getAdapter(JsonElement::class.java)
            val adapterApiUser = gson.getDelegateAdapter(this, TypeToken.get(ApiUser::class.java))
            val adapterApiPet = gson.getDelegateAdapter(this, TypeToken.get(ApiPet::class.java))

            @Suppress("UNCHECKED_CAST")
            return object : TypeAdapter<ApiUserOrPet?>() {
                @Throws(IOException::class)
                override fun write(out: JsonWriter,value: ApiUserOrPet?) {
                    if (value?.actualInstance == null) {
                        elementAdapter.write(out, null)
                        return
                    }

                    // check if the actual instance is of the type `ApiUser`
                    if (value.actualInstance is ApiUser) {
                        val element = adapterApiUser.toJsonTree(value.actualInstance as ApiUser?)
                        elementAdapter.write(out, element)
                        return
                    }
                    // check if the actual instance is of the type `ApiPet`
                    if (value.actualInstance is ApiPet) {
                        val element = adapterApiPet.toJsonTree(value.actualInstance as ApiPet?)
                        elementAdapter.write(out, element)
                        return
                    }
                    throw IOException("Failed to serialize as the type doesn't match oneOf schemas: ApiPet, ApiUser")
                }

                @Throws(IOException::class)
                override fun read(jsonReader: JsonReader): ApiUserOrPet {
                    val jsonElement = elementAdapter.read(jsonReader)
                    var match = 0
                    val errorMessages = ArrayList<String>()
                    var actualAdapter: TypeAdapter<*> = elementAdapter

                    // deserialize ApiUser
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ApiUser.validateJsonElement(jsonElement)
                        actualAdapter = adapterApiUser
                        match++
                        //log.log(Level.FINER, "Input data matches schema 'ApiUser'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ApiUser failed with `%s`.", e.message))
                        //log.log(Level.FINER, "Input data does not match schema 'ApiUser'", e)
                    }
                    // deserialize ApiPet
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ApiPet.validateJsonElement(jsonElement)
                        actualAdapter = adapterApiPet
                        match++
                        //log.log(Level.FINER, "Input data matches schema 'ApiPet'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ApiPet failed with `%s`.", e.message))
                        //log.log(Level.FINER, "Input data does not match schema 'ApiPet'", e)
                    }

                    if (match == 1) {
                        val ret = ApiUserOrPet()
                        ret.actualInstance = actualAdapter.fromJsonTree(jsonElement)
                        return ret
                    }

                    throw IOException(String.format("Failed deserialization for ApiUserOrPet: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()))
                }
            }.nullSafe() as TypeAdapter<T>
        }
    }
}
