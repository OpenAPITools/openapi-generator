/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <sstream>
#include <string>
#include <map>

#include <boost/lexical_cast.hpp>
#include <boost/beast/http/status.hpp>
#include <boost/format.hpp>

#include "StoreApi.h"


namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;


StoreApiException::StoreApiException(boost::beast::http::status statusCode, std::string what)
  : m_status(statusCode),
    m_what(what)
{
}

boost::beast::http::status StoreApiException::getStatus() const
{
    return m_status;
}

const char* StoreApiException::what() const noexcept
{
    return m_what.c_str();
}


void
StoreApi::deleteOrder(
    const std::string& orderId) {
    std::string requestBody;
    std::string path = m_context + "/store/order/%1%/";;
    std::map<std::string, std::string> headers;
    // path params
    const auto formattedPath = boost::format(path) % orderId;
    path = formattedPath.str();

    deleteOrder_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("DELETE",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        deleteOrder_handleStdException(e);
    }
    catch(...) {
        deleteOrder_handleUncaughtException();
    }
}

std::shared_ptr<Order>
StoreApi::getOrderById(
    const int64_t& orderId) {
    std::string requestBody;
    std::string path = m_context + "/store/order/%1%/";
    std::map<std::string, std::string> headers;
    // path params
    const auto formattedPath = boost::format(path) % orderId;
    path = formattedPath.str();

    getOrderById_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("GET",
                path,
                requestBody,
                headers);
    }
    catch(const std::exception& e) {
        getOrderById_handleStdException(e);
    }
    catch(...) {
        getOrderById_handleUncaughtException();
    }

    std::shared_ptr<Order> result = std::make_shared<Order>();
    if (statusCode == boost::beast::http::status(200)) {
        result->fromJsonString(responseBody);
    }
    if (statusCode == boost::beast::http::status(400)) {
        throw StoreApiException(statusCode, "Invalid ID supplied");
    }
    if (statusCode == boost::beast::http::status(404)) {
        throw StoreApiException(statusCode, "Order not found");
    }

    return result;
}

void StoreApi::deleteOrder_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void StoreApi::deleteOrder_handleStdException(
    const std::exception& e) {
    throw e;
}

void StoreApi::deleteOrder_handleUncaughtException() {
    throw;
}

void StoreApi::getOrderById_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void StoreApi::getOrderById_handleStdException(
    const std::exception& e) {
    throw e;
}
void StoreApi::getOrderById_handleUncaughtException() {
    throw;
}
std::map<std::string, int32_t>
StoreApi::getInventory(
    ) {
    std::string requestBody;
    std::string path = m_context + "/store/inventory/";;
    std::map<std::string, std::string> headers;

    getInventory_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("GET",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        getInventory_handleStdException(e);
    }
    catch(...) {
        getInventory_handleUncaughtException();
    }
    std::map<std::string, int32_t> result{};
        /*TODO std::map<std::string, int32_t>
        auto result = createstd::mapVectorFromJsonString(responseBody);
        */
    return result;
}
void StoreApi::getInventory_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void StoreApi::getInventory_handleStdException(
    const std::exception& e) {
    throw e;
}

void StoreApi::getInventory_handleUncaughtException() {
    throw;
}

std::shared_ptr<Order>
StoreApi::placeOrder(
    const std::shared_ptr<Order>& order) {
    std::string requestBody;
    std::string path = m_context + "/store/order/";;
    std::map<std::string, std::string> headers;
    // Body params
    requestBody = order->toJsonString();

    placeOrder_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("POST",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        placeOrder_handleStdException(e);
    }
    catch(...) {
        placeOrder_handleUncaughtException();
    }
    std::shared_ptr<Order> result{};
        result->fromJsonString(responseBody);
    return result;
}
void StoreApi::placeOrder_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void StoreApi::placeOrder_handleStdException(
    const std::exception& e) {
    throw e;
}

void StoreApi::placeOrder_handleUncaughtException() {
    throw;
}


}  // namespace org
}  // namespace openapitools
}  // namespace client
}  // namespace api
