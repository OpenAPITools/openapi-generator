/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <sstream>
#include <string>
#include <map>

#include <boost/lexical_cast.hpp>
#include <boost/beast/http/status.hpp>
#include <boost/format.hpp>

#include "UserApi.h"


namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;


UserApiException::UserApiException(boost::beast::http::status statusCode, std::string what)
  : m_status(statusCode),
    m_what(what)
{
}

boost::beast::http::status UserApiException::getStatus() const
{
    return m_status;
}

const char* UserApiException::what() const noexcept
{
    return m_what.c_str();
}


void
UserApi::createUser(
    const std::shared_ptr<User>& user) {
    std::string requestBody;
    std::string path = m_context + "user";;
    std::map<std::string, std::string> headers;
    // Body params
    requestBody = user->toJsonString();

    createUser_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("POST",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        createUser_handleStdException(e);
    }
    catch(...) {
        createUser_handleUncaughtException();
    }
}
void UserApi::createUser_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::createUser_handleStdException(
    const std::exception& e) {
    throw e;
}

void UserApi::createUser_handleUncaughtException() {
    throw;
}

void
UserApi::createUsersWithArrayInput(
    const std::vector<std::shared_ptr<User>>& user) {
    std::string requestBody;
    std::string path = m_context + "/user/createWithArray/";;
    std::map<std::string, std::string> headers;
    // Body params
    requestBody = createJsonStringFromUserVector(user);

    createUsersWithArrayInput_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("POST",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        createUsersWithArrayInput_handleStdException(e);
    }
    catch(...) {
        createUsersWithArrayInput_handleUncaughtException();
    }
}
void UserApi::createUsersWithArrayInput_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::createUsersWithArrayInput_handleStdException(
    const std::exception& e) {
    throw e;
}

void UserApi::createUsersWithArrayInput_handleUncaughtException() {
    throw;
}

void
UserApi::createUsersWithListInput(
    const std::vector<std::shared_ptr<User>>& user) {
    std::string requestBody;
    std::string path = m_context + "/user/createWithList/";;
    std::map<std::string, std::string> headers;
    // Body params
    requestBody = createJsonStringFromUserVector(user);

    createUsersWithListInput_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("POST",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        createUsersWithListInput_handleStdException(e);
    }
    catch(...) {
        createUsersWithListInput_handleUncaughtException();
    }
}
void UserApi::createUsersWithListInput_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::createUsersWithListInput_handleStdException(
    const std::exception& e) {
    throw e;
}

void UserApi::createUsersWithListInput_handleUncaughtException() {
    throw;
}

void
UserApi::deleteUser(
    const std::string& username) {
    std::string requestBody;
    std::string path = m_context + "/user/%1%";;
    std::map<std::string, std::string> headers;
    // path params
    const auto formattedPath = boost::format(path) % username;
    path = formattedPath.str();

    deleteUser_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("DELETE",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        deleteUser_handleStdException(e);
    }
    catch(...) {
        deleteUser_handleUncaughtException();
    }
}

std::shared_ptr<User>
UserApi::getUserByName(
    const std::string& username) {
    std::string requestBody;
    std::string path = m_context + "/user/%1%";
    std::map<std::string, std::string> headers;
    // path params
    const auto formattedPath = boost::format(path) % username;
    path = formattedPath.str();

    getUserByName_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("GET",
                path,
                requestBody,
                headers);
    }
    catch(const std::exception& e) {
        getUserByName_handleStdException(e);
    }
    catch(...) {
        getUserByName_handleUncaughtException();
    }

    std::shared_ptr<User> result = std::make_shared<User>();
    if (statusCode == boost::beast::http::status(200)) {
        result->fromJsonString(responseBody);
    }
    if (statusCode == boost::beast::http::status(400)) {
        throw UserApiException(statusCode, "Invalid username supplied");
    }
    if (statusCode == boost::beast::http::status(404)) {
        throw UserApiException(statusCode, "User not found");
    }

    return result;
}


void
UserApi::updateUser(
    const std::string& username, const std::shared_ptr<User>& user) {
    std::string requestBody;
    std::string path = m_context + "/user/%1%";
    std::map<std::string, std::string> headers;
    // Body params
    std::stringstream usernameStream;
    usernameStream << username;
    requestBody = usernameStream.str();
    requestBody = user->toJsonString();
    // path params
    const auto formattedPath = boost::format(path) % username;
    path = formattedPath.str();

    updateUser_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("PUT",
                path,
                requestBody,
                headers);
    }
    catch(const std::exception& e) {
        updateUser_handleStdException(e);
    }
    catch(...) {
        updateUser_handleUncaughtException();
    }

    if (statusCode == boost::beast::http::status(400)) {
        throw UserApiException(statusCode, "Invalid user supplied");
    }
    if (statusCode == boost::beast::http::status(404)) {
        throw UserApiException(statusCode, "User not found");
    }

}

void UserApi::deleteUser_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::deleteUser_handleStdException(
    const std::exception& e) {
    throw e;
}

void UserApi::deleteUser_handleUncaughtException() {
    throw;
}

void UserApi::getUserByName_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::getUserByName_handleStdException(
    const std::exception& e) {
    throw e;
}
void UserApi::getUserByName_handleUncaughtException() {
    throw;
}
void UserApi::updateUser_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::updateUser_handleStdException(
    const std::exception& e) {
    throw e;
}
void UserApi::updateUser_handleUncaughtException() {
    throw;
}
std::string
UserApi::loginUser(
    const std::string& username, const std::string& password) {
    std::string requestBody;
    std::string path = m_context + "/user/login/";;
    std::map<std::string, std::string> headers;
    // query params
    std::stringstream queryParamStream;
    queryParamStream << '?';
    queryParamStream << "username=" << username;
    queryParamStream << '&';
    queryParamStream << "password=" << password;
    
    path += queryParamStream.str();

    loginUser_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("GET",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        loginUser_handleStdException(e);
    }
    catch(...) {
        loginUser_handleUncaughtException();
    }
    std::string result{};
        result = responseBody;
    return result;
}
void UserApi::loginUser_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::loginUser_handleStdException(
    const std::exception& e) {
    throw e;
}

void UserApi::loginUser_handleUncaughtException() {
    throw;
}

void
UserApi::logoutUser(
    ) {
    std::string requestBody;
    std::string path = m_context + "/user/logout/";;
    std::map<std::string, std::string> headers;

    logoutUser_addDefaultHeaders(headers);

    auto statusCode = boost::beast::http::status::unknown;
    std::string responseBody;
    try {
        std::tie(statusCode, responseBody) =
            m_client->execute("GET",
                              path,
                              requestBody,
                              headers);
    }
    catch(const std::exception& e) {
        logoutUser_handleStdException(e);
    }
    catch(...) {
        logoutUser_handleUncaughtException();
    }
}
void UserApi::logoutUser_addDefaultHeaders(std::map<std::string, std::string>& headers) {
    static const std::map<std::string, std::string> defaultHeaders{std::make_pair("Accept",
                                                                                  "application/json"),
                                                                   std::make_pair("Content-Type",
                                                                                  "application/json;charset=UTF-8")};
    headers.insert(defaultHeaders.cbegin(), defaultHeaders.cend());
}

void UserApi::logoutUser_handleStdException(
    const std::exception& e) {
    throw e;
}

void UserApi::logoutUser_handleUncaughtException() {
    throw;
}


}  // namespace org
}  // namespace openapitools
}  // namespace client
}  // namespace api
