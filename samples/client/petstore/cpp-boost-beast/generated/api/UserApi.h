/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserApi.h
 *
 * 
 */

#ifndef BOOST_BEAST_OPENAPI_CLIENT_UserApi_
#define BOOST_BEAST_OPENAPI_CLIENT_UserApi_

#include <memory>
#include <string>
#include <exception>

#include <boost/beast/core.hpp>

#include "api/HttpClient.h"

#include "User.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

///
/// Exception to flag problems in the api's
///
class UserApiException: public std::exception
{
public:
    UserApiException(boost::beast::http::status statusCode, std::string what);

    boost::beast::http::status getStatus() const;
    const char* what() const noexcept override;

private:
    boost::beast::http::status m_status;
    std::string m_what;
};


class UserApi {

public:
    UserApi(
        std::shared_ptr<HttpClient>& client,
        const std::string& context = "/v2")
      : m_client(client),
        m_context(context)
    {}

    virtual ~UserApi() = default;

    /// <summary>
    /// Create user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    virtual void
    createUser(
        const std::shared_ptr<User>& user);

    /// <summary>
    /// Creates list of users with given input array
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void
    createUsersWithArrayInput(
        const std::vector<std::shared_ptr<User>>& user);

    /// <summary>
    /// Creates list of users with given input array
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void
    createUsersWithListInput(
        const std::vector<std::shared_ptr<User>>& user);

    /// <summary>
    /// Delete user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    virtual void
    deleteUser(
        const std::string& username);

    /// <summary>
    /// Get user by user name
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual std::shared_ptr<User>
    getUserByName(
        const std::string& username);
    /// <summary>
    /// Updated user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    virtual void
    updateUser(
        const std::string& username, const std::shared_ptr<User>& user);
    /// <summary>
    /// Logs user into the system
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual std::string
    loginUser(
        const std::string& username, const std::string& password);

    /// <summary>
    /// Logs out current logged in user session
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void
    logoutUser(
        );


protected:
    virtual std::string base64encode(const std::string& str);
    virtual void setPreferredMediaTypeHeader(
        std::map<std::string, std::string>& headers, const std::string& headerName, const std::vector<std::string>& contentTypes);

    virtual void createUser_handleStdException(
        const std::exception& e);
    virtual void createUser_handleUncaughtException();

    virtual void createUsersWithArrayInput_handleStdException(
        const std::exception& e);
    virtual void createUsersWithArrayInput_handleUncaughtException();

    virtual void createUsersWithListInput_handleStdException(
        const std::exception& e);
    virtual void createUsersWithListInput_handleUncaughtException();

    virtual void deleteUser_handleStdException(
        const std::exception& e);
    virtual void deleteUser_handleUncaughtException();

    virtual void getUserByName_handleStdException(
        const std::exception& e);
    virtual void getUserByName_handleUncaughtException();

    virtual void updateUser_handleStdException(
        const std::exception& e);
    virtual void updateUser_handleUncaughtException();

    virtual void loginUser_handleStdException(
        const std::exception& e);
    virtual void loginUser_handleUncaughtException();

    virtual void logoutUser_handleStdException(
        const std::exception& e);
    virtual void logoutUser_handleUncaughtException();

private:
    std::shared_ptr<HttpClient> m_client;
    std::string m_context;
};


}
}
}
}


#endif /* BOOST_BEAST_OPENAPI_CLIENT_UserApi_ */
