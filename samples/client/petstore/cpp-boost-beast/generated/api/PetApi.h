/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PetApi.h
 *
 * 
 */

#ifndef BOOST_BEAST_OPENAPI_CLIENT_PetApi_
#define BOOST_BEAST_OPENAPI_CLIENT_PetApi_

#include <memory>
#include <string>
#include <exception>

#include <boost/beast/core.hpp>

#include "api/HttpClient.h"

#include "ApiResponse.h"
#include "Pet.h"
#include <string>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

///
/// Exception to flag problems in the api's
///
class PetApiException: public std::exception
{
public:
    PetApiException(boost::beast::http::status statusCode, std::string what);

    boost::beast::http::status getStatus() const;
    const char* what() const noexcept override;

private:
    boost::beast::http::status m_status;
    std::string m_what;
};


class PetApi {

public:
    PetApi(
        std::shared_ptr<HttpClient>& client,
        const std::string& context = "/v2")
      : m_client(client),
        m_context(context)
    {}

    virtual ~PetApi() = default;

    /// <summary>
    /// Add a new pet to the store
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual std::shared_ptr<Pet>
    addPet(
        const std::shared_ptr<Pet>& pet);

    /// <summary>
    /// Update an existing pet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual std::shared_ptr<Pet>
    updatePet(
        const std::shared_ptr<Pet>& pet);
    /// <summary>
    /// Deletes a pet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void
    deletePet(
        const int64_t& petId, const std::string& apiKey);

    /// <summary>
    /// Find pet by ID
    /// </summary>
    /// <remarks>
    /// Returns a single pet
    /// </remarks>
    virtual std::shared_ptr<Pet>
    getPetById(
        const int64_t& petId);
    /// <summary>
    /// Updates a pet in the store with form data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void
    updatePetWithForm(
        const int64_t& petId, const std::string& name, const std::string& status);
    /// <summary>
    /// Finds Pets by status
    /// </summary>
    /// <remarks>
    /// Multiple status values can be provided with comma separated strings
    /// </remarks>
    virtual std::vector<std::shared_ptr<Pet>>
    findPetsByStatus(
        const std::vector<std::string>& status);

    /// <summary>
    /// Finds Pets by tags
    /// </summary>
    /// <remarks>
    /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    /// </remarks>
    virtual std::vector<std::shared_ptr<Pet>>
    findPetsByTags(
        const std::vector<std::string>& tags);

    /// <summary>
    /// uploads an image
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual std::shared_ptr<ApiResponse>
    uploadFile(
        const int64_t& petId, const std::string& additionalMetadata, const std::string& file);


protected:
    virtual std::string base64encode(const std::string& str);

    virtual void setPreferredMediaTypeHeader(
        std::map<std::string, std::string>& headers, const std::string& headerName, const std::vector<std::string>& contentTypes);

    virtual void handleStdException(
        const std::exception& e);
    virtual void handleUncaughtException();

    private:
    std::shared_ptr<HttpClient> m_client;
    std::string m_context;
};


}
}
}
}


#endif /* BOOST_BEAST_OPENAPI_CLIENT_PetApi_ */
