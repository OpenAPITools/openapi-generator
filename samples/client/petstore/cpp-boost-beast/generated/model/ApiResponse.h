/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ApiResponse.h
 *
 * Describes the result of uploading an image resource
 */

#ifndef BOOST_BEAST_OPENAPI_CLIENT_ApiResponse_MODEL_H_
#define BOOST_BEAST_OPENAPI_CLIENT_ApiResponse_MODEL_H_


#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// Describes the result of uploading an image resource
/// </summary>
class  ApiResponse 
{
public:
    ApiResponse() = default;
    explicit ApiResponse(boost::property_tree::ptree const& pt);
    virtual ~ApiResponse() = default;

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ApiResponse members

    /// <summary>
    /// 
    /// </summary>
    int32_t getCode() const;
    void setCode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false) const;
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal() const;
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int32_t m_Code = 0;
    std::string m_Type = "";
    std::string m_Message = "";
};

std::string createJsonStringFromModelVector(const std::vector<std::shared_ptr<ApiResponse>>& data);

void createModelVectorFromJsonString(std::vector<std::shared_ptr<ApiResponse>>& vec, const std::string& json);


}
}
}
}


#endif /* BOOST_BEAST_OPENAPI_CLIENT_ApiResponse_MODEL_H_ */
