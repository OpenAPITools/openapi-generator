/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ApiResponse.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace client {
namespace model {

ApiResponse::ApiResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string ApiResponse::toJsonString(bool prettyJson /* = false */) const
{
    return toJsonString_internal(prettyJson);
}

void ApiResponse::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree ApiResponse::toPropertyTree() const
{
    return toPropertyTree_internal();
}

void ApiResponse::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string ApiResponse::toJsonString_internal(bool prettyJson) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ApiResponse::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ApiResponse::toPropertyTree_internal() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("code", m_Code);
	pt.put("type", m_Type);
	pt.put("message", m_Message);
	return pt;
}

void ApiResponse::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Code = pt.get("code", 0);
	m_Type = pt.get("type", "");
	m_Message = pt.get("message", "");
}

int32_t ApiResponse::getCode() const
{
    return m_Code;
}

void ApiResponse::setCode(int32_t value)
{
	m_Code = value;
}
std::string ApiResponse::getType() const
{
    return m_Type;
}

void ApiResponse::setType(std::string value)
{
	m_Type = value;
}
std::string ApiResponse::getMessage() const
{
    return m_Message;
}

void ApiResponse::setMessage(std::string value)
{
	m_Message = value;
}

std::string createJsonStringFromApiResponseVector(const std::vector<std::shared_ptr<ApiResponse>>& data)
{
    std::stringstream output;
    output << '[';
    for (std::size_t i = 0; i < data.size(); ++i) {
        output << data[i]->toJsonString(false);
        if (i < data.size() - 1) {
            output << ", ";
        }
    }
    output << ']';
    return output.str();
}

std::vector<std::shared_ptr<ApiResponse>> createApiResponseVectorFromJsonString(const std::string& json)
{
std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<std::shared_ptr<ApiResponse>>();
    for (const auto& child: pt) {
        vec.emplace_back(std::make_shared<ApiResponse>(child.second));
    }

    return vec;
}

}
}
}
}

