/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Order.h
 *
 * An order for a pets from the pet store
 */

#ifndef BOOST_BEAST_OPENAPI_CLIENT_Order_MODEL_H_
#define BOOST_BEAST_OPENAPI_CLIENT_Order_MODEL_H_


#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// An order for a pets from the pet store
/// </summary>
class  Order 
{
public:
    Order() = default;
    explicit Order(boost::property_tree::ptree const& pt);
    virtual ~Order() = default;

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Order members

    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getPetId() const;
    void setPetId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getQuantity() const;
    void setQuantity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getShipDate() const;
    void setShipDate(std::string value);

    /// <summary>
    /// Order Status
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// 
    /// </summary>
    bool isComplete() const;
    void setComplete(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false) const;
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal() const;
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int64_t m_Id = 0L;
    int64_t m_PetId = 0L;
    int32_t m_Quantity = 0;
    std::string m_ShipDate = "";
    std::string m_Status = "";
    bool m_Complete = false;
    const std::array<std::string, 3> m_StatusEnum = {
          "placed","approved","delivered"
    };

};

std::string createJsonStringFromModelVector(const std::vector<std::shared_ptr<Order>>& data);

void createModelVectorFromJsonString(std::vector<std::shared_ptr<Order>>& vec, const std::string& json);


}
}
}
}


#endif /* BOOST_BEAST_OPENAPI_CLIENT_Order_MODEL_H_ */
