/* tslint:disable */
/* eslint-disable */
/**
 * Example
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import { exists, mapValues } from './runtime';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Cat
 */
export interface Cat {
    /**
     * 
     * @type {boolean}
     * @memberof Cat
     */
    'hunts'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Cat
     */
    'age'?: number;
}
export function CatFromJSON(json: any): Cat {
    return CatFromJSONTyped(json, false);
}

export function CatFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hunts': !exists(json, 'hunts') ? undefined : json['hunts'],
        'age': !exists(json, 'age') ? undefined : json['age'],
    };
}

/**
 * 
 * @export
 * @interface CatAllOf
 */
export interface CatAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof CatAllOf
     */
    'hunts'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatAllOf
     */
    'age'?: number;
}
export function CatAllOfFromJSON(json: any): CatAllOf {
    return CatAllOfFromJSONTyped(json, false);
}

export function CatAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hunts': !exists(json, 'hunts') ? undefined : json['hunts'],
        'age': !exists(json, 'age') ? undefined : json['age'],
    };
}

/**
 * 
 * @export
 * @interface Dog
 */
export interface Dog {
    /**
     * 
     * @type {boolean}
     * @memberof Dog
     */
    'bark'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    'breed'?: DogBreedEnum;
}

export const DogBreedEnum = {
    Dingo: 'Dingo',
    Husky: 'Husky',
    Retriever: 'Retriever',
    Shepherd: 'Shepherd'
} as const;

export type DogBreedEnum = typeof DogBreedEnum[keyof typeof DogBreedEnum];

export function DogFromJSON(json: any): Dog {
    return DogFromJSONTyped(json, false);
}

export function DogFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bark': !exists(json, 'bark') ? undefined : json['bark'],
        'breed': !exists(json, 'breed') ? undefined : json['breed'],
    };
}

/**
 * 
 * @export
 * @interface DogAllOf
 */
export interface DogAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof DogAllOf
     */
    'bark'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DogAllOf
     */
    'breed'?: DogAllOfBreedEnum;
}

export const DogAllOfBreedEnum = {
    Dingo: 'Dingo',
    Husky: 'Husky',
    Retriever: 'Retriever',
    Shepherd: 'Shepherd'
} as const;

export type DogAllOfBreedEnum = typeof DogAllOfBreedEnum[keyof typeof DogAllOfBreedEnum];

export function DogAllOfFromJSON(json: any): DogAllOf {
    return DogAllOfFromJSONTyped(json, false);
}

export function DogAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): DogAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bark': !exists(json, 'bark') ? undefined : json['bark'],
        'breed': !exists(json, 'breed') ? undefined : json['breed'],
    };
}

/**
 * 
 * @export
 * @interface FilePostRequest
 */
export interface FilePostRequest {
    /**
     * 
     * @type {any}
     * @memberof FilePostRequest
     */
    'file'?: any;
}
export function FilePostRequestFromJSON(json: any): FilePostRequest {
    return FilePostRequestFromJSONTyped(json, false);
}

export function FilePostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FilePostRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'file': !exists(json, 'file') ? undefined : json['file'],
    };
}

/**
 * 
 * @export
 * @interface PetByAge
 */
export interface PetByAge {
    /**
     * 
     * @type {number}
     * @memberof PetByAge
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof PetByAge
     */
    'nickname'?: string;
}
export function PetByAgeFromJSON(json: any): PetByAge {
    return PetByAgeFromJSONTyped(json, false);
}

export function PetByAgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PetByAge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'age': json['age'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
    };
}

/**
 * 
 * @export
 * @interface PetByType
 */
export interface PetByType {
    /**
     * 
     * @type {string}
     * @memberof PetByType
     */
    'pet_type': PetByTypePetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PetByType
     */
    'hunts'?: boolean;
}

export const PetByTypePetTypeEnum = {
    Cat: 'Cat',
    Dog: 'Dog'
} as const;

export type PetByTypePetTypeEnum = typeof PetByTypePetTypeEnum[keyof typeof PetByTypePetTypeEnum];

export function PetByTypeFromJSON(json: any): PetByType {
    return PetByTypeFromJSONTyped(json, false);
}

export function PetByTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PetByType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pet_type': json['pet_type'],
        'hunts': !exists(json, 'hunts') ? undefined : json['hunts'],
    };
}

/**
 * 
 * @export
 * @interface PetsFilteredPatchRequest
 */
export interface PetsFilteredPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof PetsFilteredPatchRequest
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof PetsFilteredPatchRequest
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PetsFilteredPatchRequest
     */
    'pet_type': PetsFilteredPatchRequestPetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PetsFilteredPatchRequest
     */
    'hunts'?: boolean;
}

export const PetsFilteredPatchRequestPetTypeEnum = {
    Cat: 'Cat',
    Dog: 'Dog'
} as const;

export type PetsFilteredPatchRequestPetTypeEnum = typeof PetsFilteredPatchRequestPetTypeEnum[keyof typeof PetsFilteredPatchRequestPetTypeEnum];

export function PetsFilteredPatchRequestFromJSON(json: any): PetsFilteredPatchRequest {
    return PetsFilteredPatchRequestFromJSONTyped(json, false);
}

export function PetsFilteredPatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PetsFilteredPatchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'age': json['age'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'pet_type': json['pet_type'],
        'hunts': !exists(json, 'hunts') ? undefined : json['hunts'],
    };
}

/**
 * @type PetsPatchRequest
 * @export
 */
export type PetsPatchRequest = Cat | Dog | any;


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FilePostRequest} [filePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filePost: async (filePostRequest?: FilePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PetsFilteredPatchRequest} [petsFilteredPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsFilteredPatch: async (petsFilteredPatchRequest?: PetsFilteredPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets-filtered`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petsFilteredPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PetsPatchRequest} [petsPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsPatch: async (petsPatchRequest?: PetsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petsPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FilePostRequest} [filePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filePost(filePostRequest?: FilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filePost(filePostRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const response = createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, basePath);

                return;
            };
        },
        /**
         * 
         * @param {PetsFilteredPatchRequest} [petsFilteredPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async petsFilteredPatch(petsFilteredPatchRequest?: PetsFilteredPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.petsFilteredPatch(petsFilteredPatchRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const response = createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, basePath);

                return;
            };
        },
        /**
         * 
         * @param {PetsPatchRequest} [petsPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async petsPatch(petsPatchRequest?: PetsPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.petsPatch(petsPatchRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const response = createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, basePath);

                return;
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {FilePostRequest} [filePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filePost(filePostRequest?: FilePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.filePost(filePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PetsFilteredPatchRequest} [petsFilteredPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsFilteredPatch(petsFilteredPatchRequest?: PetsFilteredPatchRequest, options?: any): AxiosPromise<void> {
            return localVarFp.petsFilteredPatch(petsFilteredPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PetsPatchRequest} [petsPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsPatch(petsPatchRequest?: PetsPatchRequest, options?: any): AxiosPromise<void> {
            return localVarFp.petsPatch(petsPatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {FilePostRequest} [filePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public filePost(filePostRequest?: FilePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).filePost(filePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PetsFilteredPatchRequest} [petsFilteredPatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public petsFilteredPatch(petsFilteredPatchRequest?: PetsFilteredPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).petsFilteredPatch(petsFilteredPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PetsPatchRequest} [petsPatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public petsPatch(petsPatchRequest?: PetsPatchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).petsPatch(petsPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


