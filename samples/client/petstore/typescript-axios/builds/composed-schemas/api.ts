/* tslint:disable */
/* eslint-disable */
/**
 * Example
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Cat
 */
export interface Cat {
    /**
     * 
     * @type {boolean}
     * @memberof Cat
     */
    hunts?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Cat
     */
    age?: number;
}
/**
 * 
 * @export
 * @interface CatAllOf
 */
export interface CatAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof CatAllOf
     */
    hunts?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatAllOf
     */
    age?: number;
}
/**
 * 
 * @export
 * @interface Dog
 */
export interface Dog {
    /**
     * 
     * @type {boolean}
     * @memberof Dog
     */
    bark?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    breed?: DogBreedEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DogBreedEnum {
    Dingo = 'Dingo',
    Husky = 'Husky',
    Retriever = 'Retriever',
    Shepherd = 'Shepherd'
}

/**
 * 
 * @export
 * @interface DogAllOf
 */
export interface DogAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof DogAllOf
     */
    bark?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DogAllOf
     */
    breed?: DogAllOfBreedEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DogAllOfBreedEnum {
    Dingo = 'Dingo',
    Husky = 'Husky',
    Retriever = 'Retriever',
    Shepherd = 'Shepherd'
}

/**
 * @type InlineBody
 * @export
 */
export type InlineBody = Cat | Dog | any;

/**
 * 
 * @export
 * @interface InlineBody1
 */
export interface InlineBody1 {
    /**
     * 
     * @type {number}
     * @memberof InlineBody1
     */
    age: number;
    /**
     * 
     * @type {string}
     * @memberof InlineBody1
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineBody1
     */
    pet_type: InlineBody1PetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof InlineBody1
     */
    hunts?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineBody1PetTypeEnum {
    Cat = 'Cat',
    Dog = 'Dog'
}

/**
 * 
 * @export
 * @interface InlineBody2
 */
export interface InlineBody2 {
    /**
     * 
     * @type {InlineBody2File}
     * @memberof InlineBody2
     */
    file?: InlineBody2File;
}
/**
 * 
 * @export
 * @interface InlineBody2File
 */
export interface InlineBody2File {
}
/**
 * 
 * @export
 * @interface PetByAge
 */
export interface PetByAge {
    /**
     * 
     * @type {number}
     * @memberof PetByAge
     */
    age: number;
    /**
     * 
     * @type {string}
     * @memberof PetByAge
     */
    nickname?: string;
}
/**
 * 
 * @export
 * @interface PetByType
 */
export interface PetByType {
    /**
     * 
     * @type {string}
     * @memberof PetByType
     */
    pet_type: PetByTypePetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PetByType
     */
    hunts?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum PetByTypePetTypeEnum {
    Cat = 'Cat',
    Dog = 'Dog'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineBody2} [inlineBody2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filePost: async (inlineBody2?: InlineBody2, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof inlineBody2 !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(inlineBody2 !== undefined ? inlineBody2 : {})
                : (inlineBody2 || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineBody1} [inlineBody1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsFilteredPatch: async (inlineBody1?: InlineBody1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets-filtered`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof inlineBody1 !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(inlineBody1 !== undefined ? inlineBody1 : {})
                : (inlineBody1 || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineBody} [inlineBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsPatch: async (inlineBody?: InlineBody, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof inlineBody !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(inlineBody !== undefined ? inlineBody : {})
                : (inlineBody || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineBody2} [inlineBody2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filePost(inlineBody2?: InlineBody2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).filePost(inlineBody2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {InlineBody1} [inlineBody1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async petsFilteredPatch(inlineBody1?: InlineBody1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).petsFilteredPatch(inlineBody1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {InlineBody} [inlineBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async petsPatch(inlineBody?: InlineBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).petsPatch(inlineBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {InlineBody2} [inlineBody2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filePost(inlineBody2?: InlineBody2, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).filePost(inlineBody2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineBody1} [inlineBody1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsFilteredPatch(inlineBody1?: InlineBody1, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).petsFilteredPatch(inlineBody1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineBody} [inlineBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        petsPatch(inlineBody?: InlineBody, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).petsPatch(inlineBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {InlineBody2} [inlineBody2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public filePost(inlineBody2?: InlineBody2, options?: any) {
        return DefaultApiFp(this.configuration).filePost(inlineBody2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineBody1} [inlineBody1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public petsFilteredPatch(inlineBody1?: InlineBody1, options?: any) {
        return DefaultApiFp(this.configuration).petsFilteredPatch(inlineBody1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineBody} [inlineBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public petsPatch(inlineBody?: InlineBody, options?: any) {
        return DefaultApiFp(this.configuration).petsPatch(inlineBody, options).then((request) => request(this.axios, this.basePath));
    }
}


