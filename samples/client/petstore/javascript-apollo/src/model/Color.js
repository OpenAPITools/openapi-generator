/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Color model module.
 * @module model/Color
 * @version 1.0.0
 */
class Color {
    /**
     * Constructs a new <code>Color</code>.
     * RGB array, RGBA array, or hex string.
     * @alias module:model/Color
     * @param {(module:model/String|module:model/[Number])} The actual instance to initialize Color.
     */
    constructor(obj = null) {
        this.setActualInstance(obj);
    }

    /**
     * Constructs a <code>Color</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Color} obj Optional instance to populate.
     * @return {module:model/Color} The populated <code>Color</code> instance.
     */
    static constructFromObject(data, obj) {
        var match = 0;
        var errorMessages = [];
        //obj = obj || new Color();
        try {
            match++;
        } catch(err) {
            // json data failed to deserialize into [Number]
            errorMessages.push("Failed to desserialize JSON data into [Number]: " + err)
        }

        try {
            match++;
        } catch(err) {
            // json data failed to deserialize into [Number]
            errorMessages.push("Failed to desserialize JSON data into [Number]: " + err)
        }

        try {
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to desserialize JSON data into String: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found when deserializing the payload into Color with oneOf schemas String, [Number]. JSON data: " + JSON.stringify(data));
        } else if (match === 0) {
            throw new Error("No match found when deserializing the payload into Color with oneOf schemas String, [Number]. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            return obj;
        }
    }

    /**
     * Gets the actaul instance, which can be <code>String</code>, <code>[Number]</code>.
     * @return {(module:model/String|module:model/[Number])} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actaul instance, which can be <code>String</code>, <code>[Number]</code>.
     * @param {(module:model/String|module:model/[Number])} The actual instance.
     */
    setActualInstance(obj) {

        throw new Error('Failed to set actual instance, which must be [String, [Number]]: ' + obj);

    }

    /**
     * Returns the JSON representation of the actual intance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

}


Color.OneOf = ["String", "[Number]"];

export default Color;

