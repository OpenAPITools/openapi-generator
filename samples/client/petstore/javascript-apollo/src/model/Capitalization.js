/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Capitalization model module.
 * @module model/Capitalization
 * @version 1.0.0
 */
class Capitalization {
    /**
     * Constructs a new <code>Capitalization</code>.
     * @alias module:model/Capitalization
     */
    constructor() { 
        
        Capitalization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Capitalization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Capitalization} obj Optional instance to populate.
     * @return {module:model/Capitalization} The populated <code>Capitalization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Capitalization();

            if (data.hasOwnProperty('smallCamel')) {
                obj['smallCamel'] = ApiClient.convertToType(data['smallCamel'], 'String');
            }
            if (data.hasOwnProperty('CapitalCamel')) {
                obj['CapitalCamel'] = ApiClient.convertToType(data['CapitalCamel'], 'String');
            }
            if (data.hasOwnProperty('small_Snake')) {
                obj['small_Snake'] = ApiClient.convertToType(data['small_Snake'], 'String');
            }
            if (data.hasOwnProperty('Capital_Snake')) {
                obj['Capital_Snake'] = ApiClient.convertToType(data['Capital_Snake'], 'String');
            }
            if (data.hasOwnProperty('SCA_ETH_Flow_Points')) {
                obj['SCA_ETH_Flow_Points'] = ApiClient.convertToType(data['SCA_ETH_Flow_Points'], 'String');
            }
            if (data.hasOwnProperty('ATT_NAME')) {
                obj['ATT_NAME'] = ApiClient.convertToType(data['ATT_NAME'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Capitalization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Capitalization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['smallCamel'] && !(typeof data['smallCamel'] === 'string' || data['smallCamel'] instanceof String)) {
            throw new Error("Expected the field `smallCamel` to be a primitive type in the JSON string but got " + data['smallCamel']);
        }
        // ensure the json data is a string
        if (data['CapitalCamel'] && !(typeof data['CapitalCamel'] === 'string' || data['CapitalCamel'] instanceof String)) {
            throw new Error("Expected the field `CapitalCamel` to be a primitive type in the JSON string but got " + data['CapitalCamel']);
        }
        // ensure the json data is a string
        if (data['small_Snake'] && !(typeof data['small_Snake'] === 'string' || data['small_Snake'] instanceof String)) {
            throw new Error("Expected the field `small_Snake` to be a primitive type in the JSON string but got " + data['small_Snake']);
        }
        // ensure the json data is a string
        if (data['Capital_Snake'] && !(typeof data['Capital_Snake'] === 'string' || data['Capital_Snake'] instanceof String)) {
            throw new Error("Expected the field `Capital_Snake` to be a primitive type in the JSON string but got " + data['Capital_Snake']);
        }
        // ensure the json data is a string
        if (data['SCA_ETH_Flow_Points'] && !(typeof data['SCA_ETH_Flow_Points'] === 'string' || data['SCA_ETH_Flow_Points'] instanceof String)) {
            throw new Error("Expected the field `SCA_ETH_Flow_Points` to be a primitive type in the JSON string but got " + data['SCA_ETH_Flow_Points']);
        }
        // ensure the json data is a string
        if (data['ATT_NAME'] && !(typeof data['ATT_NAME'] === 'string' || data['ATT_NAME'] instanceof String)) {
            throw new Error("Expected the field `ATT_NAME` to be a primitive type in the JSON string but got " + data['ATT_NAME']);
        }

        return true;
    }


}



/**
 * @member {String} smallCamel
 */
Capitalization.prototype['smallCamel'] = undefined;

/**
 * @member {String} CapitalCamel
 */
Capitalization.prototype['CapitalCamel'] = undefined;

/**
 * @member {String} small_Snake
 */
Capitalization.prototype['small_Snake'] = undefined;

/**
 * @member {String} Capital_Snake
 */
Capitalization.prototype['Capital_Snake'] = undefined;

/**
 * @member {String} SCA_ETH_Flow_Points
 */
Capitalization.prototype['SCA_ETH_Flow_Points'] = undefined;

/**
 * Name of the pet 
 * @member {String} ATT_NAME
 */
Capitalization.prototype['ATT_NAME'] = undefined;






export default Capitalization;

