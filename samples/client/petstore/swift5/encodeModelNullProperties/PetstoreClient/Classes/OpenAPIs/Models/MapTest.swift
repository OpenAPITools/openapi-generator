//
// MapTest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MapTest: Codable, Hashable {

    public enum MapOfEnumString: String, Codable, CaseIterable {
        case upper = "UPPER"
        case lower = "lower"
    }
    public var mapMapOfString: [String: [String: String]]?
    public var mapOfEnumString: [String: String]?
    public var directMap: [String: Bool]?
    public var indirectMap: StringBooleanMap?

    public init(mapMapOfString: [String: [String: String]]? = nil, mapOfEnumString: [String: String]? = nil, directMap: [String: Bool]? = nil, indirectMap: StringBooleanMap? = nil) {
        self.mapMapOfString = mapMapOfString
        self.mapOfEnumString = mapOfEnumString
        self.directMap = directMap
        self.indirectMap = indirectMap
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mapMapOfString = "map_map_of_string"
        case mapOfEnumString = "map_of_enum_string"
        case directMap = "direct_map"
        case indirectMap = "indirect_map"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let mapMapOfString = mapMapOfString {
            try container.encode(mapMapOfString, forKey: .mapMapOfString)
        } else {
            try container.encodeNil(forKey: .mapMapOfString)
        }
        if let mapOfEnumString = mapOfEnumString {
            try container.encode(mapOfEnumString, forKey: .mapOfEnumString)
        } else {
            try container.encodeNil(forKey: .mapOfEnumString)
        }
        if let directMap = directMap {
            try container.encode(directMap, forKey: .directMap)
        } else {
            try container.encodeNil(forKey: .directMap)
        }
        if let indirectMap = indirectMap {
            try container.encode(indirectMap, forKey: .indirectMap)
        } else {
            try container.encodeNil(forKey: .indirectMap)
        }
    }
}

