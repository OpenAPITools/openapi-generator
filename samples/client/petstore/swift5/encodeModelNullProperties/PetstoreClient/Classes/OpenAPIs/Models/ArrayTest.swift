//
// ArrayTest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ArrayTest: Codable, Hashable {

    public var arrayOfString: [String]?
    public var arrayArrayOfInteger: [[Int64]]?
    public var arrayArrayOfModel: [[ReadOnlyFirst]]?

    public init(arrayOfString: [String]? = nil, arrayArrayOfInteger: [[Int64]]? = nil, arrayArrayOfModel: [[ReadOnlyFirst]]? = nil) {
        self.arrayOfString = arrayOfString
        self.arrayArrayOfInteger = arrayArrayOfInteger
        self.arrayArrayOfModel = arrayArrayOfModel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case arrayOfString = "array_of_string"
        case arrayArrayOfInteger = "array_array_of_integer"
        case arrayArrayOfModel = "array_array_of_model"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let arrayOfString = arrayOfString {
            try container.encode(arrayOfString, forKey: .arrayOfString)
        } else {
            try container.encodeNil(forKey: .arrayOfString)
        }
        if let arrayArrayOfInteger = arrayArrayOfInteger {
            try container.encode(arrayArrayOfInteger, forKey: .arrayArrayOfInteger)
        } else {
            try container.encodeNil(forKey: .arrayArrayOfInteger)
        }
        if let arrayArrayOfModel = arrayArrayOfModel {
            try container.encode(arrayArrayOfModel, forKey: .arrayArrayOfModel)
        } else {
            try container.encodeNil(forKey: .arrayArrayOfModel)
        }
    }
}

