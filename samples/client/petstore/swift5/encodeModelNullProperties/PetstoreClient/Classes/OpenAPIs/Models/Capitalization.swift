//
// Capitalization.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Capitalization: Codable, Hashable {

    public var smallCamel: String?
    public var capitalCamel: String?
    public var smallSnake: String?
    public var capitalSnake: String?
    public var sCAETHFlowPoints: String?
    /** Name of the pet  */
    public var ATT_NAME: String?

    public init(smallCamel: String? = nil, capitalCamel: String? = nil, smallSnake: String? = nil, capitalSnake: String? = nil, sCAETHFlowPoints: String? = nil, ATT_NAME: String? = nil) {
        self.smallCamel = smallCamel
        self.capitalCamel = capitalCamel
        self.smallSnake = smallSnake
        self.capitalSnake = capitalSnake
        self.sCAETHFlowPoints = sCAETHFlowPoints
        self.ATT_NAME = ATT_NAME
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case smallCamel
        case capitalCamel = "CapitalCamel"
        case smallSnake = "small_Snake"
        case capitalSnake = "Capital_Snake"
        case sCAETHFlowPoints = "SCA_ETH_Flow_Points"
        case ATT_NAME
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let smallCamel = smallCamel {
            try container.encode(smallCamel, forKey: .smallCamel)
        } else {
            try container.encodeNil(forKey: .smallCamel)
        }
        if let capitalCamel = capitalCamel {
            try container.encode(capitalCamel, forKey: .capitalCamel)
        } else {
            try container.encodeNil(forKey: .capitalCamel)
        }
        if let smallSnake = smallSnake {
            try container.encode(smallSnake, forKey: .smallSnake)
        } else {
            try container.encodeNil(forKey: .smallSnake)
        }
        if let capitalSnake = capitalSnake {
            try container.encode(capitalSnake, forKey: .capitalSnake)
        } else {
            try container.encodeNil(forKey: .capitalSnake)
        }
        if let sCAETHFlowPoints = sCAETHFlowPoints {
            try container.encode(sCAETHFlowPoints, forKey: .sCAETHFlowPoints)
        } else {
            try container.encodeNil(forKey: .sCAETHFlowPoints)
        }
        if let ATT_NAME = ATT_NAME {
            try container.encode(ATT_NAME, forKey: .ATT_NAME)
        } else {
            try container.encodeNil(forKey: .ATT_NAME)
        }
    }
}

