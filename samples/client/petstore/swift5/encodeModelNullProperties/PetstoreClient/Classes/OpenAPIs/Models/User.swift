//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, Hashable {

    public var id: Int64?
    public var username: String?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var password: String?
    public var phone: String?
    /** User Status */
    public var userStatus: Int?

    public init(id: Int64? = nil, username: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, password: String? = nil, phone: String? = nil, userStatus: Int? = nil) {
        self.id = id
        self.username = username
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.password = password
        self.phone = phone
        self.userStatus = userStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case username
        case firstName
        case lastName
        case email
        case password
        case phone
        case userStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try container.encode(id, forKey: .id)
        } else {
            try container.encodeNil(forKey: .id)
        }
        if let username = username {
            try container.encode(username, forKey: .username)
        } else {
            try container.encodeNil(forKey: .username)
        }
        if let firstName = firstName {
            try container.encode(firstName, forKey: .firstName)
        } else {
            try container.encodeNil(forKey: .firstName)
        }
        if let lastName = lastName {
            try container.encode(lastName, forKey: .lastName)
        } else {
            try container.encodeNil(forKey: .lastName)
        }
        if let email = email {
            try container.encode(email, forKey: .email)
        } else {
            try container.encodeNil(forKey: .email)
        }
        if let password = password {
            try container.encode(password, forKey: .password)
        } else {
            try container.encodeNil(forKey: .password)
        }
        if let phone = phone {
            try container.encode(phone, forKey: .phone)
        } else {
            try container.encodeNil(forKey: .phone)
        }
        if let userStatus = userStatus {
            try container.encode(userStatus, forKey: .userStatus)
        } else {
            try container.encodeNil(forKey: .userStatus)
        }
    }
}

