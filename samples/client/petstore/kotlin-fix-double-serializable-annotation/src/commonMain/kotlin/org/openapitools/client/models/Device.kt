/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Laptop
import org.openapitools.client.models.Phone

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import java.io.IOException

/**
 * 
 *
 */
@Serializable

data class Device(var actualInstance: Any? = null) {

    class CustomTypeAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
            if (!Device::class.java.isAssignableFrom(type.rawType)) {
                return null // this class only serializes 'Device' and its subtypes
            }
            val elementAdapter = gson.getAdapter(JsonElement::class.java)
            val adapterPhone = gson.getDelegateAdapter(this, TypeToken.get(Phone::class.java))
            val adapterLaptop = gson.getDelegateAdapter(this, TypeToken.get(Laptop::class.java))

            @Suppress("UNCHECKED_CAST")
            return object : TypeAdapter<Device?>() {
                @Throws(IOException::class)
                override fun write(out: JsonWriter,value: Device?) {
                    if (value?.actualInstance == null) {
                        elementAdapter.write(out, null)
                        return
                    }

                    // check if the actual instance is of the type `Phone`
                    if (value.actualInstance is Phone) {
                        val element = adapterPhone.toJsonTree(value.actualInstance as Phone?)
                        elementAdapter.write(out, element)
                        return
                    }
                    // check if the actual instance is of the type `Laptop`
                    if (value.actualInstance is Laptop) {
                        val element = adapterLaptop.toJsonTree(value.actualInstance as Laptop?)
                        elementAdapter.write(out, element)
                        return
                    }
                    throw IOException("Failed to serialize as the type doesn't match anyOf schemas: Laptop, Phone")
                }

                @Throws(IOException::class)
                override fun read(jsonReader: JsonReader): Device {
                    val jsonElement = elementAdapter.read(jsonReader)
                    val errorMessages = ArrayList<String>()
                    var actualAdapter: TypeAdapter<*>
                    val ret = Device()

                    // deserialize Phone
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Phone.validateJsonElement(jsonElement)
                        actualAdapter = adapterPhone
                        ret.actualInstance = actualAdapter.fromJsonTree(jsonElement)
                        return ret
                        //log.log(Level.FINER, "Input data matches schema 'Phone'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Phone failed with `%s`.", e.message))
                        //log.log(Level.FINER, "Input data does not match schema 'Phone'", e)
                    }
                    // deserialize Laptop
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Laptop.validateJsonElement(jsonElement)
                        actualAdapter = adapterLaptop
                        ret.actualInstance = actualAdapter.fromJsonTree(jsonElement)
                        return ret
                        //log.log(Level.FINER, "Input data matches schema 'Laptop'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Laptop failed with `%s`.", e.message))
                        //log.log(Level.FINER, "Input data does not match schema 'Laptop'", e)
                    }

                    throw IOException(String.format("Failed deserialization for Device: no schema match result. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()))
                }
            }.nullSafe() as TypeAdapter<T>
        }
    }

    companion object {
        /**
        * Validates the JSON Element and throws an exception if issues found
        *
        * @param jsonElement JSON Element
        * @throws IOException if the JSON Element is invalid with respect to Device
        */
        @Throws(IOException::class)
        fun validateJsonElement(jsonElement: JsonElement?) {
            requireNotNull(jsonElement) {
                "Provided json element must not be null"
            }
            var match = 0
            val errorMessages = ArrayList<String>()
            // validate the json string with Phone
            try {
                // validate the JSON object to see if any exception is thrown
                Phone.validateJsonElement(jsonElement)
                match++
            } catch (e: Exception) {
                // Validation failed, continue
                errorMessages.add(String.format("Validation for Phone failed with `%s`.", e.message))
            }
            // validate the json string with Laptop
            try {
                // validate the JSON object to see if any exception is thrown
                Laptop.validateJsonElement(jsonElement)
                match++
            } catch (e: Exception) {
                // Validation failed, continue
                errorMessages.add(String.format("Validation for Laptop failed with `%s`.", e.message))
            }

            if (match != 1) {
                throw IOException(String.format("Failed validation for Device: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()))
            }
        }
    }
}
