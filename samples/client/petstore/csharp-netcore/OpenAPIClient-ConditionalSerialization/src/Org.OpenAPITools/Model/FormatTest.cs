/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FormatTest
    /// </summary>
    [DataContract(Name = "format_test")]
    public partial class FormatTest : IEquatable<FormatTest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormatTest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FormatTest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormatTest" /> class.
        /// </summary>
        /// <param name="integer">integer.</param>
        /// <param name="int32">int32.</param>
        /// <param name="int64">int64.</param>
        /// <param name="number">number (required).</param>
        /// <param name="propertyFloat">propertyFloat.</param>
        /// <param name="propertyDouble">propertyDouble.</param>
        /// <param name="propertyDecimal">propertyDecimal.</param>
        /// <param name="propertyString">propertyString.</param>
        /// <param name="propertyByte">propertyByte (required).</param>
        /// <param name="binary">binary.</param>
        /// <param name="date">date (required).</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="password">password (required).</param>
        /// <param name="patternWithDigits">A string that is a 10 digit number. Can have leading zeros..</param>
        /// <param name="patternWithDigitsAndDelimiter">A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01..</param>
        public FormatTest(int integer = default(int), int int32 = default(int), long int64 = default(long), decimal number = default(decimal), float propertyFloat = default(float), double propertyDouble = default(double), decimal propertyDecimal = default(decimal), string propertyString = default(string), byte[] propertyByte = default(byte[]), System.IO.Stream binary = default(System.IO.Stream), DateTime date = default(DateTime), DateTime dateTime = default(DateTime), Guid uuid = default(Guid), string password = default(string), string patternWithDigits = default(string), string patternWithDigitsAndDelimiter = default(string))
        {
            this._Number = number;
            // to ensure "propertyByte" is required (not null)
            if (propertyByte == null)
            {
                throw new ArgumentNullException("propertyByte is a required property for FormatTest and cannot be null");
            }
            this._PropertyByte = propertyByte;
            this._Date = date;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for FormatTest and cannot be null");
            }
            this._Password = password;
            this._Integer = integer;
            if (this.Integer != null)
            {
                this._flagInteger = true;
            }
            this._Int32 = int32;
            if (this.Int32 != null)
            {
                this._flagInt32 = true;
            }
            this._Int64 = int64;
            if (this.Int64 != null)
            {
                this._flagInt64 = true;
            }
            this._PropertyFloat = propertyFloat;
            if (this.PropertyFloat != null)
            {
                this._flagPropertyFloat = true;
            }
            this._PropertyDouble = propertyDouble;
            if (this.PropertyDouble != null)
            {
                this._flagPropertyDouble = true;
            }
            this._PropertyDecimal = propertyDecimal;
            if (this.PropertyDecimal != null)
            {
                this._flagPropertyDecimal = true;
            }
            this._PropertyString = propertyString;
            if (this.PropertyString != null)
            {
                this._flagPropertyString = true;
            }
            this._Binary = binary;
            if (this.Binary != null)
            {
                this._flagBinary = true;
            }
            this._DateTime = dateTime;
            if (this.DateTime != null)
            {
                this._flagDateTime = true;
            }
            this._Uuid = uuid;
            if (this.Uuid != null)
            {
                this._flagUuid = true;
            }
            this._PatternWithDigits = patternWithDigits;
            if (this.PatternWithDigits != null)
            {
                this._flagPatternWithDigits = true;
            }
            this._PatternWithDigitsAndDelimiter = patternWithDigitsAndDelimiter;
            if (this.PatternWithDigitsAndDelimiter != null)
            {
                this._flagPatternWithDigitsAndDelimiter = true;
            }
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Integer
        /// </summary>
        [DataMember(Name = "integer", EmitDefaultValue = false)]
        public int Integer
        {
            get{ return _Integer;}
            set
            {
                _Integer = value;
                _flagInteger = true;
            }
        }
        private int _Integer;
        private bool _flagInteger;

        /// <summary>
        /// Returns false as Integer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInteger()
        {
            return _flagInteger;
        }
        /// <summary>
        /// Gets or Sets Int32
        /// </summary>
        [DataMember(Name = "int32", EmitDefaultValue = false)]
        public int Int32
        {
            get{ return _Int32;}
            set
            {
                _Int32 = value;
                _flagInt32 = true;
            }
        }
        private int _Int32;
        private bool _flagInt32;

        /// <summary>
        /// Returns false as Int32 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInt32()
        {
            return _flagInt32;
        }
        /// <summary>
        /// Gets or Sets Int64
        /// </summary>
        [DataMember(Name = "int64", EmitDefaultValue = false)]
        public long Int64
        {
            get{ return _Int64;}
            set
            {
                _Int64 = value;
                _flagInt64 = true;
            }
        }
        private long _Int64;
        private bool _flagInt64;

        /// <summary>
        /// Returns false as Int64 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInt64()
        {
            return _flagInt64;
        }
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = false)]
        public decimal Number
        {
            get{ return _Number;}
            set
            {
                _Number = value;
                _flagNumber = true;
            }
        }
        private decimal _Number;
        private bool _flagNumber;

        /// <summary>
        /// Returns false as Number should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumber()
        {
            return _flagNumber;
        }
        /// <summary>
        /// Gets or Sets PropertyFloat
        /// </summary>
        [DataMember(Name = "float", EmitDefaultValue = false)]
        public float PropertyFloat
        {
            get{ return _PropertyFloat;}
            set
            {
                _PropertyFloat = value;
                _flagPropertyFloat = true;
            }
        }
        private float _PropertyFloat;
        private bool _flagPropertyFloat;

        /// <summary>
        /// Returns false as PropertyFloat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyFloat()
        {
            return _flagPropertyFloat;
        }
        /// <summary>
        /// Gets or Sets PropertyDouble
        /// </summary>
        [DataMember(Name = "double", EmitDefaultValue = false)]
        public double PropertyDouble
        {
            get{ return _PropertyDouble;}
            set
            {
                _PropertyDouble = value;
                _flagPropertyDouble = true;
            }
        }
        private double _PropertyDouble;
        private bool _flagPropertyDouble;

        /// <summary>
        /// Returns false as PropertyDouble should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyDouble()
        {
            return _flagPropertyDouble;
        }
        /// <summary>
        /// Gets or Sets PropertyDecimal
        /// </summary>
        [DataMember(Name = "decimal", EmitDefaultValue = false)]
        public decimal PropertyDecimal
        {
            get{ return _PropertyDecimal;}
            set
            {
                _PropertyDecimal = value;
                _flagPropertyDecimal = true;
            }
        }
        private decimal _PropertyDecimal;
        private bool _flagPropertyDecimal;

        /// <summary>
        /// Returns false as PropertyDecimal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyDecimal()
        {
            return _flagPropertyDecimal;
        }
        /// <summary>
        /// Gets or Sets PropertyString
        /// </summary>
        [DataMember(Name = "string", EmitDefaultValue = false)]
        public string PropertyString
        {
            get{ return _PropertyString;}
            set
            {
                _PropertyString = value;
                _flagPropertyString = true;
            }
        }
        private string _PropertyString;
        private bool _flagPropertyString;

        /// <summary>
        /// Returns false as PropertyString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyString()
        {
            return _flagPropertyString;
        }
        /// <summary>
        /// Gets or Sets PropertyByte
        /// </summary>
        [DataMember(Name = "byte", IsRequired = true, EmitDefaultValue = false)]
        public byte[] PropertyByte
        {
            get{ return _PropertyByte;}
            set
            {
                _PropertyByte = value;
                _flagPropertyByte = true;
            }
        }
        private byte[] _PropertyByte;
        private bool _flagPropertyByte;

        /// <summary>
        /// Returns false as PropertyByte should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyByte()
        {
            return _flagPropertyByte;
        }
        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", EmitDefaultValue = false)]
        public System.IO.Stream Binary
        {
            get{ return _Binary;}
            set
            {
                _Binary = value;
                _flagBinary = true;
            }
        }
        private System.IO.Stream _Binary;
        private bool _flagBinary;

        /// <summary>
        /// Returns false as Binary should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBinary()
        {
            return _flagBinary;
        }
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Date
        {
            get{ return _Date;}
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateTime _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime
        {
            get{ return _DateTime;}
            set
            {
                _DateTime = value;
                _flagDateTime = true;
            }
        }
        private DateTime _DateTime;
        private bool _flagDateTime;

        /// <summary>
        /// Returns false as DateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDateTime()
        {
            return _flagDateTime;
        }
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public Guid Uuid
        {
            get{ return _Uuid;}
            set
            {
                _Uuid = value;
                _flagUuid = true;
            }
        }
        private Guid _Uuid;
        private bool _flagUuid;

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return _flagUuid;
        }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = false)]
        public string Password
        {
            get{ return _Password;}
            set
            {
                _Password = value;
                _flagPassword = true;
            }
        }
        private string _Password;
        private bool _flagPassword;

        /// <summary>
        /// Returns false as Password should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePassword()
        {
            return _flagPassword;
        }
        /// <summary>
        /// A string that is a 10 digit number. Can have leading zeros.
        /// </summary>
        /// <value>A string that is a 10 digit number. Can have leading zeros.</value>
        [DataMember(Name = "pattern_with_digits", EmitDefaultValue = false)]
        public string PatternWithDigits
        {
            get{ return _PatternWithDigits;}
            set
            {
                _PatternWithDigits = value;
                _flagPatternWithDigits = true;
            }
        }
        private string _PatternWithDigits;
        private bool _flagPatternWithDigits;

        /// <summary>
        /// Returns false as PatternWithDigits should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePatternWithDigits()
        {
            return _flagPatternWithDigits;
        }
        /// <summary>
        /// A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.
        /// </summary>
        /// <value>A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.</value>
        [DataMember(Name = "pattern_with_digits_and_delimiter", EmitDefaultValue = false)]
        public string PatternWithDigitsAndDelimiter
        {
            get{ return _PatternWithDigitsAndDelimiter;}
            set
            {
                _PatternWithDigitsAndDelimiter = value;
                _flagPatternWithDigitsAndDelimiter = true;
            }
        }
        private string _PatternWithDigitsAndDelimiter;
        private bool _flagPatternWithDigitsAndDelimiter;

        /// <summary>
        /// Returns false as PatternWithDigitsAndDelimiter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePatternWithDigitsAndDelimiter()
        {
            return _flagPatternWithDigitsAndDelimiter;
        }
        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FormatTest {\n");
            sb.Append("  Integer: ").Append(Integer).Append("\n");
            sb.Append("  Int32: ").Append(Int32).Append("\n");
            sb.Append("  Int64: ").Append(Int64).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PropertyFloat: ").Append(PropertyFloat).Append("\n");
            sb.Append("  PropertyDouble: ").Append(PropertyDouble).Append("\n");
            sb.Append("  PropertyDecimal: ").Append(PropertyDecimal).Append("\n");
            sb.Append("  PropertyString: ").Append(PropertyString).Append("\n");
            sb.Append("  PropertyByte: ").Append(PropertyByte).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PatternWithDigits: ").Append(PatternWithDigits).Append("\n");
            sb.Append("  PatternWithDigitsAndDelimiter: ").Append(PatternWithDigitsAndDelimiter).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input as FormatTest).AreEqual;
        }

        /// <summary>
        /// Returns true if FormatTest instances are equal
        /// </summary>
        /// <param name="input">Instance of FormatTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormatTest input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Integer.GetHashCode();
                hashCode = (hashCode * 59) + this.Int32.GetHashCode();
                hashCode = (hashCode * 59) + this.Int64.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                hashCode = (hashCode * 59) + this.PropertyFloat.GetHashCode();
                hashCode = (hashCode * 59) + this.PropertyDouble.GetHashCode();
                hashCode = (hashCode * 59) + this.PropertyDecimal.GetHashCode();
                if (this.PropertyString != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyString.GetHashCode();
                }
                if (this.PropertyByte != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyByte.GetHashCode();
                }
                if (this.Binary != null)
                {
                    hashCode = (hashCode * 59) + this.Binary.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.PatternWithDigits != null)
                {
                    hashCode = (hashCode * 59) + this.PatternWithDigits.GetHashCode();
                }
                if (this.PatternWithDigitsAndDelimiter != null)
                {
                    hashCode = (hashCode * 59) + this.PatternWithDigitsAndDelimiter.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Integer (int) maximum
            if (this.Integer > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Integer, must be a value less than or equal to 100.", new [] { "Integer" });
            }

            // Integer (int) minimum
            if (this.Integer < (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Integer, must be a value greater than or equal to 10.", new [] { "Integer" });
            }

            // Int32 (int) maximum
            if (this.Int32 > (int)200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Int32, must be a value less than or equal to 200.", new [] { "Int32" });
            }

            // Int32 (int) minimum
            if (this.Int32 < (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Int32, must be a value greater than or equal to 20.", new [] { "Int32" });
            }

            // Number (decimal) maximum
            if (this.Number > (decimal)543.2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must be a value less than or equal to 543.2.", new [] { "Number" });
            }

            // Number (decimal) minimum
            if (this.Number < (decimal)32.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must be a value greater than or equal to 32.1.", new [] { "Number" });
            }

            // PropertyFloat (float) maximum
            if (this.PropertyFloat > (float)987.6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PropertyFloat, must be a value less than or equal to 987.6.", new [] { "PropertyFloat" });
            }

            // PropertyFloat (float) minimum
            if (this.PropertyFloat < (float)54.3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PropertyFloat, must be a value greater than or equal to 54.3.", new [] { "PropertyFloat" });
            }

            // PropertyDouble (double) maximum
            if (this.PropertyDouble > (double)123.4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PropertyDouble, must be a value less than or equal to 123.4.", new [] { "PropertyDouble" });
            }

            // PropertyDouble (double) minimum
            if (this.PropertyDouble < (double)67.8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PropertyDouble, must be a value greater than or equal to 67.8.", new [] { "PropertyDouble" });
            }

            // PropertyString (string) pattern
            Regex regexPropertyString = new Regex(@"[a-z]", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            if (false == regexPropertyString.Match(this.PropertyString).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PropertyString, must match a pattern of " + regexPropertyString, new [] { "PropertyString" });
            }

            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 64.", new [] { "Password" });
            }

            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 10.", new [] { "Password" });
            }

            // PatternWithDigits (string) pattern
            Regex regexPatternWithDigits = new Regex(@"^\\d{10}$", RegexOptions.CultureInvariant);
            if (false == regexPatternWithDigits.Match(this.PatternWithDigits).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PatternWithDigits, must match a pattern of " + regexPatternWithDigits, new [] { "PatternWithDigits" });
            }

            // PatternWithDigitsAndDelimiter (string) pattern
            Regex regexPatternWithDigitsAndDelimiter = new Regex(@"^image_\\d{1,3}$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            if (false == regexPatternWithDigitsAndDelimiter.Match(this.PatternWithDigitsAndDelimiter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PatternWithDigitsAndDelimiter, must match a pattern of " + regexPatternWithDigitsAndDelimiter, new [] { "PatternWithDigitsAndDelimiter" });
            }

            yield break;
        }
    }

}
