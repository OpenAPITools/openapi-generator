// this file was initially auto generated
// it will not be overwritten

/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.DefaultApi
{
    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class AnotherFakeApi : BaseApi.AnotherFakeApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnotherFakeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnotherFakeApi(ILogger<BaseApi.AnotherFakeApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelClient"></param>
        /// <returns></returns>
        protected override ModelClient OnCall123TestSpecialTags(ModelClient modelClient)
        {
            return base.OnCall123TestSpecialTags(modelClient);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="modelClient"></param>
        protected override void AfterCall123TestSpecialTags(ApiResponse<ModelClient> apiResponse, ModelClient modelClient)
        {
            base.AfterCall123TestSpecialTags(apiResponse, modelClient);
        }
    }

    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class DefaultApi : BaseApi.DefaultApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(ILogger<BaseApi.DefaultApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <returns></returns>
        protected override void OnFooGet()
        {
            base.OnFooGet();

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        protected override void AfterFooGet(ApiResponse<InlineResponseDefault> apiResponse)
        {
            base.AfterFooGet(apiResponse);
        }
    }

    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class FakeApi : BaseApi.FakeApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FakeApi(ILogger<BaseApi.FakeApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <returns></returns>
        protected override void OnFakeHealthGet()
        {
            base.OnFakeHealthGet();

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        protected override void AfterFakeHealthGet(ApiResponse<HealthCheckResult> apiResponse)
        {
            base.AfterFakeHealthGet(apiResponse);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        protected override bool? OnFakeOuterBooleanSerialize(bool? body)
        {
            return base.OnFakeOuterBooleanSerialize(body);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="body"></param>
        protected override void AfterFakeOuterBooleanSerialize(ApiResponse<bool> apiResponse, bool? body)
        {
            base.AfterFakeOuterBooleanSerialize(apiResponse, body);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="outerComposite"></param>
        /// <returns></returns>
        protected override OuterComposite OnFakeOuterCompositeSerialize(OuterComposite outerComposite)
        {
            return base.OnFakeOuterCompositeSerialize(outerComposite);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="outerComposite"></param>
        protected override void AfterFakeOuterCompositeSerialize(ApiResponse<OuterComposite> apiResponse, OuterComposite outerComposite)
        {
            base.AfterFakeOuterCompositeSerialize(apiResponse, outerComposite);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        protected override decimal? OnFakeOuterNumberSerialize(decimal? body)
        {
            return base.OnFakeOuterNumberSerialize(body);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="body"></param>
        protected override void AfterFakeOuterNumberSerialize(ApiResponse<decimal> apiResponse, decimal? body)
        {
            base.AfterFakeOuterNumberSerialize(apiResponse, body);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        protected override string OnFakeOuterStringSerialize(string body)
        {
            return base.OnFakeOuterStringSerialize(body);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="body"></param>
        protected override void AfterFakeOuterStringSerialize(ApiResponse<string> apiResponse, string body)
        {
            base.AfterFakeOuterStringSerialize(apiResponse, body);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <returns></returns>
        protected override void OnGetArrayOfEnums()
        {
            
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        protected override void AfterGetArrayOfEnums(ApiResponse<List<OuterEnum>> apiResponse)
        {
            base.AfterGetArrayOfEnums(apiResponse);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fileSchemaTestClass"></param>
        /// <returns></returns>
        protected override FileSchemaTestClass OnTestBodyWithFileSchema(FileSchemaTestClass fileSchemaTestClass)
        {
            return base.OnTestBodyWithFileSchema(fileSchemaTestClass);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="fileSchemaTestClass"></param>
        protected override void AfterTestBodyWithFileSchema(ApiResponse<object> apiResponse, FileSchemaTestClass fileSchemaTestClass)
        {
            base.AfterTestBodyWithFileSchema(apiResponse, fileSchemaTestClass);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <param name="query"></param>
        /// <returns></returns>
        protected override (User, string) OnTestBodyWithQueryParams(User user, string query)
        {
            return base.OnTestBodyWithQueryParams(user, query);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="user"></param>
        /// <param name="query"></param>
        protected override void AfterTestBodyWithQueryParams(ApiResponse<object> apiResponse, User user, string query)
        {
            base.AfterTestBodyWithQueryParams(apiResponse, user, query);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelClient"></param>
        /// <returns></returns>
        protected override ModelClient OnTestClientModel(ModelClient modelClient)
        {
            return base.OnTestClientModel(modelClient);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="modelClient"></param>
        protected override void AfterTestClientModel(ApiResponse<ModelClient> apiResponse, ModelClient modelClient)
        {
            base.AfterTestClientModel(apiResponse, modelClient);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="_byte"></param>
        /// <param name="number"></param>
        /// <param name="_double"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="date"></param>
        /// <param name="binary"></param>
        /// <param name="_float"></param>
        /// <param name="integer"></param>
        /// <param name="int32"></param>
        /// <param name="int64"></param>
        /// <param name="_string"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        protected override (byte[], decimal, double, string, DateTime?, System.IO.Stream, float?, int?, int?, long?, string, string, string, DateTime?) OnTestEndpointParameters(byte[] _byte, decimal number, double _double, string patternWithoutDelimiter, DateTime? date, System.IO.Stream binary, float? _float, int? integer, int? int32, long? int64, string _string, string password, string callback, DateTime? dateTime)
        {
            return base.OnTestEndpointParameters(_byte, number, _double, patternWithoutDelimiter, date, binary, _float, integer, int32, int64, _string, password, callback, dateTime);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="_byte"></param>
        /// <param name="number"></param>
        /// <param name="_double"></param>
        /// <param name="patternWithoutDelimiter"></param>
        /// <param name="date"></param>
        /// <param name="binary"></param>
        /// <param name="_float"></param>
        /// <param name="integer"></param>
        /// <param name="int32"></param>
        /// <param name="int64"></param>
        /// <param name="_string"></param>
        /// <param name="password"></param>
        /// <param name="callback"></param>
        /// <param name="dateTime"></param>
        protected override void AfterTestEndpointParameters(ApiResponse<object> apiResponse, byte[] _byte, decimal number, double _double, string patternWithoutDelimiter, DateTime? date, System.IO.Stream binary, float? _float, int? integer, int? int32, long? int64, string _string, string password, string callback, DateTime? dateTime)
        {
            base.AfterTestEndpointParameters(apiResponse, _byte, number, _double, patternWithoutDelimiter, date, binary, _float, integer, int32, int64, _string, password, callback, dateTime);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumQueryDouble"></param>
        /// <param name="enumQueryInteger"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        /// <returns></returns>
        protected override (List<string>, List<string>, double?, int?, List<string>, string, string, string) OnTestEnumParameters(List<string> enumHeaderStringArray, List<string> enumQueryStringArray, double? enumQueryDouble, int? enumQueryInteger, List<string> enumFormStringArray, string enumHeaderString, string enumQueryString, string enumFormString)
        {
            return base.OnTestEnumParameters(enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="enumHeaderStringArray"></param>
        /// <param name="enumQueryStringArray"></param>
        /// <param name="enumQueryDouble"></param>
        /// <param name="enumQueryInteger"></param>
        /// <param name="enumFormStringArray"></param>
        /// <param name="enumHeaderString"></param>
        /// <param name="enumQueryString"></param>
        /// <param name="enumFormString"></param>
        protected override void AfterTestEnumParameters(ApiResponse<object> apiResponse, List<string> enumHeaderStringArray, List<string> enumQueryStringArray, double? enumQueryDouble, int? enumQueryInteger, List<string> enumFormStringArray, string enumHeaderString, string enumQueryString, string enumFormString)
        {
            base.AfterTestEnumParameters(apiResponse, enumHeaderStringArray, enumQueryStringArray, enumQueryDouble, enumQueryInteger, enumFormStringArray, enumHeaderString, enumQueryString, enumFormString);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requiredBooleanGroup"></param>
        /// <param name="requiredStringGroup"></param>
        /// <param name="requiredInt64Group"></param>
        /// <param name="booleanGroup"></param>
        /// <param name="stringGroup"></param>
        /// <param name="int64Group"></param>
        /// <returns></returns>
        protected override (bool, int, long, bool?, int?, long?) OnTestGroupParameters(bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, bool? booleanGroup, int? stringGroup, long? int64Group)
        {
            return base.OnTestGroupParameters(requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="requiredBooleanGroup"></param>
        /// <param name="requiredStringGroup"></param>
        /// <param name="requiredInt64Group"></param>
        /// <param name="booleanGroup"></param>
        /// <param name="stringGroup"></param>
        /// <param name="int64Group"></param>
        protected override void AfterTestGroupParameters(ApiResponse<object> apiResponse, bool requiredBooleanGroup, int requiredStringGroup, long requiredInt64Group, bool? booleanGroup, int? stringGroup, long? int64Group)
        {
            base.AfterTestGroupParameters(apiResponse, requiredBooleanGroup, requiredStringGroup, requiredInt64Group, booleanGroup, stringGroup, int64Group);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        protected override Dictionary<string, string> OnTestInlineAdditionalProperties(Dictionary<string, string> requestBody)
        {
            return base.OnTestInlineAdditionalProperties(requestBody);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="requestBody"></param>
        protected override void AfterTestInlineAdditionalProperties(ApiResponse<object> apiResponse, Dictionary<string, string> requestBody)
        {
            base.AfterTestInlineAdditionalProperties(apiResponse, requestBody);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        /// <returns></returns>
        protected override (string, string) OnTestJsonFormData(string param, string param2)
        {
            return base.OnTestJsonFormData(param, param2);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="param"></param>
        /// <param name="param2"></param>
        protected override void AfterTestJsonFormData(ApiResponse<object> apiResponse, string param, string param2)
        {
            base.AfterTestJsonFormData(apiResponse, param, param2);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <returns></returns>
        protected override (List<string>, List<string>, List<string>, List<string>, List<string>) OnTestQueryParameterCollectionFormat(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context)
        {
            return base.OnTestQueryParameterCollectionFormat(pipe, ioutil, http, url, context);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        protected override void AfterTestQueryParameterCollectionFormat(ApiResponse<object> apiResponse, List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context)
        {
            base.AfterTestQueryParameterCollectionFormat(apiResponse, pipe, ioutil, http, url, context);
        }
    }

    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class FakeClassnameTags123Api : BaseApi.FakeClassnameTags123Api
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeClassnameTags123Api"/> class.
        /// </summary>
        /// <returns></returns>
        public FakeClassnameTags123Api(ILogger<BaseApi.FakeClassnameTags123Api> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelClient"></param>
        /// <returns></returns>
        protected override ModelClient OnTestClassname(ModelClient modelClient)
        {
            return base.OnTestClassname(modelClient);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="modelClient"></param>
        protected override void AfterTestClassname(ApiResponse<ModelClient> apiResponse, ModelClient modelClient)
        {
            base.AfterTestClassname(apiResponse, modelClient);
        }
    }

    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class PetApi : BaseApi.PetApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PetApi(ILogger<BaseApi.PetApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pet"></param>
        /// <returns></returns>
        protected override Pet OnAddPet(Pet pet)
        {
            return base.OnAddPet(pet);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="pet"></param>
        protected override void AfterAddPet(ApiResponse<object> apiResponse, Pet pet)
        {
            base.AfterAddPet(apiResponse, pet);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="petId"></param>
        /// <param name="apiKey"></param>
        /// <returns></returns>
        protected override (long, string) OnDeletePet(long petId, string apiKey)
        {
            return base.OnDeletePet(petId, apiKey);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="petId"></param>
        /// <param name="apiKey"></param>
        protected override void AfterDeletePet(ApiResponse<object> apiResponse, long petId, string apiKey)
        {
            base.AfterDeletePet(apiResponse, petId, apiKey);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        protected override List<string> OnFindPetsByStatus(List<string> status)
        {
            return base.OnFindPetsByStatus(status);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="status"></param>
        protected override void AfterFindPetsByStatus(ApiResponse<List<Pet>> apiResponse, List<string> status)
        {
            base.AfterFindPetsByStatus(apiResponse, status);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tags"></param>
        /// <returns></returns>
        protected override List<string> OnFindPetsByTags(List<string> tags)
        {
            return base.OnFindPetsByTags(tags);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="tags"></param>
        protected override void AfterFindPetsByTags(ApiResponse<List<Pet>> apiResponse, List<string> tags)
        {
            base.AfterFindPetsByTags(apiResponse, tags);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="petId"></param>
        /// <returns></returns>
        protected override long OnGetPetById(long petId)
        {
            return base.OnGetPetById(petId);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="petId"></param>
        protected override void AfterGetPetById(ApiResponse<Pet> apiResponse, long petId)
        {
            base.AfterGetPetById(apiResponse, petId);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pet"></param>
        /// <returns></returns>
        protected override Pet OnUpdatePet(Pet pet)
        {
            return base.OnUpdatePet(pet);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="pet"></param>
        protected override void AfterUpdatePet(ApiResponse<object> apiResponse, Pet pet)
        {
            base.AfterUpdatePet(apiResponse, pet);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        protected override (long, string, string) OnUpdatePetWithForm(long petId, string name, string status)
        {
            return base.OnUpdatePetWithForm(petId, name, status);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        protected override void AfterUpdatePetWithForm(ApiResponse<object> apiResponse, long petId, string name, string status)
        {
            base.AfterUpdatePetWithForm(apiResponse, petId, name, status);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="petId"></param>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        /// <returns></returns>
        protected override (long, System.IO.Stream, string) OnUploadFile(long petId, System.IO.Stream file, string additionalMetadata)
        {
            return base.OnUploadFile(petId, file, additionalMetadata);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="petId"></param>
        /// <param name="file"></param>
        /// <param name="additionalMetadata"></param>
        protected override void AfterUploadFile(ApiResponse<ApiResponse> apiResponse, long petId, System.IO.Stream file, string additionalMetadata)
        {
            base.AfterUploadFile(apiResponse, petId, file, additionalMetadata);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requiredFile"></param>
        /// <param name="petId"></param>
        /// <param name="additionalMetadata"></param>
        /// <returns></returns>
        protected override (System.IO.Stream, long, string) OnUploadFileWithRequiredFile(System.IO.Stream requiredFile, long petId, string additionalMetadata)
        {
            return base.OnUploadFileWithRequiredFile(requiredFile, petId, additionalMetadata);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="requiredFile"></param>
        /// <param name="petId"></param>
        /// <param name="additionalMetadata"></param>
        protected override void AfterUploadFileWithRequiredFile(ApiResponse<ApiResponse> apiResponse, System.IO.Stream requiredFile, long petId, string additionalMetadata)
        {
            base.AfterUploadFileWithRequiredFile(apiResponse, requiredFile, petId, additionalMetadata);
        }
    }

    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class StoreApi : BaseApi.StoreApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoreApi(ILogger<BaseApi.StoreApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        protected override string OnDeleteOrder(string orderId)
        {
            return base.OnDeleteOrder(orderId);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="orderId"></param>
        protected override void AfterDeleteOrder(ApiResponse<object> apiResponse, string orderId)
        {
            base.AfterDeleteOrder(apiResponse, orderId);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <returns></returns>
        protected override void OnGetInventory()
        {
            
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        protected override void AfterGetInventory(ApiResponse<Dictionary<string, int>> apiResponse)
        {
            base.AfterGetInventory(apiResponse);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        protected override long OnGetOrderById(long orderId)
        {
            return base.OnGetOrderById(orderId);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="orderId"></param>
        protected override void AfterGetOrderById(ApiResponse<Order> apiResponse, long orderId)
        {
            base.AfterGetOrderById(apiResponse, orderId);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        protected override Order OnPlaceOrder(Order order)
        {
            return base.OnPlaceOrder(order);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="order"></param>
        protected override void AfterPlaceOrder(ApiResponse<Order> apiResponse, Order order)
        {
            base.AfterPlaceOrder(apiResponse, order);
        }
    }

    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class UserApi : BaseApi.UserApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(ILogger<BaseApi.UserApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider,
            TokenProvider<HttpSignatureToken> httpSignatureTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider
        )
        : base (logger, httpClient, jsonSerializerOptionsProvider, 
            apiKeyProvider, 
            bearerTokenProvider, 
            basicTokenProvider, 
            httpSignatureTokenProvider, 
            oauthTokenProvider)
        {
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        protected override User OnCreateUser(User user)
        {
            return base.OnCreateUser(user);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="user"></param>
        protected override void AfterCreateUser(ApiResponse<object> apiResponse, User user)
        {
            base.AfterCreateUser(apiResponse, user);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        protected override List<User> OnCreateUsersWithArrayInput(List<User> user)
        {
            return base.OnCreateUsersWithArrayInput(user);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="user"></param>
        protected override void AfterCreateUsersWithArrayInput(ApiResponse<object> apiResponse, List<User> user)
        {
            base.AfterCreateUsersWithArrayInput(apiResponse, user);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        protected override List<User> OnCreateUsersWithListInput(List<User> user)
        {
            return base.OnCreateUsersWithListInput(user);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="user"></param>
        protected override void AfterCreateUsersWithListInput(ApiResponse<object> apiResponse, List<User> user)
        {
            base.AfterCreateUsersWithListInput(apiResponse, user);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        protected override string OnDeleteUser(string username)
        {
            return base.OnDeleteUser(username);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="username"></param>
        protected override void AfterDeleteUser(ApiResponse<object> apiResponse, string username)
        {
            base.AfterDeleteUser(apiResponse, username);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        protected override string OnGetUserByName(string username)
        {
            return base.OnGetUserByName(username);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="username"></param>
        protected override void AfterGetUserByName(ApiResponse<User> apiResponse, string username)
        {
            base.AfterGetUserByName(apiResponse, username);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        protected override (string, string) OnLoginUser(string username, string password)
        {
            return base.OnLoginUser(username, password);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        protected override void AfterLoginUser(ApiResponse<string> apiResponse, string username, string password)
        {
            base.AfterLoginUser(apiResponse, username, password);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <returns></returns>
        protected override void OnLogoutUser()
        {
            
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        protected override void AfterLogoutUser(ApiResponse<object> apiResponse)
        {
            base.AfterLogoutUser(apiResponse);
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        protected override (User, string) OnUpdateUser(User user, string username)
        {
            return base.OnUpdateUser(user, username);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="user"></param>
        /// <param name="username"></param>
        protected override void AfterUpdateUser(ApiResponse<object> apiResponse, User user, string username)
        {
            base.AfterUpdateUser(apiResponse, user, username);
        }
    }
}
