/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFakeApi
    {
        /// <summary>
        /// Health check endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckResult>> FakeHealthGetWithHttpInfoAsync(System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Health check endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResult)</returns>
        System.Threading.Tasks.Task<HealthCheckResult> FakeHealthGetAsync(System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Health check endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResult?)</returns>
        System.Threading.Tasks.Task<HealthCheckResult?> FakeHealthGetOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer boolean types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> FakeOuterBooleanSerializeWithHttpInfoAsync(bool???? body = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer boolean types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<bool> FakeOuterBooleanSerializeAsync(bool???? body = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer boolean types
        /// </remarks>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<bool?> FakeOuterBooleanSerializeOrDefaultAsync(bool???? body = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of object with outer number type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OuterComposite)</returns>
        System.Threading.Tasks.Task<ApiResponse<OuterComposite>> FakeOuterCompositeSerializeWithHttpInfoAsync(OuterComposite??? outerComposite = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of object with outer number type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OuterComposite)</returns>
        System.Threading.Tasks.Task<OuterComposite> FakeOuterCompositeSerializeAsync(OuterComposite??? outerComposite = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of object with outer number type
        /// </remarks>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OuterComposite?)</returns>
        System.Threading.Tasks.Task<OuterComposite?> FakeOuterCompositeSerializeOrDefaultAsync(OuterComposite??? outerComposite = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer number types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> FakeOuterNumberSerializeWithHttpInfoAsync(decimal???? body = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer number types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<decimal> FakeOuterNumberSerializeAsync(decimal???? body = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer number types
        /// </remarks>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<decimal?> FakeOuterNumberSerializeOrDefaultAsync(decimal???? body = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer string types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FakeOuterStringSerializeWithHttpInfoAsync(string??? body = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer string types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<string> FakeOuterStringSerializeAsync(string??? body = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test serialization of outer string types
        /// </remarks>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string?)</returns>
        System.Threading.Tasks.Task<string?> FakeOuterStringSerializeOrDefaultAsync(string??? body = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Array of Enums
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OuterEnum&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OuterEnum>>> GetArrayOfEnumsWithHttpInfoAsync(System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Array of Enums
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OuterEnum&gt;)</returns>
        System.Threading.Tasks.Task<List<OuterEnum>> GetArrayOfEnumsAsync(System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Array of Enums
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OuterEnum&gt;?)</returns>
        System.Threading.Tasks.Task<List<OuterEnum>?> GetArrayOfEnumsOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestBodyWithFileSchemaWithHttpInfoAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestBodyWithFileSchemaAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestBodyWithQueryParamsWithHttpInfoAsync(string query, User user, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestBodyWithQueryParamsAsync(string query, User user, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>
        /// To test \&quot;client\&quot; model
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> TestClientModelWithHttpInfoAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>
        /// To test \&quot;client\&quot; model
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ModelClient> TestClientModelAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>
        /// To test \&quot;client\&quot; model
        /// </remarks>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient?)</returns>
        System.Threading.Tasks.Task<ModelClient?> TestClientModelOrDefaultAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">None</param>
        /// <param name="_double">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="_byte">None</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="_float">None (optional)</param>
        /// <param name="_string">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="date">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestEndpointParametersWithHttpInfoAsync(decimal number, double _double, string patternWithoutDelimiter, byte[] _byte, int???? integer = null, int???? int32 = null, long???? int64 = null, float???? _float = null, string??? _string = null, System.IO.Stream??? binary = null, DateTime???? date = null, DateTime???? dateTime = null, string??? password = null, string??? callback = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">None</param>
        /// <param name="_double">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="_byte">None</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="_float">None (optional)</param>
        /// <param name="_string">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="date">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestEndpointParametersAsync(decimal number, double _double, string patternWithoutDelimiter, byte[] _byte, int???? integer = null, int???? int32 = null, long???? int64 = null, float???? _float = null, string??? _string = null, System.IO.Stream??? binary = null, DateTime???? date = null, DateTime???? dateTime = null, string??? password = null, string??? callback = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>
        /// To test enum parameters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestEnumParametersWithHttpInfoAsync(List<string>??? enumHeaderStringArray = null, string??? enumHeaderString = null, List<string>??? enumQueryStringArray = null, string??? enumQueryString = null, int???? enumQueryInteger = null, double???? enumQueryDouble = null, List<string>??? enumFormStringArray = null, string??? enumFormString = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>
        /// To test enum parameters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestEnumParametersAsync(List<string>??? enumHeaderStringArray = null, string??? enumHeaderString = null, List<string>??? enumQueryStringArray = null, string??? enumQueryString = null, int???? enumQueryInteger = null, double???? enumQueryDouble = null, List<string>??? enumFormStringArray = null, string??? enumFormString = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <remarks>
        /// Fake endpoint to test group parameters (optional)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestGroupParametersWithHttpInfoAsync(int requiredStringGroup, bool requiredBooleanGroup, long requiredInt64Group, int???? stringGroup = null, bool???? booleanGroup = null, long???? int64Group = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <remarks>
        /// Fake endpoint to test group parameters (optional)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestGroupParametersAsync(int requiredStringGroup, bool requiredBooleanGroup, long requiredInt64Group, int???? stringGroup = null, bool???? booleanGroup = null, long???? int64Group = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// test inline additionalProperties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestInlineAdditionalPropertiesWithHttpInfoAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// test inline additionalProperties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestInlineAdditionalPropertiesAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// test json serialization of form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestJsonFormDataWithHttpInfoAsync(string param, string param2, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// test json serialization of form data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestJsonFormDataAsync(string param, string param2, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To test the collection format in query parameters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestQueryParameterCollectionFormatWithHttpInfoAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// To test the collection format in query parameters
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<Object> TestQueryParameterCollectionFormatAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, System.Threading.CancellationToken? cancellationToken = null);
        
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FakeApi : IFakeApi
    {
        private readonly System.Net.Http.HttpClient _httpClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="FakeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FakeApi(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        /// <summary>
        /// Returns the token to be used in the api query
        /// </summary>
        public Func<System.Threading.Tasks.ValueTask<string>>? GetTokenAsync { get; set; }  


        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateFakeHealthGetRequestAsync(System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        /// Health check endpoint 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckResult</returns>
        public async System.Threading.Tasks.Task<HealthCheckResult> FakeHealthGetAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<HealthCheckResult> result = await FakeHealthGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        /// Health check endpoint 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckResult</returns>
        public async System.Threading.Tasks.Task<HealthCheckResult?> FakeHealthGetOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<HealthCheckResult> result = await FakeHealthGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        /// Health check endpoint 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HealthCheckResult>> FakeHealthGetWithHttpInfoAsync(System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateFakeHealthGetRequestAsync(cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/health";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");






            string[] contentTypes = new string[] {
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<HealthCheckResult> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<HealthCheckResult>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateFakeOuterBooleanSerializeRequestAsync(bool???? body, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        ///  Test serialization of outer boolean types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> FakeOuterBooleanSerializeAsync(bool???? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<bool> result = await FakeOuterBooleanSerializeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        ///  Test serialization of outer boolean types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool?> FakeOuterBooleanSerializeOrDefaultAsync(bool???? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<bool> result = await FakeOuterBooleanSerializeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        ///  Test serialization of outer boolean types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input boolean as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> FakeOuterBooleanSerializeWithHttpInfoAsync(bool???? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateFakeOuterBooleanSerializeRequestAsync(body, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/outer/boolean";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = body;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<bool> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<bool>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateFakeOuterCompositeSerializeRequestAsync(OuterComposite??? outerComposite, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        ///  Test serialization of object with outer number type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OuterComposite</returns>
        public async System.Threading.Tasks.Task<OuterComposite> FakeOuterCompositeSerializeAsync(OuterComposite??? outerComposite = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<OuterComposite> result = await FakeOuterCompositeSerializeWithHttpInfoAsync(outerComposite, cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        ///  Test serialization of object with outer number type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OuterComposite</returns>
        public async System.Threading.Tasks.Task<OuterComposite?> FakeOuterCompositeSerializeOrDefaultAsync(OuterComposite??? outerComposite = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<OuterComposite> result = await FakeOuterCompositeSerializeWithHttpInfoAsync(outerComposite, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        ///  Test serialization of object with outer number type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outerComposite">Input composite as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OuterComposite)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OuterComposite>> FakeOuterCompositeSerializeWithHttpInfoAsync(OuterComposite??? outerComposite = null, System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateFakeOuterCompositeSerializeRequestAsync(outerComposite, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/outer/composite";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = outerComposite;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<OuterComposite> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<OuterComposite>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateFakeOuterNumberSerializeRequestAsync(decimal???? body, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        ///  Test serialization of outer number types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> FakeOuterNumberSerializeAsync(decimal???? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<decimal> result = await FakeOuterNumberSerializeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        ///  Test serialization of outer number types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal?> FakeOuterNumberSerializeOrDefaultAsync(decimal???? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<decimal> result = await FakeOuterNumberSerializeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        ///  Test serialization of outer number types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input number as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<decimal>> FakeOuterNumberSerializeWithHttpInfoAsync(decimal???? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateFakeOuterNumberSerializeRequestAsync(body, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/outer/number";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = body;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<decimal> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<decimal>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateFakeOuterStringSerializeRequestAsync(string??? body, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        ///  Test serialization of outer string types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FakeOuterStringSerializeAsync(string??? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<string> result = await FakeOuterStringSerializeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        ///  Test serialization of outer string types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string?> FakeOuterStringSerializeOrDefaultAsync(string??? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<string> result = await FakeOuterStringSerializeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        ///  Test serialization of outer string types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input string as post body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> FakeOuterStringSerializeWithHttpInfoAsync(string??? body = null, System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateFakeOuterStringSerializeRequestAsync(body, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/outer/string";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = body;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<string> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateGetArrayOfEnumsRequestAsync(System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        /// Array of Enums 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OuterEnum&gt;</returns>
        public async System.Threading.Tasks.Task<List<OuterEnum>> GetArrayOfEnumsAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OuterEnum>> result = await GetArrayOfEnumsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        /// Array of Enums 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OuterEnum&gt;</returns>
        public async System.Threading.Tasks.Task<List<OuterEnum>?> GetArrayOfEnumsOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OuterEnum>> result = await GetArrayOfEnumsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        /// Array of Enums 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OuterEnum&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OuterEnum>>> GetArrayOfEnumsWithHttpInfoAsync(System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateGetArrayOfEnumsRequestAsync(cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/array-of-enums";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");






            string[] contentTypes = new string[] {
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<List<OuterEnum>> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<OuterEnum>>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestBodyWithFileSchemaRequestAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        ///  For this test, the body for this request much reference a schema named &#x60;File&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileSchemaTestClass"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestBodyWithFileSchemaWithHttpInfoAsync(FileSchemaTestClass fileSchemaTestClass, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (fileSchemaTestClass == null)
                throw new ArgumentNullException(nameof(fileSchemaTestClass)); 

            await ValidateTestBodyWithFileSchemaRequestAsync(fileSchemaTestClass, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/body-with-file-schema";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = fileSchemaTestClass;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="query"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestBodyWithQueryParamsRequestAsync(string query, User user, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestBodyWithQueryParamsWithHttpInfoAsync(string query, User user, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query)); 
            if (user == null)
                throw new ArgumentNullException(nameof(user)); 

            await ValidateTestBodyWithQueryParamsRequestAsync(query, user, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/body-with-query-params";


            path = $"{path}?";
            
            path = $"{path}query={Uri.EscapeDataString(query.ToString()!)&";


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = user;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestClientModelRequestAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        

        /// <summary>
        /// To test \&quot;client\&quot; model To test \&quot;client\&quot; model
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> TestClientModelAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelClient> result = await TestClientModelWithHttpInfoAsync(modelClient, cancellationToken).ConfigureAwait(false);
            return result.Data ?? throw new NullReferenceException();
        }

        /// <summary>
        /// To test \&quot;client\&quot; model To test \&quot;client\&quot; model
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient?> TestClientModelOrDefaultAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken = null)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelClient> result = await TestClientModelWithHttpInfoAsync(modelClient, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Data
                : null;
        } 

        /// <summary>
        /// To test \&quot;client\&quot; model To test \&quot;client\&quot; model
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelClient">client model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelClient>> TestClientModelWithHttpInfoAsync(ModelClient modelClient, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (modelClient == null)
                throw new ArgumentNullException(nameof(modelClient)); 

            await ValidateTestClientModelRequestAsync(modelClient, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = modelClient;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<ModelClient> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<ModelClient>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="number">None</param>
        /// <param name="_double">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="_byte">None</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="_float">None (optional)</param>
        /// <param name="_string">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="date">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestEndpointParametersRequestAsync(decimal number, double _double, string patternWithoutDelimiter, byte[] _byte, int???? integer, int???? int32, long???? int64, float???? _float, string??? _string, System.IO.Stream??? binary, DateTime???? date, DateTime???? dateTime, string??? password, string??? callback, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트  Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">None</param>
        /// <param name="_double">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="_byte">None</param>
        /// <param name="integer">None (optional)</param>
        /// <param name="int32">None (optional)</param>
        /// <param name="int64">None (optional)</param>
        /// <param name="_float">None (optional)</param>
        /// <param name="_string">None (optional)</param>
        /// <param name="binary">None (optional)</param>
        /// <param name="date">None (optional)</param>
        /// <param name="dateTime">None (optional, default to &quot;2010-02-01T10:20:10.111110+01:00&quot;)</param>
        /// <param name="password">None (optional)</param>
        /// <param name="callback">None (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestEndpointParametersWithHttpInfoAsync(decimal number, double _double, string patternWithoutDelimiter, byte[] _byte, int???? integer = null, int???? int32 = null, long???? int64 = null, float???? _float = null, string??? _string = null, System.IO.Stream??? binary = null, DateTime???? date = null, DateTime???? dateTime = null, string??? password = null, string??? callback = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (patternWithoutDelimiter == null)
                throw new ArgumentNullException(nameof(patternWithoutDelimiter)); 
            if (_byte == null)
                throw new ArgumentNullException(nameof(_byte)); 

            await ValidateTestEndpointParametersRequestAsync(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, _string, binary, date, dateTime, password, callback, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");


            if (integer != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("integer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(integer)); // form parameter
            }
            if (int32 != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("int32", Org.OpenAPITools.Client.ClientUtils.ParameterToString(int32)); // form parameter
            }
            if (int64 != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("int64", Org.OpenAPITools.Client.ClientUtils.ParameterToString(int64)); // form parameter
            }
            // todo localVarRequestOptions.FormParameters.Add("number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(number)); // form parameter
            if (_float != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("float", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_float)); // form parameter
            }
            // todo localVarRequestOptions.FormParameters.Add("double", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_double)); // form parameter
            if (_string != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("string", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_string)); // form parameter
            }
            // todo localVarRequestOptions.FormParameters.Add("pattern_without_delimiter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(patternWithoutDelimiter)); // form parameter
            // todo localVarRequestOptions.FormParameters.Add("byte", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_byte)); // form parameter
            if (binary != null)
            {
                // todo localVarRequestOptions.FileParameters.Add("binary", binary);
            }
            if (date != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("date", Org.OpenAPITools.Client.ClientUtils.ParameterToString(date)); // form parameter
            }
            if (dateTime != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("dateTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateTime)); // form parameter
            }
            if (password != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (callback != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("callback", Org.OpenAPITools.Client.ClientUtils.ParameterToString(callback)); // form parameter
            }


            // authentication (http_basic_test) required
            // http basic authentication required
            //todo if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
                //todo localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            
            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/x-www-form-urlencoded"));

            string[] contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestEnumParametersRequestAsync(List<string>??? enumHeaderStringArray, string??? enumHeaderString, List<string>??? enumQueryStringArray, string??? enumQueryString, int???? enumQueryInteger, double???? enumQueryDouble, List<string>??? enumFormStringArray, string??? enumFormString, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        /// To test enum parameters To test enum parameters
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array) (optional)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array) (optional)</param>
        /// <param name="enumQueryString">Query parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double) (optional)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double) (optional)</param>
        /// <param name="enumFormStringArray">Form parameter enum test (string array) (optional, default to $)</param>
        /// <param name="enumFormString">Form parameter enum test (string) (optional, default to -efg)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestEnumParametersWithHttpInfoAsync(List<string>??? enumHeaderStringArray = null, string??? enumHeaderString = null, List<string>??? enumQueryStringArray = null, string??? enumQueryString = null, int???? enumQueryInteger = null, double???? enumQueryDouble = null, List<string>??? enumFormStringArray = null, string??? enumFormString = null, System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateTestEnumParametersRequestAsync(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake";


            path = $"{path}?";
            
            if (enumQueryStringArray != null)
                path = $"{path}enum_query_string_array={Uri.EscapeDataString(enumQueryStringArray.ToString()!)}&";  

            if (enumQueryString != null)
                path = $"{path}enum_query_string={Uri.EscapeDataString(enumQueryString.ToString()!)}&";  

            if (enumQueryInteger != null)
                path = $"{path}enum_query_integer={Uri.EscapeDataString(enumQueryInteger.ToString()!)}&";  

            if (enumQueryDouble != null)
                path = $"{path}enum_query_double={Uri.EscapeDataString(enumQueryDouble.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");

            if (enumHeaderStringArray != null)                
                request.Headers.Add(enum_header_string_array, enumHeaderStringArray);                
            if (enumHeaderString != null)                
                request.Headers.Add(enum_header_string, enumHeaderString);                

            if (enumFormStringArray != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("enum_form_string_array", Org.OpenAPITools.Client.ClientUtils.ParameterToString(enumFormStringArray)); // form parameter
            }
            if (enumFormString != null)
            {
                // todo localVarRequestOptions.FormParameters.Add("enum_form_string", Org.OpenAPITools.Client.ClientUtils.ParameterToString(enumFormString)); // form parameter
            }



            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/x-www-form-urlencoded"));

            string[] contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestGroupParametersRequestAsync(int requiredStringGroup, bool requiredBooleanGroup, long requiredInt64Group, int???? stringGroup, bool???? booleanGroup, long???? int64Group, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        /// Fake endpoint to test group parameters (optional) Fake endpoint to test group parameters (optional)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requiredStringGroup">Required String in group parameters</param>
        /// <param name="requiredBooleanGroup">Required Boolean in group parameters</param>
        /// <param name="requiredInt64Group">Required Integer in group parameters</param>
        /// <param name="stringGroup">String in group parameters (optional)</param>
        /// <param name="booleanGroup">Boolean in group parameters (optional)</param>
        /// <param name="int64Group">Integer in group parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestGroupParametersWithHttpInfoAsync(int requiredStringGroup, bool requiredBooleanGroup, long requiredInt64Group, int???? stringGroup = null, bool???? booleanGroup = null, long???? int64Group = null, System.Threading.CancellationToken? cancellationToken = null)
        {

            await ValidateTestGroupParametersRequestAsync(requiredStringGroup, requiredBooleanGroup, requiredInt64Group, stringGroup, booleanGroup, int64Group, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake";


            path = $"{path}?";
            
            path = $"{path}required_string_group={Uri.EscapeDataString(requiredStringGroup.ToString()!)&";

            path = $"{path}required_int64_group={Uri.EscapeDataString(requiredInt64Group.ToString()!)&";

            if (stringGroup != null)
                path = $"{path}string_group={Uri.EscapeDataString(stringGroup.ToString()!)}&";  

            if (int64Group != null)
                path = $"{path}int64_group={Uri.EscapeDataString(int64Group.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");

            request.Headers.Add(required_boolean_group, requiredBooleanGroup);
            if (booleanGroup != null)                
                request.Headers.Add(boolean_group, booleanGroup);                



            // authentication (bearer_test) required
            //isBasicBearer
            // bearer authentication required
            //todo if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                //todo request.Headers.Add("authorization", $"Bearer {Environment.GetEnvironmentVariable("TOKEN_0", EnvironmentVariableTarget.Machine)}");


            string[] contentTypes = new string[] {
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestInlineAdditionalPropertiesRequestAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        /// test inline additionalProperties 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestInlineAdditionalPropertiesWithHttpInfoAsync(Dictionary<string, string> requestBody, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (requestBody == null)
                throw new ArgumentNullException(nameof(requestBody)); 

            await ValidateTestInlineAdditionalPropertiesRequestAsync(requestBody, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/inline-additionalProperties";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");



            // todo localVarRequestOptions.Data = requestBody;


            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            string[] contentTypes = new string[] {
                "application/json"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestJsonFormDataRequestAsync(string param, string param2, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        /// test json serialization of form data 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param">field1</param>
        /// <param name="param2">field2</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestJsonFormDataWithHttpInfoAsync(string param, string param2, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (param == null)
                throw new ArgumentNullException(nameof(param)); 
            if (param2 == null)
                throw new ArgumentNullException(nameof(param2)); 

            await ValidateTestJsonFormDataRequestAsync(param, param2, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/jsonFormData";


            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");


            // todo localVarRequestOptions.FormParameters.Add("param", Org.OpenAPITools.Client.ClientUtils.ParameterToString(param)); // form parameter
            // todo localVarRequestOptions.FormParameters.Add("param2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(param2)); // form parameter



            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/x-www-form-urlencoded"));

            string[] contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }

        /// <summary>
        /// Validate the input before sending the request
        /// </summary>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        protected virtual System.Threading.Tasks.ValueTask ValidateTestQueryParameterCollectionFormatRequestAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, System.Threading.CancellationToken? cancellationToken)
            => new System.Threading.Tasks.ValueTask();        



        /// <summary>
        ///  To test the collection format in query parameters
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipe"></param>
        /// <param name="ioutil"></param>
        /// <param name="http"></param>
        /// <param name="url"></param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TestQueryParameterCollectionFormatWithHttpInfoAsync(List<string> pipe, List<string> ioutil, List<string> http, List<string> url, List<string> context, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (pipe == null)
                throw new ArgumentNullException(nameof(pipe)); 
            if (ioutil == null)
                throw new ArgumentNullException(nameof(ioutil)); 
            if (http == null)
                throw new ArgumentNullException(nameof(http)); 
            if (url == null)
                throw new ArgumentNullException(nameof(url)); 
            if (context == null)
                throw new ArgumentNullException(nameof(context)); 

            await ValidateTestQueryParameterCollectionFormatRequestAsync(pipe, ioutil, http, url, context, cancellationToken).ConfigureAwait(false);

            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/fake/test-query-paramters";


            path = $"{path}?";
            
            path = $"{path}pipe={Uri.EscapeDataString(pipe.ToString()!)&";

            path = $"{path}ioutil={Uri.EscapeDataString(ioutil.ToString()!)&";

            path = $"{path}http={Uri.EscapeDataString(http.ToString()!)&";

            path = $"{path}url={Uri.EscapeDataString(url.ToString()!)&";

            path = $"{path}context={Uri.EscapeDataString(context.ToString()!)&";


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");






            string[] contentTypes = new string[] {
            };

            if (request.Content != null && contentTypes.Length > 0)
                request.Content.Headers.Add("CONTENT-TYPE", contentTypes);


            using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

            string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

            ApiResponse<Object> apiResponse = new(responseMessage, responseContent);

            if (apiResponse.IsSuccessStatusCode)
                apiResponse.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<Object>(apiResponse.RawData, CocApi.Client.ClientUtils.JsonSerializerSettings);

            return apiResponse;
        }
    }
}
