/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Provides hosting configuration for Org.OpenAPITools
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            services.AddSingleton<IAnotherFakeApi, AnotherFakeApi>();
            services.AddSingleton<IDefaultApi, DefaultApi>();
            services.AddSingleton<IFakeApi, FakeApi>();
            services.AddSingleton<IFakeClassnameTags123Api, FakeClassnameTags123Api>();
            services.AddSingleton<IPetApi, PetApi>();
            services.AddSingleton<IStoreApi, StoreApi>();
            services.AddSingleton<IUserApi, UserApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients<TAnotherFakeApi, TDefaultApi, TFakeApi, TFakeClassnameTags123Api, TPetApi, TStoreApi, TUserApi>
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
            where TAnotherFakeApi : class, IAnotherFakeApi
            where TDefaultApi : class, IDefaultApi
            where TFakeApi : class, IFakeApi
            where TFakeClassnameTags123Api : class, IFakeClassnameTags123Api
            where TPetApi : class, IPetApi
            where TStoreApi : class, IStoreApi
            where TUserApi : class, IUserApi
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();
            
            builders.Add(_services.AddHttpClient<IAnotherFakeApi, TAnotherFakeApi>(client));
            builders.Add(_services.AddHttpClient<IDefaultApi, TDefaultApi>(client));
            builders.Add(_services.AddHttpClient<IFakeApi, TFakeApi>(client));
            builders.Add(_services.AddHttpClient<IFakeClassnameTags123Api, TFakeClassnameTags123Api>(client));
            builders.Add(_services.AddHttpClient<IPetApi, TPetApi>(client));
            builders.Add(_services.AddHttpClient<IStoreApi, TStoreApi>(client));
            builders.Add(_services.AddHttpClient<IUserApi, TUserApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients(
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            ClientUtils.JsonSerializerOptions.Converters.Add(new OpenAPIDateJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new CatJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new ChildCatJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new ComplexQuadrilateralJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new DogJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new EquilateralTriangleJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new FruitJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new FruitReqJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new GmFruitJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new IsoscelesTriangleJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new MammalJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new NullableShapeJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new PigJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new QuadrilateralJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new ScaleneTriangleJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new ShapeJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new ShapeOrNullJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new SimpleQuadrilateralJsonConverter());
            ClientUtils.JsonSerializerOptions.Converters.Add(new TriangleJsonConverter());

            AddApiHttpClients<AnotherFakeApi, DefaultApi, FakeApi, FakeClassnameTags123Api, PetApi, StoreApi, UserApi>(client, builder);

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<System.Text.Json.JsonSerializerOptions> options)
        {
            options(Client.ClientUtils.JsonSerializerOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
