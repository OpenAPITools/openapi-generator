/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DateOnlyClass
    /// </summary>
    [DataContract(Name = "DateOnlyClass")]
    public partial class DateOnlyClass : IEquatable<DateOnlyClass>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateOnlyClass" /> class.
        /// </summary>
        /// <param name="dateOnlyProperty">dateOnlyProperty.</param>
        public DateOnlyClass(DateTime dateOnlyProperty = default(DateTime))
        {
            this.DateOnlyProperty = dateOnlyProperty;
        }

        /// <summary>
        /// Gets or Sets DateOnlyProperty
        /// </summary>
        /// <example>&quot;Fri Jul 21 00:00:00 UTC 2017&quot;</example>
        [DataMember(Name = "dateOnlyProperty", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateOnlyProperty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateOnlyClass {\n");
            sb.Append("  DateOnlyProperty: ").Append(DateOnlyProperty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateOnlyClass);
        }

        /// <summary>
        /// Returns true if DateOnlyClass instances are equal
        /// </summary>
        /// <param name="input">Instance of DateOnlyClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateOnlyClass input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateOnlyProperty == input.DateOnlyProperty ||
                    (this.DateOnlyProperty != null &&
                    this.DateOnlyProperty.Equals(input.DateOnlyProperty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateOnlyProperty != null)
                {
                    hashCode = (hashCode * 59) + this.DateOnlyProperty.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
