/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType

import org.openapitools.client.models.Order
import org.openapitools.client.infrastructure.*

class StoreApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun deleteOrder(orderId: kotlin.String): Unit {
        return deleteOrderWithHttpInfo(orderId = orderId)
            .body!!
    }

    @Throws(RestClientResponseException::class)
    fun deleteOrderWithHttpInfo(orderId: kotlin.String): ResponseEntity<Unit> {
        val localVariableConfig = deleteOrderRequestConfig(orderId = orderId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun deleteOrderRequestConfig(orderId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/store/order/{orderId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun getInventory(): kotlin.collections.Map<kotlin.String, kotlin.Int> {
        return getInventoryWithHttpInfo()
            .body!!
    }

    @Throws(RestClientResponseException::class)
    fun getInventoryWithHttpInfo(): ResponseEntity<kotlin.collections.Map<kotlin.String, kotlin.Int>> {
        val localVariableConfig = getInventoryRequestConfig()
        return request<Unit, kotlin.collections.Map<kotlin.String, kotlin.Int>>(
            localVariableConfig
        )
    }

    fun getInventoryRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/store/inventory",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun getOrderById(orderId: kotlin.Long): Order {
        return getOrderByIdWithHttpInfo(orderId = orderId)
            .body!!
    }

    @Throws(RestClientResponseException::class)
    fun getOrderByIdWithHttpInfo(orderId: kotlin.Long): ResponseEntity<Order> {
        val localVariableConfig = getOrderByIdRequestConfig(orderId = orderId)
        return request<Unit, Order>(
            localVariableConfig
        )
    }

    fun getOrderByIdRequestConfig(orderId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/store/order/{orderId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun placeOrder(order: Order): Order {
        return placeOrderWithHttpInfo(order = order)
            .body!!
    }

    @Throws(RestClientResponseException::class)
    fun placeOrderWithHttpInfo(order: Order): ResponseEntity<Order> {
        val localVariableConfig = placeOrderRequestConfig(order = order)
        return request<Order, Order>(
            localVariableConfig
        )
    }

    fun placeOrderRequestConfig(order: Order) : RequestConfig<Order> {
        val localVariableBody = order
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/xml, application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/store/order",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
