/** OpenAPI Petstore
  * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** A pet for sale in the pet store
  * @param id 
  * @param category 
  * @param name 
  * @param photoUrls 
  * @param tags 
  * @param status 
  */
case class Pet(
    id: Option[Long] = None,
    category: Option[Category] = None,
    name: String,
    photoUrls: Seq[String],
    tags: Option[Seq[Tag]] = None,
    status: Option[PetStatus] = None
)
  
object Pet {
  given encoderPet: Encoder[Pet] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.id.map(v => "id" -> v.asJson),
        t.category.map(v => "category" -> v.asJson),
        Some("name" -> t.name.asJson),
        Some("photoUrls" -> t.photoUrls.asJson),
        t.tags.map(v => "tags" -> v.asJson),
        t.status.map(v => "status" -> v.asJson)
      ).flatten
    }
  }
  given decoderPet: Decoder[Pet] = Decoder.instance { c =>
    for {
      id <- c.downField("id").as[Option[Long]]
      category <- c.downField("category").as[Option[Category]]
      name <- c.downField("name").as[String]
      photoUrls <- c.downField("photoUrls").as[Seq[String]]
      tags <- c.downField("tags").as[Option[Seq[Tag]]]
      status <- c.downField("status").as[Option[PetStatus]]
    } yield Pet(
      id = id,
      category = category,
      name = name,
      photoUrls = photoUrls,
      tags = tags,
      status = status
    )
  }
}

