/** OpenAPI Petstore
  * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** An order for a pets from the pet store
  * @param id 
  * @param petId 
  * @param quantity 
  * @param shipDate 
  * @param status 
  * @param complete 
  */
case class Order(
    id: Option[Long] = None,
    petId: Option[Long] = None,
    quantity: Option[Int] = None,
    shipDate: Option[Instant] = None,
    status: Option[OrderStatus] = None,
    complete: Option[Boolean] = None
)
  
object Order {
  given encoderOrder: Encoder[Order] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.id.map(v => "id" -> v.asJson),
        t.petId.map(v => "petId" -> v.asJson),
        t.quantity.map(v => "quantity" -> v.asJson),
        t.shipDate.map(v => "shipDate" -> v.asJson),
        t.status.map(v => "status" -> v.asJson),
        t.complete.map(v => "complete" -> v.asJson)
      ).flatten
    }
  }
  given decoderOrder: Decoder[Order] = Decoder.instance { c =>
    for {
      id <- c.downField("id").as[Option[Long]]
      petId <- c.downField("petId").as[Option[Long]]
      quantity <- c.downField("quantity").as[Option[Int]]
      shipDate <- c.downField("shipDate").as[Option[Instant]]
      status <- c.downField("status").as[Option[OrderStatus]]
      complete <- c.downField("complete").as[Option[Boolean]]
    } yield Order(
      id = id,
      petId = petId,
      quantity = quantity,
      shipDate = shipDate,
      status = status,
      complete = complete
    )
  }
}

