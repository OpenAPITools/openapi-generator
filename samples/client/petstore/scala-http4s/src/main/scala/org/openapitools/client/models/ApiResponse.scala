/** OpenAPI Petstore
  * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Describes the result of uploading an image resource
  * @param code 
  * @param `type` 
  * @param message 
  */
case class ApiResponse(
    code: Option[Int] = None,
    `type`: Option[String] = None,
    message: Option[String] = None
)
  
object ApiResponse {
  given encoderApiResponse: Encoder[ApiResponse] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.code.map(v => "code" -> v.asJson),
        t.`type`.map(v => "type" -> v.asJson),
        t.message.map(v => "message" -> v.asJson)
      ).flatten
    }
  }
  given decoderApiResponse: Decoder[ApiResponse] = Decoder.instance { c =>
    for {
      code <- c.downField("code").as[Option[Int]]
      `type` <- c.downField("type").as[Option[String]]
      message <- c.downField("message").as[Option[String]]
    } yield ApiResponse(
      code = code,
      `type` = `type`,
      message = message
    )
  }
}

