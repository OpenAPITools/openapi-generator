/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/Color.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace
{
using EnumUnderlyingType = utility::string_t;

Color::eColor toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("black")))
        return Color::eColor::Color_BLACK;
    if (val == utility::conversions::to_string_t(U("white")))
        return Color::eColor::Color_WHITE;
    if (val == utility::conversions::to_string_t(U("brown")))
        return Color::eColor::Color_BROWN;
    if (val == utility::conversions::to_string_t(U("golden")))
        return Color::eColor::Color_GOLDEN;
    if (val == utility::conversions::to_string_t(U("mixed")))
        return Color::eColor::Color_MIXED;
    return {};
}

EnumUnderlyingType fromEnum(Color::eColor e)
{
    switch (e)
    {
    case Color::eColor::Color_BLACK:
        return U("black");
    case Color::eColor::Color_WHITE:
        return U("white");
    case Color::eColor::Color_BROWN:
        return U("brown");
    case Color::eColor::Color_GOLDEN:
        return U("golden");
    case Color::eColor::Color_MIXED:
        return U("mixed");
    default:
        break;
    }
    return {};
}
}

Color::Color()
{
}

Color::~Color()
{
}

void Color::validate()
{
    // TODO: implement validation
}

web::json::value Color::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool Color::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void Color::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Color::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

Color::eColor Color::getValue() const
{
   return m_value;
}

void Color::setValue(Color::eColor const value)
{
   m_value = value;
}

Color::Color(utility::string_t str){
    setValue( strToEnumMap[str] );
}

}
}
}
}


