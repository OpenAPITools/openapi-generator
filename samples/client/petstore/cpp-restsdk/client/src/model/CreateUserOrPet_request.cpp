/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/CreateUserOrPet_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


void CreateUserOrPet_request::validate()
{
    // TODO: implement validation
}

const CreateUserOrPet_request::VariantType& CreateUserOrPet_request::getVariant() const
{
    return m_variantValue;
}

void CreateUserOrPet_request::setVariant(CreateUserOrPet_request::VariantType value)
{
    m_variantValue = value;
}

web::json::value CreateUserOrPet_request::toJson() const
{
    web::json::value val = web::json::value::object();

    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (std::is_same_v<T, std::monostate>) {
            val = web::json::value::null();
        } else {
            val = arg.toJson();
        }
    }, m_variantValue);

    return val;
}

void CreateUserOrPet_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    std::visit([&](auto&& arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (!std::is_same_v<T, std::monostate>) {
          arg.toMultipart(multipart, prefix);
        }
    }, m_variantValue);
}

template bool CreateUserOrPet_request::fromJson<Pet>(const web::json::value& json);
template bool CreateUserOrPet_request::fromMultiPart<Pet>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);
template bool CreateUserOrPet_request::fromJson<User>(const web::json::value& json);
template bool CreateUserOrPet_request::fromMultiPart<User>(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix);


}
}
}
}


