/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/Page.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Page::Page()
{
    m_Page = 0;
    m_PageIsSet = false;
    m_PerPage = 0;
    m_PerPageIsSet = false;
}

Page::~Page()
{
}

void Page::validate()
{
    // TODO: implement validation
}

web::json::value Page::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_PageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("page"))] = ModelBase::toJson(m_Page);
    }
    if(m_PerPageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("perPage"))] = ModelBase::toJson(m_PerPage);
    }

    return val;
}

bool Page::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("page"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("page")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPage);
            setPage(refVal_setPage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("perPage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("perPage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPerPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPerPage);
            setPerPage(refVal_setPerPage);
            
        }
    }
    return ok;
}

void Page::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("page")), m_Page));
    }
    if(m_PerPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("perPage")), m_PerPage));
    }
}

bool Page::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("page"))))
    {
        int32_t refVal_setPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("page"))), refVal_setPage );
        setPage(refVal_setPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("perPage"))))
    {
        int32_t refVal_setPerPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("perPage"))), refVal_setPerPage );
        setPerPage(refVal_setPerPage);
    }
    return ok;
}


int32_t Page::getPage() const
{
    return m_Page;
}

void Page::setPage(int32_t value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool Page::pageIsSet() const
{
    return m_PageIsSet;
}

void Page::unsetPage()
{
    m_PageIsSet = false;
}
int32_t Page::getPerPage() const
{
    return m_PerPage;
}

void Page::setPerPage(int32_t value)
{
    m_PerPage = value;
    m_PerPageIsSet = true;
}

bool Page::perPageIsSet() const
{
    return m_PerPageIsSet;
}

void Page::unsetPerPage()
{
    m_PerPageIsSet = false;
}

}
}
}
}


