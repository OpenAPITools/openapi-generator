/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.7.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/SchemaWithSet.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SchemaWithSet::SchemaWithSet()
{
    m_CertificatesIsSet = false;
    m_VaccinationBookIsSet = false;
}

SchemaWithSet::~SchemaWithSet()
{
}

void SchemaWithSet::validate()
{
    // TODO: implement validation
}

web::json::value SchemaWithSet::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CertificatesIsSet)
    {
        val[utility::conversions::to_string_t(U("certificates"))] = ModelBase::toJson(m_Certificates);
    }
    if(m_VaccinationBookIsSet)
    {
        val[utility::conversions::to_string_t(U("vaccinationBook"))] = ModelBase::toJson(m_VaccinationBook);
    }

    return val;
}

bool SchemaWithSet::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("certificates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("certificates")));
        if(!fieldValue.is_null())
        {
            std::set<utility::string_t> refVal_setCertificates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCertificates);
            setCertificates(refVal_setCertificates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vaccinationBook"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vaccinationBook")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SchemaWithSet_vaccinationBook> refVal_setVaccinationBook;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVaccinationBook);
            setVaccinationBook(refVal_setVaccinationBook);
        }
    }
    return ok;
}

void SchemaWithSet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CertificatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("certificates")), m_Certificates));
    }
    if(m_VaccinationBookIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vaccinationBook")), m_VaccinationBook));
    }
}

bool SchemaWithSet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("certificates"))))
    {
        std::set<utility::string_t> refVal_setCertificates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("certificates"))), refVal_setCertificates );
        setCertificates(refVal_setCertificates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vaccinationBook"))))
    {
        std::shared_ptr<SchemaWithSet_vaccinationBook> refVal_setVaccinationBook;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vaccinationBook"))), refVal_setVaccinationBook );
        setVaccinationBook(refVal_setVaccinationBook);
    }
    return ok;
}

std::set<utility::string_t>& SchemaWithSet::getCertificates()
{
    return m_Certificates;
}

void SchemaWithSet::setCertificates(const std::set<utility::string_t>& value)
{
    m_Certificates = value;
    m_CertificatesIsSet = true;
}

bool SchemaWithSet::certificatesIsSet() const
{
    return m_CertificatesIsSet;
}

void SchemaWithSet::unsetCertificates()
{
    m_CertificatesIsSet = false;
}
std::shared_ptr<SchemaWithSet_vaccinationBook> SchemaWithSet::getVaccinationBook() const
{
    return m_VaccinationBook;
}

void SchemaWithSet::setVaccinationBook(const std::shared_ptr<SchemaWithSet_vaccinationBook>& value)
{
    m_VaccinationBook = value;
    m_VaccinationBookIsSet = true;
}

bool SchemaWithSet::vaccinationBookIsSet() const
{
    return m_VaccinationBookIsSet;
}

void SchemaWithSet::unsetVaccinationBook()
{
    m_VaccinationBookIsSet = false;
}
}
}
}
}


