/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UploadFileBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UploadFileBody::UploadFileBody()
{
    m_AdditionalMetadata = utility::conversions::to_string_t("");
    m_AdditionalMetadataIsSet = false;
    m_fileIsSet = false;
}

UploadFileBody::~UploadFileBody()
{
}

void UploadFileBody::validate()
{
    // TODO: implement validation
}

web::json::value UploadFileBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdditionalMetadataIsSet)
    {
        val[utility::conversions::to_string_t("additionalMetadata")] = ModelBase::toJson(m_AdditionalMetadata);
    }
    if(m_fileIsSet)
    {
        val[utility::conversions::to_string_t("file")] = ModelBase::toJson(m_file);
    }

    return val;
}

bool UploadFileBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("additionalMetadata")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("additionalMetadata"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_additionalMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_additionalMetadata);
            setAdditionalMetadata(refVal_additionalMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("file"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HttpContent> refVal_file;
            ok &= ModelBase::fromJson(fieldValue, refVal_file);
            setFile(refVal_file);
        }
    }
    return ok;
}

void UploadFileBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalMetadata"), m_AdditionalMetadata));
    }
    if(m_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("file"), m_file));
    }
}

bool UploadFileBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalMetadata")))
    {
        utility::string_t refVal_additionalMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalMetadata")), refVal_additionalMetadata );
        setAdditionalMetadata(refVal_additionalMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file")))
    {
        std::shared_ptr<HttpContent> refVal_file;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("file")), refVal_file );
        setFile(refVal_file);
    }
    return ok;
}

utility::string_t UploadFileBody::getAdditionalMetadata() const
{
    return m_AdditionalMetadata;
}

void UploadFileBody::setAdditionalMetadata(const utility::string_t& value)
{
    m_AdditionalMetadata = value;
    m_AdditionalMetadataIsSet = true;
}

bool UploadFileBody::additionalMetadataIsSet() const
{
    return m_AdditionalMetadataIsSet;
}

void UploadFileBody::unsetAdditionalMetadata()
{
    m_AdditionalMetadataIsSet = false;
}
std::shared_ptr<HttpContent> UploadFileBody::getFile() const
{
    return m_file;
}

void UploadFileBody::setFile(const std::shared_ptr<HttpContent>& value)
{
    m_file = value;
    m_fileIsSet = true;
}

bool UploadFileBody::fileIsSet() const
{
    return m_fileIsSet;
}

void UploadFileBody::unsetfile()
{
    m_fileIsSet = false;
}
}
}
}
}


