/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "Pet.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

Pet::Pet(QString* json) {
    init();
    this->fromJson(*json);
}

Pet::Pet() {
    init();
}

Pet::~Pet() {
    this->cleanup();
}

void
Pet::init() {
    id = 0L;
    category = new Category();
    name = new QString("");
    photo_urls = new QList<QString*>();
    tags = new QList<Tag*>();
    status = new QString("");
}

void
Pet::cleanup() {
    

    if(category != nullptr) {
        delete category;
    }

    if(name != nullptr) {
        delete name;
    }

    if(photo_urls != nullptr) {
        QList<QString*>* arr = photo_urls;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete photo_urls;
    }

    if(tags != nullptr) {
        QList<Tag*>* arr = tags;
        foreach(Tag* o, *arr) {
            delete o;
        }
        delete tags;
    }

    if(status != nullptr) {
        delete status;
    }
}

Pet*
Pet::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
Pet::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&category, pJson["category"], "Category", "Category");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&photo_urls, pJson["photoUrls"], "QList", "QString");
    
    
    ::Swagger::setValue(&tags, pJson["tags"], "QList", "Tag");
    
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
}

QString
Pet::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
Pet::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("category"), category, obj, QString("Category"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    QJsonArray photo_urlsJsonArray;
    toJsonArray((QList<void*>*)photo_urls, &photo_urlsJsonArray, "photo_urls", "QString");
    obj->insert("photoUrls", photo_urlsJsonArray);

    QJsonArray tagsJsonArray;
    toJsonArray((QList<void*>*)tags, &tagsJsonArray, "tags", "Tag");
    obj->insert("tags", tagsJsonArray);

    toJsonValue(QString("status"), status, obj, QString("QString"));

    return obj;
}

qint64
Pet::getId() {
    return id;
}
void
Pet::setId(qint64 id) {
    this->id = id;
}

Category*
Pet::getCategory() {
    return category;
}
void
Pet::setCategory(Category* category) {
    this->category = category;
}

QString*
Pet::getName() {
    return name;
}
void
Pet::setName(QString* name) {
    this->name = name;
}

QList<QString*>*
Pet::getPhotoUrls() {
    return photo_urls;
}
void
Pet::setPhotoUrls(QList<QString*>* photo_urls) {
    this->photo_urls = photo_urls;
}

QList<Tag*>*
Pet::getTags() {
    return tags;
}
void
Pet::setTags(QList<Tag*>* tags) {
    this->tags = tags;
}

QString*
Pet::getStatus() {
    return status;
}
void
Pet::setStatus(QString* status) {
    this->status = status;
}


}

