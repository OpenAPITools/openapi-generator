/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "User.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

User::User(QString* json) {
    init();
    this->fromJson(*json);
}

User::User() {
    init();
}

User::~User() {
    this->cleanup();
}

void
User::init() {
    id = 0L;
    username = new QString("");
    first_name = new QString("");
    last_name = new QString("");
    email = new QString("");
    password = new QString("");
    phone = new QString("");
    user_status = 0;
}

void
User::cleanup() {
    

    if(username != nullptr) {
        delete username;
    }

    if(first_name != nullptr) {
        delete first_name;
    }

    if(last_name != nullptr) {
        delete last_name;
    }

    if(email != nullptr) {
        delete email;
    }

    if(password != nullptr) {
        delete password;
    }

    if(phone != nullptr) {
        delete phone;
    }

}

User*
User::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
User::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&username, pJson["username"], "QString", "QString");
    ::Swagger::setValue(&first_name, pJson["firstName"], "QString", "QString");
    ::Swagger::setValue(&last_name, pJson["lastName"], "QString", "QString");
    ::Swagger::setValue(&email, pJson["email"], "QString", "QString");
    ::Swagger::setValue(&password, pJson["password"], "QString", "QString");
    ::Swagger::setValue(&phone, pJson["phone"], "QString", "QString");
    ::Swagger::setValue(&user_status, pJson["userStatus"], "qint32", "");
}

QString
User::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
User::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("username"), username, obj, QString("QString"));

    toJsonValue(QString("firstName"), first_name, obj, QString("QString"));

    toJsonValue(QString("lastName"), last_name, obj, QString("QString"));

    toJsonValue(QString("email"), email, obj, QString("QString"));

    toJsonValue(QString("password"), password, obj, QString("QString"));

    toJsonValue(QString("phone"), phone, obj, QString("QString"));

    obj->insert("userStatus", QJsonValue(user_status));

    return obj;
}

qint64
User::getId() {
    return id;
}
void
User::setId(qint64 id) {
    this->id = id;
}

QString*
User::getUsername() {
    return username;
}
void
User::setUsername(QString* username) {
    this->username = username;
}

QString*
User::getFirstName() {
    return first_name;
}
void
User::setFirstName(QString* first_name) {
    this->first_name = first_name;
}

QString*
User::getLastName() {
    return last_name;
}
void
User::setLastName(QString* last_name) {
    this->last_name = last_name;
}

QString*
User::getEmail() {
    return email;
}
void
User::setEmail(QString* email) {
    this->email = email;
}

QString*
User::getPassword() {
    return password;
}
void
User::setPassword(QString* password) {
    this->password = password;
}

QString*
User::getPhone() {
    return phone;
}
void
User::setPhone(QString* phone) {
    this->phone = phone;
}

qint32
User::getUserStatus() {
    return user_status;
}
void
User::setUserStatus(qint32 user_status) {
    this->user_status = user_status;
}


}

