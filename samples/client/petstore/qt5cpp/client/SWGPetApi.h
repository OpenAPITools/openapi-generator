/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _SWG_SWGPetApi_H_
#define _SWG_SWGPetApi_H_

#include "SWGHttpRequest.h"

#include "SWGPet.h"
#include <QString>
#include "SWGApiResponse.h"
#include "SWGHttpRequest.h"

#include <QObject>

namespace Swagger {

class SWGPetApi: public QObject {
    Q_OBJECT

public:
    SWGPetApi();
    SWGPetApi(QString host, QString basePath);
    ~SWGPetApi();

    QString host;
    QString basePath;

    void addPet(SWGPet body);
    void deletePet(qint64 petId, QString* apiKey);
    void findPetsByStatus(QList<QString*>* status);
    void findPetsByTags(QList<QString*>* tags);
    void getPetById(qint64 petId);
    void updatePet(SWGPet body);
    void updatePetWithForm(qint64 petId, QString* name, QString* status);
    void uploadFile(qint64 petId, QString* additionalMetadata, SWGHttpRequestInputFileElement* file);
    
private:
    void addPetCallback (HttpRequestWorker * worker);
    void deletePetCallback (HttpRequestWorker * worker);
    void findPetsByStatusCallback (HttpRequestWorker * worker);
    void findPetsByTagsCallback (HttpRequestWorker * worker);
    void getPetByIdCallback (HttpRequestWorker * worker);
    void updatePetCallback (HttpRequestWorker * worker);
    void updatePetWithFormCallback (HttpRequestWorker * worker);
    void uploadFileCallback (HttpRequestWorker * worker);
    
signals:
    void addPetSignal();
    void deletePetSignal();
    void findPetsByStatusSignal(QList<SWGPet*>* summary);
    void findPetsByTagsSignal(QList<SWGPet*>* summary);
    void getPetByIdSignal(SWGPet* summary);
    void updatePetSignal();
    void updatePetWithFormSignal();
    void uploadFileSignal(SWGApiResponse* summary);
    
};
}
#endif
