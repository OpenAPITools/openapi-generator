extends Resource
class_name DemoOrderModel

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DemoOrderModel Model
# An order for a pets from the pet store


# Required: False
# isArray: false
@export var id: float:
	set(value):
		__id__was__set = true
		id = value
var __id__was__set := false

# Required: False
# isArray: false
@export var petId: float:
	set(value):
		__petId__was__set = true
		petId = value
var __petId__was__set := false

# Required: False
# isArray: false
@export var quantity: int:
	set(value):
		__quantity__was__set = true
		quantity = value
var __quantity__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: False
# isArray: false
@export var shipDate: String:
	set(value):
		__shipDate__was__set = true
		shipDate = value
var __shipDate__was__set := false

# Order Status
# Required: False
# isArray: false
# Allowed values: "placed", "approved", "delivered"
@export var status: String = "":
	set(value):
		if str(value) != "" and not (str(value) in __status__allowable__values):
			push_error("DemoOrderModel: tried to set property `status` to a value that is not allowed." +
				"  Allowed values: `placed`, `approved`, `delivered`")
			return
		__status__was__set = true
		status = value
var __status__was__set := false
var __status__allowable__values := ["placed", "approved", "delivered"]

# Required: False
# isArray: false
@export var complete: bool = false:
	set(value):
		__complete__was__set = true
		complete = value
var __complete__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__id__was__set:
		bzz_dictionary["id"] = self.id
	if self.__petId__was__set:
		bzz_dictionary["petId"] = self.petId
	if self.__quantity__was__set:
		bzz_dictionary["quantity"] = self.quantity
	if self.__shipDate__was__set:
		bzz_dictionary["shipDate"] = self.shipDate
	if self.__status__was__set:
		bzz_dictionary["status"] = self.status
	if self.__complete__was__set:
		bzz_dictionary["complete"] = self.complete
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("id"):
		me.id = from_dict["id"]
	if from_dict.has("petId"):
		me.petId = from_dict["petId"]
	if from_dict.has("quantity"):
		me.quantity = from_dict["quantity"]
	if from_dict.has("shipDate"):
		me.shipDate = from_dict["shipDate"]
	if from_dict.has("status"):
		me.status = from_dict["status"]
	if from_dict.has("complete"):
		me.complete = from_dict["complete"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

