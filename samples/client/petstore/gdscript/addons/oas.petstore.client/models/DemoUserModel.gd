extends Resource
class_name DemoUserModel

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DemoUserModel Model
# A User who is purchasing from the pet store


# Required: False
# isArray: false
@export var id: float:
	set(value):
		__id__was__set = true
		id = value
var __id__was__set := false

# Required: False
# isArray: false
@export var username: String = "":
	set(value):
		__username__was__set = true
		username = value
var __username__was__set := false

# Required: False
# isArray: false
@export var firstName: String = "":
	set(value):
		__firstName__was__set = true
		firstName = value
var __firstName__was__set := false

# Required: False
# isArray: false
@export var lastName: String = "":
	set(value):
		__lastName__was__set = true
		lastName = value
var __lastName__was__set := false

# Required: False
# isArray: false
@export var email: String = "":
	set(value):
		__email__was__set = true
		email = value
var __email__was__set := false

# Required: False
# isArray: false
@export var password: String = "":
	set(value):
		__password__was__set = true
		password = value
var __password__was__set := false

# Required: False
# isArray: false
@export var phone: String = "":
	set(value):
		__phone__was__set = true
		phone = value
var __phone__was__set := false

# User Status
# Required: False
# isArray: false
@export var userStatus: int:
	set(value):
		__userStatus__was__set = true
		userStatus = value
var __userStatus__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__id__was__set:
		bzz_dictionary["id"] = self.id
	if self.__username__was__set:
		bzz_dictionary["username"] = self.username
	if self.__firstName__was__set:
		bzz_dictionary["firstName"] = self.firstName
	if self.__lastName__was__set:
		bzz_dictionary["lastName"] = self.lastName
	if self.__email__was__set:
		bzz_dictionary["email"] = self.email
	if self.__password__was__set:
		bzz_dictionary["password"] = self.password
	if self.__phone__was__set:
		bzz_dictionary["phone"] = self.phone
	if self.__userStatus__was__set:
		bzz_dictionary["userStatus"] = self.userStatus
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("id"):
		me.id = from_dict["id"]
	if from_dict.has("username"):
		me.username = from_dict["username"]
	if from_dict.has("firstName"):
		me.firstName = from_dict["firstName"]
	if from_dict.has("lastName"):
		me.lastName = from_dict["lastName"]
	if from_dict.has("email"):
		me.email = from_dict["email"]
	if from_dict.has("password"):
		me.password = from_dict["password"]
	if from_dict.has("phone"):
		me.phone = from_dict["phone"]
	if from_dict.has("userStatus"):
		me.userStatus = from_dict["userStatus"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

