extends Resource
class_name DemoEnumArrayTestingModel

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DemoEnumArrayTestingModel Model
# Test of enum array


# Required: True
# isArray: true
# Allowed values: "A", "B", "C"
@export var requiredUnderscoreenums: Array:
	set(value):
		if str(value) != "" and not (str(value) in __requiredUnderscoreenums__allowable__values):
			push_error("DemoEnumArrayTestingModel: tried to set property `requiredUnderscoreenums` to a value that is not allowed." +
				"  Allowed values: `A`, `B`, `C`")
			return
		__requiredUnderscoreenums__was__set = true
		requiredUnderscoreenums = value
var __requiredUnderscoreenums__was__set := false
var __requiredUnderscoreenums__allowable__values := ["A", "B", "C"]


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__requiredUnderscoreenums__was__set:
		bzz_missing_properties.append("requiredUnderscoreenums")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__requiredUnderscoreenums__was__set:
		bzz_dictionary["requiredUnderscoreenums"] = self.requiredUnderscoreenums
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("requiredUnderscoreenums"):
		me.requiredUnderscoreenums = from_dict["requiredUnderscoreenums"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

