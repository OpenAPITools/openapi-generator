extends Resource
class_name DemoOptionalTestingModel

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DemoOptionalTestingModel Model
# Test handling of optional and nullable fields


# Required: False
# isArray: false
@export var optionalUnderscorenonnull: String = "":
	set(value):
		__optionalUnderscorenonnull__was__set = true
		optionalUnderscorenonnull = value
var __optionalUnderscorenonnull__was__set := false

# Required: True
# isArray: false
@export var requiredUnderscorenonnull: String = "":
	set(value):
		__requiredUnderscorenonnull__was__set = true
		requiredUnderscorenonnull = value
var __requiredUnderscorenonnull__was__set := false

# Required: False
# isArray: false
@export var optionalUnderscorenullable: String = "":
	set(value):
		__optionalUnderscorenullable__was__set = true
		optionalUnderscorenullable = value
var __optionalUnderscorenullable__was__set := false

# Required: True
# isArray: false
@export var requiredUnderscorenullable: String = "":
	set(value):
		__requiredUnderscorenullable__was__set = true
		requiredUnderscorenullable = value
var __requiredUnderscorenullable__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__requiredUnderscorenonnull__was__set:
		bzz_missing_properties.append("requiredUnderscorenonnull")
	if not self.__requiredUnderscorenullable__was__set:
		bzz_missing_properties.append("requiredUnderscorenullable")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__optionalUnderscorenonnull__was__set:
		bzz_dictionary["optionalUnderscorenonnull"] = self.optionalUnderscorenonnull
	if self.__requiredUnderscorenonnull__was__set:
		bzz_dictionary["requiredUnderscorenonnull"] = self.requiredUnderscorenonnull
	if self.__optionalUnderscorenullable__was__set:
		bzz_dictionary["optionalUnderscorenullable"] = self.optionalUnderscorenullable
	if self.__requiredUnderscorenullable__was__set:
		bzz_dictionary["requiredUnderscorenullable"] = self.requiredUnderscorenullable
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("optionalUnderscorenonnull"):
		me.optionalUnderscorenonnull = from_dict["optionalUnderscorenonnull"]
	if from_dict.has("requiredUnderscorenonnull"):
		me.requiredUnderscorenonnull = from_dict["requiredUnderscorenonnull"]
	if from_dict.has("optionalUnderscorenullable"):
		me.optionalUnderscorenullable = from_dict["optionalUnderscorenullable"]
	if from_dict.has("requiredUnderscorenullable"):
		me.requiredUnderscorenullable = from_dict["requiredUnderscorenullable"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

