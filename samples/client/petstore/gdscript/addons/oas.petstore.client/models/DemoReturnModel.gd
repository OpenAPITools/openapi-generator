extends Resource
class_name DemoReturnModel

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DemoReturnModel Model
# Test using keywords


# Required: False
# isArray: false
@export var some_match: int:
	set(value):
		__some_match__was__set = true
		some_match = value
var __some_match__was__set := false

# Required: False
# isArray: false
@export var async: bool:
	set(value):
		__async__was__set = true
		async = value
var __async__was__set := false

# Required: False
# isArray: false
@export var some_super: bool:
	set(value):
		__some_super__was__set = true
		some_super = value
var __some_super__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__some_match__was__set:
		bzz_dictionary["some_match"] = self.some_match
	if self.__async__was__set:
		bzz_dictionary["async"] = self.async
	if self.__some_super__was__set:
		bzz_dictionary["some_super"] = self.some_super
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("some_match"):
		me.some_match = from_dict["some_match"]
	if from_dict.has("async"):
		me.async = from_dict["async"]
	if from_dict.has("some_super"):
		me.some_super = from_dict["some_super"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

