// Code generated by MockGen. DO NOT EDIT.
// Source: api_pet.go

// Package petstore is a generated GoMock package.
package petstore

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockPetApi is a mock of PetApi interface
type MockPetApi struct {
	ctrl     *gomock.Controller
	recorder *MockPetApiMockRecorder
}

// MockPetApiMockRecorder is the mock recorder for MockPetApi
type MockPetApiMockRecorder struct {
	mock *MockPetApi
}

// NewMockPetApi creates a new mock instance
func NewMockPetApi(ctrl *gomock.Controller) *MockPetApi {
	mock := &MockPetApi{ctrl: ctrl}
	mock.recorder = &MockPetApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPetApi) EXPECT() *MockPetApiMockRecorder {
	return m.recorder
}

// AddPetGetRequest mocks base method
func (m *MockPetApi) AddPetGetRequest(ctx context.Context) ApiAddPetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPetGetRequest", ctx)
	ret0, _ := ret[0].(ApiAddPetRequest)
	return ret0
}

// AddPetGetRequest indicates an expected call of AddPetGetRequest
func (mr *MockPetApiMockRecorder) AddPetGetRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPetGetRequest", reflect.TypeOf((*MockPetApi)(nil).AddPetGetRequest), ctx)
}

// AddPetExecute mocks base method
func (m *MockPetApi) AddPetExecute(r ApiAddPetRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPetExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPetExecute indicates an expected call of AddPetExecute
func (mr *MockPetApiMockRecorder) AddPetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPetExecute", reflect.TypeOf((*MockPetApi)(nil).AddPetExecute), r)
}

// DeletePetGetRequest mocks base method
func (m *MockPetApi) DeletePetGetRequest(ctx context.Context, petId int64) ApiDeletePetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePetGetRequest", ctx, petId)
	ret0, _ := ret[0].(ApiDeletePetRequest)
	return ret0
}

// DeletePetGetRequest indicates an expected call of DeletePetGetRequest
func (mr *MockPetApiMockRecorder) DeletePetGetRequest(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePetGetRequest", reflect.TypeOf((*MockPetApi)(nil).DeletePetGetRequest), ctx, petId)
}

// DeletePetExecute mocks base method
func (m *MockPetApi) DeletePetExecute(r ApiDeletePetRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePetExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePetExecute indicates an expected call of DeletePetExecute
func (mr *MockPetApiMockRecorder) DeletePetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePetExecute", reflect.TypeOf((*MockPetApi)(nil).DeletePetExecute), r)
}

// FindPetsByStatusGetRequest mocks base method
func (m *MockPetApi) FindPetsByStatusGetRequest(ctx context.Context) ApiFindPetsByStatusRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPetsByStatusGetRequest", ctx)
	ret0, _ := ret[0].(ApiFindPetsByStatusRequest)
	return ret0
}

// FindPetsByStatusGetRequest indicates an expected call of FindPetsByStatusGetRequest
func (mr *MockPetApiMockRecorder) FindPetsByStatusGetRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByStatusGetRequest", reflect.TypeOf((*MockPetApi)(nil).FindPetsByStatusGetRequest), ctx)
}

// FindPetsByStatusExecute mocks base method
func (m *MockPetApi) FindPetsByStatusExecute(r ApiFindPetsByStatusRequest) ([]Pet, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPetsByStatusExecute", r)
	ret0, _ := ret[0].([]Pet)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPetsByStatusExecute indicates an expected call of FindPetsByStatusExecute
func (mr *MockPetApiMockRecorder) FindPetsByStatusExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByStatusExecute", reflect.TypeOf((*MockPetApi)(nil).FindPetsByStatusExecute), r)
}

// FindPetsByTagsGetRequest mocks base method
func (m *MockPetApi) FindPetsByTagsGetRequest(ctx context.Context) ApiFindPetsByTagsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPetsByTagsGetRequest", ctx)
	ret0, _ := ret[0].(ApiFindPetsByTagsRequest)
	return ret0
}

// FindPetsByTagsGetRequest indicates an expected call of FindPetsByTagsGetRequest
func (mr *MockPetApiMockRecorder) FindPetsByTagsGetRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByTagsGetRequest", reflect.TypeOf((*MockPetApi)(nil).FindPetsByTagsGetRequest), ctx)
}

// FindPetsByTagsExecute mocks base method
func (m *MockPetApi) FindPetsByTagsExecute(r ApiFindPetsByTagsRequest) ([]Pet, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPetsByTagsExecute", r)
	ret0, _ := ret[0].([]Pet)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPetsByTagsExecute indicates an expected call of FindPetsByTagsExecute
func (mr *MockPetApiMockRecorder) FindPetsByTagsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByTagsExecute", reflect.TypeOf((*MockPetApi)(nil).FindPetsByTagsExecute), r)
}

// GetPetByIdGetRequest mocks base method
func (m *MockPetApi) GetPetByIdGetRequest(ctx context.Context, petId int64) ApiGetPetByIdRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetByIdGetRequest", ctx, petId)
	ret0, _ := ret[0].(ApiGetPetByIdRequest)
	return ret0
}

// GetPetByIdGetRequest indicates an expected call of GetPetByIdGetRequest
func (mr *MockPetApiMockRecorder) GetPetByIdGetRequest(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetByIdGetRequest", reflect.TypeOf((*MockPetApi)(nil).GetPetByIdGetRequest), ctx, petId)
}

// GetPetByIdExecute mocks base method
func (m *MockPetApi) GetPetByIdExecute(r ApiGetPetByIdRequest) (Pet, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetByIdExecute", r)
	ret0, _ := ret[0].(Pet)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPetByIdExecute indicates an expected call of GetPetByIdExecute
func (mr *MockPetApiMockRecorder) GetPetByIdExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetByIdExecute", reflect.TypeOf((*MockPetApi)(nil).GetPetByIdExecute), r)
}

// UpdatePetGetRequest mocks base method
func (m *MockPetApi) UpdatePetGetRequest(ctx context.Context) ApiUpdatePetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePetGetRequest", ctx)
	ret0, _ := ret[0].(ApiUpdatePetRequest)
	return ret0
}

// UpdatePetGetRequest indicates an expected call of UpdatePetGetRequest
func (mr *MockPetApiMockRecorder) UpdatePetGetRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetGetRequest", reflect.TypeOf((*MockPetApi)(nil).UpdatePetGetRequest), ctx)
}

// UpdatePetExecute mocks base method
func (m *MockPetApi) UpdatePetExecute(r ApiUpdatePetRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePetExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePetExecute indicates an expected call of UpdatePetExecute
func (mr *MockPetApiMockRecorder) UpdatePetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetExecute", reflect.TypeOf((*MockPetApi)(nil).UpdatePetExecute), r)
}

// UpdatePetWithFormGetRequest mocks base method
func (m *MockPetApi) UpdatePetWithFormGetRequest(ctx context.Context, petId int64) ApiUpdatePetWithFormRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePetWithFormGetRequest", ctx, petId)
	ret0, _ := ret[0].(ApiUpdatePetWithFormRequest)
	return ret0
}

// UpdatePetWithFormGetRequest indicates an expected call of UpdatePetWithFormGetRequest
func (mr *MockPetApiMockRecorder) UpdatePetWithFormGetRequest(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetWithFormGetRequest", reflect.TypeOf((*MockPetApi)(nil).UpdatePetWithFormGetRequest), ctx, petId)
}

// UpdatePetWithFormExecute mocks base method
func (m *MockPetApi) UpdatePetWithFormExecute(r ApiUpdatePetWithFormRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePetWithFormExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePetWithFormExecute indicates an expected call of UpdatePetWithFormExecute
func (mr *MockPetApiMockRecorder) UpdatePetWithFormExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetWithFormExecute", reflect.TypeOf((*MockPetApi)(nil).UpdatePetWithFormExecute), r)
}

// UploadFileGetRequest mocks base method
func (m *MockPetApi) UploadFileGetRequest(ctx context.Context, petId int64) ApiUploadFileRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileGetRequest", ctx, petId)
	ret0, _ := ret[0].(ApiUploadFileRequest)
	return ret0
}

// UploadFileGetRequest indicates an expected call of UploadFileGetRequest
func (mr *MockPetApiMockRecorder) UploadFileGetRequest(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileGetRequest", reflect.TypeOf((*MockPetApi)(nil).UploadFileGetRequest), ctx, petId)
}

// UploadFileExecute mocks base method
func (m *MockPetApi) UploadFileExecute(r ApiUploadFileRequest) (ApiResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileExecute", r)
	ret0, _ := ret[0].(ApiResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFileExecute indicates an expected call of UploadFileExecute
func (mr *MockPetApiMockRecorder) UploadFileExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileExecute", reflect.TypeOf((*MockPetApi)(nil).UploadFileExecute), r)
}

// UploadFileWithRequiredFileGetRequest mocks base method
func (m *MockPetApi) UploadFileWithRequiredFileGetRequest(ctx context.Context, petId int64) ApiUploadFileWithRequiredFileRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileWithRequiredFileGetRequest", ctx, petId)
	ret0, _ := ret[0].(ApiUploadFileWithRequiredFileRequest)
	return ret0
}

// UploadFileWithRequiredFileGetRequest indicates an expected call of UploadFileWithRequiredFileGetRequest
func (mr *MockPetApiMockRecorder) UploadFileWithRequiredFileGetRequest(ctx, petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileWithRequiredFileGetRequest", reflect.TypeOf((*MockPetApi)(nil).UploadFileWithRequiredFileGetRequest), ctx, petId)
}

// UploadFileWithRequiredFileExecute mocks base method
func (m *MockPetApi) UploadFileWithRequiredFileExecute(r ApiUploadFileWithRequiredFileRequest) (ApiResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileWithRequiredFileExecute", r)
	ret0, _ := ret[0].(ApiResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFileWithRequiredFileExecute indicates an expected call of UploadFileWithRequiredFileExecute
func (mr *MockPetApiMockRecorder) UploadFileWithRequiredFileExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileWithRequiredFileExecute", reflect.TypeOf((*MockPetApi)(nil).UploadFileWithRequiredFileExecute), r)
}
