/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// Resource Must be named `Resource` for test.
type Resource struct {
	// Test resource
	SourceURI *string `json:"sourceURI,omitempty"`
}

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource() *Resource {
	this := Resource{}
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetSourceURI returns the SourceURI field value if set, zero value otherwise.
func (o *Resource) GetSourceURI() string {
	if o == nil || o.SourceURI == nil {
		var ret string
		return ret
	}
	return *o.SourceURI
}

// GetSourceURIOk returns a tuple with the SourceURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetSourceURIOk() (*string, bool) {
	if o == nil || o.SourceURI == nil {
		return nil, false
	}
	return o.SourceURI, true
}

// HasSourceURI returns a boolean if a field has been set.
func (o *Resource) HasSourceURI() bool {
	if o != nil && o.SourceURI != nil {
		return true
	}

	return false
}

// SetSourceURI gets a reference to the given string and assigns it to the SourceURI field.
func (o *Resource) SetSourceURI(v string) {
	o.SourceURI = &v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceURI != nil {
		toSerialize["sourceURI"] = o.SourceURI
	}
	return json.Marshal(toSerialize)
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
