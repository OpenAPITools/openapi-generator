/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
	"fmt"
)

// EnumTestEnumString the model 'EnumTestEnumString'
type EnumTestEnumString string

// List of Enum_TestEnumString
const (
	ENUM_TEST_ENUM_STRING_UPPER EnumTestEnumString = "UPPER"
	ENUM_TEST_ENUM_STRING_LOWER EnumTestEnumString = "lower"
	ENUM_TEST_ENUM_STRING_EMPTY EnumTestEnumString = ""
)

func (v *EnumTestEnumString) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumTestEnumString(value)
	for _, existing := range []EnumTestEnumString{ "UPPER", "lower", "",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumTestEnumString", *v)
}

// Ptr returns reference to Enum_TestEnumString value
func (v EnumTestEnumString) Ptr() *EnumTestEnumString {
	return &v
}

type NullableEnumTestEnumString struct {
	value *EnumTestEnumString
	isSet bool
}

func (v NullableEnumTestEnumString) Get() *EnumTestEnumString {
	return v.value
}

func (v *NullableEnumTestEnumString) Set(val *EnumTestEnumString) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTestEnumString) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTestEnumString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTestEnumString(val *EnumTestEnumString) *NullableEnumTestEnumString {
	return &NullableEnumTestEnumString{value: val, isSet: true}
}

func (v NullableEnumTestEnumString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTestEnumString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

