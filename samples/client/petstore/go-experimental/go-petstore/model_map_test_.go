/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore
import (
	"encoding/json"
)

type MapTest struct {
	MapMapOfString *map[string]map[string]string `json:"map_map_of_string,omitempty"`

	MapOfEnumString *map[string]string `json:"map_of_enum_string,omitempty"`

	DirectMap *map[string]bool `json:"direct_map,omitempty"`

	IndirectMap *map[string]bool `json:"indirect_map,omitempty"`

}

// GetMapMapOfString returns the MapMapOfString field if non-nil, zero value otherwise.
func (o *MapTest) GetMapMapOfString() map[string]map[string]string {
	if o == nil || o.MapMapOfString == nil {
		var ret map[string]map[string]string
		return ret
	}
	return *o.MapMapOfString
}

// GetMapMapOfStringOk returns a tuple with the MapMapOfString field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MapTest) GetMapMapOfStringOk() (map[string]map[string]string, bool) {
	if o == nil || o.MapMapOfString == nil {
		var ret map[string]map[string]string
		return ret, false
	}
	return *o.MapMapOfString, true
}

// HasMapMapOfString returns a boolean if a field has been set.
func (o *MapTest) HasMapMapOfString() bool {
	if o != nil && o.MapMapOfString != nil {
		return true
	}

	return false
}

// SetMapMapOfString gets a reference to the given map[string]map[string]string and assigns it to the MapMapOfString field.
func (o *MapTest) SetMapMapOfString(v map[string]map[string]string) {
	o.MapMapOfString = &v
}

// GetMapOfEnumString returns the MapOfEnumString field if non-nil, zero value otherwise.
func (o *MapTest) GetMapOfEnumString() map[string]string {
	if o == nil || o.MapOfEnumString == nil {
		var ret map[string]string
		return ret
	}
	return *o.MapOfEnumString
}

// GetMapOfEnumStringOk returns a tuple with the MapOfEnumString field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MapTest) GetMapOfEnumStringOk() (map[string]string, bool) {
	if o == nil || o.MapOfEnumString == nil {
		var ret map[string]string
		return ret, false
	}
	return *o.MapOfEnumString, true
}

// HasMapOfEnumString returns a boolean if a field has been set.
func (o *MapTest) HasMapOfEnumString() bool {
	if o != nil && o.MapOfEnumString != nil {
		return true
	}

	return false
}

// SetMapOfEnumString gets a reference to the given map[string]string and assigns it to the MapOfEnumString field.
func (o *MapTest) SetMapOfEnumString(v map[string]string) {
	o.MapOfEnumString = &v
}

// GetDirectMap returns the DirectMap field if non-nil, zero value otherwise.
func (o *MapTest) GetDirectMap() map[string]bool {
	if o == nil || o.DirectMap == nil {
		var ret map[string]bool
		return ret
	}
	return *o.DirectMap
}

// GetDirectMapOk returns a tuple with the DirectMap field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MapTest) GetDirectMapOk() (map[string]bool, bool) {
	if o == nil || o.DirectMap == nil {
		var ret map[string]bool
		return ret, false
	}
	return *o.DirectMap, true
}

// HasDirectMap returns a boolean if a field has been set.
func (o *MapTest) HasDirectMap() bool {
	if o != nil && o.DirectMap != nil {
		return true
	}

	return false
}

// SetDirectMap gets a reference to the given map[string]bool and assigns it to the DirectMap field.
func (o *MapTest) SetDirectMap(v map[string]bool) {
	o.DirectMap = &v
}

// GetIndirectMap returns the IndirectMap field if non-nil, zero value otherwise.
func (o *MapTest) GetIndirectMap() map[string]bool {
	if o == nil || o.IndirectMap == nil {
		var ret map[string]bool
		return ret
	}
	return *o.IndirectMap
}

// GetIndirectMapOk returns a tuple with the IndirectMap field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MapTest) GetIndirectMapOk() (map[string]bool, bool) {
	if o == nil || o.IndirectMap == nil {
		var ret map[string]bool
		return ret, false
	}
	return *o.IndirectMap, true
}

// HasIndirectMap returns a boolean if a field has been set.
func (o *MapTest) HasIndirectMap() bool {
	if o != nil && o.IndirectMap != nil {
		return true
	}

	return false
}

// SetIndirectMap gets a reference to the given map[string]bool and assigns it to the IndirectMap field.
func (o *MapTest) SetIndirectMap(v map[string]bool) {
	o.IndirectMap = &v
}


func (o MapTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MapMapOfString != nil {
		toSerialize["map_map_of_string"] = o.MapMapOfString
	}
	if o.MapOfEnumString != nil {
		toSerialize["map_of_enum_string"] = o.MapOfEnumString
	}
	if o.DirectMap != nil {
		toSerialize["direct_map"] = o.DirectMap
	}
	if o.IndirectMap != nil {
		toSerialize["indirect_map"] = o.IndirectMap
	}
	return json.Marshal(toSerialize)
}


