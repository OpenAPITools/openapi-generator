/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore
import (
	"encoding/json"
	"errors"
)

type Cat struct {
	ClassName *string `json:"className,omitempty"`

	Color *string `json:"color,omitempty"`

	Declawed *bool `json:"declawed,omitempty"`

}

// GetClassName returns the ClassName field if non-nil, zero value otherwise.
func (o *Cat) GetClassName() string {
	if o == nil || o.ClassName == nil {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Cat) GetClassNameOk() (string, bool) {
	if o == nil || o.ClassName == nil {
		var ret string
		return ret, false
	}
	return *o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *Cat) HasClassName() bool {
	if o != nil && o.ClassName != nil {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *Cat) SetClassName(v string) {
	o.ClassName = &v
}

// GetColor returns the Color field if non-nil, zero value otherwise.
func (o *Cat) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Cat) GetColorOk() (string, bool) {
	if o == nil || o.Color == nil {
		var ret string
		return ret, false
	}
	return *o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Cat) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Cat) SetColor(v string) {
	o.Color = &v
}

// GetDeclawed returns the Declawed field if non-nil, zero value otherwise.
func (o *Cat) GetDeclawed() bool {
	if o == nil || o.Declawed == nil {
		var ret bool
		return ret
	}
	return *o.Declawed
}

// GetDeclawedOk returns a tuple with the Declawed field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Cat) GetDeclawedOk() (bool, bool) {
	if o == nil || o.Declawed == nil {
		var ret bool
		return ret, false
	}
	return *o.Declawed, true
}

// HasDeclawed returns a boolean if a field has been set.
func (o *Cat) HasDeclawed() bool {
	if o != nil && o.Declawed != nil {
		return true
	}

	return false
}

// SetDeclawed gets a reference to the given bool and assigns it to the Declawed field.
func (o *Cat) SetDeclawed(v bool) {
	o.Declawed = &v
}


func (o Cat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClassName == nil {
		return nil, errors.New("ClassName is required and not nullable, but was not set on Cat")
	}
	if o.ClassName != nil {
		toSerialize["className"] = o.ClassName
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.Declawed != nil {
		toSerialize["declawed"] = o.Declawed
	}
	return json.Marshal(toSerialize)
}


