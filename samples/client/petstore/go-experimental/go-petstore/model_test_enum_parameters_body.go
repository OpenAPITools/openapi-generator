/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// TestEnumParametersBody struct for TestEnumParametersBody
type TestEnumParametersBody struct {
	// Form parameter enum test (string array)
	EnumFormStringArray *[]TestEnumParametersBodyEnumFormStringArrayItems `json:"enum_form_string_array,omitempty"`
	EnumFormString *TestEnumParametersBodyEnumFormString `json:"enum_form_string,omitempty"`
}

// NewTestEnumParametersBody instantiates a new TestEnumParametersBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestEnumParametersBody() *TestEnumParametersBody {
	this := TestEnumParametersBody{}
	var enumFormString TestEnumParametersBodyEnumFormString = "-efg"
	this.EnumFormString = &enumFormString
	return &this
}

// NewTestEnumParametersBodyWithDefaults instantiates a new TestEnumParametersBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestEnumParametersBodyWithDefaults() *TestEnumParametersBody {
	this := TestEnumParametersBody{}
	var enumFormString TestEnumParametersBodyEnumFormString = "-efg"
	this.EnumFormString = &enumFormString
	return &this
}

// GetEnumFormStringArray returns the EnumFormStringArray field value if set, zero value otherwise.
func (o *TestEnumParametersBody) GetEnumFormStringArray() []TestEnumParametersBodyEnumFormStringArrayItems {
	if o == nil || o.EnumFormStringArray == nil {
		var ret []TestEnumParametersBodyEnumFormStringArrayItems
		return ret
	}
	return *o.EnumFormStringArray
}

// GetEnumFormStringArrayOk returns a tuple with the EnumFormStringArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestEnumParametersBody) GetEnumFormStringArrayOk() (*[]TestEnumParametersBodyEnumFormStringArrayItems, bool) {
	if o == nil || o.EnumFormStringArray == nil {
		return nil, false
	}
	return o.EnumFormStringArray, true
}

// HasEnumFormStringArray returns a boolean if a field has been set.
func (o *TestEnumParametersBody) HasEnumFormStringArray() bool {
	if o != nil && o.EnumFormStringArray != nil {
		return true
	}

	return false
}

// SetEnumFormStringArray gets a reference to the given []TestEnumParametersBodyEnumFormStringArrayItems and assigns it to the EnumFormStringArray field.
func (o *TestEnumParametersBody) SetEnumFormStringArray(v []TestEnumParametersBodyEnumFormStringArrayItems) {
	o.EnumFormStringArray = &v
}

// GetEnumFormString returns the EnumFormString field value if set, zero value otherwise.
func (o *TestEnumParametersBody) GetEnumFormString() TestEnumParametersBodyEnumFormString {
	if o == nil || o.EnumFormString == nil {
		var ret TestEnumParametersBodyEnumFormString
		return ret
	}
	return *o.EnumFormString
}

// GetEnumFormStringOk returns a tuple with the EnumFormString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestEnumParametersBody) GetEnumFormStringOk() (*TestEnumParametersBodyEnumFormString, bool) {
	if o == nil || o.EnumFormString == nil {
		return nil, false
	}
	return o.EnumFormString, true
}

// HasEnumFormString returns a boolean if a field has been set.
func (o *TestEnumParametersBody) HasEnumFormString() bool {
	if o != nil && o.EnumFormString != nil {
		return true
	}

	return false
}

// SetEnumFormString gets a reference to the given TestEnumParametersBodyEnumFormString and assigns it to the EnumFormString field.
func (o *TestEnumParametersBody) SetEnumFormString(v TestEnumParametersBodyEnumFormString) {
	o.EnumFormString = &v
}

func (o TestEnumParametersBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnumFormStringArray != nil {
		toSerialize["enum_form_string_array"] = o.EnumFormStringArray
	}
	if o.EnumFormString != nil {
		toSerialize["enum_form_string"] = o.EnumFormString
	}
	return json.Marshal(toSerialize)
}

type NullableTestEnumParametersBody struct {
	value *TestEnumParametersBody
	isSet bool
}

func (v NullableTestEnumParametersBody) Get() *TestEnumParametersBody {
	return v.value
}

func (v *NullableTestEnumParametersBody) Set(val *TestEnumParametersBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTestEnumParametersBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTestEnumParametersBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestEnumParametersBody(val *TestEnumParametersBody) *NullableTestEnumParametersBody {
	return &NullableTestEnumParametersBody{value: val, isSet: true}
}

func (v NullableTestEnumParametersBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestEnumParametersBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

