/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"bytes"
	"encoding/json"
)

// TestEnumParametersBody struct for TestEnumParametersBody
type TestEnumParametersBody struct {
	// Form parameter enum test (string array)
	EnumFormStringArray *[]TestEnumParametersBodyEnumFormStringArrayItems `json:"enum_form_string_array,omitempty"`
	EnumFormString *TestEnumParametersBodyEnumFormString `json:"enum_form_string,omitempty"`
}

// GetEnumFormStringArray returns the EnumFormStringArray field value if set, zero value otherwise.
func (o *TestEnumParametersBody) GetEnumFormStringArray() []TestEnumParametersBodyEnumFormStringArrayItems {
	if o == nil || o.EnumFormStringArray == nil {
		var ret []TestEnumParametersBodyEnumFormStringArrayItems
		return ret
	}
	return *o.EnumFormStringArray
}

// GetEnumFormStringArrayOk returns a tuple with the EnumFormStringArray field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TestEnumParametersBody) GetEnumFormStringArrayOk() ([]TestEnumParametersBodyEnumFormStringArrayItems, bool) {
	if o == nil || o.EnumFormStringArray == nil {
		var ret []TestEnumParametersBodyEnumFormStringArrayItems
		return ret, false
	}
	return *o.EnumFormStringArray, true
}

// HasEnumFormStringArray returns a boolean if a field has been set.
func (o *TestEnumParametersBody) HasEnumFormStringArray() bool {
	if o != nil && o.EnumFormStringArray != nil {
		return true
	}

	return false
}

// SetEnumFormStringArray gets a reference to the given []TestEnumParametersBodyEnumFormStringArrayItems and assigns it to the EnumFormStringArray field.
func (o *TestEnumParametersBody) SetEnumFormStringArray(v []TestEnumParametersBodyEnumFormStringArrayItems) {
	o.EnumFormStringArray = &v
}

// GetEnumFormString returns the EnumFormString field value if set, zero value otherwise.
func (o *TestEnumParametersBody) GetEnumFormString() TestEnumParametersBodyEnumFormString {
	if o == nil || o.EnumFormString == nil {
		var ret TestEnumParametersBodyEnumFormString
		return ret
	}
	return *o.EnumFormString
}

// GetEnumFormStringOk returns a tuple with the EnumFormString field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TestEnumParametersBody) GetEnumFormStringOk() (TestEnumParametersBodyEnumFormString, bool) {
	if o == nil || o.EnumFormString == nil {
		var ret TestEnumParametersBodyEnumFormString
		return ret, false
	}
	return *o.EnumFormString, true
}

// HasEnumFormString returns a boolean if a field has been set.
func (o *TestEnumParametersBody) HasEnumFormString() bool {
	if o != nil && o.EnumFormString != nil {
		return true
	}

	return false
}

// SetEnumFormString gets a reference to the given TestEnumParametersBodyEnumFormString and assigns it to the EnumFormString field.
func (o *TestEnumParametersBody) SetEnumFormString(v TestEnumParametersBodyEnumFormString) {
	o.EnumFormString = &v
}

type NullableTestEnumParametersBody struct {
	Value TestEnumParametersBody
	ExplicitNull bool
}

func (v NullableTestEnumParametersBody) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableTestEnumParametersBody) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
