/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"bytes"
	"encoding/json"
)

// EnumTest struct for EnumTest
type EnumTest struct {
	EnumString *EnumTestEnumString `json:"enum_string,omitempty"`
	EnumStringRequired EnumTestEnumString `json:"enum_string_required"`
	EnumInteger *EnumTestEnumInteger `json:"enum_integer,omitempty"`
	EnumNumber *EnumQueryDouble `json:"enum_number,omitempty"`
	OuterEnum *OuterEnum `json:"outerEnum,omitempty"`
}

// GetEnumString returns the EnumString field value if set, zero value otherwise.
func (o *EnumTest) GetEnumString() EnumTestEnumString {
	if o == nil || o.EnumString == nil {
		var ret EnumTestEnumString
		return ret
	}
	return *o.EnumString
}

// GetEnumStringOk returns a tuple with the EnumString field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnumTest) GetEnumStringOk() (EnumTestEnumString, bool) {
	if o == nil || o.EnumString == nil {
		var ret EnumTestEnumString
		return ret, false
	}
	return *o.EnumString, true
}

// HasEnumString returns a boolean if a field has been set.
func (o *EnumTest) HasEnumString() bool {
	if o != nil && o.EnumString != nil {
		return true
	}

	return false
}

// SetEnumString gets a reference to the given EnumTestEnumString and assigns it to the EnumString field.
func (o *EnumTest) SetEnumString(v EnumTestEnumString) {
	o.EnumString = &v
}

// GetEnumStringRequired returns the EnumStringRequired field value
func (o *EnumTest) GetEnumStringRequired() EnumTestEnumString {
	if o == nil {
		var ret EnumTestEnumString
		return ret
	}

	return o.EnumStringRequired
}

// SetEnumStringRequired sets field value
func (o *EnumTest) SetEnumStringRequired(v EnumTestEnumString) {
	o.EnumStringRequired = v
}

// GetEnumInteger returns the EnumInteger field value if set, zero value otherwise.
func (o *EnumTest) GetEnumInteger() EnumTestEnumInteger {
	if o == nil || o.EnumInteger == nil {
		var ret EnumTestEnumInteger
		return ret
	}
	return *o.EnumInteger
}

// GetEnumIntegerOk returns a tuple with the EnumInteger field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnumTest) GetEnumIntegerOk() (EnumTestEnumInteger, bool) {
	if o == nil || o.EnumInteger == nil {
		var ret EnumTestEnumInteger
		return ret, false
	}
	return *o.EnumInteger, true
}

// HasEnumInteger returns a boolean if a field has been set.
func (o *EnumTest) HasEnumInteger() bool {
	if o != nil && o.EnumInteger != nil {
		return true
	}

	return false
}

// SetEnumInteger gets a reference to the given EnumTestEnumInteger and assigns it to the EnumInteger field.
func (o *EnumTest) SetEnumInteger(v EnumTestEnumInteger) {
	o.EnumInteger = &v
}

// GetEnumNumber returns the EnumNumber field value if set, zero value otherwise.
func (o *EnumTest) GetEnumNumber() EnumQueryDouble {
	if o == nil || o.EnumNumber == nil {
		var ret EnumQueryDouble
		return ret
	}
	return *o.EnumNumber
}

// GetEnumNumberOk returns a tuple with the EnumNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnumTest) GetEnumNumberOk() (EnumQueryDouble, bool) {
	if o == nil || o.EnumNumber == nil {
		var ret EnumQueryDouble
		return ret, false
	}
	return *o.EnumNumber, true
}

// HasEnumNumber returns a boolean if a field has been set.
func (o *EnumTest) HasEnumNumber() bool {
	if o != nil && o.EnumNumber != nil {
		return true
	}

	return false
}

// SetEnumNumber gets a reference to the given EnumQueryDouble and assigns it to the EnumNumber field.
func (o *EnumTest) SetEnumNumber(v EnumQueryDouble) {
	o.EnumNumber = &v
}

// GetOuterEnum returns the OuterEnum field value if set, zero value otherwise.
func (o *EnumTest) GetOuterEnum() OuterEnum {
	if o == nil || o.OuterEnum == nil {
		var ret OuterEnum
		return ret
	}
	return *o.OuterEnum
}

// GetOuterEnumOk returns a tuple with the OuterEnum field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EnumTest) GetOuterEnumOk() (OuterEnum, bool) {
	if o == nil || o.OuterEnum == nil {
		var ret OuterEnum
		return ret, false
	}
	return *o.OuterEnum, true
}

// HasOuterEnum returns a boolean if a field has been set.
func (o *EnumTest) HasOuterEnum() bool {
	if o != nil && o.OuterEnum != nil {
		return true
	}

	return false
}

// SetOuterEnum gets a reference to the given OuterEnum and assigns it to the OuterEnum field.
func (o *EnumTest) SetOuterEnum(v OuterEnum) {
	o.OuterEnum = &v
}

type NullableEnumTest struct {
	Value EnumTest
	ExplicitNull bool
}

func (v NullableEnumTest) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableEnumTest) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
