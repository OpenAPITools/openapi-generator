/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// TestJsonFormDataBody struct for TestJsonFormDataBody
type TestJsonFormDataBody struct {
	// field1
	Param string `json:"param"`
	// field2
	Param2 string `json:"param2"`
}

// NewTestJsonFormDataBody instantiates a new TestJsonFormDataBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestJsonFormDataBody(param string, param2 string, ) *TestJsonFormDataBody {
	this := TestJsonFormDataBody{}
	this.Param = param
	this.Param2 = param2
	return &this
}

// NewTestJsonFormDataBodyWithDefaults instantiates a new TestJsonFormDataBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestJsonFormDataBodyWithDefaults() *TestJsonFormDataBody {
	this := TestJsonFormDataBody{}
	return &this
}

// GetParam returns the Param field value
func (o *TestJsonFormDataBody) GetParam() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Param
}

// GetParamOk returns a tuple with the Param field value
// and a boolean to check if the value has been set.
func (o *TestJsonFormDataBody) GetParamOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Param, true
}

// SetParam sets field value
func (o *TestJsonFormDataBody) SetParam(v string) {
	o.Param = v
}

// GetParam2 returns the Param2 field value
func (o *TestJsonFormDataBody) GetParam2() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Param2
}

// GetParam2Ok returns a tuple with the Param2 field value
// and a boolean to check if the value has been set.
func (o *TestJsonFormDataBody) GetParam2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Param2, true
}

// SetParam2 sets field value
func (o *TestJsonFormDataBody) SetParam2(v string) {
	o.Param2 = v
}

func (o TestJsonFormDataBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["param"] = o.Param
	}
	if true {
		toSerialize["param2"] = o.Param2
	}
	return json.Marshal(toSerialize)
}

type NullableTestJsonFormDataBody struct {
	value *TestJsonFormDataBody
	isSet bool
}

func (v NullableTestJsonFormDataBody) Get() *TestJsonFormDataBody {
	return v.value
}

func (v *NullableTestJsonFormDataBody) Set(val *TestJsonFormDataBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTestJsonFormDataBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTestJsonFormDataBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestJsonFormDataBody(val *TestJsonFormDataBody) *NullableTestJsonFormDataBody {
	return &NullableTestJsonFormDataBody{value: val, isSet: true}
}

func (v NullableTestJsonFormDataBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestJsonFormDataBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

