// Code generated by moshi-kotlin-codegen. Do not edit.
package org.openapitools.client.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Array
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class PetJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Pet>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "photoUrls", "id",
      "category", "tags", "status")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val arrayOfStringAdapter: JsonAdapter<Array<String>> =
      moshi.adapter(Types.arrayOf(String::class.java), emptySet(), "photoUrls")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "id")

  private val nullableCategoryAdapter: JsonAdapter<Category?> = moshi.adapter(Category::class.java,
      emptySet(), "category")

  private val nullableArrayOfTagAdapter: JsonAdapter<Array<Tag>?> =
      moshi.adapter(Types.arrayOf(Tag::class.java), emptySet(), "tags")

  private val nullableStatusAdapter: JsonAdapter<Pet.Status?> =
      moshi.adapter(Pet.Status::class.java, emptySet(), "status")

  @Volatile
  private var constructorRef: Constructor<Pet>? = null

  override fun toString(): String = buildString(25) {
      append("GeneratedJsonAdapter(").append("Pet").append(')') }

  override fun fromJson(reader: JsonReader): Pet {
    var name: String? = null
    var photoUrls: Array<String>? = null
    var id: Long? = null
    var category: Category? = null
    var tags: Array<Tag>? = null
    var status: Pet.Status? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        1 -> photoUrls = arrayOfStringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("photoUrls", "photoUrls", reader)
        2 -> {
          id = nullableLongAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          category = nullableCategoryAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          tags = nullableArrayOfTagAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          status = nullableStatusAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<Pet> = this.constructorRef ?:
        Pet::class.java.getDeclaredConstructor(String::class.java, Array<String>::class.java,
        Long::class.javaObjectType, Category::class.java, Array<Tag>::class.java,
        Pet.Status::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        name ?: throw Util.missingProperty("name", "name", reader),
        photoUrls ?: throw Util.missingProperty("photoUrls", "photoUrls", reader),
        id,
        category,
        tags,
        status,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: Pet?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("photoUrls")
    arrayOfStringAdapter.toJson(writer, value.photoUrls)
    writer.name("id")
    nullableLongAdapter.toJson(writer, value.id)
    writer.name("category")
    nullableCategoryAdapter.toJson(writer, value.category)
    writer.name("tags")
    nullableArrayOfTagAdapter.toJson(writer, value.tags)
    writer.name("status")
    nullableStatusAdapter.toJson(writer, value.status)
    writer.endObject()
  }
}
