//
// EnumTest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EnumTest: Codable {

    public enum EnumString: String, Codable { 
        case upper = "UPPER"
        case lower = "lower"
        case empty = ""
    }
    public enum EnumInteger: Int, Codable { 
        case _1 = 1
        case number1 = -1
    }
    public enum EnumNumber: Double, Codable { 
        case _11 = 1.1
        case number12 = -1.2
    }
    public var enumString: EnumString?
    public var enumInteger: EnumInteger?
    public var enumNumber: EnumNumber?
    public var outerEnum: OuterEnum?


    public init(enumString: EnumString?, enumInteger: EnumInteger?, enumNumber: EnumNumber?, outerEnum: OuterEnum?) {
        self.enumString = enumString
        self.enumInteger = enumInteger
        self.enumNumber = enumNumber
        self.outerEnum = outerEnum
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(enumString, forKey: "enum_string")
        try container.encodeIfPresent(enumInteger, forKey: "enum_integer")
        try container.encodeIfPresent(enumNumber, forKey: "enum_number")
        try container.encodeIfPresent(outerEnum, forKey: "outerEnum")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        enumString = try container.decodeIfPresent(String.self, forKey: "enum_string")
        enumInteger = try container.decodeIfPresent(Int.self, forKey: "enum_integer")
        enumNumber = try container.decodeIfPresent(Double.self, forKey: "enum_number")
        outerEnum = try container.decodeIfPresent(OuterEnum.self, forKey: "outerEnum")
    }
}

