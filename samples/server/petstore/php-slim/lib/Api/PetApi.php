<?php
/**
 * PetApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 * OpenAPI spec version: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\AbstractApiController;

/**
 * PetApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class PetApi extends AbstractApiController {

    /**
     * POST addPet
     * Summary: Add a new pet to the store
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function addPet($request, $response, $args) {
        $body = $request->getParsedBody();
        $response->write('How about implementing addPet as a POST method ?');
        return $response;
    }
    
    /**
     * DELETE deletePet
     * Summary: Deletes a pet
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function deletePet($request, $response, $args) {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('api_key') ? $headers['api_key'] : null;
        $petId = $args['petId'];
        $response->write('How about implementing deletePet as a DELETE method ?');
        return $response;
    }
    
    /**
     * GET findPetsByStatus
     * Summary: Finds Pets by status
     * Notes: Multiple status values can be provided with comma separated strings
     * Output-Formats: [application/xml, application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function findPetsByStatus($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $status = $request->getQueryParam('status');
        $response->write('How about implementing findPetsByStatus as a GET method ?');
        return $response;
    }
    
    /**
     * GET findPetsByTags
     * Summary: Finds Pets by tags
     * Notes: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Output-Formats: [application/xml, application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function findPetsByTags($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $tags = $request->getQueryParam('tags');
        $response->write('How about implementing findPetsByTags as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPetById
     * Summary: Find pet by ID
     * Notes: Returns a single pet
     * Output-Formats: [application/xml, application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPetById($request, $response, $args) {
        $petId = $args['petId'];
        $response->write('How about implementing getPetById as a GET method ?');
        return $response;
    }
    
    /**
     * PUT updatePet
     * Summary: Update an existing pet
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function updatePet($request, $response, $args) {
        $body = $request->getParsedBody();
        $response->write('How about implementing updatePet as a PUT method ?');
        return $response;
    }
    
    /**
     * POST updatePetWithForm
     * Summary: Updates a pet in the store with form data
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function updatePetWithForm($request, $response, $args) {
        $petId = $args['petId'];
        $name = $request->getParsedBodyParam('name');
        $status = $request->getParsedBodyParam('status');
        $response->write('How about implementing updatePetWithForm as a POST method ?');
        return $response;
    }
    
    /**
     * POST uploadFile
     * Summary: uploads an image
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function uploadFile($request, $response, $args) {
        $petId = $args['petId'];
        $additionalMetadata = $request->getParsedBodyParam('additionalMetadata');
        $file = (key_exists('file', $request->getUploadedFiles())) ? $request->getUploadedFiles()['file'] : null;
        $response->write('How about implementing uploadFile as a POST method ?');
        return $response;
    }
    
    /**
     * POST uploadFileWithRequiredFile
     * Summary: uploads an image (required)
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function uploadFileWithRequiredFile($request, $response, $args) {
        $petId = $args['petId'];
        $additionalMetadata = $request->getParsedBodyParam('additionalMetadata');
        $requiredFile = (key_exists('requiredFile', $request->getUploadedFiles())) ? $request->getUploadedFiles()['requiredFile'] : null;
        $response->write('How about implementing uploadFileWithRequiredFile as a POST method ?');
        return $response;
    }
    
}
