/*
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import com.prokarma.pkmst.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final UserApi api = new UserApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Create user
     *
     * This can only be done by the logged in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws Exception {
        User body = null;
    ResponseEntity<Void> response = api.createUser(body , accept);

        // TODO: test validations
    }
    
    /**
     * Creates list of users with given input array
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createUsersWithArrayInputTest() throws Exception {
        List<User> body = null;
    ResponseEntity<Void> response = api.createUsersWithArrayInput(body , accept);

        // TODO: test validations
    }
    
    /**
     * Creates list of users with given input array
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createUsersWithListInputTest() throws Exception {
        List<User> body = null;
    ResponseEntity<Void> response = api.createUsersWithListInput(body , accept);

        // TODO: test validations
    }
    
    /**
     * Delete user
     *
     * This can only be done by the logged in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws Exception {
        String username = null;
    ResponseEntity<Void> response = api.deleteUser(username , accept);

        // TODO: test validations
    }
    
    /**
     * Get user by user name
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByNameTest() throws Exception {
        String username = null;
    ResponseEntity<User> response = api.getUserByName(username , accept);

        // TODO: test validations
    }
    
    /**
     * Logs user into the system
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void loginUserTest() throws Exception {
        String username = null;
        String password = null;
    ResponseEntity<String> response = api.loginUser(username, password , accept);

        // TODO: test validations
    }
    
    /**
     * Logs out current logged in user session
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logoutUserTest() throws Exception {
    ResponseEntity<Void> response = api.logoutUser(  accept);

        // TODO: test validations
    }
    
    /**
     * Updated user
     *
     * This can only be done by the logged in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws Exception {
        String username = null;
        User body = null;
    ResponseEntity<Void> response = api.updateUser(username, body , accept);

        // TODO: test validations
    }
    
}
