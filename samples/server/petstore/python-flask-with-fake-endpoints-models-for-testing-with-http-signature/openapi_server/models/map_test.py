# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MapTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map_map_of_string=None, map_of_enum_string=None, direct_map=None, indirect_map=None):  # noqa: E501
        """MapTest - a model defined in OpenAPI

        :param map_map_of_string: The map_map_of_string of this MapTest.  # noqa: E501
        :type map_map_of_string: Dict[str, Dict[str, str]]
        :param map_of_enum_string: The map_of_enum_string of this MapTest.  # noqa: E501
        :type map_of_enum_string: Dict[str, str]
        :param direct_map: The direct_map of this MapTest.  # noqa: E501
        :type direct_map: Dict[str, bool]
        :param indirect_map: The indirect_map of this MapTest.  # noqa: E501
        :type indirect_map: Dict[str, bool]
        """
        self.openapi_types = {
            'map_map_of_string': Dict[str, Dict[str, str]],
            'map_of_enum_string': Dict[str, str],
            'direct_map': Dict[str, bool],
            'indirect_map': Dict[str, bool]
        }

        self.attribute_map = {
            'map_map_of_string': 'map_map_of_string',
            'map_of_enum_string': 'map_of_enum_string',
            'direct_map': 'direct_map',
            'indirect_map': 'indirect_map'
        }

        self._map_map_of_string = map_map_of_string
        self._map_of_enum_string = map_of_enum_string
        self._direct_map = direct_map
        self._indirect_map = indirect_map

    @classmethod
    def from_dict(cls, dikt) -> 'MapTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MapTest of this MapTest.  # noqa: E501
        :rtype: MapTest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map_map_of_string(self):
        """Gets the map_map_of_string of this MapTest.


        :return: The map_map_of_string of this MapTest.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._map_map_of_string

    @map_map_of_string.setter
    def map_map_of_string(self, map_map_of_string):
        """Sets the map_map_of_string of this MapTest.


        :param map_map_of_string: The map_map_of_string of this MapTest.
        :type map_map_of_string: Dict[str, Dict[str, str]]
        """

        self._map_map_of_string = map_map_of_string

    @property
    def map_of_enum_string(self):
        """Gets the map_of_enum_string of this MapTest.


        :return: The map_of_enum_string of this MapTest.
        :rtype: Dict[str, str]
        """
        return self._map_of_enum_string

    @map_of_enum_string.setter
    def map_of_enum_string(self, map_of_enum_string):
        """Sets the map_of_enum_string of this MapTest.


        :param map_of_enum_string: The map_of_enum_string of this MapTest.
        :type map_of_enum_string: Dict[str, str]
        """
        allowed_values = ["UPPER", "lower"]  # noqa: E501
        if not set(map_of_enum_string.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `map_of_enum_string` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(map_of_enum_string.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._map_of_enum_string = map_of_enum_string

    @property
    def direct_map(self):
        """Gets the direct_map of this MapTest.


        :return: The direct_map of this MapTest.
        :rtype: Dict[str, bool]
        """
        return self._direct_map

    @direct_map.setter
    def direct_map(self, direct_map):
        """Sets the direct_map of this MapTest.


        :param direct_map: The direct_map of this MapTest.
        :type direct_map: Dict[str, bool]
        """

        self._direct_map = direct_map

    @property
    def indirect_map(self):
        """Gets the indirect_map of this MapTest.


        :return: The indirect_map of this MapTest.
        :rtype: Dict[str, bool]
        """
        return self._indirect_map

    @indirect_map.setter
    def indirect_map(self, indirect_map):
        """Sets the indirect_map of this MapTest.


        :param indirect_map: The indirect_map of this MapTest.
        :type indirect_map: Dict[str, bool]
        """

        self._indirect_map = indirect_map
