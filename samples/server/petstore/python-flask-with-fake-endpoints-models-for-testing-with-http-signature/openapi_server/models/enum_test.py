# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.outer_enum import OuterEnum
from openapi_server.models.outer_enum_default_value import OuterEnumDefaultValue
from openapi_server.models.outer_enum_integer import OuterEnumInteger
from openapi_server.models.outer_enum_integer_default_value import OuterEnumIntegerDefaultValue
from openapi_server import util

from openapi_server.models.outer_enum import OuterEnum  # noqa: E501
from openapi_server.models.outer_enum_default_value import OuterEnumDefaultValue  # noqa: E501
from openapi_server.models.outer_enum_integer import OuterEnumInteger  # noqa: E501
from openapi_server.models.outer_enum_integer_default_value import OuterEnumIntegerDefaultValue  # noqa: E501

class EnumTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enum_string=None, enum_string_required=None, enum_integer=None, enum_number=None, outer_enum=None, outer_enum_integer=None, outer_enum_default_value=None, outer_enum_integer_default_value=None):  # noqa: E501
        """EnumTest - a model defined in OpenAPI

        :param enum_string: The enum_string of this EnumTest.  # noqa: E501
        :type enum_string: str
        :param enum_string_required: The enum_string_required of this EnumTest.  # noqa: E501
        :type enum_string_required: str
        :param enum_integer: The enum_integer of this EnumTest.  # noqa: E501
        :type enum_integer: int
        :param enum_number: The enum_number of this EnumTest.  # noqa: E501
        :type enum_number: float
        :param outer_enum: The outer_enum of this EnumTest.  # noqa: E501
        :type outer_enum: OuterEnum
        :param outer_enum_integer: The outer_enum_integer of this EnumTest.  # noqa: E501
        :type outer_enum_integer: OuterEnumInteger
        :param outer_enum_default_value: The outer_enum_default_value of this EnumTest.  # noqa: E501
        :type outer_enum_default_value: OuterEnumDefaultValue
        :param outer_enum_integer_default_value: The outer_enum_integer_default_value of this EnumTest.  # noqa: E501
        :type outer_enum_integer_default_value: OuterEnumIntegerDefaultValue
        """
        self.openapi_types = {
            'enum_string': str,
            'enum_string_required': str,
            'enum_integer': int,
            'enum_number': float,
            'outer_enum': OuterEnum,
            'outer_enum_integer': OuterEnumInteger,
            'outer_enum_default_value': OuterEnumDefaultValue,
            'outer_enum_integer_default_value': OuterEnumIntegerDefaultValue
        }

        self.attribute_map = {
            'enum_string': 'enum_string',
            'enum_string_required': 'enum_string_required',
            'enum_integer': 'enum_integer',
            'enum_number': 'enum_number',
            'outer_enum': 'outerEnum',
            'outer_enum_integer': 'outerEnumInteger',
            'outer_enum_default_value': 'outerEnumDefaultValue',
            'outer_enum_integer_default_value': 'outerEnumIntegerDefaultValue'
        }

        self._enum_string = enum_string
        self._enum_string_required = enum_string_required
        self._enum_integer = enum_integer
        self._enum_number = enum_number
        self._outer_enum = outer_enum
        self._outer_enum_integer = outer_enum_integer
        self._outer_enum_default_value = outer_enum_default_value
        self._outer_enum_integer_default_value = outer_enum_integer_default_value

    @classmethod
    def from_dict(cls, dikt) -> 'EnumTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Enum_Test of this EnumTest.  # noqa: E501
        :rtype: EnumTest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enum_string(self):
        """Gets the enum_string of this EnumTest.


        :return: The enum_string of this EnumTest.
        :rtype: str
        """
        return self._enum_string

    @enum_string.setter
    def enum_string(self, enum_string):
        """Sets the enum_string of this EnumTest.


        :param enum_string: The enum_string of this EnumTest.
        :type enum_string: str
        """
        allowed_values = ["UPPER", "lower", ""]  # noqa: E501
        if enum_string not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_string` ({0}), must be one of {1}"
                .format(enum_string, allowed_values)
            )

        self._enum_string = enum_string

    @property
    def enum_string_required(self):
        """Gets the enum_string_required of this EnumTest.


        :return: The enum_string_required of this EnumTest.
        :rtype: str
        """
        return self._enum_string_required

    @enum_string_required.setter
    def enum_string_required(self, enum_string_required):
        """Sets the enum_string_required of this EnumTest.


        :param enum_string_required: The enum_string_required of this EnumTest.
        :type enum_string_required: str
        """
        allowed_values = ["UPPER", "lower", ""]  # noqa: E501
        if enum_string_required not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_string_required` ({0}), must be one of {1}"
                .format(enum_string_required, allowed_values)
            )

        self._enum_string_required = enum_string_required

    @property
    def enum_integer(self):
        """Gets the enum_integer of this EnumTest.


        :return: The enum_integer of this EnumTest.
        :rtype: int
        """
        return self._enum_integer

    @enum_integer.setter
    def enum_integer(self, enum_integer):
        """Sets the enum_integer of this EnumTest.


        :param enum_integer: The enum_integer of this EnumTest.
        :type enum_integer: int
        """
        allowed_values = [1, -1]  # noqa: E501
        if enum_integer not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_integer` ({0}), must be one of {1}"
                .format(enum_integer, allowed_values)
            )

        self._enum_integer = enum_integer

    @property
    def enum_number(self):
        """Gets the enum_number of this EnumTest.


        :return: The enum_number of this EnumTest.
        :rtype: float
        """
        return self._enum_number

    @enum_number.setter
    def enum_number(self, enum_number):
        """Sets the enum_number of this EnumTest.


        :param enum_number: The enum_number of this EnumTest.
        :type enum_number: float
        """
        allowed_values = [1.1, -1.2]  # noqa: E501
        if enum_number not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_number` ({0}), must be one of {1}"
                .format(enum_number, allowed_values)
            )

        self._enum_number = enum_number

    @property
    def outer_enum(self):
        """Gets the outer_enum of this EnumTest.


        :return: The outer_enum of this EnumTest.
        :rtype: OuterEnum
        """
        return self._outer_enum

    @outer_enum.setter
    def outer_enum(self, outer_enum):
        """Sets the outer_enum of this EnumTest.


        :param outer_enum: The outer_enum of this EnumTest.
        :type outer_enum: OuterEnum
        """

        self._outer_enum = outer_enum

    @property
    def outer_enum_integer(self):
        """Gets the outer_enum_integer of this EnumTest.


        :return: The outer_enum_integer of this EnumTest.
        :rtype: OuterEnumInteger
        """
        return self._outer_enum_integer

    @outer_enum_integer.setter
    def outer_enum_integer(self, outer_enum_integer):
        """Sets the outer_enum_integer of this EnumTest.


        :param outer_enum_integer: The outer_enum_integer of this EnumTest.
        :type outer_enum_integer: OuterEnumInteger
        """

        self._outer_enum_integer = outer_enum_integer

    @property
    def outer_enum_default_value(self):
        """Gets the outer_enum_default_value of this EnumTest.


        :return: The outer_enum_default_value of this EnumTest.
        :rtype: OuterEnumDefaultValue
        """
        return self._outer_enum_default_value

    @outer_enum_default_value.setter
    def outer_enum_default_value(self, outer_enum_default_value):
        """Sets the outer_enum_default_value of this EnumTest.


        :param outer_enum_default_value: The outer_enum_default_value of this EnumTest.
        :type outer_enum_default_value: OuterEnumDefaultValue
        """

        self._outer_enum_default_value = outer_enum_default_value

    @property
    def outer_enum_integer_default_value(self):
        """Gets the outer_enum_integer_default_value of this EnumTest.


        :return: The outer_enum_integer_default_value of this EnumTest.
        :rtype: OuterEnumIntegerDefaultValue
        """
        return self._outer_enum_integer_default_value

    @outer_enum_integer_default_value.setter
    def outer_enum_integer_default_value(self, outer_enum_integer_default_value):
        """Sets the outer_enum_integer_default_value of this EnumTest.


        :param outer_enum_integer_default_value: The outer_enum_integer_default_value of this EnumTest.
        :type outer_enum_integer_default_value: OuterEnumIntegerDefaultValue
        """

        self._outer_enum_integer_default_value = outer_enum_integer_default_value
