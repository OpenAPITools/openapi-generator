# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.decimal import Decimal
import re
from openapi_server import util

from openapi_server.models.decimal import Decimal  # noqa: E501
import re  # noqa: E501

class FormatTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, integer=None, int32=None, int64=None, number=None, float=None, double=None, decimal=None, string=None, byte=None, binary=None, date=None, date_time=None, uuid=None, password=None, pattern_with_digits=None, pattern_with_digits_and_delimiter=None):  # noqa: E501
        """FormatTest - a model defined in OpenAPI

        :param integer: The integer of this FormatTest.  # noqa: E501
        :type integer: int
        :param int32: The int32 of this FormatTest.  # noqa: E501
        :type int32: int
        :param int64: The int64 of this FormatTest.  # noqa: E501
        :type int64: int
        :param number: The number of this FormatTest.  # noqa: E501
        :type number: float
        :param float: The float of this FormatTest.  # noqa: E501
        :type float: float
        :param double: The double of this FormatTest.  # noqa: E501
        :type double: float
        :param decimal: The decimal of this FormatTest.  # noqa: E501
        :type decimal: Decimal
        :param string: The string of this FormatTest.  # noqa: E501
        :type string: str
        :param byte: The byte of this FormatTest.  # noqa: E501
        :type byte: str
        :param binary: The binary of this FormatTest.  # noqa: E501
        :type binary: file
        :param date: The date of this FormatTest.  # noqa: E501
        :type date: date
        :param date_time: The date_time of this FormatTest.  # noqa: E501
        :type date_time: datetime
        :param uuid: The uuid of this FormatTest.  # noqa: E501
        :type uuid: str
        :param password: The password of this FormatTest.  # noqa: E501
        :type password: str
        :param pattern_with_digits: The pattern_with_digits of this FormatTest.  # noqa: E501
        :type pattern_with_digits: str
        :param pattern_with_digits_and_delimiter: The pattern_with_digits_and_delimiter of this FormatTest.  # noqa: E501
        :type pattern_with_digits_and_delimiter: str
        """
        self.openapi_types = {
            'integer': int,
            'int32': int,
            'int64': int,
            'number': float,
            'float': float,
            'double': float,
            'decimal': Decimal,
            'string': str,
            'byte': str,
            'binary': file,
            'date': date,
            'date_time': datetime,
            'uuid': str,
            'password': str,
            'pattern_with_digits': str,
            'pattern_with_digits_and_delimiter': str
        }

        self.attribute_map = {
            'integer': 'integer',
            'int32': 'int32',
            'int64': 'int64',
            'number': 'number',
            'float': 'float',
            'double': 'double',
            'decimal': 'decimal',
            'string': 'string',
            'byte': 'byte',
            'binary': 'binary',
            'date': 'date',
            'date_time': 'dateTime',
            'uuid': 'uuid',
            'password': 'password',
            'pattern_with_digits': 'pattern_with_digits',
            'pattern_with_digits_and_delimiter': 'pattern_with_digits_and_delimiter'
        }

        self._integer = integer
        self._int32 = int32
        self._int64 = int64
        self._number = number
        self._float = float
        self._double = double
        self._decimal = decimal
        self._string = string
        self._byte = byte
        self._binary = binary
        self._date = date
        self._date_time = date_time
        self._uuid = uuid
        self._password = password
        self._pattern_with_digits = pattern_with_digits
        self._pattern_with_digits_and_delimiter = pattern_with_digits_and_delimiter

    @classmethod
    def from_dict(cls, dikt) -> 'FormatTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The format_test of this FormatTest.  # noqa: E501
        :rtype: FormatTest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integer(self):
        """Gets the integer of this FormatTest.


        :return: The integer of this FormatTest.
        :rtype: int
        """
        return self._integer

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this FormatTest.


        :param integer: The integer of this FormatTest.
        :type integer: int
        """
        if integer is not None and integer > 100:  # noqa: E501
            raise ValueError("Invalid value for `integer`, must be a value less than or equal to `100`")  # noqa: E501
        if integer is not None and integer < 10:  # noqa: E501
            raise ValueError("Invalid value for `integer`, must be a value greater than or equal to `10`")  # noqa: E501

        self._integer = integer

    @property
    def int32(self):
        """Gets the int32 of this FormatTest.


        :return: The int32 of this FormatTest.
        :rtype: int
        """
        return self._int32

    @int32.setter
    def int32(self, int32):
        """Sets the int32 of this FormatTest.


        :param int32: The int32 of this FormatTest.
        :type int32: int
        """
        if int32 is not None and int32 > 200:  # noqa: E501
            raise ValueError("Invalid value for `int32`, must be a value less than or equal to `200`")  # noqa: E501
        if int32 is not None and int32 < 20:  # noqa: E501
            raise ValueError("Invalid value for `int32`, must be a value greater than or equal to `20`")  # noqa: E501

        self._int32 = int32

    @property
    def int64(self):
        """Gets the int64 of this FormatTest.


        :return: The int64 of this FormatTest.
        :rtype: int
        """
        return self._int64

    @int64.setter
    def int64(self, int64):
        """Sets the int64 of this FormatTest.


        :param int64: The int64 of this FormatTest.
        :type int64: int
        """

        self._int64 = int64

    @property
    def number(self):
        """Gets the number of this FormatTest.


        :return: The number of this FormatTest.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this FormatTest.


        :param number: The number of this FormatTest.
        :type number: float
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and number > 543.2:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `543.2`")  # noqa: E501
        if number is not None and number < 32.1:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `32.1`")  # noqa: E501

        self._number = number

    @property
    def float(self):
        """Gets the float of this FormatTest.


        :return: The float of this FormatTest.
        :rtype: float
        """
        return self._float

    @float.setter
    def float(self, float):
        """Sets the float of this FormatTest.


        :param float: The float of this FormatTest.
        :type float: float
        """
        if float is not None and float > 987.6:  # noqa: E501
            raise ValueError("Invalid value for `float`, must be a value less than or equal to `987.6`")  # noqa: E501
        if float is not None and float < 54.3:  # noqa: E501
            raise ValueError("Invalid value for `float`, must be a value greater than or equal to `54.3`")  # noqa: E501

        self._float = float

    @property
    def double(self):
        """Gets the double of this FormatTest.


        :return: The double of this FormatTest.
        :rtype: float
        """
        return self._double

    @double.setter
    def double(self, double):
        """Sets the double of this FormatTest.


        :param double: The double of this FormatTest.
        :type double: float
        """
        if double is not None and double > 123.4:  # noqa: E501
            raise ValueError("Invalid value for `double`, must be a value less than or equal to `123.4`")  # noqa: E501
        if double is not None and double < 67.8:  # noqa: E501
            raise ValueError("Invalid value for `double`, must be a value greater than or equal to `67.8`")  # noqa: E501

        self._double = double

    @property
    def decimal(self):
        """Gets the decimal of this FormatTest.


        :return: The decimal of this FormatTest.
        :rtype: Decimal
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this FormatTest.


        :param decimal: The decimal of this FormatTest.
        :type decimal: Decimal
        """

        self._decimal = decimal

    @property
    def string(self):
        """Gets the string of this FormatTest.


        :return: The string of this FormatTest.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this FormatTest.


        :param string: The string of this FormatTest.
        :type string: str
        """
        if string is not None and not re.search(r'[a-z]', string, flags=re.IGNORECASE):  # noqa: E501
            raise ValueError("Invalid value for `string`, must be a follow pattern or equal to `/[a-z]/i`")  # noqa: E501

        self._string = string

    @property
    def byte(self):
        """Gets the byte of this FormatTest.


        :return: The byte of this FormatTest.
        :rtype: str
        """
        return self._byte

    @byte.setter
    def byte(self, byte):
        """Sets the byte of this FormatTest.


        :param byte: The byte of this FormatTest.
        :type byte: str
        """
        if byte is None:
            raise ValueError("Invalid value for `byte`, must not be `None`")  # noqa: E501

        self._byte = byte

    @property
    def binary(self):
        """Gets the binary of this FormatTest.


        :return: The binary of this FormatTest.
        :rtype: file
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this FormatTest.


        :param binary: The binary of this FormatTest.
        :type binary: file
        """

        self._binary = binary

    @property
    def date(self):
        """Gets the date of this FormatTest.


        :return: The date of this FormatTest.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this FormatTest.


        :param date: The date of this FormatTest.
        :type date: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def date_time(self):
        """Gets the date_time of this FormatTest.


        :return: The date_time of this FormatTest.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this FormatTest.


        :param date_time: The date_time of this FormatTest.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def uuid(self):
        """Gets the uuid of this FormatTest.


        :return: The uuid of this FormatTest.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FormatTest.


        :param uuid: The uuid of this FormatTest.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def password(self):
        """Gets the password of this FormatTest.


        :return: The password of this FormatTest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FormatTest.


        :param password: The password of this FormatTest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if password is not None and len(password) > 64:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `64`")  # noqa: E501
        if password is not None and len(password) < 10:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `10`")  # noqa: E501

        self._password = password

    @property
    def pattern_with_digits(self):
        """Gets the pattern_with_digits of this FormatTest.

        A string that is a 10 digit number. Can have leading zeros.  # noqa: E501

        :return: The pattern_with_digits of this FormatTest.
        :rtype: str
        """
        return self._pattern_with_digits

    @pattern_with_digits.setter
    def pattern_with_digits(self, pattern_with_digits):
        """Sets the pattern_with_digits of this FormatTest.

        A string that is a 10 digit number. Can have leading zeros.  # noqa: E501

        :param pattern_with_digits: The pattern_with_digits of this FormatTest.
        :type pattern_with_digits: str
        """
        if pattern_with_digits is not None and not re.search(r'^\d{10}$', pattern_with_digits):  # noqa: E501
            raise ValueError("Invalid value for `pattern_with_digits`, must be a follow pattern or equal to `/^\d{10}$/`")  # noqa: E501

        self._pattern_with_digits = pattern_with_digits

    @property
    def pattern_with_digits_and_delimiter(self):
        """Gets the pattern_with_digits_and_delimiter of this FormatTest.

        A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.  # noqa: E501

        :return: The pattern_with_digits_and_delimiter of this FormatTest.
        :rtype: str
        """
        return self._pattern_with_digits_and_delimiter

    @pattern_with_digits_and_delimiter.setter
    def pattern_with_digits_and_delimiter(self, pattern_with_digits_and_delimiter):
        """Sets the pattern_with_digits_and_delimiter of this FormatTest.

        A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.  # noqa: E501

        :param pattern_with_digits_and_delimiter: The pattern_with_digits_and_delimiter of this FormatTest.
        :type pattern_with_digits_and_delimiter: str
        """
        if pattern_with_digits_and_delimiter is not None and not re.search(r'^image_\d{1,3}$', pattern_with_digits_and_delimiter, flags=re.IGNORECASE):  # noqa: E501
            raise ValueError("Invalid value for `pattern_with_digits_and_delimiter`, must be a follow pattern or equal to `/^image_\d{1,3}$/i`")  # noqa: E501

        self._pattern_with_digits_and_delimiter = pattern_with_digits_and_delimiter
