# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Capitalization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, small_camel=None, capital_camel=None, small_snake=None, capital_snake=None, sca_eth_flow_points=None, att_name=None):  # noqa: E501
        """Capitalization - a model defined in OpenAPI

        :param small_camel: The small_camel of this Capitalization.  # noqa: E501
        :type small_camel: str
        :param capital_camel: The capital_camel of this Capitalization.  # noqa: E501
        :type capital_camel: str
        :param small_snake: The small_snake of this Capitalization.  # noqa: E501
        :type small_snake: str
        :param capital_snake: The capital_snake of this Capitalization.  # noqa: E501
        :type capital_snake: str
        :param sca_eth_flow_points: The sca_eth_flow_points of this Capitalization.  # noqa: E501
        :type sca_eth_flow_points: str
        :param att_name: The att_name of this Capitalization.  # noqa: E501
        :type att_name: str
        """
        self.openapi_types = {
            'small_camel': str,
            'capital_camel': str,
            'small_snake': str,
            'capital_snake': str,
            'sca_eth_flow_points': str,
            'att_name': str
        }

        self.attribute_map = {
            'small_camel': 'smallCamel',
            'capital_camel': 'CapitalCamel',
            'small_snake': 'small_Snake',
            'capital_snake': 'Capital_Snake',
            'sca_eth_flow_points': 'SCA_ETH_Flow_Points',
            'att_name': 'ATT_NAME'
        }

        self._small_camel = small_camel
        self._capital_camel = capital_camel
        self._small_snake = small_snake
        self._capital_snake = capital_snake
        self._sca_eth_flow_points = sca_eth_flow_points
        self._att_name = att_name

    @classmethod
    def from_dict(cls, dikt) -> 'Capitalization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Capitalization of this Capitalization.  # noqa: E501
        :rtype: Capitalization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def small_camel(self):
        """Gets the small_camel of this Capitalization.


        :return: The small_camel of this Capitalization.
        :rtype: str
        """
        return self._small_camel

    @small_camel.setter
    def small_camel(self, small_camel):
        """Sets the small_camel of this Capitalization.


        :param small_camel: The small_camel of this Capitalization.
        :type small_camel: str
        """

        self._small_camel = small_camel

    @property
    def capital_camel(self):
        """Gets the capital_camel of this Capitalization.


        :return: The capital_camel of this Capitalization.
        :rtype: str
        """
        return self._capital_camel

    @capital_camel.setter
    def capital_camel(self, capital_camel):
        """Sets the capital_camel of this Capitalization.


        :param capital_camel: The capital_camel of this Capitalization.
        :type capital_camel: str
        """

        self._capital_camel = capital_camel

    @property
    def small_snake(self):
        """Gets the small_snake of this Capitalization.


        :return: The small_snake of this Capitalization.
        :rtype: str
        """
        return self._small_snake

    @small_snake.setter
    def small_snake(self, small_snake):
        """Sets the small_snake of this Capitalization.


        :param small_snake: The small_snake of this Capitalization.
        :type small_snake: str
        """

        self._small_snake = small_snake

    @property
    def capital_snake(self):
        """Gets the capital_snake of this Capitalization.


        :return: The capital_snake of this Capitalization.
        :rtype: str
        """
        return self._capital_snake

    @capital_snake.setter
    def capital_snake(self, capital_snake):
        """Sets the capital_snake of this Capitalization.


        :param capital_snake: The capital_snake of this Capitalization.
        :type capital_snake: str
        """

        self._capital_snake = capital_snake

    @property
    def sca_eth_flow_points(self):
        """Gets the sca_eth_flow_points of this Capitalization.


        :return: The sca_eth_flow_points of this Capitalization.
        :rtype: str
        """
        return self._sca_eth_flow_points

    @sca_eth_flow_points.setter
    def sca_eth_flow_points(self, sca_eth_flow_points):
        """Sets the sca_eth_flow_points of this Capitalization.


        :param sca_eth_flow_points: The sca_eth_flow_points of this Capitalization.
        :type sca_eth_flow_points: str
        """

        self._sca_eth_flow_points = sca_eth_flow_points

    @property
    def att_name(self):
        """Gets the att_name of this Capitalization.

        Name of the pet   # noqa: E501

        :return: The att_name of this Capitalization.
        :rtype: str
        """
        return self._att_name

    @att_name.setter
    def att_name(self, att_name):
        """Sets the att_name of this Capitalization.

        Name of the pet   # noqa: E501

        :param att_name: The att_name of this Capitalization.
        :type att_name: str
        """

        self._att_name = att_name
