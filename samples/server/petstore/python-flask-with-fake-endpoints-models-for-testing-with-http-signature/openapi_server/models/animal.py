# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Animal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, class_name=None, color='red'):  # noqa: E501
        """Animal - a model defined in OpenAPI

        :param class_name: The class_name of this Animal.  # noqa: E501
        :type class_name: str
        :param color: The color of this Animal.  # noqa: E501
        :type color: str
        """
        self.openapi_types = {
            'class_name': str,
            'color': str
        }

        self.attribute_map = {
            'class_name': 'className',
            'color': 'color'
        }

        self._class_name = class_name
        self._color = color

    @classmethod
    def from_dict(cls, dikt) -> 'Animal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Animal of this Animal.  # noqa: E501
        :rtype: Animal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_name(self):
        """Gets the class_name of this Animal.


        :return: The class_name of this Animal.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this Animal.


        :param class_name: The class_name of this Animal.
        :type class_name: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def color(self):
        """Gets the color of this Animal.


        :return: The color of this Animal.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Animal.


        :param color: The color of this Animal.
        :type color: str
        """

        self._color = color
