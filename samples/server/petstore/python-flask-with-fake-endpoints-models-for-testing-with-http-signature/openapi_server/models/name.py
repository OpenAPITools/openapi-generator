# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Name(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, snake_case=None, _property=None, _123_number=None):  # noqa: E501
        """Name - a model defined in OpenAPI

        :param name: The name of this Name.  # noqa: E501
        :type name: int
        :param snake_case: The snake_case of this Name.  # noqa: E501
        :type snake_case: int
        :param _property: The _property of this Name.  # noqa: E501
        :type _property: str
        :param _123_number: The _123_number of this Name.  # noqa: E501
        :type _123_number: int
        """
        self.openapi_types = {
            'name': int,
            'snake_case': int,
            '_property': str,
            '_123_number': int
        }

        self.attribute_map = {
            'name': 'name',
            'snake_case': 'snake_case',
            '_property': 'property',
            '_123_number': '123Number'
        }

        self._name = name
        self._snake_case = snake_case
        self.__property = _property
        self.__123_number = _123_number

    @classmethod
    def from_dict(cls, dikt) -> 'Name':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Name of this Name.  # noqa: E501
        :rtype: Name
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Name.


        :return: The name of this Name.
        :rtype: int
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Name.


        :param name: The name of this Name.
        :type name: int
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def snake_case(self):
        """Gets the snake_case of this Name.


        :return: The snake_case of this Name.
        :rtype: int
        """
        return self._snake_case

    @snake_case.setter
    def snake_case(self, snake_case):
        """Sets the snake_case of this Name.


        :param snake_case: The snake_case of this Name.
        :type snake_case: int
        """

        self._snake_case = snake_case

    @property
    def _property(self):
        """Gets the _property of this Name.


        :return: The _property of this Name.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Name.


        :param _property: The _property of this Name.
        :type _property: str
        """

        self.__property = _property

    @property
    def _123_number(self):
        """Gets the _123_number of this Name.


        :return: The _123_number of this Name.
        :rtype: int
        """
        return self.__123_number

    @_123_number.setter
    def _123_number(self, _123_number):
        """Sets the _123_number of this Name.


        :param _123_number: The _123_number of this Name.
        :type _123_number: int
        """

        self.__123_number = _123_number
