/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Pet_bestFriends.h
 *
 * Pet best friends!
 */

#ifndef Pet_bestFriends_H_
#define Pet_bestFriends_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Pet best friends!
/// </summary>
class  Pet_bestFriends
{
public:
    Pet_bestFriends();
    virtual ~Pet_bestFriends() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Pet_bestFriends& rhs) const;
    bool operator!=(const Pet_bestFriends& rhs) const;

    /////////////////////////////////////////////
    /// Pet_bestFriends members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getBestFriends() const;
    void setBestFriends(std::vector<std::string> const& value);

    friend  void to_json(nlohmann::json& j, const Pet_bestFriends& o);
    friend  void from_json(const nlohmann::json& j, Pet_bestFriends& o);
protected:
    std::vector<std::string> m_BestFriends;

    
};

} // namespace org::openapitools::server::model

#endif /* Pet_bestFriends_H_ */
