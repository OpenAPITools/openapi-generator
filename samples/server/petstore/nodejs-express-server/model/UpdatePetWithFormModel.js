/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

const OpenApiModel = require('./OpenApiModel');
/**
 * The UpdatePetWithFormModel model module.
 * @module model/Name
 * @version 1.0.0
 */
class UpdatePetWithFormModel extends OpenApiModel {
  /**
     * Constructs a new <code>Name</code>.
     * Model for testing model name same as property name
     * @alias module:model/Name
     * @param name {String}
     * @param status {String}
     */
  constructor(name = '', status = '') {
    super();
    UpdatePetWithFormModel.initialize(this, name, status);
  }

  /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement
     * multiple inheritance (mix-ins).
     * Only for internal use.
     */
  static initialize(obj, name, status) {
      obj.name = name;
      obj.status = status;
  }

  /**
     * Constructs a <code>Name</code> from a plain JavaScript object, optionally creating a
     * new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or
     * a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Name} obj Optional instance to populate.
     * @return {module:model/Name} The populated <code>Name</code> instance.
     */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UpdatePetWithFormModel();

      if (data.hasOwnProperty('name')) {
        obj.name = UpdatePetWithFormModel.convertToType(data.name, 'Number');
      }
      if (data.hasOwnProperty('status')) {
        obj.status = UpdatePetWithFormModel.convertToType(data.status, 'Number');
      }
    }
    return obj;
  }
}

/**
 * @member {Number} name
 */
UpdatePetWithFormModel.prototype.name = undefined;

/**
 * @member {Number} snake_case
 */
UpdatePetWithFormModel.prototype.status = undefined;

module.exports = UpdatePetWithFormModel;
