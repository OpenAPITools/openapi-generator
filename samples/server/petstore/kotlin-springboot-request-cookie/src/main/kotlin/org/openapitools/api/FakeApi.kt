/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package org.openapitools.api

import org.openapitools.model.ChildWithNullable
import org.openapitools.model.Client
import org.openapitools.model.EnumClass
import org.openapitools.model.FakeBigDecimalMap200Response
import org.openapitools.model.FileSchemaTestClass
import org.openapitools.model.HealthCheckResult
import org.openapitools.model.ModelApiResponse
import org.openapitools.model.OuterComposite
import org.openapitools.model.OuterObjectWithEnumProperty
import org.openapitools.model.Pet
import org.openapitools.model.TestInlineFreeformAdditionalPropertiesRequest
import org.openapitools.model.User
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.http.server.reactive.ServerHttpRequest

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:/v2}")
interface FakeApi {

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakeBigDecimalMap",
        description = """for Java apache and Java native, test toUrlQueryString for maps with BegDecimal keys""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = FakeBigDecimalMap200Response::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fake/BigDecimalMap"],
            produces = ["*/*"]
    )
    fun fakeBigDecimalMap(serverHttpRequest: ServerHttpRequest): ResponseEntity<FakeBigDecimalMap200Response> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakeCookieSuggestion",
        description = """Test list of objects with additional values matching data from cookie""",
        responses = [
            ApiResponse(responseCode = "200", description = "List of pets resolved from suggestion", content = [Content(array = ArraySchema(schema = Schema(implementation = Pet::class)))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fake/cookie-suggestion"],
            produces = ["application/json"]
    )
    fun fakeCookieSuggestion(@NotNull @CookieValue(name = "category.history") categoryHistory: kotlin.String,serverHttpRequest: ServerHttpRequest): ResponseEntity<List<Pet>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "Health check endpoint",
        operationId = "fakeHealthGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The instance started successfully", content = [Content(schema = Schema(implementation = HealthCheckResult::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fake/health"],
            produces = ["application/json"]
    )
    fun fakeHealthGet(serverHttpRequest: ServerHttpRequest): ResponseEntity<HealthCheckResult> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test http signature authentication",
        operationId = "fakeHttpSignatureTest",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The instance started successfully")
        ],
        security = [ SecurityRequirement(name = "http_signature_test") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fake/http-signature-test"],
            consumes = ["application/json", "application/xml"]
    )
    fun fakeHttpSignatureTest(@Parameter(description = "Pet object that needs to be added to the store", required = true) @Valid @RequestBody pet: Pet,@Parameter(description = "query parameter") @Valid @RequestParam(value = "query_1", required = false) query1: kotlin.String?,@Parameter(description = "header parameter", `in` = ParameterIn.HEADER) @RequestHeader(value = "header_1", required = false) header1: kotlin.String?,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakeOuterBooleanSerialize",
        description = """Test serialization of outer boolean types""",
        responses = [
            ApiResponse(responseCode = "200", description = "Output boolean", content = [Content(schema = Schema(implementation = kotlin.Boolean::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/outer/boolean"],
            produces = ["*/*"],
            consumes = ["application/json"]
    )
    fun fakeOuterBooleanSerialize(@Parameter(description = "Input boolean as post body") @Valid @RequestBody(required = false) body: kotlin.Boolean?,serverHttpRequest: ServerHttpRequest): ResponseEntity<kotlin.Boolean> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakeOuterCompositeSerialize",
        description = """Test serialization of object with outer number type""",
        responses = [
            ApiResponse(responseCode = "200", description = "Output composite", content = [Content(schema = Schema(implementation = OuterComposite::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/outer/composite"],
            produces = ["*/*"],
            consumes = ["application/json"]
    )
    fun fakeOuterCompositeSerialize(@Parameter(description = "Input composite as post body") @Valid @RequestBody(required = false) outerComposite: OuterComposite?,serverHttpRequest: ServerHttpRequest): ResponseEntity<OuterComposite> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakeOuterNumberSerialize",
        description = """Test serialization of outer number types""",
        responses = [
            ApiResponse(responseCode = "200", description = "Output number", content = [Content(schema = Schema(implementation = java.math.BigDecimal::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/outer/number"],
            produces = ["*/*"],
            consumes = ["application/json"]
    )
    fun fakeOuterNumberSerialize(@Parameter(description = "Input number as post body") @Valid @RequestBody(required = false) body: java.math.BigDecimal?,serverHttpRequest: ServerHttpRequest): ResponseEntity<java.math.BigDecimal> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakeOuterStringSerialize",
        description = """Test serialization of outer string types""",
        responses = [
            ApiResponse(responseCode = "200", description = "Output string", content = [Content(schema = Schema(implementation = kotlin.String::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/outer/string"],
            produces = ["*/*"],
            consumes = ["application/json"]
    )
    fun fakeOuterStringSerialize(@Parameter(description = "Input string as post body") @Valid @RequestBody(required = false) body: kotlin.String?,serverHttpRequest: ServerHttpRequest): ResponseEntity<kotlin.String> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "fakePropertyEnumIntegerSerialize",
        description = """Test serialization of enum (int) properties with examples""",
        responses = [
            ApiResponse(responseCode = "200", description = "Output enum (int)", content = [Content(schema = Schema(implementation = OuterObjectWithEnumProperty::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/property/enum-int"],
            produces = ["*/*"],
            consumes = ["application/json"]
    )
    fun fakePropertyEnumIntegerSerialize(@Parameter(description = "Input enum (int) as post body", required = true) @Valid @RequestBody outerObjectWithEnumProperty: OuterObjectWithEnumProperty,serverHttpRequest: ServerHttpRequest): ResponseEntity<OuterObjectWithEnumProperty> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test referenced additionalProperties",
        operationId = "testAdditionalPropertiesReference",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/additionalProperties-reference"],
            consumes = ["application/json"]
    )
    fun testAdditionalPropertiesReference(@Parameter(description = "request body", required = true) @Valid @RequestBody requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "testBodyWithBinary",
        description = """For this test, the body has to be a binary file.""",
        responses = [
            ApiResponse(responseCode = "200", description = "Success")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/fake/body-with-binary"],
            consumes = ["image/png"]
    )
    fun testBodyWithBinary(@Parameter(description = "image to upload", required = true) @Valid @RequestBody body: org.springframework.core.io.Resource,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "testBodyWithFileSchema",
        description = """For this test, the body for this request must reference a schema named `File`.""",
        responses = [
            ApiResponse(responseCode = "200", description = "Success")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/fake/body-with-file-schema"],
            consumes = ["application/json"]
    )
    fun testBodyWithFileSchema(@Parameter(description = "", required = true) @Valid @RequestBody fileSchemaTestClass: FileSchemaTestClass,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "testBodyWithQueryParams",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "Success")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/fake/body-with-query-params"],
            consumes = ["application/json"]
    )
    fun testBodyWithQueryParams(@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "query", required = true) query: kotlin.String,@Parameter(description = "", required = true) @Valid @RequestBody user: User,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "To test \"client\" model",
        operationId = "testClientModel",
        description = """To test "client" model""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Client::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PATCH],
            value = ["/fake"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun testClientModel(@Parameter(description = "client model", required = true) @Valid @RequestBody client: Client,serverHttpRequest: ServerHttpRequest): ResponseEntity<Client> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 ",
        operationId = "testEndpointParameters",
        description = """Fake endpoint for testing various parameters
假端點
偽のエンドポイント
가짜 엔드 포인트
""",
        responses = [
            ApiResponse(responseCode = "400", description = "Invalid username supplied"),
            ApiResponse(responseCode = "404", description = "User not found")
        ],
        security = [ SecurityRequirement(name = "http_basic_test") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun testEndpointParameters(@Parameter(description = "None", required = true) @RequestParam(value = "number", required = true) number: java.math.BigDecimal ,@Parameter(description = "None", required = true) @RequestParam(value = "double", required = true) double: kotlin.Double ,@Parameter(description = "None", required = true) @RequestParam(value = "pattern_without_delimiter", required = true) patternWithoutDelimiter: kotlin.String ,@Parameter(description = "None", required = true) @RequestParam(value = "byte", required = true) byte: kotlin.ByteArray ,@Parameter(description = "None") @RequestParam(value = "integer", required = false) integer: kotlin.Int? ,@Parameter(description = "None") @RequestParam(value = "int32", required = false) int32: kotlin.Int? ,@Parameter(description = "None") @RequestParam(value = "int64", required = false) int64: kotlin.Long? ,@Parameter(description = "None") @RequestParam(value = "float", required = false) float: kotlin.Float? ,@Parameter(description = "None") @RequestParam(value = "string", required = false) string: kotlin.String? ,@Parameter(description = "file detail") @Valid @RequestPart("file") binary: org.springframework.core.io.Resource?,@Parameter(description = "None") @RequestParam(value = "date", required = false) date: java.time.LocalDate? ,@Parameter(description = "None") @RequestParam(value = "dateTime", required = false) dateTime: java.time.OffsetDateTime? ,@Parameter(description = "None") @RequestParam(value = "password", required = false) password: kotlin.String? ,@Parameter(description = "None") @RequestParam(value = "callback", required = false) paramCallback: kotlin.String? ,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "To test enum parameters",
        operationId = "testEnumParameters",
        description = """To test enum parameters""",
        responses = [
            ApiResponse(responseCode = "400", description = "Invalid request"),
            ApiResponse(responseCode = "404", description = "Not found")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fake"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun testEnumParameters(@Parameter(description = "Header parameter enum test (string array)", `in` = ParameterIn.HEADER, schema = Schema(allowableValues = [">", "$"])) @RequestHeader(value = "enum_header_string_array", required = false) enumHeaderStringArray: kotlin.collections.List<kotlin.String>?,@Parameter(description = "Header parameter enum test (string)", `in` = ParameterIn.HEADER, schema = Schema(allowableValues = ["_abc", "-efg", "(xyz)"], defaultValue = "-efg")) @RequestHeader(value = "enum_header_string", required = false) enumHeaderString: kotlin.String,@Parameter(description = "Query parameter enum test (string array)", schema = Schema(allowableValues = [">", "$"])) @Valid @RequestParam(value = "enum_query_string_array", required = false) enumQueryStringArray: kotlin.collections.List<kotlin.String>?,@Parameter(description = "Query parameter enum test (string)", schema = Schema(allowableValues = ["_abc", "-efg", "(xyz)"], defaultValue = "-efg")) @Valid @RequestParam(value = "enum_query_string", required = false, defaultValue = "-efg") enumQueryString: kotlin.String,@Parameter(description = "Query parameter enum test (double)", schema = Schema(allowableValues = ["1", "-2"])) @Valid @RequestParam(value = "enum_query_integer", required = false) enumQueryInteger: kotlin.Int?,@Parameter(description = "Query parameter enum test (double)", schema = Schema(allowableValues = ["1.1", "-1.2"])) @Valid @RequestParam(value = "enum_query_double", required = false) enumQueryDouble: kotlin.Double?,@Parameter(description = "") @Valid @RequestParam(value = "enum_query_model_array", required = false) enumQueryModelArray: kotlin.collections.List<EnumClass>?,@Parameter(description = "Form parameter enum test (string array)", schema = Schema(allowableValues = [">", "$"])) @RequestParam(value = "enum_form_string_array", required = false) enumFormStringArray: kotlin.collections.List<kotlin.String> ,@Parameter(description = "Form parameter enum test (string)", schema = Schema(allowableValues = ["_abc", "-efg", "(xyz)"], defaultValue = "-efg")) @RequestParam(value = "enum_form_string", required = false) enumFormString: kotlin.String ,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "Fake endpoint to test group parameters (optional)",
        operationId = "testGroupParameters",
        description = """Fake endpoint to test group parameters (optional)""",
        responses = [
            ApiResponse(responseCode = "400", description = "Something wrong")
        ],
        security = [ SecurityRequirement(name = "bearer_test") ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/fake"]
    )
    fun testGroupParameters(@NotNull @Parameter(description = "Required String in group parameters", required = true) @Valid @RequestParam(value = "required_string_group", required = true) requiredStringGroup: kotlin.Int,@Parameter(description = "Required Boolean in group parameters", `in` = ParameterIn.HEADER, required = true) @RequestHeader(value = "required_boolean_group", required = true) requiredBooleanGroup: kotlin.Boolean,@NotNull @Parameter(description = "Required Integer in group parameters", required = true) @Valid @RequestParam(value = "required_int64_group", required = true) requiredInt64Group: kotlin.Long,@Parameter(description = "String in group parameters") @Valid @RequestParam(value = "string_group", required = false) stringGroup: kotlin.Int?,@Parameter(description = "Boolean in group parameters", `in` = ParameterIn.HEADER) @RequestHeader(value = "boolean_group", required = false) booleanGroup: kotlin.Boolean?,@Parameter(description = "Integer in group parameters") @Valid @RequestParam(value = "int64_group", required = false) int64Group: kotlin.Long?,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test inline additionalProperties",
        operationId = "testInlineAdditionalProperties",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/inline-additionalProperties"],
            consumes = ["application/json"]
    )
    fun testInlineAdditionalProperties(@Parameter(description = "request body", required = true) @Valid @RequestBody requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test inline free-form additionalProperties",
        operationId = "testInlineFreeformAdditionalProperties",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/inline-freeform-additionalProperties"],
            consumes = ["application/json"]
    )
    fun testInlineFreeformAdditionalProperties(@Parameter(description = "request body", required = true) @Valid @RequestBody testInlineFreeformAdditionalPropertiesRequest: TestInlineFreeformAdditionalPropertiesRequest,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test json serialization of form data",
        operationId = "testJsonFormData",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fake/jsonFormData"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun testJsonFormData(@Parameter(description = "field1", required = true) @RequestParam(value = "param", required = true) &#x60;param&#x60;: kotlin.String ,@Parameter(description = "field2", required = true) @RequestParam(value = "param2", required = true) param2: kotlin.String ,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test nullable parent property",
        operationId = "testNullable",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/nullable"],
            consumes = ["application/json"]
    )
    fun testNullable(@Parameter(description = "request body", required = true) @Valid @RequestBody childWithNullable: ChildWithNullable,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "",
        operationId = "testQueryParameterCollectionFormat",
        description = """To test the collection format in query parameters""",
        responses = [
            ApiResponse(responseCode = "200", description = "Success")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/fake/test-query-parameters"]
    )
    fun testQueryParameterCollectionFormat(@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "pipe", required = true) pipe: kotlin.collections.List<kotlin.String>,@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "ioutil", required = true) ioutil: kotlin.collections.List<kotlin.String>,@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "http", required = true) http: kotlin.collections.List<kotlin.String>,@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "url", required = true) url: kotlin.collections.List<kotlin.String>,@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "context", required = true) context: kotlin.collections.List<kotlin.String>,@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "allowEmpty", required = true) allowEmpty: kotlin.String,@Parameter(description = "") @Valid @RequestParam(value = "language", required = false) language: kotlin.collections.Map<kotlin.String, kotlin.String>?,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["fake",],
        summary = "test referenced string map",
        operationId = "testStringMapReference",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/stringMap-reference"],
            consumes = ["application/json"]
    )
    fun testStringMapReference(@Parameter(description = "request body", required = true) @Valid @RequestBody requestBody: kotlin.collections.Map<kotlin.String, kotlin.String>,serverHttpRequest: ServerHttpRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["pet",],
        summary = "uploads an image (required)",
        operationId = "uploadFileWithRequiredFile",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = ModelApiResponse::class))])
        ],
        security = [ SecurityRequirement(name = "petstore_auth", scopes = [ "write:pets", "read:pets" ]) ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fake/{petId}/uploadImageWithRequiredFile"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    fun uploadFileWithRequiredFile(@Parameter(description = "ID of pet to update", required = true) @PathVariable("petId") petId: kotlin.Long,@Parameter(description = "file detail") @Valid @RequestPart("file") requiredFile: org.springframework.core.io.Resource,@Parameter(description = "Additional data to pass to server") @RequestParam(value = "additionalMetadata", required = false) additionalMetadata: kotlin.String? ,serverHttpRequest: ServerHttpRequest): ResponseEntity<ModelApiResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
