/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver

import (
	"net/http"

	"fmt"
	"github.com/gin-gonic/gin"
	"encoding/base64"
	"regexp"
)

// ContentType - response content type key
const ContentType string = "drv-content-type"

var (
	jsonCheck = regexp.MustCompile(`(?i:(?:application|text)/(?:vnd\.[^;]+\+)?json)`)
	xmlCheck  = regexp.MustCompile(`(?i:(?:application|text)/xml)`)
)

// Logger interface
type Logger interface {
	Debug(...interface{})
	Info(...interface{})
	Warn(...interface{})
	Error(...interface{})
	Fatal(...interface{})
	Panic(...interface{})
}

// Command passed to handler type
type Command func(*gin.Context) interface{}

// Configuration of the server
type Configuration struct {
	Port       int
	TLS        bool
	ServeReDoc bool
	CertFile   string
	KeyFile    string
}

// Server object
type Server struct {
	log   Logger
	cnf   *Configuration
	hndsc HandlerCommands
}


// Run server
func (o *Server) Run() {
	addr := fmt.Sprintf(":%d", o.cnf.Port)
	router := NewRouter(&o.hndsc)

	if o.cnf.ServeReDoc {
		router = withReDoc(router)
	}

	o.log.Info(fmt.Sprintf("Server started [%s]", addr))

	if o.cnf.TLS {
		o.log.Fatal(router.RunTLS(addr, o.cnf.CertFile, o.cnf.KeyFile))
	} else {
		o.log.Fatal(router.Run(addr))
	}
}

// NewServer constructor
func NewServer(handlersCmd HandlerCommands, config *Configuration, logger Logger) *Server {
	return &Server{
		log:  logger,
		cnf:  config,
		hndsc: handlersCmd,
	}
}

// HandlerCommands mapping
type HandlerCommands struct {
	AddPet Command
	DeletePet Command
	FindPetsByStatus Command
	FindPetsByTags Command
	GetPetById Command
	UpdatePet Command
	UpdatePetWithForm Command
	UploadFile Command
	DeleteOrder Command
	GetInventory Command
	GetOrderById Command
	PlaceOrder Command
	CreateUser Command
	CreateUsersWithArrayInput Command
	CreateUsersWithListInput Command
	DeleteUser Command
	GetUserByName Command
	LoginUser Command
	LogoutUser Command
	UpdateUser Command
}

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(h *HandlerCommands) *gin.Engine {
	routes := Routes{
		{
			"Index",
			http.MethodGet,
			"/v2/",
			func (c *gin.Context) { c.String(http.StatusOK, "Hello World!") },
		},
		{
			"AddPet",
			http.MethodPost,
			"/v2/pet",
			NewAddPetHandler(h.AddPet),
		},
		{
			"DeletePet",
			http.MethodDelete,
			"/v2/pet/:petId",
			NewDeletePetHandler(h.DeletePet),
		},
		{
			"FindPetsByStatus",
			http.MethodGet,
			"/v2/pet/findByStatus",
			NewFindPetsByStatusHandler(h.FindPetsByStatus),
		},
		{
			"FindPetsByTags",
			http.MethodGet,
			"/v2/pet/findByTags",
			NewFindPetsByTagsHandler(h.FindPetsByTags),
		},
		{
			"GetPetById",
			http.MethodGet,
			"/v2/pet/:petId",
			NewGetPetByIdHandler(h.GetPetById),
		},
		{
			"UpdatePet",
			http.MethodPut,
			"/v2/pet",
			NewUpdatePetHandler(h.UpdatePet),
		},
		{
			"UpdatePetWithForm",
			http.MethodPost,
			"/v2/pet/:petId",
			NewUpdatePetWithFormHandler(h.UpdatePetWithForm),
		},
		{
			"UploadFile",
			http.MethodPost,
			"/v2/pet/:petId/uploadImage",
			NewUploadFileHandler(h.UploadFile),
		},
		{
			"DeleteOrder",
			http.MethodDelete,
			"/v2/store/order/:orderId",
			NewDeleteOrderHandler(h.DeleteOrder),
		},
		{
			"GetInventory",
			http.MethodGet,
			"/v2/store/inventory",
			NewGetInventoryHandler(h.GetInventory),
		},
		{
			"GetOrderById",
			http.MethodGet,
			"/v2/store/order/:orderId",
			NewGetOrderByIdHandler(h.GetOrderById),
		},
		{
			"PlaceOrder",
			http.MethodPost,
			"/v2/store/order",
			NewPlaceOrderHandler(h.PlaceOrder),
		},
		{
			"CreateUser",
			http.MethodPost,
			"/v2/user",
			NewCreateUserHandler(h.CreateUser),
		},
		{
			"CreateUsersWithArrayInput",
			http.MethodPost,
			"/v2/user/createWithArray",
			NewCreateUsersWithArrayInputHandler(h.CreateUsersWithArrayInput),
		},
		{
			"CreateUsersWithListInput",
			http.MethodPost,
			"/v2/user/createWithList",
			NewCreateUsersWithListInputHandler(h.CreateUsersWithListInput),
		},
		{
			"DeleteUser",
			http.MethodDelete,
			"/v2/user/:username",
			NewDeleteUserHandler(h.DeleteUser),
		},
		{
			"GetUserByName",
			http.MethodGet,
			"/v2/user/:username",
			NewGetUserByNameHandler(h.GetUserByName),
		},
		{
			"LoginUser",
			http.MethodGet,
			"/v2/user/login",
			NewLoginUserHandler(h.LoginUser),
		},
		{
			"LogoutUser",
			http.MethodGet,
			"/v2/user/logout",
			NewLogoutUserHandler(h.LogoutUser),
		},
		{
			"UpdateUser",
			http.MethodPut,
			"/v2/user/:username",
			NewUpdateUserHandler(h.UpdateUser),
		},
	}

	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// render response based on content type
func render(c *gin.Context, code int, response interface{}) {
	contentType := c.GetString(ContentType)
	switch {
	case jsonCheck.MatchString(contentType):
		c.JSON(code, response)
	case xmlCheck.MatchString(contentType):
		c.XML(code, response)
	default:
		c.String(http.StatusNotImplemented, "content type not implemented", response)
	}
}

func withReDoc(router *gin.Engine) *gin.Engine {
	router.GET("/v2/doc/api_spec.yaml", func(c *gin.Context) {
		p, err := base64.StdEncoding.DecodeString(ReDocAPISpec)
		if err != nil {
			panic(err)
		}

		c.Data(http.StatusOK, "text/x-yaml",p)
	})

	router.GET("/v2/doc", func(c *gin.Context) {
		p, err := base64.StdEncoding.DecodeString(ReDocHTML)
		if err != nil {
			panic(err)
		}

		c.Data(http.StatusOK, "text/html; charset=utf-8", p)
	})

	return router
}
