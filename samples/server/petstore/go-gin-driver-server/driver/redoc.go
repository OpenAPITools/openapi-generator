/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver

const ReDocHTML string = `PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPk9wZW5BUEkgUGV0c3RvcmU8L3RpdGxlPgogICAgICAgIDwhLS0gbmVlZGVkIGZvciBhZGFwdGl2ZSBkZXNpZ24gLS0+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiLz4KICAgICAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Nb250c2VycmF0OjMwMCw0MDAsNzAwfFJvYm90bzozMDAsNDAwLDcwMCIgcmVsPSJzdHlsZXNoZWV0Ij4KCiAgICAgICAgPCEtLQogICAgICAgIFJlRG9jIGRvZXNuJ3QgY2hhbmdlIG91dGVyIHBhZ2Ugc3R5bGVzCiAgICAgICAgLS0+CiAgICAgICAgPHN0eWxlPgogICAgICAgIGJvZHkgewogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQogICAgICAgIDwvc3R5bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8cmVkb2Mgc3BlYy11cmw9Jy92Mi9kb2MvYXBpX3NwZWMueWFtbCc+PC9yZWRvYz4KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9yZWRvY0BuZXh0L2J1bmRsZXMvcmVkb2Muc3RhbmRhbG9uZS5qcyI+IDwvc2NyaXB0PgogICAgPC9ib2R5Pgo8L2h0bWw+`

const ReDocAPISpec string = ``