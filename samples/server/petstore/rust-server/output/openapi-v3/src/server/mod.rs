use crate::{mimetypes, headers::*};
use bytes::{Buf, buf::BufExt};
use std::future::Future;
use std::pin::Pin;
use std::sync::Arc;
use std::marker::PhantomData;
use futures::{future, FutureExt, Stream, stream, TryStreamExt};
use headers::{ContentType, HeaderMapExt};
use hyper;
use hyper::{Body, HeaderMap, Request, Response, StatusCode};
use lazy_static::lazy_static;
use log::*;
use url::form_urlencoded;
use mime::Mime;
use serde_json;
use serde_xml_rs;

#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use openapi_context::auth::Authorization;
use openapi_context::{ApiError, ContextualPayload, XSpanId, Has, RequestParser};
use openapi_context::auth::Scopes;

use crate::{
    Api
    ,
    MultigetGetResponse,
    MultipleAuthSchemeGetResponse,
    ReadonlyAuthSchemeGetResponse,
    RequiredOctetStreamPutResponse,
    ResponsesWithHeadersGetResponse,
    UuidGetResponse,
    XmlExtraPostResponse,
    XmlOtherPostResponse,
    XmlOtherPutResponse,
    XmlPostResponse,
    XmlPutResponse
};
#[allow(unused_imports)]
use crate::models;

pub mod context;
pub mod tls;

mod paths {
    use lazy_static::lazy_static;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(vec![
            r"^/multiget$",
            r"^/multiple_auth_scheme$",
            r"^/readonly_auth_scheme$",
            r"^/required_octet_stream$",
            r"^/responses_with_headers$",
            r"^/uuid$",
            r"^/xml$",
            r"^/xml_extra$",
            r"^/xml_other$"
        ]).unwrap();
    }
    pub static ID_MULTIGET: usize = 0;
    pub static ID_MULTIPLE_AUTH_SCHEME: usize = 1;
    pub static ID_READONLY_AUTH_SCHEME: usize = 2;
    pub static ID_REQUIRED_OCTET_STREAM: usize = 3;
    pub static ID_RESPONSES_WITH_HEADERS: usize = 4;
    pub static ID_UUID: usize = 5;
    pub static ID_XML: usize = 6;
    pub static ID_XML_EXTRA: usize = 7;
    pub static ID_XML_OTHER: usize = 8;
}

pub struct Service<T, C> {
    api_impl: T,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C> {
    pub fn new(api_impl: T) -> Service<T, C> {
        Service{api_impl: api_impl, marker: PhantomData}
    }
}

pub type ServiceRequest<C> = ContextualPayload<C>;
pub type ServiceResponse = Response<Body>;
impl<T, C> hyper::service::Service<ServiceRequest<C>> for Service<T, C>
where
    T: Api<C> + Send + Sync + Clone + 'static,
    C: Has<XSpanId> + Has<Option<Authorization>> + Send + Sync + 'static
{
    type Response = ServiceResponse;
    type Error = ApiError;
    type Future = Pin<Box<dyn Future<Output=Result<Self::Response, Self::Error>> + Send>>;

    fn poll_ready(&mut self, cx: &mut std::task::Context<'_>) -> std::task::Poll<Result<(), Self::Error>> {
        std::task::Poll::Ready(Ok(()))
    }

    fn call(&mut self, r: ServiceRequest<C>) -> Self::Future {
        Box::pin(do_call(self.api_impl.clone(), r))
    }
}

async fn do_call<T, C>(api_impl: T, r: ServiceRequest<C>) -> Result<ServiceResponse, ApiError>
where
    T: Api<C> + Send + Sync + Clone + 'static,
    C: Has<XSpanId> + Has<Option<Authorization>> + Send + Sync + 'static
{
    let mut api_impl = api_impl;
    let mut context = r.context;
    let (parts, body) = r.inner.into_parts();
    let uri = parts.uri;
    let method = parts.method;
    let headers = parts.headers;
    let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

    // This match statement is duplicated below in `parse_operation_id()`.
    // Please update both places if changing how this code is autogenerated.
    match &method {
    
        // MultigetGet - GET /multiget
        &hyper::Method::GET if path.matched(paths::ID_MULTIGET) => {
            let result = api_impl.multiget_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                MultigetGetResponse::JSONRsp(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_JSON_RSP.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                MultigetGetResponse::XMLRsp(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_XML_RSP.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_xml_rs::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                MultigetGetResponse::OctetRsp(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(202).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_OCTET_RSP.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                MultigetGetResponse::StringRsp(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(203).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_STRING_RSP.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = body.0;
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                MultigetGetResponse::DuplicateResponseLongText(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(204).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_DUPLICATE_RESPONSE_LONG_TEXT.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                MultigetGetResponse::DuplicateResponseLongText_2(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(205).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_DUPLICATE_RESPONSE_LONG_TEXT_2.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                MultigetGetResponse::DuplicateResponseLongText_3(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(206).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::MULTIGET_GET_DUPLICATE_RESPONSE_LONG_TEXT_3.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
            }
        },
    
        // MultipleAuthSchemeGet - GET /multiple_auth_scheme
        &hyper::Method::GET if path.matched(paths::ID_MULTIPLE_AUTH_SCHEME) => {
            let authorization = match (&context as &dyn Has<Option<Authorization>>).get() {
                &Some(ref authorization) => authorization,
                &None => return Ok(Response::builder().status(StatusCode::FORBIDDEN).body(hyper::Body::from("Unauthenticated")).unwrap()),
            };

            // Authorization
            if let Scopes::Some(ref scopes) = authorization.scopes {
                let required_scopes: BTreeSet<String> = vec![
                "test.read".to_string(), // Allowed to read state.
                "test.write".to_string(), // Allowed to change state.
                ].into_iter().collect();

                if !required_scopes.is_subset(scopes) {
                    let missing_scopes = required_scopes.difference(scopes);
                    return Ok(Response::builder()
                        .status(StatusCode::FORBIDDEN)
                        .body(hyper::Body::from(missing_scopes.fold(
                            "Insufficient authorization, missing scopes".to_string(),
                            |s, scope| format!("{} {}", s, scope)
                        ))).unwrap())
                    ;
                }
            }
            let result = api_impl.multiple_auth_scheme_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                MultipleAuthSchemeGetResponse::CheckThatLimitingToMultipleRequiredAuthSchemesWorks
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // ReadonlyAuthSchemeGet - GET /readonly_auth_scheme
        &hyper::Method::GET if path.matched(paths::ID_READONLY_AUTH_SCHEME) => {
            let authorization = match (&context as &dyn Has<Option<Authorization>>).get() {
                &Some(ref authorization) => authorization,
                &None => return Ok(Response::builder().status(StatusCode::FORBIDDEN).body(hyper::Body::from("Unauthenticated")).unwrap()),
            };

            // Authorization
            if let Scopes::Some(ref scopes) = authorization.scopes {
                let required_scopes: BTreeSet<String> = vec![
                "test.read".to_string(), // Allowed to read state.
                ].into_iter().collect();

                if !required_scopes.is_subset(scopes) {
                    let missing_scopes = required_scopes.difference(scopes);
                    return Ok(Response::builder()
                        .status(StatusCode::FORBIDDEN)
                        .body(hyper::Body::from(missing_scopes.fold(
                            "Insufficient authorization, missing scopes".to_string(),
                            |s, scope| format!("{} {}", s, scope)
                        ))).unwrap())
                    ;
                }
            }
            let result = api_impl.readonly_auth_scheme_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                ReadonlyAuthSchemeGetResponse::CheckThatLimitingToASingleRequiredAuthSchemeWorks
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // RequiredOctetStreamPut - PUT /required_octet_stream
        &hyper::Method::PUT if path.matched(paths::ID_REQUIRED_OCTET_STREAM) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let param_body: Option<openapi_context::ByteArray> = if body.remaining() > 0 {
                Some(openapi_context::ByteArray(bytes))
            } else {
                None
            };
            let param_body = match param_body {
                Some(param_body) => param_body,
                None => return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from("Missing required body parameter body")).unwrap()),
            };
            let result = api_impl.required_octet_stream_put(param_body, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                RequiredOctetStreamPutResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // ResponsesWithHeadersGet - GET /responses_with_headers
        &hyper::Method::GET if path.matched(paths::ID_RESPONSES_WITH_HEADERS) => {
            let result = api_impl.responses_with_headers_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                ResponsesWithHeadersGetResponse::Success
                    {
                        body,
                        success_info
                    }
        
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
                    response.headers_mut().unwrap().typed_insert(ResponseSuccessInfo(success_info));
            
                    let header = headers::ContentType::from(mimetypes::responses::RESPONSES_WITH_HEADERS_GET_SUCCESS.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
                ResponsesWithHeadersGetResponse::PreconditionFailed
            
                    {
                        further_info,             failure_info
                    }
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(412).unwrap());
                    response.headers_mut().unwrap().typed_insert(ResponseFurtherInfo(further_info));
                    response.headers_mut().unwrap().typed_insert(ResponseFailureInfo(failure_info));
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // UuidGet - GET /uuid
        &hyper::Method::GET if path.matched(paths::ID_UUID) => {
            let result = api_impl.uuid_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                UuidGetResponse::DuplicateResponseLongText(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::UUID_GET_DUPLICATE_RESPONSE_LONG_TEXT.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
            }
        },
    
        // XmlExtraPost - POST /xml_extra
        &hyper::Method::POST if path.matched(paths::ID_XML_EXTRA) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let mut unused_elements = Vec::new();
            let param_duplicate_xml_object: Option<crate::models::DuplicateXmlObject> = if body.remaining() > 0 {
                let deserializer = &mut serde_xml_rs::de::Deserializer::new_from_reader(body.reader());
                match serde_ignored::deserialize(deserializer, |path| {
                    warn!("Ignoring unknown field in body: {}", path);
                    unused_elements.push(path.to_string());
                }) {
                    Ok(param_duplicate_xml_object) => param_duplicate_xml_object,
                    Err(_) => None,
                }
            } else {
                None
            };
            let result = api_impl.xml_extra_post(param_duplicate_xml_object, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            if !unused_elements.is_empty() {
                response.headers_mut().unwrap().typed_insert(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
            }
        
            match result {
                XmlExtraPostResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
                XmlExtraPostResponse::BadRequest
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(400).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // XmlOtherPost - POST /xml_other
        &hyper::Method::POST if path.matched(paths::ID_XML_OTHER) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let mut unused_elements = Vec::new();
            let param_another_xml_object: Option<crate::models::AnotherXmlObject> = if body.remaining() > 0 {
                let deserializer = &mut serde_xml_rs::de::Deserializer::new_from_reader(body.reader());
                match serde_ignored::deserialize(deserializer, |path| {
                    warn!("Ignoring unknown field in body: {}", path);
                    unused_elements.push(path.to_string());
                }) {
                    Ok(param_another_xml_object) => param_another_xml_object,
                    Err(_) => None,
                }
            } else {
                None
            };
            let result = api_impl.xml_other_post(param_another_xml_object, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            if !unused_elements.is_empty() {
                response.headers_mut().unwrap().typed_insert(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
            }
        
            match result {
                XmlOtherPostResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
                XmlOtherPostResponse::BadRequest
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(400).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // XmlOtherPut - PUT /xml_other
        &hyper::Method::PUT if path.matched(paths::ID_XML_OTHER) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let mut unused_elements = Vec::new();
            let param_string: Option<crate::models::AnotherXmlArray> = if body.remaining() > 0 {
                let deserializer = &mut serde_xml_rs::de::Deserializer::new_from_reader(body.reader());
                match serde_ignored::deserialize(deserializer, |path| {
                    warn!("Ignoring unknown field in body: {}", path);
                    unused_elements.push(path.to_string());
                }) {
                    Ok(param_string) => param_string,
                    Err(_) => None,
                }
            } else {
                None
            };
            let result = api_impl.xml_other_put(param_string, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            if !unused_elements.is_empty() {
                response.headers_mut().unwrap().typed_insert(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
            }
        
            match result {
                XmlOtherPutResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
                XmlOtherPutResponse::BadRequest
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(400).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // XmlPost - POST /xml
        &hyper::Method::POST if path.matched(paths::ID_XML) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let mut unused_elements = Vec::new();
            let param_xml_array: Option<crate::models::XmlArray> = if body.remaining() > 0 {
                let deserializer = &mut serde_xml_rs::de::Deserializer::new_from_reader(body.reader());
                match serde_ignored::deserialize(deserializer, |path| {
                    warn!("Ignoring unknown field in body: {}", path);
                    unused_elements.push(path.to_string());
                }) {
                    Ok(param_xml_array) => param_xml_array
                    Err(_) => None,
                }
            } else {
                None
            };
            let result = api_impl.xml_post(param_xml_array, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            if !unused_elements.is_empty() {
                response.headers_mut().unwrap().typed_insert(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
            }
        
            match result {
                XmlPostResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
                XmlPostResponse::BadRequest
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(400).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // XmlPut - PUT /xml
        &hyper::Method::PUT if path.matched(paths::ID_XML) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let mut unused_elements = Vec::new();
            let param_xml_object: Option<crate::models::XmlObject> = if body.remaining() > 0 {
                let deserializer = &mut serde_xml_rs::de::Deserializer::new_from_reader(body.reader());
                match serde_ignored::deserialize(deserializer, |path| {
                    warn!("Ignoring unknown field in body: {}", path);
                    unused_elements.push(path.to_string());
                }) {
                    Ok(param_xml_object) => param_xml_object,
                    Err(_) => None,
                }
            } else {
                None
            };
            let result = api_impl.xml_put(param_xml_object, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            if !unused_elements.is_empty() {
                response.headers_mut().unwrap().typed_insert(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
            }
        
            match result {
                XmlPutResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
                XmlPutResponse::BadRequest
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(400).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        _ => Ok(Response::builder().status(StatusCode::NOT_FOUND).body(Body::empty()).unwrap()),
    }
}

impl<T, C> Clone for Service<T, C> where T: Clone
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}


/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser<Body> for ApiRequestParser {
    fn parse_operation_id(request: &Request<Body>) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // MultigetGet - GET /multiget
            &hyper::Method::GET if path.matched(paths::ID_MULTIGET) => Ok("MultigetGet"),

            // MultipleAuthSchemeGet - GET /multiple_auth_scheme
            &hyper::Method::GET if path.matched(paths::ID_MULTIPLE_AUTH_SCHEME) => Ok("MultipleAuthSchemeGet"),

            // ReadonlyAuthSchemeGet - GET /readonly_auth_scheme
            &hyper::Method::GET if path.matched(paths::ID_READONLY_AUTH_SCHEME) => Ok("ReadonlyAuthSchemeGet"),

            // RequiredOctetStreamPut - PUT /required_octet_stream
            &hyper::Method::PUT if path.matched(paths::ID_REQUIRED_OCTET_STREAM) => Ok("RequiredOctetStreamPut"),

            // ResponsesWithHeadersGet - GET /responses_with_headers
            &hyper::Method::GET if path.matched(paths::ID_RESPONSES_WITH_HEADERS) => Ok("ResponsesWithHeadersGet"),

            // UuidGet - GET /uuid
            &hyper::Method::GET if path.matched(paths::ID_UUID) => Ok("UuidGet"),

            // XmlExtraPost - POST /xml_extra
            &hyper::Method::POST if path.matched(paths::ID_XML_EXTRA) => Ok("XmlExtraPost"),

            // XmlOtherPost - POST /xml_other
            &hyper::Method::POST if path.matched(paths::ID_XML_OTHER) => Ok("XmlOtherPost"),

            // XmlOtherPut - PUT /xml_other
            &hyper::Method::PUT if path.matched(paths::ID_XML_OTHER) => Ok("XmlOtherPut"),

            // XmlPost - POST /xml
            &hyper::Method::POST if path.matched(paths::ID_XML) => Ok("XmlPost"),

            // XmlPut - PUT /xml
            &hyper::Method::PUT if path.matched(paths::ID_XML) => Ok("XmlPut"),
            _ => Err(()),
        }
    }
}
