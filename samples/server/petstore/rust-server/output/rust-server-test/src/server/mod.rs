use crate::{mimetypes, headers::*};
use bytes::{Buf, buf::BufExt};
use std::future::Future;
use std::pin::Pin;
use std::sync::Arc;
use std::marker::PhantomData;
use futures::{future, FutureExt, Stream, stream, TryStreamExt};
use headers::{ContentType, HeaderMapExt};
use hyper;
use hyper::{Body, HeaderMap, Request, Response, StatusCode};
use lazy_static::lazy_static;
use log::*;
use url::form_urlencoded;
use mime::Mime;
use serde_json;

#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use openapi_context::auth::Authorization;
use openapi_context::{ApiError, ContextualPayload, XSpanId, Has, RequestParser};
use openapi_context::auth::Scopes;

use crate::{
    Api
    ,
    DummyGetResponse,
    DummyPutResponse,
    FileResponseGetResponse,
    HtmlPostResponse,
    RawJsonGetResponse
};
#[allow(unused_imports)]
use crate::models;

pub mod context;
pub mod tls;

mod paths {
    use lazy_static::lazy_static;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(vec![
            r"^/dummy$",
            r"^/file_response$",
            r"^/html$",
            r"^/raw_json$"
        ]).unwrap();
    }
    pub static ID_DUMMY: usize = 0;
    pub static ID_FILE_RESPONSE: usize = 1;
    pub static ID_HTML: usize = 2;
    pub static ID_RAW_JSON: usize = 3;
}

pub struct Service<T, C> {
    api_impl: T,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C> {
    pub fn new(api_impl: T) -> Service<T, C> {
        Service{api_impl: api_impl, marker: PhantomData}
    }
}

pub type ServiceRequest<C> = ContextualPayload<C>;
pub type ServiceResponse = Response<Body>;
impl<T, C> hyper::service::Service<ServiceRequest<C>> for Service<T, C>
where
    T: Api<C> + Send + Sync + Clone + 'static,
    C: Has<XSpanId>  + Send + Sync + 'static
{
    type Response = ServiceResponse;
    type Error = ApiError;
    type Future = Pin<Box<dyn Future<Output=Result<Self::Response, Self::Error>> + Send>>;

    fn poll_ready(&mut self, cx: &mut std::task::Context<'_>) -> std::task::Poll<Result<(), Self::Error>> {
        std::task::Poll::Ready(Ok(()))
    }

    fn call(&mut self, r: ServiceRequest<C>) -> Self::Future {
        Box::pin(do_call(self.api_impl.clone(), r))
    }
}

async fn do_call<T, C>(api_impl: T, r: ServiceRequest<C>) -> Result<ServiceResponse, ApiError>
where
    T: Api<C> + Send + Sync + Clone + 'static,
    C: Has<XSpanId>  + Send + Sync + 'static
{
    let mut api_impl = api_impl;
    let mut context = r.context;
    let (parts, body) = r.inner.into_parts();
    let uri = parts.uri;
    let method = parts.method;
    let headers = parts.headers;
    let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

    // This match statement is duplicated below in `parse_operation_id()`.
    // Please update both places if changing how this code is autogenerated.
    match &method {
    
        // DummyGet - GET /dummy
        &hyper::Method::GET if path.matched(paths::ID_DUMMY) => {
            let result = api_impl.dummy_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                DummyGetResponse::Success
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // DummyPut - PUT /dummy
        &hyper::Method::PUT if path.matched(paths::ID_DUMMY) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let mut unused_elements = Vec::new();
            let param_nested_response: Option<crate::models::InlineObject> = if body.remaining() > 0 {
                let deserializer = &mut serde_json::Deserializer::from_reader(body.reader());
                match serde_ignored::deserialize(deserializer, |path| {
                    warn!("Ignoring unknown field in body: {}", path);
                    unused_elements.push(path.to_string());
                }) {
                    Ok(param_nested_response) => param_nested_response,
                    Err(e) => return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from(format!("Couldn't parse body parameter nested_response - doesn't match schema: {}", e))).unwrap()),
                }
            } else {
                None
            };
            let param_nested_response = match param_nested_response {
                Some(param_nested_response) => param_nested_response,
                None => return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from("Missing required body parameter nested_response")).unwrap()),
            };
            let result = api_impl.dummy_put(param_nested_response, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            if !unused_elements.is_empty() {
                response.headers_mut().unwrap().typed_insert(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
            }
        
            match result {
                DummyPutResponse::Success
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        // FileResponseGet - GET /file_response
        &hyper::Method::GET if path.matched(paths::ID_FILE_RESPONSE) => {
            let result = api_impl.file_response_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                FileResponseGetResponse::Success(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::FILE_RESPONSE_GET_SUCCESS.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
            }
        },
    
        // HtmlPost - POST /html
        &hyper::Method::POST if path.matched(paths::ID_HTML) => {
            // Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields

            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            let param_body: Option<String> = if body.remaining() > 0 {
                Some(String::from_utf8(bytes).unwrap())
            } else {
                None
            };
            let param_body = match param_body {
                Some(param_body) => param_body,
                None => return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from("Missing required body parameter body")).unwrap()),
            };
            let result = api_impl.html_post(param_body, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                HtmlPostResponse::Success(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::HTML_POST_SUCCESS.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = body.0;
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
            }
        },
    
        // RawJsonGet - GET /raw_json
        &hyper::Method::GET if path.matched(paths::ID_RAW_JSON) => {
            let result = api_impl.raw_json_get(&context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                RawJsonGetResponse::Success(body)
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(200).unwrap());
            
                    let header = headers::ContentType::from(mimetypes::responses::RAW_JSON_GET_SUCCESS.clone());
                    response.headers_mut().unwrap().typed_insert(header);
            
                
                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                
                    Ok(response.body(Body::from(body)).unwrap())
                },
            }
        },
    
        _ => Ok(Response::builder().status(StatusCode::NOT_FOUND).body(Body::empty()).unwrap()),
    }
}

impl<T, C> Clone for Service<T, C> where T: Clone
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}


/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser<Body> for ApiRequestParser {
    fn parse_operation_id(request: &Request<Body>) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // DummyGet - GET /dummy
            &hyper::Method::GET if path.matched(paths::ID_DUMMY) => Ok("DummyGet"),

            // DummyPut - PUT /dummy
            &hyper::Method::PUT if path.matched(paths::ID_DUMMY) => Ok("DummyPut"),

            // FileResponseGet - GET /file_response
            &hyper::Method::GET if path.matched(paths::ID_FILE_RESPONSE) => Ok("FileResponseGet"),

            // HtmlPost - POST /html
            &hyper::Method::POST if path.matched(paths::ID_HTML) => Ok("HtmlPost"),

            // RawJsonGet - GET /raw_json
            &hyper::Method::GET if path.matched(paths::ID_RAW_JSON) => Ok("RawJsonGet"),
            _ => Err(()),
        }
    }
}
