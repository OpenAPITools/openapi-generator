use crate::{mimetypes, headers::*};
use bytes::{Buf, buf::BufExt};
use std::future::Future;
use std::pin::Pin;
use std::sync::Arc;
use std::marker::PhantomData;
use futures::{future, FutureExt, Stream, stream, TryStreamExt};
use headers::{ContentType, HeaderMapExt};
use hyper;
use hyper::{Body, HeaderMap, Request, Response, StatusCode};
use lazy_static::lazy_static;
use log::*;
use url::form_urlencoded;
use mime::Mime;
use multipart::server::Multipart;
use multipart::server::save::SaveResult;
use std::io::Read;
use serde_json;

#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use openapi_context::auth::Authorization;
use openapi_context::{ApiError, ContextualPayload, XSpanId, Has, RequestParser};
use openapi_context::auth::Scopes;

use crate::{
    Api
    ,
    MultipartRequestPostResponse
};
#[allow(unused_imports)]
use crate::models;

pub mod context;
pub mod tls;

mod paths {
    use lazy_static::lazy_static;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(vec![
            r"^/multipart_request$"
        ]).unwrap();
    }
    pub static ID_MULTIPART_REQUEST: usize = 0;
}

pub struct Service<T, C> {
    api_impl: T,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C> {
    pub fn new(api_impl: T) -> Service<T, C> {
        Service{api_impl: api_impl, marker: PhantomData}
    }
}

pub type ServiceRequest<C> = ContextualPayload<C>;
pub type ServiceResponse = Response<Body>;
impl<T, C> hyper::service::Service<ServiceRequest<C>> for Service<T, C>
where
    T: Api<C> + Send + Sync + Clone + 'static,
    C: Has<XSpanId>  + Send + Sync + 'static
{
    type Response = ServiceResponse;
    type Error = ApiError;
    type Future = Pin<Box<dyn Future<Output=Result<Self::Response, Self::Error>> + Send>>;

    fn poll_ready(&mut self, cx: &mut std::task::Context<'_>) -> std::task::Poll<Result<(), Self::Error>> {
        std::task::Poll::Ready(Ok(()))
    }

    fn call(&mut self, r: ServiceRequest<C>) -> Self::Future {
        Box::pin(do_call(self.api_impl.clone(), r))
    }
}

async fn do_call<T, C>(api_impl: T, r: ServiceRequest<C>) -> Result<ServiceResponse, ApiError>
where
    T: Api<C> + Send + Sync + Clone + 'static,
    C: Has<XSpanId>  + Send + Sync + 'static
{
    let mut api_impl = api_impl;
    let mut context = r.context;
    let (parts, body) = r.inner.into_parts();
    let uri = parts.uri;
    let method = parts.method;
    let headers = parts.headers;
    let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

    // This match statement is duplicated below in `parse_operation_id()`.
    // Please update both places if changing how this code is autogenerated.
    match &method {
    
        // MultipartRequestPost - POST /multipart_request
        &hyper::Method::POST if path.matched(paths::ID_MULTIPART_REQUEST) => {
            let boundary = match multipart_boundary(&headers) {
                Some(boundary) => boundary.to_string(),
                None => return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from("Couldn't find valid multipart body")).unwrap()),
            };
            // Form Body parameters (note that non-required body parameters will ignore garbage
            // values, rather than causing a 400 response). Produce warning header and logs for
            // any unused fields.
            let body = hyper::body::aggregate(body).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
            let body = match body {
                Err(e) => {
                    return Ok(
                        Response::builder()
                            .status(StatusCode::BAD_REQUEST)
                            .body(hyper::Body::from(format!("Couldn't receive body parameter body: {}", e)))
                            .unwrap()
                    );
                }
                Ok(v) => v,
            };
            // Read Form Parameters from body
            let mut entries = match Multipart::with_body(body.reader(), boundary).save().temp() {
                SaveResult::Full(entries) => {
                    entries
                },
                _ => {
                    return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from(format!("Unable to process all message parts"))).unwrap())
                },
            };
                        
                            
            let file_string_field = entries.fields.remove("string_field");
            let param_string_field = match file_string_field {
                Some(file) => {
                    let mut reader = file[0].data.readable().unwrap();
                    let mut string_field_bytes = vec![];
                    reader.read_to_end(&mut string_field_bytes).unwrap();
                    let string_field_model: String = match serde_json::from_slice(&string_field_bytes.as_slice()) {
                        Ok(model) => model,
                        Err(e) => {
                            return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from(format!("string_field data does not match API definition: {}", e))).unwrap())
                        }
                    };
                    string_field_model
                }
                None => return Ok(Response::builder().status(StatusCode::BAD_REQUEST).body(hyper::Body::from(format!("Missing required form parameter string_field"))).unwrap()),
            };
                                                            

                            
            let file_optional_string_field = entries.fields.remove("optional_string_field");

            let param_optional_string_field = match file_optional_string_field {
                Some(file) => {
                    let mut reader = file[0].data.readable().unwrap();
                    let mut optional_string_field_bytes = vec![];
                    reader.read_to_end(&mut optional_string_field_bytes).unwrap();
                    let optional_string_field_model: String = serde_json::from_slice(&optional_string_field_bytes.as_slice()).expect("Impossible to fail to serialize");
                    Some(optional_string_field_model)
                }
                None => None,
            };
                            

                            
            let file_object_field = entries.fields.remove("object_field");

            let param_object_field = match file_object_field {
                Some(file) => {
                    let mut reader = file[0].data.readable().unwrap();
                    let mut object_field_bytes = vec![];
                    reader.read_to_end(&mut object_field_bytes).unwrap();
                    let object_field_model: crate::models::MultipartRequestObjectField = serde_json::from_slice(&object_field_bytes.as_slice()).expect("Impossible to fail to serialize");
                    Some(object_field_model)
                }
                None => None,
            };
                            

            let file_binary_field = entries.fields.remove("binary_field");
            let param_binary_field = match file_binary_field {
                Some(file) => {
                    let mut reader = file[0].data.readable().unwrap();
                    let mut binary_field_bytes = vec![];
                    reader.read_to_end(&mut binary_field_bytes).unwrap();
                    openapi_context::ByteArray(binary_field_bytes)
                }
                None => return Ok(Response::new().status(StatusCode::BAD_REQUEST).body(format!("Missing required form parameter binary_field")).unwrap()),
            };
                                                            
            let result = api_impl.multipart_request_post(param_string_field, param_binary_field, param_optional_string_field, param_object_field, &context).await;
            let mut response = Response::builder();
            response.headers_mut().unwrap().typed_insert(XSpanId( (&context as &dyn Has<XSpanId>).get().0.to_string() ));
            let result = match result {
                Err(e) => {
                    // Application code returned an error. This should not happen, as the implementation should
                    // return a valid response.
                    response = response.status(StatusCode::INTERNAL_SERVER_ERROR);
                    return Ok(response.body(hyper::Body::from("An internal error occurred")).unwrap());
                }
                Ok(r) => r,
            };
        
            match result {
                MultipartRequestPostResponse::OK
            
                => {
                    response = response.status(hyper::http::StatusCode::from_u16(201).unwrap());
            
                    Ok(response.body(Body::empty()).unwrap())
                },
            }
        },
    
        _ => Ok(Response::builder().status(StatusCode::NOT_FOUND).body(Body::empty()).unwrap()),
    }
}

impl<T, C> Clone for Service<T, C> where T: Clone
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}

/// Utility function to get the multipart boundary marker (if any) from the Headers.
fn multipart_boundary<'a>(headers: &'a HeaderMap) -> Option<String> {
    headers.typed_get::<ContentType>().and_then(|content_type| {
        let mime = Mime::from(content_type);
        if mime.type_() == mime::MULTIPART && mime.subtype() == mime::FORM_DATA {
            mime.get_param(mime::BOUNDARY).map(|x| x.as_str().to_owned())
        } else {
            None
        }
    })
}

/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser<Body> for ApiRequestParser {
    fn parse_operation_id(request: &Request<Body>) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // MultipartRequestPost - POST /multipart_request
            &hyper::Method::POST if path.matched(paths::ID_MULTIPART_REQUEST) => Ok("MultipartRequestPost"),
            _ => Err(()),
        }
    }
}
