/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIUserApiRequest.h"

namespace OpenAPI {

OAIUserApiRequest::OAIUserApiRequest(QHttpEngine::Socket *s, OAIUserApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAIUserApiRequest::~OAIUserApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIUserApiRequest::~OAIUserApiRequest()";
}

QMap<QString, QString> 
OAIUserApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIUserApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIUserApiRequest::getRawSocket(){
    return socket;
}


void OAIUserApiRequest::createUserRequest(){
    qDebug() << "/v2/user";
    connect(this, &OAIUserApiRequest::createUser, handler, &OAIUserApiHandler::createUser);
    
    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUser oai_user;
    ::OpenAPI::fromJsonValue(oai_user, obj);
    

    emit createUser( oai_user);
}


void OAIUserApiRequest::createUsersWithArrayInputRequest(){
    qDebug() << "/v2/user/createWithArray";
    connect(this, &OAIUserApiRequest::createUsersWithArrayInput, handler, &OAIUserApiHandler::createUsersWithArrayInput);
    
    
 
    QJsonDocument doc;
    QList<OAIUser> oai_user;     
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAIUser o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_user.append(o);
        }
    }
    

    emit createUsersWithArrayInput( oai_user);
}


void OAIUserApiRequest::createUsersWithListInputRequest(){
    qDebug() << "/v2/user/createWithList";
    connect(this, &OAIUserApiRequest::createUsersWithListInput, handler, &OAIUserApiHandler::createUsersWithListInput);
    
    
 
    QJsonDocument doc;
    QList<OAIUser> oai_user;     
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAIUser o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_user.append(o);
        }
    }
    

    emit createUsersWithListInput( oai_user);
}


void OAIUserApiRequest::deleteUserRequest(const QString& usernamestr){
    qDebug() << "/v2/user/{username}";
    connect(this, &OAIUserApiRequest::deleteUser, handler, &OAIUserApiHandler::deleteUser);
    
    
    QString username;
    fromStringValue(usernamestr, username);
    

    emit deleteUser( username);
}


void OAIUserApiRequest::getUserByNameRequest(const QString& usernamestr){
    qDebug() << "/v2/user/{username}";
    connect(this, &OAIUserApiRequest::getUserByName, handler, &OAIUserApiHandler::getUserByName);
    
    
    QString username;
    fromStringValue(usernamestr, username);
    

    emit getUserByName( username);
}


void OAIUserApiRequest::loginUserRequest(){
    qDebug() << "/v2/user/login";
    connect(this, &OAIUserApiRequest::loginUser, handler, &OAIUserApiHandler::loginUser);
    
    
    QString username;   
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    
    QString password;   
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    


    emit loginUser( username,  password);
}


void OAIUserApiRequest::logoutUserRequest(){
    qDebug() << "/v2/user/logout";
    connect(this, &OAIUserApiRequest::logoutUser, handler, &OAIUserApiHandler::logoutUser);
    
    


    emit logoutUser();
}


void OAIUserApiRequest::updateUserRequest(const QString& usernamestr){
    qDebug() << "/v2/user/{username}";
    connect(this, &OAIUserApiRequest::updateUser, handler, &OAIUserApiHandler::updateUser);
    
    
    QString username;
    fromStringValue(usernamestr, username);
     
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUser oai_user;
    ::OpenAPI::fromJsonValue(oai_user, obj);
    

    emit updateUser( username,  oai_user);
}

  

void OAIUserApiRequest::createUserResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::createUsersWithArrayInputResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::createUsersWithListInputResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::deleteUserResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::getUserByNameResponse(const OAIUser& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::loginUserResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::logoutUserResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::updateUserResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIUserApiRequest::createUserError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::createUsersWithArrayInputError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::createUsersWithListInputError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::deleteUserError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::getUserByNameError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::loginUserError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::logoutUserError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserApiRequest::updateUserError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIUserApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAIUserApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
