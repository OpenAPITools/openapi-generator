/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <QDebug>
#include <QFile>
#include <QJsonDocument>
#include <QJsonObject>
#include <exception>

#include "OAIHttpFileElement.h"

namespace OpenAPI {

void
OAIHttpFileElement::setMimeType(const QString &mime){
    mime_type = mime;
}

void
OAIHttpFileElement::setFileName(const QString &name){
    local_filename = name;
}

void
OAIHttpFileElement::setVariableName(const QString &name){
    variable_name = name;
}

void
OAIHttpFileElement::setRequestFileName(const QString &name){
    request_filename = name;
}

bool 
OAIHttpFileElement::isSet() const {
    return !local_filename.isEmpty() || !request_filename.isEmpty();
}

QString 
OAIHttpFileElement::asJson() const{
    QFile file(local_filename);
    QByteArray bArray;
    try {
        if(file.exists()){
            file.open(QIODevice::ReadOnly);
            bArray = file.readAll();
            file.close();
        }
    }
    catch(const std::exception &ex) {
        qDebug() << "Error opening file " << ex.what();
    }
    return QString(bArray);
}

QJsonValue 
OAIHttpFileElement::asJsonValue() const{
    QFile file(local_filename);
    QByteArray bArray;
    try {
        if(file.exists()){
            file.open(QIODevice::ReadOnly);
            bArray = file.readAll();
            file.close();
        }
    }
    catch(const std::exception &ex) {
        qDebug() << "Error opening file " << ex.what();
    }
    return QJsonDocument::fromBinaryData(bArray.data()).object();
}

bool 
OAIHttpFileElement::fromStringValue(const QString &instr){
    QFile file(local_filename);
    bool result = false;
    try {
        if(file.exists()){
            file.remove();
        }
        file.open(QIODevice::WriteOnly);
        file.write(instr.toUtf8());
        file.close();
        result = true;
    }
    catch(const std::exception &ex) {
        qDebug() << "Error creating file " << ex.what();
    }
    return result;
}

bool 
OAIHttpFileElement::fromJsonValue(const QJsonValue &jval) {
    QFile file(local_filename);
    bool result = false;
    try {
        if(file.exists()){
            file.remove();
        }
        file.open(QIODevice::WriteOnly);
        file.write(QJsonDocument(jval.toObject()).toBinaryData());
        file.close();
        result = true;
    }
    catch(const std::exception &ex) {
        qDebug() << "Error creating file " << ex.what();
    }
    return result;
}

QByteArray
OAIHttpFileElement::asByteArray() const {
    QFile file(local_filename);
    QByteArray bArray;
    try {
        if(file.exists()){
            file.open(QIODevice::ReadOnly);
            bArray = file.readAll();
            file.close();
        }
    }
    catch(const std::exception &ex) {
        qDebug() << "Error opening file " << ex.what();
    }
    return bArray;
}

bool
OAIHttpFileElement::fromByteArray(const QByteArray& bytes){
    QFile file(local_filename);
    bool result = false;
    try {
        if(file.exists()){
            file.remove();
        }
        file.open(QIODevice::WriteOnly);
        file.write(bytes);
        file.close();
        result = true;
    }
    catch(const std::exception &ex) {
        qDebug() << "Error creating file " << ex.what();
    }
    return result;
}

bool
OAIHttpFileElement::saveToFile(const QString &varName, const QString &localFName, const QString &reqFname, const QString &mime, const QByteArray& bytes){
    setMimeType(mime);
    setFileName(localFName);
    setVariableName(varName);
    setRequestFileName(reqFname);
    return fromByteArray(bytes);
}

QByteArray
OAIHttpFileElement::loadFromFile(const QString &varName, const QString &localFName, const QString &reqFname, const QString &mime){
    setMimeType(mime);
    setFileName(localFName);
    setVariableName(varName);
    setRequestFileName(reqFname);
    return asByteArray();
}

}
