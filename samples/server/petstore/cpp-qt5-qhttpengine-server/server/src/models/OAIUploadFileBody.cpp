/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadFileBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadFileBody::OAIUploadFileBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadFileBody::OAIUploadFileBody() {
    this->initializeModel();
}

OAIUploadFileBody::~OAIUploadFileBody() {}

void OAIUploadFileBody::initializeModel() {

    m_additional_metadata_isSet = false;
    m_additional_metadata_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;
}

void OAIUploadFileBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadFileBody::fromJsonObject(QJsonObject json) {

    m_additional_metadata_isValid = ::OpenAPI::fromJsonValue(additional_metadata, json[QString("additionalMetadata")]);
    m_additional_metadata_isSet = !json[QString("additionalMetadata")].isNull() && m_additional_metadata_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;
}

QString OAIUploadFileBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadFileBody::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_metadata_isSet) {
        obj.insert(QString("additionalMetadata"), ::OpenAPI::toJsonValue(additional_metadata));
    }
    if (file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(file));
    }
    return obj;
}

QString OAIUploadFileBody::getAdditionalMetadata() const {
    return additional_metadata;
}
void OAIUploadFileBody::setAdditionalMetadata(const QString &additional_metadata) {
    this->additional_metadata = additional_metadata;
    this->m_additional_metadata_isSet = true;
}

bool OAIUploadFileBody::is_additional_metadata_Set() const{
    return m_additional_metadata_isSet;
}

bool OAIUploadFileBody::is_additional_metadata_Valid() const{
    return m_additional_metadata_isValid;
}

OAIHttpFileElement OAIUploadFileBody::getFile() const {
    return file;
}
void OAIUploadFileBody::setFile(const OAIHttpFileElement &file) {
    this->file = file;
    this->m_file_isSet = true;
}

bool OAIUploadFileBody::is_file_Set() const{
    return m_file_isSet;
}

bool OAIUploadFileBody::is_file_Valid() const{
    return m_file_isValid;
}

bool OAIUploadFileBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (file.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadFileBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
