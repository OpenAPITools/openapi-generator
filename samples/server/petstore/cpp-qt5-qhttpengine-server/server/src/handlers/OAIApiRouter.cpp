/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QRegularExpression>

#include "OAIApiRouter.h"
#include "OAIPetApiRequest.h"
#include "OAIStoreApiRequest.h"
#include "OAIUserApiRequest.h"


namespace OpenAPI {

inline QHttpEngine::Socket::Method toQHttpEngineMethod(QString method){

    if( method == QString("OPTIONS"))
        return QHttpEngine::Socket::Method::OPTIONS;
    if( method == QString("GET"))
        return QHttpEngine::Socket::Method::GET;
    if( method == QString("HEAD"))
        return QHttpEngine::Socket::Method::HEAD;
    if( method == QString("POST"))
        return QHttpEngine::Socket::Method::POST;
    if( method == QString("PUT"))
        return QHttpEngine::Socket::Method::PUT;
    if( method == QString("DELETE"))
        return QHttpEngine::Socket::Method::DELETE;
    if( method == QString("TRACE"))
        return QHttpEngine::Socket::Method::TRACE;
    if( method == QString("CONNECT"))
        return QHttpEngine::Socket::Method::CONNECT;

     return static_cast<QHttpEngine::Socket::Method>(-1);
}

ApiRouter::ApiRouter() {    
    OAIPetApiApiHandler = new OAIPetApiHandler();
    OAIStoreApiApiHandler = new OAIStoreApiHandler();
    OAIUserApiApiHandler = new OAIUserApiHandler();
     
}

ApiRouter::~ApiRouter(){
    qDebug() << "~ApiRouter()";    
    delete OAIPetApiApiHandler;
    delete OAIStoreApiApiHandler;
    delete OAIUserApiApiHandler;
         
}

void ApiRouter::setUpRoutes() {
    
    Routes.insert("/v2/pet",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
            reqObj->addPetRequest();
        }
    });
    Routes.insert("/v2/pet/findByStatus",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
            reqObj->findPetsByStatusRequest();
        }
    });
    Routes.insert("/v2/pet/findByTags",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
            reqObj->findPetsByTagsRequest();
        }
    });
    Routes.insert("/v2/pet",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("PUT") == socket->method()){
            auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
            reqObj->updatePetRequest();
        }
    });
    Routes.insert("/v2/store/inventory",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIStoreApiRequest(socket, OAIStoreApiApiHandler);
            reqObj->getInventoryRequest();
        }
    });
    Routes.insert("/v2/store/order",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAIStoreApiRequest(socket, OAIStoreApiApiHandler);
            reqObj->placeOrderRequest();
        }
    });
    Routes.insert("/v2/user",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
            reqObj->createUserRequest();
        }
    });
    Routes.insert("/v2/user/createWithArray",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
            reqObj->createUsersWithArrayInputRequest();
        }
    });
    Routes.insert("/v2/user/createWithList",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
            reqObj->createUsersWithListInputRequest();
        }
    });
    Routes.insert("/v2/user/login",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
            reqObj->loginUserRequest();
        }
    });
    Routes.insert("/v2/user/logout",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
            reqObj->logoutUserRequest();
        }
    }); 
}

void ApiRouter::processRequest(QHttpEngine::Socket *socket){
    if (Routes.contains(socket->path())) {
        for(auto endpoints : Routes.values(socket->path())) {
            endpoints.operator()(socket);
        }
    } else
    {          
        { 
            QString completePath("/v2/pet/{petId}");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
                reqObj->deletePetRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/pet/{petId}");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
                reqObj->getPetByIdRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/pet/{petId}");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
                reqObj->updatePetWithFormRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/pet/{petId}/uploadImage");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIPetApiRequest(socket, OAIPetApiApiHandler);
                reqObj->uploadFileRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/store/order/{orderId}");
            QString order_idPathParam("{"); 
            order_idPathParam.append("orderId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(order_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIStoreApiRequest(socket, OAIStoreApiApiHandler);
                reqObj->deleteOrderRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/store/order/{orderId}");
            QString order_idPathParam("{"); 
            order_idPathParam.append("orderId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(order_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIStoreApiRequest(socket, OAIStoreApiApiHandler);
                reqObj->getOrderByIdRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/user/{username}");
            QString usernamePathParam("{"); 
            usernamePathParam.append("username").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(usernamePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
                reqObj->deleteUserRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/user/{username}");
            QString usernamePathParam("{"); 
            usernamePathParam.append("username").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(usernamePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
                reqObj->getUserByNameRequest(pathparam);;
                return; 
            }
        }        
        { 
            QString completePath("/v2/user/{username}");
            QString usernamePathParam("{"); 
            usernamePathParam.append("username").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(usernamePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("PUT") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIUserApiRequest(socket, OAIUserApiApiHandler);
                reqObj->updateUserRequest(pathparam);;
                return; 
            }
        }
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
    return;
}
}
