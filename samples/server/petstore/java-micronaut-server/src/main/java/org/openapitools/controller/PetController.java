/*
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import io.micronaut.http.multipart.CompletedFileUpload;
import org.openapitools.model.ModelApiResponse;
import org.openapitools.model.Pet;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.annotations.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen")
@Controller("${context-path}")
public class PetController {
    /**
     * Add a new pet to the store
     * 
     *
     * @param pet Pet object that needs to be added to the store (required)
     * @return Pet
     */
    @ApiOperation(
        value = "Add a new pet to the store",
        nickname = "addPet",
        notes = "",
        response = Pet.class,
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Pet.class),
        @ApiResponse(code = 405, message = "Invalid input")})
    @Post(uri="/pet")
    @Produces(value = {"application/xml", "application/json"})
    @Consumes(value = {"application/json", "application/xml"})
    public Mono<Pet> addPet(
        @Body @NotNull @Valid Pet pet
    ) {
        // TODO implement addPet() body;
        Mono<Pet> result = Mono.empty();
        return result;
    }

    /**
     * Deletes a pet
     * 
     *
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     */
    @ApiOperation(
        value = "Deletes a pet",
        nickname = "deletePet",
        notes = "",
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid pet value")})
    @Delete(uri="/pet/{petId}")
    @Produces(value = {})
    public Mono<Object> deletePet(
        @PathVariable(value="petId") @NotNull Long petId, 
        @Header(value="api_key") @Nullable String apiKey
    ) {
        // TODO implement deletePet() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (required)
     * @return List&lt;Pet&gt;
     */
    @ApiOperation(
        value = "Finds Pets by status",
        nickname = "findPetsByStatus",
        notes = "Multiple status values can be provided with comma separated strings",
        response = Pet.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Invalid status value")})
    @Get(uri="/pet/findByStatus")
    @Produces(value = {"application/xml", "application/json"})
    public Mono<List<Pet>> findPetsByStatus(
        @QueryValue(value="status") @NotNull List<String> status
    ) {
        // TODO implement findPetsByStatus() body;
        Mono<List<Pet>> result = Mono.empty();
        return result;
    }

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param tags Tags to filter by (required)
     * @return List&lt;Pet&gt;
     */
    @ApiOperation(
        value = "Finds Pets by tags",
        nickname = "findPetsByTags",
        notes = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        response = Pet.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Invalid tag value")})
    @Get(uri="/pet/findByTags")
    @Produces(value = {"application/xml", "application/json"})
    public Mono<List<Pet>> findPetsByTags(
        @QueryValue(value="tags") @NotNull List<String> tags
    ) {
        // TODO implement findPetsByTags() body;
        Mono<List<Pet>> result = Mono.empty();
        return result;
    }

    /**
     * Find pet by ID
     * Returns a single pet
     *
     * @param petId ID of pet to return (required)
     * @return Pet
     */
    @ApiOperation(
        value = "Find pet by ID",
        nickname = "getPetById",
        notes = "Returns a single pet",
        response = Pet.class,
        authorizations = {
            @Authorization(value = "api_key")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Pet.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Pet not found")})
    @Get(uri="/pet/{petId}")
    @Produces(value = {"application/xml", "application/json"})
    public Mono<Pet> getPetById(
        @PathVariable(value="petId") @NotNull Long petId
    ) {
        // TODO implement getPetById() body;
        Mono<Pet> result = Mono.empty();
        return result;
    }

    /**
     * Update an existing pet
     * 
     *
     * @param pet Pet object that needs to be added to the store (required)
     * @return Pet
     */
    @ApiOperation(
        value = "Update an existing pet",
        nickname = "updatePet",
        notes = "",
        response = Pet.class,
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Pet.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Pet not found"),
        @ApiResponse(code = 405, message = "Validation exception")})
    @Put(uri="/pet")
    @Produces(value = {"application/xml", "application/json"})
    @Consumes(value = {"application/json", "application/xml"})
    public Mono<Pet> updatePet(
        @Body @NotNull @Valid Pet pet
    ) {
        // TODO implement updatePet() body;
        Mono<Pet> result = Mono.empty();
        return result;
    }

    /**
     * Updates a pet in the store with form data
     * 
     *
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     */
    @ApiOperation(
        value = "Updates a pet in the store with form data",
        nickname = "updatePetWithForm",
        notes = "",
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 405, message = "Invalid input")})
    @Post(uri="/pet/{petId}")
    @Produces(value = {})
    @Consumes(value = {"application/x-www-form-urlencoded"})
    public Mono<Object> updatePetWithForm(
        @PathVariable(value="petId") @NotNull Long petId, 
        @Nullable String name, 
        @Nullable String status
    ) {
        // TODO implement updatePetWithForm() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * uploads an image
     * 
     *
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param _file file to upload (optional)
     * @return ModelApiResponse
     */
    @ApiOperation(
        value = "uploads an image",
        nickname = "uploadFile",
        notes = "",
        response = ModelApiResponse.class,
        authorizations = {
            @Authorization(value = "petstore_auth", scopes = {
                @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
                @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class)})
    @Post(uri="/pet/{petId}/uploadImage")
    @Produces(value = {"application/json"})
    @Consumes(value = {"multipart/form-data"})
    public Mono<ModelApiResponse> uploadFile(
        @PathVariable(value="petId") @NotNull Long petId, 
        @Nullable String additionalMetadata, 
        @Nullable CompletedFileUpload _file
    ) {
        // TODO implement uploadFile() body;
        Mono<ModelApiResponse> result = Mono.empty();
        return result;
    }
}
