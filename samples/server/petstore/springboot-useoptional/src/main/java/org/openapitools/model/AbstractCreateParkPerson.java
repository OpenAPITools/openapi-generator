package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;


import java.util.*;
import javax.annotation.Generated;

/**
 * AbstractCreateParkPerson
 */

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CreateParkAnimalCarerPerson.class, name = "ANIMAL_CARER"),
  @JsonSubTypes.Type(value = CreateParkVisitorPerson.class, name = "VISITOR")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0-SNAPSHOT")
public class AbstractCreateParkPerson {

  private String type;

  public AbstractCreateParkPerson() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public AbstractCreateParkPerson(String type) {
    this.type = type;
  }

  public AbstractCreateParkPerson type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @NotNull 
  @ApiModelProperty(required = true, value = "")
  @JsonProperty("type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractCreateParkPerson abstractCreateParkPerson = (AbstractCreateParkPerson) o;
    return Objects.equals(this.type, abstractCreateParkPerson.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractCreateParkPerson {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public static class Builder {

    private AbstractCreateParkPerson instance;

    public Builder() {
      this(new AbstractCreateParkPerson());
    }

    protected Builder(AbstractCreateParkPerson instance) {
      this.instance = instance;
    }

    protected Builder copyOf(AbstractCreateParkPerson value) { 
      this.instance.setType(value.type);
      return this;
    }

    public AbstractCreateParkPerson.Builder type(String type) {
      this.instance.type(type);
      return this;
    }
    
    /**
    * returns a built AbstractCreateParkPerson instance.
    *
    * The builder is not reusable (NullPointerException)
    */
    public AbstractCreateParkPerson build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field (except for the default values).
  */
  public static AbstractCreateParkPerson.Builder builder() {
    return new AbstractCreateParkPerson.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public AbstractCreateParkPerson.Builder toBuilder() {
    AbstractCreateParkPerson.Builder builder = new AbstractCreateParkPerson.Builder();
    return builder.copyOf(this);
  }

}

