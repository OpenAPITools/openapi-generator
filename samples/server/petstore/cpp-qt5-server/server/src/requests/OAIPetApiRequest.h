/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIPetApiRequest_H_
#define _OAI_OAIPetApiRequest_H_

#include <QObject>
#include <QStringList>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiResponse.h"
#include "OAIPet.h"
#include <QIODevice>
#include <QString>
#include "OAIPetApiHandler.h"

namespace OpenAPI {

class OAIPetApiRequest : public QObject
{
    Q_OBJECT
    
public:
    OAIPetApiRequest(QHttpEngine::Socket *s, OAIPetApiHandler* handler);
    virtual ~OAIPetApiRequest();

    void addPetRequest();
    void deletePetRequest(QString pet_id);
    void findPetsByStatusRequest();
    void findPetsByTagsRequest();
    void getPetByIdRequest(QString pet_id);
    void updatePetRequest();
    void updatePetWithFormRequest(QString pet_id);
    void uploadFileRequest(QString pet_id);
    

    void addPetResponse();
    void deletePetResponse();
    void findPetsByStatusResponse(QList<OAIPet> res);
    void findPetsByTagsResponse(QList<OAIPet> res);
    void getPetByIdResponse(OAIPet res);
    void updatePetResponse();
    void updatePetWithFormResponse();
    void uploadFileResponse(OAIApiResponse res);
    

    void addPetError(QNetworkReply::NetworkError error_type, QString& error_str);
    void deletePetError(QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByStatusError(QList<OAIPet> res, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByTagsError(QList<OAIPet> res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPetByIdError(OAIPet res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetError(QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetWithFormError(QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileError(OAIApiResponse res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    QMap<QString, QString> getDefaultHeaders();
    QHttpEngine::Socket* getRawSocket();

signals:
    void addPet(OAIPet oai_pet);
    void deletePet(qint64 pet_id, QString api_key);
    void findPetsByStatus(QList<QString> status);
    void findPetsByTags(QList<QString> tags);
    void getPetById(qint64 pet_id);
    void updatePet(OAIPet oai_pet);
    void updatePetWithForm(qint64 pet_id, QString name, QString status);
    void uploadFile(qint64 pet_id, QString additional_metadata, QIODevice* file);
    

private:
    QMap<QString, QString> defaultHeaders;
    QHttpEngine::Socket  *socket;
    OAIPetApiHandler *handler;
};

}

#endif // _OAI_OAIPetApiRequest_H_
