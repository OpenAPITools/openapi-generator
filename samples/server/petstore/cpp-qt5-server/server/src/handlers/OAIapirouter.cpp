/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QRegularExpression>

#include "OAIapirouter.h"
#include "OAIPetApiHandler.h"
#include "OAIStoreApiHandler.h"
#include "OAIUserApiHandler.h"


namespace OpenAPI {

inline QHttpEngine::Socket::Method toQHttpEngineMethod(QString method){

    if( method == QString("OPTIONS"))
        return QHttpEngine::Socket::Method::OPTIONS;
    if( method == QString("GET"))
        return QHttpEngine::Socket::Method::GET;
    if( method == QString("HEAD"))
        return QHttpEngine::Socket::Method::HEAD;
    if( method == QString("POST"))
        return QHttpEngine::Socket::Method::POST;
    if( method == QString("PUT"))
        return QHttpEngine::Socket::Method::PUT;
    if( method == QString("DELETE"))
        return QHttpEngine::Socket::Method::DELETE;
    if( method == QString("TRACE"))
        return QHttpEngine::Socket::Method::TRACE;
    if( method == QString("CONNECT"))
        return QHttpEngine::Socket::Method::CONNECT;

     return static_cast<QHttpEngine::Socket::Method>(-1);
}

ApiRouter::ApiRouter(QObject *parent) : QObject(parent){

}
ApiRouter::~ApiRouter(){
    qDebug() << "~ApiRouter()";
}

void ApiRouter::onNewRequest(QHttpEngine::Socket *socket){
    auto queries = socket->queryString();
    auto rqpath  = socket->path();
    auto method =  socket->method();
    auto headers = socket->headers();
    auto peer = socket->peerAddress();
    qDebug() << rqpath;
    socket->setStatusCode(QHttpEngine::Socket::OK);
    do{ 
        {            
            if((toQHttpEngineMethod("POST") == method) && (QString::compare("/v2/pet", rqpath, Qt::CaseInsensitive) == 0)){
                OAIPetApiHandler OAIPetApiHandlerObj;
                QString pathparam = QString("");
                OAIPetApiHandlerObj.addPet(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            QString completePath("/v2/pet/{petId}");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("DELETE") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIPetApiHandler OAIPetApiHandlerObj;
                OAIPetApiHandlerObj.deletePet(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            if((toQHttpEngineMethod("GET") == method) && (QString::compare("/v2/pet/findByStatus", rqpath, Qt::CaseInsensitive) == 0)){
                OAIPetApiHandler OAIPetApiHandlerObj;
                QString pathparam = QString("");
                OAIPetApiHandlerObj.findPetsByStatus(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            if((toQHttpEngineMethod("GET") == method) && (QString::compare("/v2/pet/findByTags", rqpath, Qt::CaseInsensitive) == 0)){
                OAIPetApiHandler OAIPetApiHandlerObj;
                QString pathparam = QString("");
                OAIPetApiHandlerObj.findPetsByTags(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            QString completePath("/v2/pet/{petId}");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("GET") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIPetApiHandler OAIPetApiHandlerObj;
                OAIPetApiHandlerObj.getPetById(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            if((toQHttpEngineMethod("PUT") == method) && (QString::compare("/v2/pet", rqpath, Qt::CaseInsensitive) == 0)){
                OAIPetApiHandler OAIPetApiHandlerObj;
                QString pathparam = QString("");
                OAIPetApiHandlerObj.updatePet(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            QString completePath("/v2/pet/{petId}");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("POST") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIPetApiHandler OAIPetApiHandlerObj;
                OAIPetApiHandlerObj.updatePetWithForm(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            QString completePath("/v2/pet/{petId}/uploadImage");
            QString pet_idPathParam("{"); 
            pet_idPathParam.append("petId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pet_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("POST") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIPetApiHandler OAIPetApiHandlerObj;
                OAIPetApiHandlerObj.uploadFile(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            QString completePath("/v2/store/order/{orderId}");
            QString order_idPathParam("{"); 
            order_idPathParam.append("orderId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(order_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("DELETE") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIStoreApiHandler OAIStoreApiHandlerObj;
                OAIStoreApiHandlerObj.deleteOrder(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            if((toQHttpEngineMethod("GET") == method) && (QString::compare("/v2/store/inventory", rqpath, Qt::CaseInsensitive) == 0)){
                OAIStoreApiHandler OAIStoreApiHandlerObj;
                QString pathparam = QString("");
                OAIStoreApiHandlerObj.getInventory(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            QString completePath("/v2/store/order/{orderId}");
            QString order_idPathParam("{"); 
            order_idPathParam.append("orderId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(order_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("GET") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIStoreApiHandler OAIStoreApiHandlerObj;
                OAIStoreApiHandlerObj.getOrderById(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            if((toQHttpEngineMethod("POST") == method) && (QString::compare("/v2/store/order", rqpath, Qt::CaseInsensitive) == 0)){
                OAIStoreApiHandler OAIStoreApiHandlerObj;
                QString pathparam = QString("");
                OAIStoreApiHandlerObj.placeOrder(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            if((toQHttpEngineMethod("POST") == method) && (QString::compare("/v2/user", rqpath, Qt::CaseInsensitive) == 0)){
                OAIUserApiHandler OAIUserApiHandlerObj;
                QString pathparam = QString("");
                OAIUserApiHandlerObj.createUser(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            if((toQHttpEngineMethod("POST") == method) && (QString::compare("/v2/user/createWithArray", rqpath, Qt::CaseInsensitive) == 0)){
                OAIUserApiHandler OAIUserApiHandlerObj;
                QString pathparam = QString("");
                OAIUserApiHandlerObj.createUsersWithArrayInput(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            if((toQHttpEngineMethod("POST") == method) && (QString::compare("/v2/user/createWithList", rqpath, Qt::CaseInsensitive) == 0)){
                OAIUserApiHandler OAIUserApiHandlerObj;
                QString pathparam = QString("");
                OAIUserApiHandlerObj.createUsersWithListInput(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            QString completePath("/v2/user/{username}");
            QString usernamePathParam("{"); 
            usernamePathParam.append("username").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(usernamePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("DELETE") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIUserApiHandler OAIUserApiHandlerObj;
                OAIUserApiHandlerObj.deleteUser(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            QString completePath("/v2/user/{username}");
            QString usernamePathParam("{"); 
            usernamePathParam.append("username").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(usernamePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("GET") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIUserApiHandler OAIUserApiHandlerObj;
                OAIUserApiHandlerObj.getUserByName(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        {            
            if((toQHttpEngineMethod("GET") == method) && (QString::compare("/v2/user/login", rqpath, Qt::CaseInsensitive) == 0)){
                OAIUserApiHandler OAIUserApiHandlerObj;
                QString pathparam = QString("");
                OAIUserApiHandlerObj.loginUser(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            if((toQHttpEngineMethod("GET") == method) && (QString::compare("/v2/user/logout", rqpath, Qt::CaseInsensitive) == 0)){
                OAIUserApiHandler OAIUserApiHandlerObj;
                QString pathparam = QString("");
                OAIUserApiHandlerObj.logoutUser(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } 
        }
        {            
            QString completePath("/v2/user/{username}");
            QString usernamePathParam("{"); 
            usernamePathParam.append("username").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(usernamePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("PUT") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                OAIUserApiHandler OAIUserApiHandlerObj;
                OAIUserApiHandlerObj.updateUser(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }
        }
        socket->setStatusCode(QHttpEngine::Socket::NotFound);
        if(socket->isOpen()){
            socket->writeHeaders();
            socket->close();
        }
        return;   
    } while(false);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
    return;
}
}
