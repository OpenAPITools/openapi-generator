/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIModelFactory.h"

#include "OAIStoreApiHandler.h"
namespace OpenAPI {

OAIStoreApiHandler::OAIStoreApiHandler(QObject *parent): QObject(parent){

}
OAIStoreApiHandler::~OAIStoreApiHandler(){

}

void OAIStoreApiHandler::deleteOrder(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/order/{orderId}";

#if 0
    // Request
    QString* order_id

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIStoreApiHandler::getInventory(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/inventory";

#if 0
    // Request
    

#endif
    // Do something

#if 0
    // TODO Create Response
    QMap<QString, qint32>* output = new QMap<QString, qint32>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject obj = doc.object();

    foreach(QString key, obj.keys()) {
        qint32 val;
        setValue(&val, obj[key], "qint32", QString());
        output->insert(key, val);
    }
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIStoreApiHandler::getOrderById(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/order/{orderId}";

#if 0
    // Request
    qint64 order_id

#endif
    // Do something

#if 0
    // TODO Create Response
    QString json(worker->response);
    OAIOrder* output = static_cast<OAIOrder*>(create(json, QString("OAIOrder")));
    auto wrapper = new OAIQObjectWrapper<OAIOrder*> (output);
    wrapper->deleteLater();
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIStoreApiHandler::placeOrder(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/order";

#if 0
    // Request
    OAIOrder& oai_order

#endif
    // Do something

#if 0
    // TODO Create Response
    QString json(worker->response);
    OAIOrder* output = static_cast<OAIOrder*>(create(json, QString("OAIOrder")));
    auto wrapper = new OAIQObjectWrapper<OAIOrder*> (output);
    wrapper->deleteLater();
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
  

}
