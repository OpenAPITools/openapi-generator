/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include "OAIStoreApiHandler.h"

namespace OpenAPI {

OAIStoreApiHandler::OAIStoreApiHandler(QObject *parent): QObject(parent){

}
OAIStoreApiHandler::~OAIStoreApiHandler(){

}


void OAIStoreApiHandler::deleteOrder(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/order/{orderId}";
    
    
    
    QString order_id;   
    toValue(pathparam, &order_id);
    

    /******************************************
     * Do something
     ******************************************/




    // Creating Response
    


    // Serialize Data

    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}

void OAIStoreApiHandler::getInventory(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/inventory";
    
    
    

    /******************************************
     * Do something
     ******************************************/




    // Creating Response
    QMap<QString, qint32>* response = new QMap<QString, qint32>();
    auto reswrapper = new OAIQObjectWrapper<QMap<QString, qint32>*> (response);
    reswrapper->deleteLater();
    { 
        qint32 val;
        setValue(&val, QJsonObject(), "qint32", QString());
        response->insert("key", val);
    }    
    


    // Serialize Data
    // TODO

    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}

void OAIStoreApiHandler::getOrderById(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/order/{orderId}";
    
    
    qint64 order_id;   
    toValue(pathparam, &order_id);
    

    /******************************************
     * Do something
     ******************************************/




    // Creating Response
    OAIOrder* response = static_cast<OAIOrder*>(create(QString(""), QString("OAIOrder")));
    auto reswrapper = new OAIQObjectWrapper<OAIOrder*> (response);
    reswrapper->deleteLater();
    


    // Serialize Data
    
    socket->writeJson(QJsonDocument(response->asJsonObject()));
    

    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}

void OAIStoreApiHandler::placeOrder(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/store/order";
    
    
     
    QJsonDocument doc;
    socket->readJson(doc);
    OAIOrder *request = static_cast<OAIOrder*>(create(QString(doc.toJson(QJsonDocument::Compact)), QString("OAIOrder")));
    auto wrapper = new OAIQObjectWrapper<OAIOrder*> (request);
    wrapper->deleteLater();
    

    /******************************************
     * Do something
     ******************************************/




    // Creating Response
    OAIOrder* response = static_cast<OAIOrder*>(create(QString(""), QString("OAIOrder")));
    auto reswrapper = new OAIQObjectWrapper<OAIOrder*> (response);
    reswrapper->deleteLater();
    


    // Serialize Data
    
    socket->writeJson(QJsonDocument(response->asJsonObject()));
    

    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
  

}
