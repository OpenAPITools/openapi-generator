/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIModelFactory.h"

#include "OAIUserApiHandler.h"
namespace OpenAPI {

OAIUserApiHandler::OAIUserApiHandler(QObject *parent): QObject(parent){

}
OAIUserApiHandler::~OAIUserApiHandler(){

}

void OAIUserApiHandler::createUser(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user";

#if 0
    // Request
    OAIUser& oai_user

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::createUsersWithArrayInput(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/createWithArray";

#if 0
    // Request
    QList<OAIUser*>*& oai_user

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::createUsersWithListInput(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/createWithList";

#if 0
    // Request
    QList<OAIUser*>*& oai_user

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::deleteUser(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/{username}";

#if 0
    // Request
    QString* username

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::getUserByName(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/{username}";

#if 0
    // Request
    QString* username

#endif
    // Do something

#if 0
    // TODO Create Response
    QString json(worker->response);
    OAIUser* output = static_cast<OAIUser*>(create(json, QString("OAIUser")));
    auto wrapper = new OAIQObjectWrapper<OAIUser*> (output);
    wrapper->deleteLater();
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::loginUser(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/login";

#if 0
    // Request
    QString* username, QString* password

#endif
    // Do something

#if 0
    // TODO Create Response
    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::logoutUser(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/logout";

#if 0
    // Request
    

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
void OAIUserApiHandler::updateUser(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "/v2/user/{username}";

#if 0
    // Request
    QString* username, OAIUser& oai_user

#endif
    // Do something

#if 0
    // TODO Create Response
#endif
    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
  

}
