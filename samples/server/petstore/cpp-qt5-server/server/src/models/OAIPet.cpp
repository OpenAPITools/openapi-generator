/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPet.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPet::OAIPet(QString json) {
    init();
    this->fromJson(json);
}

OAIPet::OAIPet() {
    init();
}

OAIPet::~OAIPet() {
    this->cleanup();
}

void
OAIPet::init() {
    id = 0L;
    m_id_isSet = false;
    category = new OAICategory();
    m_category_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    photo_urls = new QList<QString*>();
    m_photo_urls_isSet = false;
    tags = new QList<OAITag*>();
    m_tags_isSet = false;
    status = new QString("");
    m_status_isSet = false;
}

void
OAIPet::cleanup() {

    if(category != nullptr) { 
        delete category;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(photo_urls != nullptr) { 
        auto arr = photo_urls;
        for(auto o: *arr) { 
            delete o;
        }
        delete photo_urls;
    }
    if(tags != nullptr) { 
        auto arr = tags;
        for(auto o: *arr) { 
            delete o;
        }
        delete tags;
    }
    if(status != nullptr) { 
        delete status;
    }
}

OAIPet*
OAIPet::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIPet::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "qint64", "");
    
    ::OpenAPI::setValue(&category, pJson["category"], "OAICategory", "OAICategory");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&photo_urls, pJson["photoUrls"], "QList", "QString");
    
    ::OpenAPI::setValue(&tags, pJson["tags"], "QList", "OAITag");
    ::OpenAPI::setValue(&status, pJson["status"], "QString", "QString");
    
}

QString
OAIPet::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPet::asJsonObject() {
    QJsonObject obj;
    if(m_id_isSet){
        obj.insert("id", QJsonValue(id));
    }
    if((category != nullptr) && (category->isSet())){
        toJsonValue(QString("category"), category, obj, QString("OAICategory"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(photo_urls->size() > 0){
        toJsonArray((QList<void*>*)photo_urls, obj, "photoUrls", "QString");
    }
    if(tags->size() > 0){
        toJsonArray((QList<void*>*)tags, obj, "tags", "OAITag");
    }
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }

    return obj;
}

qint64
OAIPet::getId() {
    return id;
}
void
OAIPet::setId(qint64 id) {
    this->id = id;
    this->m_id_isSet = true;
}

OAICategory*
OAIPet::getCategory() {
    return category;
}
void
OAIPet::setCategory(OAICategory* category) {
    this->category = category;
    this->m_category_isSet = true;
}

QString*
OAIPet::getName() {
    return name;
}
void
OAIPet::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QList<QString*>*
OAIPet::getPhotoUrls() {
    return photo_urls;
}
void
OAIPet::setPhotoUrls(QList<QString*>* photo_urls) {
    this->photo_urls = photo_urls;
    this->m_photo_urls_isSet = true;
}

QList<OAITag*>*
OAIPet::getTags() {
    return tags;
}
void
OAIPet::setTags(QList<OAITag*>* tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}

QString*
OAIPet::getStatus() {
    return status;
}
void
OAIPet::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}


bool
OAIPet::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_id_isSet){ isObjectUpdated = true; break;}
        if(category != nullptr && category->isSet()){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(photo_urls->size() > 0){ isObjectUpdated = true; break;}
        if(tags->size() > 0){ isObjectUpdated = true; break;}
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

