/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.Client;
import org.openapitools.model.FileSchemaTestClass;
import java.time.LocalDate;
import java.util.Map;
import org.openapitools.model.ModelApiResponse;
import java.time.OffsetDateTime;
import org.openapitools.model.OuterComposite;
import org.openapitools.model.User;
import org.openapitools.model.XmlItem;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface FakeApi {

    /**
     * POST /fake/create_xml_item : creates an XmlItem
     * this route creates an XmlItem
     *
     * @param xmlItem XmlItem Body (required)
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/create_xml_item",
        consumes = { "application/xml", "application/xml; charset=utf-8", "application/xml; charset=utf-16", "text/xml", "text/xml; charset=utf-8", "text/xml; charset=utf-16" }
    )
    ResponseEntity<Void> createXmlItem(
         @Valid @RequestBody XmlItem xmlItem
    ) throws Exception;


    /**
     * POST /fake/outer/boolean
     * Test serialization of outer boolean types
     *
     * @param body Input boolean as post body (optional)
     * @return Output boolean (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/outer/boolean",
        produces = { "*/*" }
    )
    ResponseEntity<Boolean> fakeOuterBooleanSerialize(
         @Valid @RequestBody(required = false) Boolean body
    ) throws Exception;


    /**
     * POST /fake/outer/composite
     * Test serialization of object with outer number type
     *
     * @param body Input composite as post body (optional)
     * @return Output composite (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/outer/composite",
        produces = { "*/*" }
    )
    ResponseEntity<OuterComposite> fakeOuterCompositeSerialize(
         @Valid @RequestBody(required = false) OuterComposite body
    ) throws Exception;


    /**
     * POST /fake/outer/number
     * Test serialization of outer number types
     *
     * @param body Input number as post body (optional)
     * @return Output number (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/outer/number",
        produces = { "*/*" }
    )
    ResponseEntity<BigDecimal> fakeOuterNumberSerialize(
         @Valid @RequestBody(required = false) BigDecimal body
    ) throws Exception;


    /**
     * POST /fake/outer/string
     * Test serialization of outer string types
     *
     * @param body Input string as post body (optional)
     * @return Output string (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/outer/string",
        produces = { "*/*" }
    )
    ResponseEntity<String> fakeOuterStringSerialize(
         @Valid @RequestBody(required = false) String body
    ) throws Exception;


    /**
     * PUT /fake/body-with-file-schema
     * For this test, the body for this request much reference a schema named &#x60;File&#x60;.
     *
     * @param body  (required)
     * @return Success (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fake/body-with-file-schema",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> testBodyWithFileSchema(
         @Valid @RequestBody FileSchemaTestClass body
    ) throws Exception;


    /**
     * PUT /fake/body-with-query-params
     *
     * @param query  (required)
     * @param body  (required)
     * @return Success (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fake/body-with-query-params",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> testBodyWithQueryParams(
        @NotNull  @Valid @RequestParam(value = "query", required = true) String query,
         @Valid @RequestBody User body
    ) throws Exception;


    /**
     * PATCH /fake : To test \&quot;client\&quot; model
     * To test \&quot;client\&quot; model
     *
     * @param body client model (required)
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/fake",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Client> testClientModel(
         @Valid @RequestBody Client body
    ) throws Exception;


    /**
     * POST /fake : Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
     * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
     *
     * @param number None (required)
     * @param _double None (required)
     * @param patternWithoutDelimiter None (required)
     * @param _byte None (required)
     * @param integer None (optional)
     * @param int32 None (optional)
     * @param int64 None (optional)
     * @param _float None (optional)
     * @param string None (optional)
     * @param binary None (optional)
     * @param date None (optional)
     * @param dateTime None (optional)
     * @param password None (optional)
     * @param paramCallback None (optional)
     * @return Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake",
        consumes = { "application/x-www-form-urlencoded" }
    )
    ResponseEntity<Void> testEndpointParameters(
         @Valid @RequestPart(value = "number", required = true) BigDecimal number,
         @Valid @RequestPart(value = "double", required = true) Double _double,
         @Valid @RequestPart(value = "pattern_without_delimiter", required = true) String patternWithoutDelimiter,
         @Valid @RequestPart(value = "byte", required = true) byte[] _byte,
         @Valid @RequestPart(value = "integer", required = false) Integer integer,
         @Valid @RequestPart(value = "int32", required = false) Integer int32,
         @Valid @RequestPart(value = "int64", required = false) Long int64,
         @Valid @RequestPart(value = "float", required = false) Float _float,
         @Valid @RequestPart(value = "string", required = false) String string,
         @RequestPart(value = "binary", required = false) MultipartFile binary,
         @Valid @RequestPart(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
         @Valid @RequestPart(value = "dateTime", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateTime,
         @Valid @RequestPart(value = "password", required = false) String password,
         @Valid @RequestPart(value = "callback", required = false) String paramCallback
    ) throws Exception;


    /**
     * GET /fake : To test enum parameters
     * To test enum parameters
     *
     * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
     * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
     * @param enumQueryStringArray Query parameter enum test (string array) (optional)
     * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
     * @param enumQueryInteger Query parameter enum test (double) (optional)
     * @param enumQueryDouble Query parameter enum test (double) (optional)
     * @param enumFormStringArray Form parameter enum test (string array) (optional, default to $)
     * @param enumFormString Form parameter enum test (string) (optional, default to -efg)
     * @return Invalid request (status code 400)
     *         or Not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fake",
        consumes = { "application/x-www-form-urlencoded" }
    )
    ResponseEntity<Void> testEnumParameters(
         @RequestHeader(value = "enum_header_string_array", required = false) List<String> enumHeaderStringArray,
         @RequestHeader(value = "enum_header_string", required = false, defaultValue = "-efg") String enumHeaderString,
         @Valid @RequestParam(value = "enum_query_string_array", required = false) List<String> enumQueryStringArray,
         @Valid @RequestParam(value = "enum_query_string", required = false, defaultValue = "-efg") String enumQueryString,
         @Valid @RequestParam(value = "enum_query_integer", required = false) Integer enumQueryInteger,
         @Valid @RequestParam(value = "enum_query_double", required = false) Double enumQueryDouble,
         @Valid @RequestPart(value = "enum_form_string_array", required = false) List<String> enumFormStringArray,
         @Valid @RequestPart(value = "enum_form_string", required = false) String enumFormString
    ) throws Exception;


    /**
     * DELETE /fake : Fake endpoint to test group parameters (optional)
     * Fake endpoint to test group parameters (optional)
     *
     * @param requiredStringGroup Required String in group parameters (required)
     * @param requiredBooleanGroup Required Boolean in group parameters (required)
     * @param requiredInt64Group Required Integer in group parameters (required)
     * @param stringGroup String in group parameters (optional)
     * @param booleanGroup Boolean in group parameters (optional)
     * @param int64Group Integer in group parameters (optional)
     * @return Someting wrong (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/fake"
    )
    ResponseEntity<Void> testGroupParameters(
        @NotNull  @Valid @RequestParam(value = "required_string_group", required = true) Integer requiredStringGroup,
         @RequestHeader(value = "required_boolean_group", required = true) Boolean requiredBooleanGroup,
        @NotNull  @Valid @RequestParam(value = "required_int64_group", required = true) Long requiredInt64Group,
         @Valid @RequestParam(value = "string_group", required = false) Integer stringGroup,
         @RequestHeader(value = "boolean_group", required = false) Boolean booleanGroup,
         @Valid @RequestParam(value = "int64_group", required = false) Long int64Group
    ) throws Exception;


    /**
     * POST /fake/inline-additionalProperties : test inline additionalProperties
     *
     * @param param request body (required)
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/inline-additionalProperties",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> testInlineAdditionalProperties(
         @Valid @RequestBody Map<String, String> param
    ) throws Exception;


    /**
     * GET /fake/jsonFormData : test json serialization of form data
     *
     * @param param field1 (required)
     * @param param2 field2 (required)
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fake/jsonFormData",
        consumes = { "application/x-www-form-urlencoded" }
    )
    ResponseEntity<Void> testJsonFormData(
         @Valid @RequestPart(value = "param", required = true) String param,
         @Valid @RequestPart(value = "param2", required = true) String param2
    ) throws Exception;


    /**
     * PUT /fake/test-query-parameters
     * To test the collection format in query parameters
     *
     * @param pipe  (required)
     * @param ioutil  (required)
     * @param http  (required)
     * @param url  (required)
     * @param context  (required)
     * @return Success (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fake/test-query-parameters"
    )
    ResponseEntity<Void> testQueryParameterCollectionFormat(
        @NotNull  @Valid @RequestParam(value = "pipe", required = true) List<String> pipe,
        @NotNull  @Valid @RequestParam(value = "ioutil", required = true) List<String> ioutil,
        @NotNull  @Valid @RequestParam(value = "http", required = true) List<String> http,
        @NotNull  @Valid @RequestParam(value = "url", required = true) List<String> url,
        @NotNull  @Valid @RequestParam(value = "context", required = true) List<String> context
    ) throws Exception;


    /**
     * POST /fake/{petId}/uploadImageWithRequiredFile : uploads an image (required)
     *
     * @param petId ID of pet to update (required)
     * @param requiredFile file to upload (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fake/{petId}/uploadImageWithRequiredFile",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<ModelApiResponse> uploadFileWithRequiredFile(
         @PathVariable("petId") Long petId,
         @RequestPart(value = "requiredFile", required = true) MultipartFile requiredFile,
         @Valid @RequestPart(value = "additionalMetadata", required = false) String additionalMetadata
    ) throws Exception;

}
