<?php

/**
 * OpenAPI Petstore
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\App;

/**
 * RegisterDependencies
 *
 * Recommendations from template creator:
 *
 * I don't use imports(eg. use Slim\Middleware\ErrorMiddleware) here because each package unlikely
 * be used in code twice. It helps to keep that file short and make Git history cleaner.
 *
 * This class declared as final because two classes with dependency injections can cause confusion. Edit
 * template of this class or use your own implementation instead(overwrite index.php to import your
 * custom class).
 */
final class RegisterDependencies
{
    /**
     * Adds dependency definitions.
     *
     * @param \DI\ContainerBuilder $containerBuilder Container builder.
     *
     * @see https://php-di.org/doc/php-definitions.html
     */
    public function __invoke(\DI\ContainerBuilder $containerBuilder): void
    {
        $containerBuilder->addDefinitions([
            // Response factory required as typed argument in next ErrorMiddleware injection
            \Psr\Http\Message\ResponseFactoryInterface::class => \DI\factory([\Slim\Factory\AppFactory::class, 'determineResponseFactory']),

            // Slim error middleware
            // @see https://www.slimframework.com/docs/v4/middleware/error-handling.html
            \Slim\Middleware\ErrorMiddleware::class => \DI\autowire()
                ->constructorParameter('displayErrorDetails', \DI\get('slim.displayErrorDetails', false))
                ->constructorParameter('logErrors', \DI\get('slim.logErrors', true))
                ->constructorParameter('logErrorDetails', \DI\get('slim.logErrorDetails', true)),

            // PDO class for database managing
            \PDO::class => \DI\create()
                ->constructor(
                    \DI\get('pdo.dsn'),
                    \DI\get('pdo.username'),
                    \DI\get('pdo.password'),
                    \DI\get('pdo.options', null)
                ),
        ]);
    }
}
