/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0-SNAPSHOT).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class UserApiMockServer {

    public static MappingBuilder stubCreateUser0(@javax.annotation.Nonnull String body) {
        MappingBuilder stub = post(urlPathEqualTo("/user"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(0)
            );


        return stub;
    }

    public static MappingBuilder stubCreateUserFault(@javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/user"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }


    public static String createUserRequestSample1() {
        return "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
    }


    public static MappingBuilder stubCreateUsersWithArrayInput0(@javax.annotation.Nonnull String body) {
        MappingBuilder stub = post(urlPathEqualTo("/user/createWithArray"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(0)
            );


        return stub;
    }

    public static MappingBuilder stubCreateUsersWithArrayInputFault(@javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/user/createWithArray"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }


    public static String createUsersWithArrayInputRequestSample1() {
        return "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
    }


    public static MappingBuilder stubCreateUsersWithListInput0(@javax.annotation.Nonnull String body) {
        MappingBuilder stub = post(urlPathEqualTo("/user/createWithList"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(0)
            );


        return stub;
    }

    public static MappingBuilder stubCreateUsersWithListInputFault(@javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/user/createWithList"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }


    public static String createUsersWithListInputRequestSample1() {
        return "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
    }


    public static MappingBuilder stubDeleteUser400(@javax.annotation.Nonnull String username) {
        MappingBuilder stub = delete(urlPathTemplate("/user/{username}"))
            .willReturn(aResponse()
                .withStatus(400)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubDeleteUser404(@javax.annotation.Nonnull String username) {
        MappingBuilder stub = delete(urlPathTemplate("/user/{username}"))
            .willReturn(aResponse()
                .withStatus(404)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubDeleteUserFault(@javax.annotation.Nonnull String username, Fault fault) {
        MappingBuilder stub = delete(urlPathTemplate("/user/{username}"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }




    public static MappingBuilder stubGetUserByName200(@javax.annotation.Nonnull String username, String response) {
        MappingBuilder stub = get(urlPathTemplate("/user/{username}"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/xml")
                .withBody(response)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubGetUserByName400(@javax.annotation.Nonnull String username, String response) {
        MappingBuilder stub = get(urlPathTemplate("/user/{username}"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/xml")
                .withBody(response)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubGetUserByName404(@javax.annotation.Nonnull String username, String response) {
        MappingBuilder stub = get(urlPathTemplate("/user/{username}"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/xml")
                .withBody(response)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubGetUserByNameFault(@javax.annotation.Nonnull String username, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/user/{username}"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static String getUserByName200ResponseSample1() {
        return "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
    }
    public static String getUserByName200ResponseSample2() {
        return "<User> <id>123456789</id> <username>aeiou</username> <firstName>aeiou</firstName> <lastName>aeiou</lastName> <email>aeiou</email> <password>aeiou</password> <phone>aeiou</phone> <userStatus>123</userStatus> </User>";
    }



    public static MappingBuilder stubLoginUser200(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, String responseXRateLimit, String responseXExpiresAfter, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/user/login"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/xml")
                .withHeader("X-Rate-Limit", responseXRateLimit)
                .withHeader("X-Expires-After", responseXExpiresAfter)
                .withBody(response)
            );

        stub = stub.withQueryParam("username", equalTo(username));
        stub = stub.withQueryParam("password", equalTo(password));

        return stub;
    }

    public static MappingBuilder stubLoginUser400(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/user/login"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/xml")
                .withBody(response)
            );

        stub = stub.withQueryParam("username", equalTo(username));
        stub = stub.withQueryParam("password", equalTo(password));

        return stub;
    }

    public static MappingBuilder stubLoginUserFault(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/user/login"))
            .withHeader("Accept", havingExactly("application/xml", "application/json"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withQueryParam("username", equalTo(username));
        stub = stub.withQueryParam("password", equalTo(password));

        return stub;
    }




    public static MappingBuilder stubLogoutUser0() {
        MappingBuilder stub = get(urlPathEqualTo("/user/logout"))
            .willReturn(aResponse()
                .withStatus(0)
            );


        return stub;
    }

    public static MappingBuilder stubLogoutUserFault(Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/user/logout"))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }




    public static MappingBuilder stubUpdateUser400(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/user/{username}"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubUpdateUser404(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/user/{username}"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }

    public static MappingBuilder stubUpdateUserFault(@javax.annotation.Nonnull String username, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/user/{username}"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("username", equalTo(username));

        return stub;
    }


    public static String updateUserRequestSample1() {
        return "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"userStatus\" : 6, \"phone\" : \"phone\", \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\" }";
    }


}
