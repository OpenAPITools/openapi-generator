# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OuterEnumDefaultValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    PLACED = "placed"
    APPROVED = "approved"
    DELIVERED = "delivered"
    allowable_values = [PLACED, APPROVED, DELIVERED]  # noqa: E501
    enum_items = {  "PLACED" : PLACED,  "APPROVED" : APPROVED,  "DELIVERED" : DELIVERED }  # noqa: E501

    def __init__(self):  # noqa: E501
        """OuterEnumDefaultValue - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'OuterEnumDefaultValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OuterEnumDefaultValue of this OuterEnumDefaultValue.  # noqa: E501
        :rtype: OuterEnumDefaultValue
        """
        return util.deserialize_model(dikt, cls)

    @staticmethod
    def of(value):
        """
        return value if it is a valid enum value or none, otherwise throw
        """
        if not value or value in OuterEnumDefaultValue.allowable_values:
           return value

        raise ValueError(
            "Invalid enum value for `OuterEnumDefaultValue` ({0}), must be one of {1}"  # noqa: E501
            .format(value, OuterEnumDefaultValue.allowable_values)
        )

