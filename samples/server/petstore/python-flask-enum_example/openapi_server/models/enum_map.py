# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EnumMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map_of_enum_string=None):  # noqa: E501
        """EnumMap - a model defined in OpenAPI

        :param map_of_enum_string: The map_of_enum_string of this EnumMap.  # noqa: E501
        :type map_of_enum_string: Dict[str, str]
        """
        self.openapi_types = {
            'map_of_enum_string': Dict[str, str]
        }

        self.attribute_map = {
            'map_of_enum_string': 'map_of_enum_string'
        }

        self._map_of_enum_string = map_of_enum_string

    @classmethod
    def from_dict(cls, dikt) -> 'EnumMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnumMap of this EnumMap.  # noqa: E501
        :rtype: EnumMap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map_of_enum_string(self):
        """Gets the map_of_enum_string of this EnumMap.


        :return: The map_of_enum_string of this EnumMap.
        :rtype: Dict[str, str]
        """
        return self._map_of_enum_string

    @map_of_enum_string.setter
    def map_of_enum_string(self, map_of_enum_string):
        """Sets the map_of_enum_string of this EnumMap.


        :param map_of_enum_string: The map_of_enum_string of this EnumMap.
        :type map_of_enum_string: Dict[str, str]
        """
        allowed_values = ["UPPER", "lower"]  # noqa: E501
        if not set(map_of_enum_string.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `map_of_enum_string` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(map_of_enum_string.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._map_of_enum_string = map_of_enum_string
