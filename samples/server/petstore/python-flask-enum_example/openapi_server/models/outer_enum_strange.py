# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OuterEnumStrange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _ABC = "_abc"
    _EFG = "-efg"
    _XYZ_ = "(xyz)"
    WITH_SPACES = "with Spaces"
    allowable_values = [_ABC, _EFG, _XYZ_, WITH_SPACES]  # noqa: E501
    enum_items = {  "_ABC" : _ABC,  "_EFG" : _EFG,  "_XYZ_" : _XYZ_,  "WITH_SPACES" : WITH_SPACES }  # noqa: E501

    def __init__(self):  # noqa: E501
        """OuterEnumStrange - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'OuterEnumStrange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OuterEnumStrange of this OuterEnumStrange.  # noqa: E501
        :rtype: OuterEnumStrange
        """
        return util.deserialize_model(dikt, cls)

    @staticmethod
    def of(value):
        """
        return value if it is a valid enum value or none, otherwise throw
        """
        if not value or value in OuterEnumStrange.allowable_values:
           return value

        raise ValueError(
            "Invalid enum value for `OuterEnumStrange` ({0}), must be one of {1}"  # noqa: E501
            .format(value, OuterEnumStrange.allowable_values)
        )

