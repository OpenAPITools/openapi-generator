<?php declare(strict_types=1);

/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 * PHP version 8.3
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Requests;

use Illuminate\Http\Request;

class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'pet' => [
                'required',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'petId' => [
                'required',
            ],
            'apiKey' => [
                'string',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'status' => [
                'required',
                'array',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'tags' => [
                'required',
                'array',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'petId' => [
                'required',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'pet' => [
                'required',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'petId' => [
                'required',
            ],
            'name' => [
                'string',
            ],
            'status' => [
                'string',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'petId' => [
                'required',
            ],
            'additionalMetadata' => [
                'string',
            ],
            'file' => [
                'file',
            ],
        ];
    }
}
class PetRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'petId' => [
                'required',
            ],
            'requiredFile' => [
                'file',
                'required',
            ],
            'additionalMetadata' => [
                'string',
            ],
        ];
    }
}
