<?php declare(strict_types=1);

/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 * PHP version 8.3
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Requests;

use Illuminate\Http\Request;

class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'pet' => [
                'required',
            ],
            'query1' => [
                'string',
            ],
            'header1' => [
                'string',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'body' => [
                'boolean',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'outerComposite' => [
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'body' => [
                'numeric',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'body' => [
                'string',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'outerObjectWithEnumProperty' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'requestBody' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'body' => [
                'file',
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'fileSchemaTestClass' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'query' => [
                'required',
                'string',
            ],
            'user' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'client' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'number' => [
                'required',
                'gte:32.1',
                'lte:543.2',
                'numeric',
            ],
            'double' => [
                'required',
                'gte:67.8',
                'lte:123.4',
            ],
            'patternWithoutDelimiter' => [
                'required',
                'regex:/^[A-Z].*/',
                'string',
            ],
            'byte' => [
                'required',
            ],
            'integer' => [
                'gte:10',
                'lte:100',
                'integer',
            ],
            'int32' => [
                'gte:20',
                'lte:200',
                'integer',
            ],
            'int64' => [
            ],
            'float' => [
                'lte:987.6',
            ],
            'string' => [
                'regex:/[a-z]/i',
                'string',
            ],
            'binary' => [
                'file',
            ],
            'date' => [
            ],
            'dateTime' => [
                'date',
            ],
            'password' => [
                'min:10',
                'max:64',
                'string',
            ],
            'callback' => [
                'string',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'enumHeaderStringArray' => [
                'array',
            ],
            'enumHeaderString' => [
                'string',
            ],
            'enumQueryStringArray' => [
                'array',
            ],
            'enumQueryString' => [
                'string',
            ],
            'enumQueryInteger' => [
                'integer',
            ],
            'enumQueryDouble' => [
            ],
            'enumQueryModelArray' => [
                'array',
            ],
            'enumFormStringArray' => [
                'array',
            ],
            'enumFormString' => [
                'string',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'requiredStringGroup' => [
                'required',
                'integer',
            ],
            'requiredBooleanGroup' => [
                'required',
                'boolean',
            ],
            'requiredInt64Group' => [
                'required',
            ],
            'stringGroup' => [
                'integer',
            ],
            'booleanGroup' => [
                'boolean',
            ],
            'int64Group' => [
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'requestBody' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'testInlineFreeformAdditionalPropertiesRequest' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'param' => [
                'required',
                'string',
            ],
            'param2' => [
                'required',
                'string',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'childWithNullable' => [
                'required',
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'pipe' => [
                'required',
                'array',
            ],
            'ioutil' => [
                'required',
                'array',
            ],
            'http' => [
                'required',
                'array',
            ],
            'url' => [
                'required',
                'array',
            ],
            'context' => [
                'required',
                'array',
            ],
            'allowEmpty' => [
                'required',
                'string',
            ],
            'language' => [
            ],
        ];
    }
}
class FakeRequest extends Request
{
    /**
    * Determine if the user is authorized to make this request.
    *
    * You can add your own logic here. For now, we'll allow all requests.
    */
    public function authorize(): bool
    {
        return true;
    }

    /**
    * Get the validation rules that apply to the request.
    *
    * Map OpenAPI constraints to Laravel validation rules.
    */
    public function rules(): array
    {
        return [
            'requestBody' => [
                'required',
            ],
        ];
    }
}
