<?php declare(strict_types=1);

/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 * PHP version 8.3
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;

use OpenAPI\Server\Api\UserApiInterface;

class UserController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly UserApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation createUser
     *
     * Create user.
     *
     */
    public function createUser(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $user = $this->serde->deserialize($request->get('user'), from: 'array', to: \OpenAPI\Server\Model\User::class);

        if ($user === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->createUser($user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContentdefault) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(0);
            }

            return response()->json($responseBody, 0);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation createUsersWithArrayInput
     *
     * Creates list of users with given input array.
     *
     */
    public function createUsersWithArrayInput(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $user = $request->get('user');

        try {
            $apiResult = $this->api->createUsersWithArrayInput($user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContentdefault) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(0);
            }

            return response()->json($responseBody, 0);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation createUsersWithListInput
     *
     * Creates list of users with given input array.
     *
     */
    public function createUsersWithListInput(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $user = $request->get('user');

        try {
            $apiResult = $this->api->createUsersWithListInput($user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContentdefault) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(0);
            }

            return response()->json($responseBody, 0);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation deleteUser
     *
     * Delete user.
     *
     */
    public function deleteUser(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $username = $request->string('username');

        try {
            $apiResult = $this->api->deleteUser($username);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(404);
            }

            return response()->json($responseBody, 404);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getUserByName
     *
     * Get user by user name.
     *
     */
    public function getUserByName(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $username = $request->string('username');

        try {
            $apiResult = $this->api->getUserByName($username);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\User) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(404);
            }

            return response()->json($responseBody, 404);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation loginUser
     *
     * Logs user into the system.
     *
     */
    public function loginUser(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $username = $request->string('username');

        $password = $request->string('password');

        try {
            $apiResult = $this->api->loginUser($username, $password);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \Illuminate\Support\Stringable) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation logoutUser
     *
     * Logs out current logged in user session.
     *
     */
    public function logoutUser(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        try {
            $apiResult = $this->api->logoutUser();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContentdefault) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(0);
            }

            return response()->json($responseBody, 0);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation updateUser
     *
     * Updated user.
     *
     */
    public function updateUser(\OpenAPI\Server\Http\Requests\UserRequest $request): JsonResponse
    {
        $username = $request->string('username');

        $user = $this->serde->deserialize($request->get('user'), from: 'array', to: \OpenAPI\Server\Model\User::class);

        if ($user === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->updateUser($username, $user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(404);
            }

            return response()->json($responseBody, 404);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
}
