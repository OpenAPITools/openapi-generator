<?php declare(strict_types=1);

/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 * PHP version 8.3
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;

use OpenAPI\Server\Api\FakeApiInterface;

class FakeController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly FakeApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation fakeBigDecimalMap
     *
     * .
     *
     */
    public function fakeBigDecimalMap(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        try {
            $apiResult = $this->api->fakeBigDecimalMap();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\FakeBigDecimalMap200Response) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakeHealthGet
     *
     * Health check endpoint.
     *
     */
    public function fakeHealthGet(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        try {
            $apiResult = $this->api->fakeHealthGet();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\HealthCheckResult) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakeHttpSignatureTest
     *
     * test http signature authentication.
     *
     */
    public function fakeHttpSignatureTest(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $pet = $this->serde->deserialize($request->get('pet'), from: 'array', to: \OpenAPI\Server\Model\Pet::class);

        if ($pet === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $query1 = $request->string('query1');

        $header1 = $request->string('header1');

        try {
            $apiResult = $this->api->fakeHttpSignatureTest($pet, $query1, $header1);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakeOuterBooleanSerialize
     *
     * .
     *
     */
    public function fakeOuterBooleanSerialize(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $body = $request->bool('body');

        try {
            $apiResult = $this->api->fakeOuterBooleanSerialize($body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof bool) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakeOuterCompositeSerialize
     *
     * .
     *
     */
    public function fakeOuterCompositeSerialize(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $outerComposite = $this->serde->deserialize($request->get('outerComposite'), from: 'array', to: \OpenAPI\Server\Model\OuterComposite::class);

        if ($outerComposite === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->fakeOuterCompositeSerialize($outerComposite);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\OuterComposite) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakeOuterNumberSerialize
     *
     * .
     *
     */
    public function fakeOuterNumberSerialize(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $body = $request->float('body');

        try {
            $apiResult = $this->api->fakeOuterNumberSerialize($body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof float) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakeOuterStringSerialize
     *
     * .
     *
     */
    public function fakeOuterStringSerialize(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $body = $request->string('body');

        try {
            $apiResult = $this->api->fakeOuterStringSerialize($body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \Illuminate\Support\Stringable) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation fakePropertyEnumIntegerSerialize
     *
     * .
     *
     */
    public function fakePropertyEnumIntegerSerialize(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $outerObjectWithEnumProperty = $this->serde->deserialize($request->get('outerObjectWithEnumProperty'), from: 'array', to: \OpenAPI\Server\Model\OuterObjectWithEnumProperty::class);

        if ($outerObjectWithEnumProperty === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->fakePropertyEnumIntegerSerialize($outerObjectWithEnumProperty);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\OuterObjectWithEnumProperty) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testAdditionalPropertiesReference
     *
     * test referenced additionalProperties.
     *
     */
    public function testAdditionalPropertiesReference(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {

        try {
            $apiResult = $this->api->testAdditionalPropertiesReference($requestBody);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testBodyWithBinary
     *
     * .
     *
     */
    public function testBodyWithBinary(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $body = $request->file('body');

        try {
            $apiResult = $this->api->testBodyWithBinary($body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testBodyWithFileSchema
     *
     * .
     *
     */
    public function testBodyWithFileSchema(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $fileSchemaTestClass = $this->serde->deserialize($request->get('fileSchemaTestClass'), from: 'array', to: \OpenAPI\Server\Model\FileSchemaTestClass::class);

        if ($fileSchemaTestClass === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->testBodyWithFileSchema($fileSchemaTestClass);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testBodyWithQueryParams
     *
     * .
     *
     */
    public function testBodyWithQueryParams(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $query = $request->string('query');

        $user = $this->serde->deserialize($request->get('user'), from: 'array', to: \OpenAPI\Server\Model\User::class);

        if ($user === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->testBodyWithQueryParams($query, $user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testClientModel
     *
     * To test \"client\" model.
     *
     */
    public function testClientModel(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $client = $this->serde->deserialize($request->get('client'), from: 'array', to: \OpenAPI\Server\Model\Client::class);

        if ($client === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->testClientModel($client);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Client) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testEndpointParameters
     *
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트.
     *
     */
    public function testEndpointParameters(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $number = $request->float('number');


        $patternWithoutDelimiter = $request->string('patternWithoutDelimiter');


        $integer = $request->integer('integer');

        $int32 = $request->integer('int32');



        $string = $request->string('string');

        $binary = $request->file('binary');


        $dateTime = $request->date('dateTime');

        $password = $request->string('password');

        $callback = $request->string('callback');

        try {
            $apiResult = $this->api->testEndpointParameters($number, $double, $patternWithoutDelimiter, $byte, $integer, $int32, $int64, $float, $string, $binary, $date, $dateTime, $password, $callback);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(404);
            }

            return response()->json($responseBody, 404);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testEnumParameters
     *
     * To test enum parameters.
     *
     */
    public function testEnumParameters(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $enumHeaderStringArray = $request->get('enumHeaderStringArray');

        $enumHeaderString = $request->string('enumHeaderString');

        $enumQueryStringArray = $request->get('enumQueryStringArray');

        $enumQueryString = $request->string('enumQueryString');

        $enumQueryInteger = $request->integer('enumQueryInteger');


        $enumQueryModelArray = $request->get('enumQueryModelArray');

        $enumFormStringArray = $request->get('enumFormStringArray');

        $enumFormString = $request->string('enumFormString');

        try {
            $apiResult = $this->api->testEnumParameters($enumHeaderStringArray, $enumHeaderString, $enumQueryStringArray, $enumQueryString, $enumQueryInteger, $enumQueryDouble, $enumQueryModelArray, $enumFormStringArray, $enumFormString);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }
        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(404);
            }

            return response()->json($responseBody, 404);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testGroupParameters
     *
     * Fake endpoint to test group parameters (optional).
     *
     */
    public function testGroupParameters(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $requiredStringGroup = $request->integer('requiredStringGroup');

        $requiredBooleanGroup = $request->bool('requiredBooleanGroup');


        $stringGroup = $request->integer('stringGroup');

        $booleanGroup = $request->bool('booleanGroup');


        try {
            $apiResult = $this->api->testGroupParameters($requiredStringGroup, $requiredBooleanGroup, $requiredInt64Group, $stringGroup, $booleanGroup, $int64Group);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent400) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(400);
            }

            return response()->json($responseBody, 400);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testInlineAdditionalProperties
     *
     * test inline additionalProperties.
     *
     */
    public function testInlineAdditionalProperties(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {

        try {
            $apiResult = $this->api->testInlineAdditionalProperties($requestBody);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testInlineFreeformAdditionalProperties
     *
     * test inline free-form additionalProperties.
     *
     */
    public function testInlineFreeformAdditionalProperties(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $testInlineFreeformAdditionalPropertiesRequest = $this->serde->deserialize($request->get('testInlineFreeformAdditionalPropertiesRequest'), from: 'array', to: \OpenAPI\Server\Model\TestInlineFreeformAdditionalPropertiesRequest::class);

        if ($testInlineFreeformAdditionalPropertiesRequest === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->testInlineFreeformAdditionalProperties($testInlineFreeformAdditionalPropertiesRequest);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testJsonFormData
     *
     * test json serialization of form data.
     *
     */
    public function testJsonFormData(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $param = $request->string('param');

        $param2 = $request->string('param2');

        try {
            $apiResult = $this->api->testJsonFormData($param, $param2);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testNullable
     *
     * test nullable parent property.
     *
     */
    public function testNullable(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $childWithNullable = $this->serde->deserialize($request->get('childWithNullable'), from: 'array', to: \OpenAPI\Server\Model\ChildWithNullable::class);

        if ($childWithNullable === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->testNullable($childWithNullable);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testQueryParameterCollectionFormat
     *
     * .
     *
     */
    public function testQueryParameterCollectionFormat(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {
        $pipe = $request->get('pipe');

        $ioutil = $request->get('ioutil');

        $http = $request->get('http');

        $url = $request->get('url');

        $context = $request->get('context');

        $allowEmpty = $request->string('allowEmpty');


        try {
            $apiResult = $this->api->testQueryParameterCollectionFormat($pipe, $ioutil, $http, $url, $context, $allowEmpty, $language);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation testStringMapReference
     *
     * test referenced string map.
     *
     */
    public function testStringMapReference(\OpenAPI\Server\Http\Requests\FakeRequest $request): JsonResponse
    {

        try {
            $apiResult = $this->api->testStringMapReference($requestBody);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort(200);
            }

            return response()->json($responseBody, 200);
        }

        // This shouldn't happen
        return response()->abort(500);
    }
}
