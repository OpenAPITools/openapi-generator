/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Dog;
import org.openapitools.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "dogs", description = "the dogs API")
public interface DogsApi {

    default DogsApiDelegate getDelegate() {
        return new DogsApiDelegate() {};
    }

    /**
     * POST /dogs : Create a dog
     *
     * @param dog  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "createDog",
        summary = "Create a dog",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dog.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class), examples = {
                    @ExampleObject(
                        name = "DogNameBiggerThan50Error",
                        value = "{\"code\":400,\"message\":\"name size must be between 0 and 50\"}"
                    ),
                    @ExampleObject(
                        name = "DogNameContainsNumbersError",
                        value = "{\"code\":400,\"message\":\"Name must contain only letters\"}"
                    ),
                    @ExampleObject(
                        name = "DogAgeNegativeError",
                        value = "{\"code\":400,\"message\":\"age must be greater than or equal to 0\"}"
                    )
                })

            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dogs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Dog> createDog(
        @Parameter(name = "Dog", description = "") @Valid @RequestBody(required = false) Dog dog
    ) {
        return getDelegate().createDog(dog);
    }

}
