/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * a model to test required properties with an example and length one enum
 */
@ApiModel(description = "a model to test required properties with an example and length one enum")

public class TypeHolderExample   {
  /**
   * Gets or Sets stringItem
   */
  public enum StringItemEnum {
    WHAT(String.valueOf("what"));

    private String value;

    StringItemEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StringItemEnum fromValue(String text) {
      for (StringItemEnum b : StringItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("string_item")
  private StringItemEnum stringItem;

  /**
   * Gets or Sets numberItem
   */
  public enum NumberItemEnum {
    NUMBER_1_DOT_2339999675750732(Float.valueOf("1.2339999675750732"));

    private Float value;

    NumberItemEnum(Float value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NumberItemEnum fromValue(String text) {
      for (NumberItemEnum b : NumberItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("number_item")
  private NumberItemEnum numberItem;

  /**
   * Gets or Sets integerItem
   */
  public enum IntegerItemEnum {
    NUMBER_MINUS_2(Integer.valueOf("-2"));

    private Integer value;

    IntegerItemEnum(Integer value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IntegerItemEnum fromValue(String text) {
      for (IntegerItemEnum b : IntegerItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("integer_item")
  private IntegerItemEnum integerItem;

  @JsonProperty("bool_item")
  private Boolean boolItem;

  @JsonProperty("array_item")
  private List<Integer> arrayItem = new ArrayList<Integer>();

  public TypeHolderExample stringItem(StringItemEnum stringItem) {
    this.stringItem = stringItem;
    return this;
  }

  /**
   * Get stringItem
   * @return stringItem
   **/
  @JsonProperty("string_item")
  @ApiModelProperty(example = "what", required = true, value = "")
  @NotNull 
  public StringItemEnum getStringItem() {
    return stringItem;
  }

  public void setStringItem(StringItemEnum stringItem) {
    this.stringItem = stringItem;
  }

  public TypeHolderExample numberItem(NumberItemEnum numberItem) {
    this.numberItem = numberItem;
    return this;
  }

  /**
   * Get numberItem
   * @return numberItem
   **/
  @JsonProperty("number_item")
  @ApiModelProperty(example = "1.234", required = true, value = "")
  @NotNull 
  public NumberItemEnum getNumberItem() {
    return numberItem;
  }

  public void setNumberItem(NumberItemEnum numberItem) {
    this.numberItem = numberItem;
  }

  public TypeHolderExample integerItem(IntegerItemEnum integerItem) {
    this.integerItem = integerItem;
    return this;
  }

  /**
   * Get integerItem
   * @return integerItem
   **/
  @JsonProperty("integer_item")
  @ApiModelProperty(example = "-2", required = true, value = "")
  @NotNull 
  public IntegerItemEnum getIntegerItem() {
    return integerItem;
  }

  public void setIntegerItem(IntegerItemEnum integerItem) {
    this.integerItem = integerItem;
  }

  public TypeHolderExample boolItem(Boolean boolItem) {
    this.boolItem = boolItem;
    return this;
  }

  /**
   * Get boolItem
   * @return boolItem
   **/
  @JsonProperty("bool_item")
  @ApiModelProperty(example = "true", required = true, value = "")
  @NotNull 
  public Boolean getBoolItem() {
    return boolItem;
  }

  public void setBoolItem(Boolean boolItem) {
    this.boolItem = boolItem;
  }

  public TypeHolderExample arrayItem(List<Integer> arrayItem) {
    this.arrayItem = arrayItem;
    return this;
  }

  public TypeHolderExample addArrayItemItem(Integer arrayItemItem) {
    this.arrayItem.add(arrayItemItem);
    return this;
  }

  /**
   * Get arrayItem
   * @return arrayItem
   **/
  @JsonProperty("array_item")
  @ApiModelProperty(example = "[[0, 1, 2, 3]]", required = true, value = "")
  @NotNull 
  public List<Integer> getArrayItem() {
    return arrayItem;
  }

  public void setArrayItem(List<Integer> arrayItem) {
    this.arrayItem = arrayItem;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypeHolderExample typeHolderExample = (TypeHolderExample) o;
    return Objects.equals(this.stringItem, typeHolderExample.stringItem) &&
        Objects.equals(this.numberItem, typeHolderExample.numberItem) &&
        Objects.equals(this.integerItem, typeHolderExample.integerItem) &&
        Objects.equals(this.boolItem, typeHolderExample.boolItem) &&
        Objects.equals(this.arrayItem, typeHolderExample.arrayItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stringItem, numberItem, integerItem, boolItem, arrayItem);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypeHolderExample {\n");
    
    sb.append("    stringItem: ").append(toIndentedString(stringItem)).append("\n");
    sb.append("    numberItem: ").append(toIndentedString(numberItem)).append("\n");
    sb.append("    integerItem: ").append(toIndentedString(integerItem)).append("\n");
    sb.append("    boolItem: ").append(toIndentedString(boolItem)).append("\n");
    sb.append("    arrayItem: ").append(toIndentedString(arrayItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

