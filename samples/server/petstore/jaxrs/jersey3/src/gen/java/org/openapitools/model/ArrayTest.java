/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.model.ReadOnlyFirst;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * ArrayTest
 */
@JsonPropertyOrder({
  ArrayTest.JSON_PROPERTY_ARRAY_OF_STRING,
  ArrayTest.JSON_PROPERTY_ARRAY_WITH_UNIQUE_ITEMS,
  ArrayTest.JSON_PROPERTY_ARRAY_ARRAY_OF_INTEGER,
  ArrayTest.JSON_PROPERTY_ARRAY_ARRAY_OF_MODEL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen")
public class ArrayTest   {
  public static final String JSON_PROPERTY_ARRAY_OF_STRING = "array_of_string";
  @JsonProperty(JSON_PROPERTY_ARRAY_OF_STRING)
  private List<String> arrayOfString;

  /**
   * Gets or Sets arrayWithUniqueItems
   */
  public enum ArrayWithUniqueItemsEnum {
    _1("unique_item_1"),
    
    _2("unique_item_2"),
    
    _3("unique_item_3");

    private String value;

    ArrayWithUniqueItemsEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ArrayWithUniqueItemsEnum fromValue(String value) {
      for (ArrayWithUniqueItemsEnum b : ArrayWithUniqueItemsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ARRAY_WITH_UNIQUE_ITEMS = "array_with_unique_items";
  @JsonProperty(JSON_PROPERTY_ARRAY_WITH_UNIQUE_ITEMS)
  private Set<ArrayWithUniqueItemsEnum> arrayWithUniqueItems;

  public static final String JSON_PROPERTY_ARRAY_ARRAY_OF_INTEGER = "array_array_of_integer";
  @JsonProperty(JSON_PROPERTY_ARRAY_ARRAY_OF_INTEGER)
  private List<List<Long>> arrayArrayOfInteger;

  public static final String JSON_PROPERTY_ARRAY_ARRAY_OF_MODEL = "array_array_of_model";
  @JsonProperty(JSON_PROPERTY_ARRAY_ARRAY_OF_MODEL)
  private List<List<ReadOnlyFirst>> arrayArrayOfModel;

  public ArrayTest arrayOfString(List<String> arrayOfString) {
    this.arrayOfString = arrayOfString;
    return this;
  }

  public ArrayTest addArrayOfStringItem(String arrayOfStringItem) {
    if (this.arrayOfString == null) {
      this.arrayOfString = new ArrayList<>();
    }
    this.arrayOfString.add(arrayOfStringItem);
    return this;
  }

  /**
   * Get arrayOfString
   * @return arrayOfString
   **/
  @JsonProperty(value = "array_of_string")
  @Schema(description = "")
   @Size(min=0,max=3)
  public List<String> getArrayOfString() {
    return arrayOfString;
  }

  public void setArrayOfString(List<String> arrayOfString) {
    this.arrayOfString = arrayOfString;
  }

  public ArrayTest arrayWithUniqueItems(Set<ArrayWithUniqueItemsEnum> arrayWithUniqueItems) {
    this.arrayWithUniqueItems = arrayWithUniqueItems;
    return this;
  }

  public ArrayTest addArrayWithUniqueItemsItem(ArrayWithUniqueItemsEnum arrayWithUniqueItemsItem) {
    if (this.arrayWithUniqueItems == null) {
      this.arrayWithUniqueItems = new LinkedHashSet<>();
    }
    this.arrayWithUniqueItems.add(arrayWithUniqueItemsItem);
    return this;
  }

  /**
   * Get arrayWithUniqueItems
   * @return arrayWithUniqueItems
   **/
  @JsonProperty(value = "array_with_unique_items")
  @Schema(description = "")
  
  public Set<ArrayWithUniqueItemsEnum> getArrayWithUniqueItems() {
    return arrayWithUniqueItems;
  }

  @JsonDeserialize(as = LinkedHashSet.class)
  public void setArrayWithUniqueItems(Set<ArrayWithUniqueItemsEnum> arrayWithUniqueItems) {
    this.arrayWithUniqueItems = arrayWithUniqueItems;
  }

  public ArrayTest arrayArrayOfInteger(List<List<Long>> arrayArrayOfInteger) {
    this.arrayArrayOfInteger = arrayArrayOfInteger;
    return this;
  }

  public ArrayTest addArrayArrayOfIntegerItem(List<Long> arrayArrayOfIntegerItem) {
    if (this.arrayArrayOfInteger == null) {
      this.arrayArrayOfInteger = new ArrayList<>();
    }
    this.arrayArrayOfInteger.add(arrayArrayOfIntegerItem);
    return this;
  }

  /**
   * Get arrayArrayOfInteger
   * @return arrayArrayOfInteger
   **/
  @JsonProperty(value = "array_array_of_integer")
  @Schema(description = "")
  @Valid 
  public List<List<Long>> getArrayArrayOfInteger() {
    return arrayArrayOfInteger;
  }

  public void setArrayArrayOfInteger(List<List<Long>> arrayArrayOfInteger) {
    this.arrayArrayOfInteger = arrayArrayOfInteger;
  }

  public ArrayTest arrayArrayOfModel(List<List<ReadOnlyFirst>> arrayArrayOfModel) {
    this.arrayArrayOfModel = arrayArrayOfModel;
    return this;
  }

  public ArrayTest addArrayArrayOfModelItem(List<ReadOnlyFirst> arrayArrayOfModelItem) {
    if (this.arrayArrayOfModel == null) {
      this.arrayArrayOfModel = new ArrayList<>();
    }
    this.arrayArrayOfModel.add(arrayArrayOfModelItem);
    return this;
  }

  /**
   * Get arrayArrayOfModel
   * @return arrayArrayOfModel
   **/
  @JsonProperty(value = "array_array_of_model")
  @Schema(description = "")
  @Valid 
  public List<List<ReadOnlyFirst>> getArrayArrayOfModel() {
    return arrayArrayOfModel;
  }

  public void setArrayArrayOfModel(List<List<ReadOnlyFirst>> arrayArrayOfModel) {
    this.arrayArrayOfModel = arrayArrayOfModel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArrayTest arrayTest = (ArrayTest) o;
    return Objects.equals(arrayOfString, arrayTest.arrayOfString) &&
        Objects.equals(arrayWithUniqueItems, arrayTest.arrayWithUniqueItems) &&
        Objects.equals(arrayArrayOfInteger, arrayTest.arrayArrayOfInteger) &&
        Objects.equals(arrayArrayOfModel, arrayTest.arrayArrayOfModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayOfString, arrayWithUniqueItems, arrayArrayOfInteger, arrayArrayOfModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArrayTest {\n");
    
    sb.append("    arrayOfString: ").append(toIndentedString(arrayOfString)).append("\n");
    sb.append("    arrayWithUniqueItems: ").append(toIndentedString(arrayWithUniqueItems)).append("\n");
    sb.append("    arrayArrayOfInteger: ").append(toIndentedString(arrayArrayOfInteger)).append("\n");
    sb.append("    arrayArrayOfModel: ").append(toIndentedString(arrayArrayOfModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

