/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver



import "errors" // FIXME: why not in #imports
import "encoding/json" // FIXME: why not in #imports

var _ = errors.New("") // to enforce the use of errors
var _ = json.NewDecoder(nil) // to enforce the use of encoding/json


// Category - A category for a pet
type Category struct {

	Id int64 `json:"id,omitempty"`

	Name string `json:"name,omitempty"`
}

// UnmarshalJSON parse JSON while respecting the default values specified
func (o *Category) UnmarshalJSON(data []byte) error {
    type Alias Category // Avoid infinite recursion
    aux := Alias{
	}
    if err := json.Unmarshal(data, &aux); err != nil {
        return err
    }
    *o = Category(aux)
    return nil
}

// AssertCategoryRequired checks if the required fields are not zero-ed
func AssertCategoryRequired(obj Category) error {
	return nil
}

// AssertCategoryConstraints checks if the values respects the defined constraints
func AssertCategoryConstraints(obj Category) error {
	return nil
}

// AssertRecurseCategoryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Category (e.g. [][]Category), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCategoryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCategory, ok := obj.(Category)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCategoryRequired(aCategory)
	})
}
