//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@kindservices.co.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


// this is generated from apiRoutes.mustache
package org.openapitools.server.api

import org.openapitools.server.model.Order


final case class StoreRoutes(service : StoreService) extends cask.Routes {


        
        /** Delete purchase order by ID
         * 
         */
        @cask.delete("/store/order/:orderId")
        def deleteOrder(orderId : String, request: cask.Request) = {

        val serviceResponse =         for {
            
            orderId <- Parsed(orderId)
            result <- Parsed.eval(service.deleteOrder(orderId))
        } yield result

        asHttpResponse(serviceResponse)
      }
        
        /** Returns pet inventories by status
         * 
         */
        @cask.get("/store/inventory")
        def getInventory(request: cask.Request) = {
            // auth method api_key : apiKey, keyParamName: api_key

        val serviceResponse =         for {
            result <- Parsed.eval(service.getInventory())
        } yield result

        asHttpResponse(serviceResponse)
      }
        
        /** Find purchase order by ID
         * 
         */
        @cask.get("/store/order/:orderId")
        def getOrderById(orderId : Long, request: cask.Request) = {

        val serviceResponse =         for {
            
            orderId <- Parsed(orderId)
            result <- Parsed.eval(service.getOrderById(orderId))
        } yield result

        asHttpResponse(serviceResponse)
      }
        
        /** Place an order for a pet
         * 
         */
        @cask.post("/store/order")
        def placeOrder(request: cask.Request) = {

        val serviceResponse =         for {
            
            /** TODO - this is a bit of a hack - we should do content type negotiation */
            order <- Parsed.eval(Order.fromJsonString(request.bodyAsString))
            result <- Parsed.eval(service.placeOrder(order))
        } yield result

        asHttpResponse(serviceResponse)
      }

    initialize()
}
