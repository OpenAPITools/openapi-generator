<?php

/**
 * OpenAPI Petstore
 * PHP version 8.x
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer;

class RegisterRoutes {

    static public function registerRoutes(\OpenAPIServer\Api\AbstractPetApi|\OpenAPIServer\Api\AbstractStoreApi|\OpenAPIServer\Api\AbstractUserApi $handler): void
    {
        $reflectionClass = new \ReflectionClass($handler);

        if ($reflectionClass->hasMethod('addPet') && $reflectionClass->hasMethod('addPetStream')) {
            throw new \Exception('Operation addPet cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('addPet')) {
            \Flight::route('POST /pet', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->addPet(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\Pet')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('deletePet') && $reflectionClass->hasMethod('deletePetStream')) {
            throw new \Exception('Operation deletePet cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('deletePet')) {
            \Flight::route('DELETE /pet/@petId', function (string $petId) use ($handler) {
                $r = \Flight::request();
                $handler->deletePet(
                    parseParam($petId, 'int'), 
                    parseParam($r->getHeader('api_key'), '?string')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('findPetsByStatus') && $reflectionClass->hasMethod('findPetsByStatusStream')) {
            throw new \Exception('Operation findPetsByStatus cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('findPetsByStatus')) {
            \Flight::route('GET /pet/findByStatus', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->findPetsByStatus(
                    parseParam($r->query['status'] ?? null, '\\OpenAPIServer\\Model\\FindPetsByStatusStatusParameterInner[]')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }
        if ($reflectionClass->hasMethod('findPetsByStatusStream')) {
            \Flight::route('GET /pet/findByStatus', function () use ($handler) {
                $r = \Flight::request();
                $handler->findPetsByStatusStream(
                    parseParam($r->query['status'] ?? null, '\\OpenAPIServer\\Model\\FindPetsByStatusStatusParameterInner[]')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['Content-Type' => 'application/json']);
        }

        if ($reflectionClass->hasMethod('findPetsByTags') && $reflectionClass->hasMethod('findPetsByTagsStream')) {
            throw new \Exception('Operation findPetsByTags cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('findPetsByTags')) {
            \Flight::route('GET /pet/findByTags', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->findPetsByTags(
                    parseParam($r->query['tags'] ?? null, 'string[]')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }
        if ($reflectionClass->hasMethod('findPetsByTagsStream')) {
            \Flight::route('GET /pet/findByTags', function () use ($handler) {
                $r = \Flight::request();
                $handler->findPetsByTagsStream(
                    parseParam($r->query['tags'] ?? null, 'string[]')
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['Content-Type' => 'application/json']);
        }

        if ($reflectionClass->hasMethod('getPetById') && $reflectionClass->hasMethod('getPetByIdStream')) {
            throw new \Exception('Operation getPetById cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('getPetById')) {
            \Flight::route('GET /pet/@petId', function (string $petId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getPetById(
                    parseParam($petId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('updatePet') && $reflectionClass->hasMethod('updatePetStream')) {
            throw new \Exception('Operation updatePet cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('updatePet')) {
            \Flight::route('PUT /pet', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->updatePet(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\Pet')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('updatePetWithForm') && $reflectionClass->hasMethod('updatePetWithFormStream')) {
            throw new \Exception('Operation updatePetWithForm cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('updatePetWithForm')) {
            \Flight::route('POST /pet/@petId', function (string $petId) use ($handler) {
                $r = \Flight::request();
                $handler->updatePetWithForm(
                    parseParam($petId, 'int'), 
                    parseParam(, '?string'), 
                    parseParam(, '?string')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('uploadFile') && $reflectionClass->hasMethod('uploadFileStream')) {
            throw new \Exception('Operation uploadFile cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('uploadFile')) {
            \Flight::route('POST /pet/@petId/uploadImage', function (string $petId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->uploadFile(
                    parseParam($petId, 'int'), 
                    parseParam(, '?string'), 
                    parseParam(, '')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('deleteOrder') && $reflectionClass->hasMethod('deleteOrderStream')) {
            throw new \Exception('Operation deleteOrder cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('deleteOrder')) {
            \Flight::route('DELETE /store/order/@orderId', function (string $orderId) use ($handler) {
                $r = \Flight::request();
                $handler->deleteOrder(
                    parseParam($orderId, 'string')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('getInventory') && $reflectionClass->hasMethod('getInventoryStream')) {
            throw new \Exception('Operation getInventory cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('getInventory')) {
            \Flight::route('GET /store/inventory', function () use ($handler) {
                $r = \Flight::request();
                $handler->getInventory(
                );
                \Flight::halt(204);
            });
        }
        if ($reflectionClass->hasMethod('getInventoryStream')) {
            \Flight::route('GET /store/inventory', function () use ($handler) {
                $r = \Flight::request();
                $handler->getInventoryStream(
                );
                // ignore return value: streaming expected
            })->streamWithHeaders(['Content-Type' => 'application/json']);
        }

        if ($reflectionClass->hasMethod('getOrderById') && $reflectionClass->hasMethod('getOrderByIdStream')) {
            throw new \Exception('Operation getOrderById cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('getOrderById')) {
            \Flight::route('GET /store/order/@orderId', function (string $orderId) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getOrderById(
                    parseParam($orderId, 'int')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('placeOrder') && $reflectionClass->hasMethod('placeOrderStream')) {
            throw new \Exception('Operation placeOrder cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('placeOrder')) {
            \Flight::route('POST /store/order', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->placeOrder(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\Order')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('createUser') && $reflectionClass->hasMethod('createUserStream')) {
            throw new \Exception('Operation createUser cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('createUser')) {
            \Flight::route('POST /user', function () use ($handler) {
                $r = \Flight::request();
                $handler->createUser(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\User')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('createUsersWithArrayInput') && $reflectionClass->hasMethod('createUsersWithArrayInputStream')) {
            throw new \Exception('Operation createUsersWithArrayInput cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('createUsersWithArrayInput')) {
            \Flight::route('POST /user/createWithArray', function () use ($handler) {
                $r = \Flight::request();
                $handler->createUsersWithArrayInput(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\User[]')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('createUsersWithListInput') && $reflectionClass->hasMethod('createUsersWithListInputStream')) {
            throw new \Exception('Operation createUsersWithListInput cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('createUsersWithListInput')) {
            \Flight::route('POST /user/createWithList', function () use ($handler) {
                $r = \Flight::request();
                $handler->createUsersWithListInput(
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\User[]')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('deleteUser') && $reflectionClass->hasMethod('deleteUserStream')) {
            throw new \Exception('Operation deleteUser cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('deleteUser')) {
            \Flight::route('DELETE /user/@username', function (string $username) use ($handler) {
                $r = \Flight::request();
                $handler->deleteUser(
                    parseParam($username, 'string')
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('getUserByName') && $reflectionClass->hasMethod('getUserByNameStream')) {
            throw new \Exception('Operation getUserByName cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('getUserByName')) {
            \Flight::route('GET /user/@username', function (string $username) use ($handler) {
                $r = \Flight::request();
                $result = $handler->getUserByName(
                    parseParam($username, 'string')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('loginUser') && $reflectionClass->hasMethod('loginUserStream')) {
            throw new \Exception('Operation loginUser cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('loginUser')) {
            \Flight::route('GET /user/login', function () use ($handler) {
                $r = \Flight::request();
                $result = $handler->loginUser(
                    parseParam($r->query['username'] ?? null, 'string'), 
                    parseParam($r->query['password'] ?? null, 'string')
                );
                if ($result === null) {
                    \Flight::halt(204);
                } else {
                    \Flight::json($result);
                }
            });
        }

        if ($reflectionClass->hasMethod('logoutUser') && $reflectionClass->hasMethod('logoutUserStream')) {
            throw new \Exception('Operation logoutUser cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('logoutUser')) {
            \Flight::route('GET /user/logout', function () use ($handler) {
                $r = \Flight::request();
                $handler->logoutUser(
                );
                \Flight::halt(204);
            });
        }

        if ($reflectionClass->hasMethod('updateUser') && $reflectionClass->hasMethod('updateUserStream')) {
            throw new \Exception('Operation updateUser cannot be both streaming and non-streaming');
        }
        if ($reflectionClass->hasMethod('updateUser')) {
            \Flight::route('PUT /user/@username', function (string $username) use ($handler) {
                $r = \Flight::request();
                $handler->updateUser(
                    parseParam($username, 'string'), 
                    parseParam(json_decode($r->getBody(), true), '\\OpenAPIServer\\Model\\User')
                );
                \Flight::halt(204);
            });
        }

    }
}


function parseParam(mixed $param, string $type)
{
    $nonNullType = str_replace('?', '', $type);
    if ($param === null) {
        return null;
    } elseif ($nonNullType === 'int') {
        return intval($param);
    } elseif ($nonNullType === 'float') {
        return floatval($param);
    } elseif ($nonNullType === 'bool') {
        return filter_var($param, FILTER_VALIDATE_BOOLEAN);
    } elseif (str_ends_with($type, '[]')) {
        return array_map(fn($el) => parseParam($el, substr($type, 0, -2)), $param);
    } elseif (str_starts_with($nonNullType, '\\OpenAPIServer\\Model')) {
        return new $nonNullType($param);
    } else {
        return $param;
    }
}
