/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserApi.h
 *
 * 
 */

#ifndef UserApi_H_
#define UserApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "User.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  UserApiException: public std::exception
{
public:
    UserApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace UserApiResources {
/// <summary>
/// Create user
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  UserResource: public restbed::Resource
{
public:
    UserResource(const std::string& context = "/v2");
    virtual ~UserResource();

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::shared_ptr<User> const & user)> handler_POST_func =
            [](std::shared_ptr<User> const &) -> int
                { throw UserApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::shared_ptr<User> const & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserApiException(const UserApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of users with given input array
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  UserCreateWithArrayResource: public restbed::Resource
{
public:
    UserCreateWithArrayResource(const std::string& context = "/v2");
    virtual ~UserCreateWithArrayResource();

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::vector<std::shared_ptr<User>> const & user)> handler_POST_func =
            [](std::vector<std::shared_ptr<User>> const &) -> int
                { throw UserApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::vector<std::shared_ptr<User>> const & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserApiException(const UserApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates list of users with given input array
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  UserCreateWithListResource: public restbed::Resource
{
public:
    UserCreateWithListResource(const std::string& context = "/v2");
    virtual ~UserCreateWithListResource();

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::vector<std::shared_ptr<User>> const & user)> handler_POST_func =
            [](std::vector<std::shared_ptr<User>> const &) -> int
                { throw UserApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::vector<std::shared_ptr<User>> const & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserApiException(const UserApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete user
/// </summary>
/// <remarks>
/// This can only be done by the logged in user.
/// </remarks>
class  UserUsernameResource: public restbed::Resource
{
public:
    UserUsernameResource(const std::string& context = "/v2");
    virtual ~UserUsernameResource();

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string const & username)> handler_DELETE_func =
            [](std::string const &) -> int
                { throw UserApiException(501, "Not implemented"); };

    std::function<std::pair<int, std::shared_ptr<User>>(
        std::string const & username)> handler_GET_func =
            [](std::string const &) -> std::pair<int, std::shared_ptr<User>>
                { throw UserApiException(501, "Not implemented"); };

    std::function<int(
        std::string const & username, std::shared_ptr<User> const & user)> handler_PUT_func =
            [](std::string const &, std::shared_ptr<User> const &) -> int
                { throw UserApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & username);

    virtual std::pair<int, std::shared_ptr<User>> handler_GET(
        std::string const & username);
    virtual int handler_PUT(
        std::string const & username, std::shared_ptr<User> const & user);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserApiException(const UserApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Logs user into the system
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  UserLoginResource: public restbed::Resource
{
public:
    UserLoginResource(const std::string& context = "/v2");
    virtual ~UserLoginResource();

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string const & username, std::string const & password)> handler_GET_func =
            [](std::string const &, std::string const &) -> std::pair<int, std::string>
                { throw UserApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & username, std::string const & password);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserApiException(const UserApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Logs out current logged in user session
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  UserLogoutResource: public restbed::Resource
{
public:
    UserLogoutResource(const std::string& context = "/v2");
    virtual ~UserLogoutResource();

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        )> handler_GET_func =
            []() -> int
                { throw UserApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserApiException(const UserApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace UserApiResources */

using UserApiUserResource [[deprecated]] = UserApiResources::UserResource;
using UserApiUserCreateWithArrayResource [[deprecated]] = UserApiResources::UserCreateWithArrayResource;
using UserApiUserCreateWithListResource [[deprecated]] = UserApiResources::UserCreateWithListResource;
using UserApiUserUsernameResource [[deprecated]] = UserApiResources::UserUsernameResource;
using UserApiUserLoginResource [[deprecated]] = UserApiResources::UserLoginResource;
using UserApiUserLogoutResource [[deprecated]] = UserApiResources::UserLogoutResource;

//
// The restbed service to actually implement the REST server
//
class  UserApi
{
public:
    explicit UserApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~UserApi();

    std::shared_ptr<UserApiResources::UserResource> getUserResource();
    std::shared_ptr<UserApiResources::UserCreateWithArrayResource> getUserCreateWithArrayResource();
    std::shared_ptr<UserApiResources::UserCreateWithListResource> getUserCreateWithListResource();
    std::shared_ptr<UserApiResources::UserUsernameResource> getUserUsernameResource();
    std::shared_ptr<UserApiResources::UserLoginResource> getUserLoginResource();
    std::shared_ptr<UserApiResources::UserLogoutResource> getUserLogoutResource();

    void setResource(std::shared_ptr<UserApiResources::UserResource> resource);
    void setResource(std::shared_ptr<UserApiResources::UserCreateWithArrayResource> resource);
    void setResource(std::shared_ptr<UserApiResources::UserCreateWithListResource> resource);
    void setResource(std::shared_ptr<UserApiResources::UserUsernameResource> resource);
    void setResource(std::shared_ptr<UserApiResources::UserLoginResource> resource);
    void setResource(std::shared_ptr<UserApiResources::UserLogoutResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setUserApiUserResource(std::shared_ptr<UserApiResources::UserResource> spUserApiUserResource);
    [[deprecated("use setResource()")]]
    virtual void setUserApiUserCreateWithArrayResource(std::shared_ptr<UserApiResources::UserCreateWithArrayResource> spUserApiUserCreateWithArrayResource);
    [[deprecated("use setResource()")]]
    virtual void setUserApiUserCreateWithListResource(std::shared_ptr<UserApiResources::UserCreateWithListResource> spUserApiUserCreateWithListResource);
    [[deprecated("use setResource()")]]
    virtual void setUserApiUserUsernameResource(std::shared_ptr<UserApiResources::UserUsernameResource> spUserApiUserUsernameResource);
    [[deprecated("use setResource()")]]
    virtual void setUserApiUserLoginResource(std::shared_ptr<UserApiResources::UserLoginResource> spUserApiUserLoginResource);
    [[deprecated("use setResource()")]]
    virtual void setUserApiUserLogoutResource(std::shared_ptr<UserApiResources::UserLogoutResource> spUserApiUserLogoutResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<UserApiResources::UserResource> m_spUserResource;
	std::shared_ptr<UserApiResources::UserCreateWithArrayResource> m_spUserCreateWithArrayResource;
	std::shared_ptr<UserApiResources::UserCreateWithListResource> m_spUserCreateWithListResource;
	std::shared_ptr<UserApiResources::UserUsernameResource> m_spUserUsernameResource;
	std::shared_ptr<UserApiResources::UserLoginResource> m_spUserLoginResource;
	std::shared_ptr<UserApiResources::UserLogoutResource> m_spUserLogoutResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* UserApi_H_ */

