/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Enum_Test.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

namespace {
template <class T>
void propertyTreeToMap(const std::string& propertyName, boost::property_tree::ptree const& pt, std::map<std::string, T> &map) {
    for (const auto &childTree: pt.get_child(propertyName)) {
        map.emplace(childTree.first, childTree.second.get_value<T>());
    }
}

template <class T>
void propertyTreeToMap(const std::string& propertyName, boost::property_tree::ptree const &pt, std::map<std::string, std::map<std::string, T>> & map ) {
    for (const auto &childTree: pt.get_child(propertyName)) {
        propertyTreeToMap(childTree.first, childTree.second, map);
    }
}

template <class T>
void propertyTreeToModelMap(const std::string& propertyName, boost::property_tree::ptree const& pt, std::map<std::string, T> &map) {
    for (const auto &childTree: pt.get_child(propertyName)) {
        T tmp;
        tmp->fromPropertyTree(childTree.second);
        map.emplace(childTree.first, tmp);
    }
}

template <class T>
void propertyTreeToModelMap(const std::string& propertyName, boost::property_tree::ptree const &pt, std::map<std::string, std::map<std::string, T>> & map ) {
    for (const auto &childTree: pt.get_child(propertyName)) {
       propertyTreeToMap(childTree.first, childTree.second, map);
    }
}

template <class T>
void mapToPropertyTree(const std::map<std::string, T> & map, boost::property_tree::ptree &pt) {
    for (const auto &childEntry : map) {
        pt.push_back(boost::property_tree::ptree::value_type(childEntry.first, childEntry.second));
    }
}

template <class T>
void mapToPropertyTree(const std::map<std::string, std::map<std::string, T>> & map, boost::property_tree::ptree &pt) {
    for (const auto &childEntry : map) {
        boost::property_tree::ptree child_node;
        mapToPropertyTree(childEntry.second, child_node);
        pt.push_back(boost::property_tree::ptree::value_type(childEntry.first, child_node));
    }
}
}


Enum_Test::Enum_Test(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Enum_Test::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Enum_Test::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Enum_Test::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Enum_Test::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Enum_Test::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Enum_Test::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Enum_Test::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("enum_string", m_Enum_string);
	pt.put("enum_string_required", m_Enum_string_required);
	pt.put("enum_integer", m_Enum_integer);
	pt.put("enum_number", m_Enum_number);
	return pt;
}

void Enum_Test::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	setEnumString(pt.get("enum_string", ""));
	setEnumStringRequired(pt.get("enum_string_required", ""));
	setEnumInteger(pt.get("enum_integer", 0));
	setEnumNumber(pt.get("enum_number", 0.0));
}

std::string Enum_Test::getEnumString() const
{
    return m_Enum_string;
}

void Enum_Test::setEnumString(std::string value)
{
	if (std::find(m_Enum_stringEnum.begin(), m_Enum_stringEnum.end(), value) != m_Enum_stringEnum.end()) {
		m_Enum_string = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}
std::string Enum_Test::getEnumStringRequired() const
{
    return m_Enum_string_required;
}

void Enum_Test::setEnumStringRequired(std::string value)
{
	if (std::find(m_Enum_string_requiredEnum.begin(), m_Enum_string_requiredEnum.end(), value) != m_Enum_string_requiredEnum.end()) {
		m_Enum_string_required = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}
int32_t Enum_Test::getEnumInteger() const
{
    return m_Enum_integer;
}

void Enum_Test::setEnumInteger(int32_t value)
{
	if (std::find(m_Enum_integerEnum.begin(), m_Enum_integerEnum.end(), value) != m_Enum_integerEnum.end()) {
		m_Enum_integer = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}
double Enum_Test::getEnumNumber() const
{
    return m_Enum_number;
}

void Enum_Test::setEnumNumber(double value)
{
	if (std::find(m_Enum_numberEnum.begin(), m_Enum_numberEnum.end(), value) != m_Enum_numberEnum.end()) {
		m_Enum_number = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}
std::shared_ptr<OuterEnum> Enum_Test::getOuterEnum() const
{
    return m_OuterEnum;
}

void Enum_Test::setOuterEnum(std::shared_ptr<OuterEnum> value)
{
	m_OuterEnum = value;
}
std::shared_ptr<OuterEnumInteger> Enum_Test::getOuterEnumInteger() const
{
    return m_OuterEnumInteger;
}

void Enum_Test::setOuterEnumInteger(std::shared_ptr<OuterEnumInteger> value)
{
	m_OuterEnumInteger = value;
}
std::shared_ptr<OuterEnumDefaultValue> Enum_Test::getOuterEnumDefaultValue() const
{
    return m_OuterEnumDefaultValue;
}

void Enum_Test::setOuterEnumDefaultValue(std::shared_ptr<OuterEnumDefaultValue> value)
{
	m_OuterEnumDefaultValue = value;
}
std::shared_ptr<OuterEnumIntegerDefaultValue> Enum_Test::getOuterEnumIntegerDefaultValue() const
{
    return m_OuterEnumIntegerDefaultValue;
}

void Enum_Test::setOuterEnumIntegerDefaultValue(std::shared_ptr<OuterEnumIntegerDefaultValue> value)
{
	m_OuterEnumIntegerDefaultValue = value;
}

std::vector<Enum_Test> createEnum_TestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Enum_Test>();
    for (const auto& child: pt) {
        vec.emplace_back(Enum_Test(child.second));
    }

    return vec;
}

}
}
}
}

