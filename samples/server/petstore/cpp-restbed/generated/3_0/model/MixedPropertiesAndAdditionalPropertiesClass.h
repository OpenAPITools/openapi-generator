/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MixedPropertiesAndAdditionalPropertiesClass.h
 *
 * 
 */

#ifndef MixedPropertiesAndAdditionalPropertiesClass_H_
#define MixedPropertiesAndAdditionalPropertiesClass_H_



#include <string>
#include <map>
#include "Animal.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  MixedPropertiesAndAdditionalPropertiesClass 
{
public:
    MixedPropertiesAndAdditionalPropertiesClass() = default;
    explicit MixedPropertiesAndAdditionalPropertiesClass(boost::property_tree::ptree const& pt);
    virtual ~MixedPropertiesAndAdditionalPropertiesClass() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// MixedPropertiesAndAdditionalPropertiesClass members

    /// <summary>
    /// 
    /// </summary>
    std::string getUuid() const;
    void setUuid(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDateTime() const;
    void setDateTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, std::shared_ptr<Animal>> getMap() const;
    void setMap(std::map<std::string, std::shared_ptr<Animal>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Uuid = "";
    std::string m_DateTime = "";
    std::map<std::string, std::shared_ptr<Animal>> m_map;
};

std::vector<MixedPropertiesAndAdditionalPropertiesClass> createMixedPropertiesAndAdditionalPropertiesClassVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* MixedPropertiesAndAdditionalPropertiesClass_H_ */
