/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Enum_Test.h
 *
 * 
 */

#ifndef Enum_Test_H_
#define Enum_Test_H_



#include "OuterEnumIntegerDefaultValue.h"
#include "OuterEnumInteger.h"
#include "OuterEnum.h"
#include "OuterEnumDefaultValue.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Enum_Test 
{
public:
    Enum_Test() = default;
    explicit Enum_Test(boost::property_tree::ptree const& pt);
    virtual ~Enum_Test() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Enum_Test members

    /// <summary>
    /// 
    /// </summary>
    std::string getEnumString() const;
    void setEnumString(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getEnumStringRequired() const;
    void setEnumStringRequired(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEnumInteger() const;
    void setEnumInteger(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getEnumNumber() const;
    void setEnumNumber(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OuterEnum> getOuterEnum() const;
    void setOuterEnum(std::shared_ptr<OuterEnum> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OuterEnumInteger> getOuterEnumInteger() const;
    void setOuterEnumInteger(std::shared_ptr<OuterEnumInteger> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OuterEnumDefaultValue> getOuterEnumDefaultValue() const;
    void setOuterEnumDefaultValue(std::shared_ptr<OuterEnumDefaultValue> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OuterEnumIntegerDefaultValue> getOuterEnumIntegerDefaultValue() const;
    void setOuterEnumIntegerDefaultValue(std::shared_ptr<OuterEnumIntegerDefaultValue> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Enum_string = "";
    std::string m_Enum_string_required = "";
    int32_t m_Enum_integer = 0;
    double m_Enum_number = 0.0;
    std::shared_ptr<OuterEnum> m_OuterEnum = std::make_shared<OuterEnum>();
    std::shared_ptr<OuterEnumInteger> m_OuterEnumInteger = std::make_shared<OuterEnumInteger>();
    std::shared_ptr<OuterEnumDefaultValue> m_OuterEnumDefaultValue = std::make_shared<OuterEnumDefaultValue>();
    std::shared_ptr<OuterEnumIntegerDefaultValue> m_OuterEnumIntegerDefaultValue = std::make_shared<OuterEnumIntegerDefaultValue>();
    const std::array<std::string, 3> m_Enum_stringEnum = {
        "UPPER", "lower", ""
    };

    const std::array<std::string, 3> m_Enum_string_requiredEnum = {
        "UPPER", "lower", ""
    };

    const std::array<int32_t, 2> m_Enum_integerEnum = {
        1, -1
    };

    const std::array<double, 2> m_Enum_numberEnum = {
        1.1, -1.2
    };

};

std::vector<Enum_Test> createEnum_TestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* Enum_Test_H_ */
