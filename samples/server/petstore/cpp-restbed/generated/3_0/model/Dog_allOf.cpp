/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Dog_allOf.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

namespace {
template <class T>
void propertyTreeToMap(const std::string& propertyName, boost::property_tree::ptree const& pt, std::map<std::string, T> &map) {
    for (const auto &childTree: pt.get_child(propertyName)) {
        map.emplace(childTree.first, childTree.second.get_value<T>());
    }
}

template <class T>
void propertyTreeToMap(const std::string& propertyName, boost::property_tree::ptree const &pt, std::map<std::string, std::map<std::string, T>> & map ) {
    for (const auto &childTree: pt.get_child(propertyName)) {
        propertyTreeToMap(childTree.first, childTree.second, map);
    }
}

template <class T>
void propertyTreeToModelMap(const std::string& propertyName, boost::property_tree::ptree const& pt, std::map<std::string, T> &map) {
    for (const auto &childTree: pt.get_child(propertyName)) {
        T tmp;
        tmp->fromPropertyTree(childTree.second);
        map.emplace(childTree.first, tmp);
    }
}

template <class T>
void propertyTreeToModelMap(const std::string& propertyName, boost::property_tree::ptree const &pt, std::map<std::string, std::map<std::string, T>> & map ) {
    for (const auto &childTree: pt.get_child(propertyName)) {
       propertyTreeToMap(childTree.first, childTree.second, map);
    }
}

template <class T>
void mapToPropertyTree(const std::map<std::string, T> & map, boost::property_tree::ptree &pt) {
    for (const auto &childEntry : map) {
        pt.push_back(boost::property_tree::ptree::value_type(childEntry.first, childEntry.second));
    }
}

template <class T>
void mapToPropertyTree(const std::map<std::string, std::map<std::string, T>> & map, boost::property_tree::ptree &pt) {
    for (const auto &childEntry : map) {
        boost::property_tree::ptree child_node;
        mapToPropertyTree(childEntry.second, child_node);
        pt.push_back(boost::property_tree::ptree::value_type(childEntry.first, child_node));
    }
}
}


Dog_allOf::Dog_allOf(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Dog_allOf::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Dog_allOf::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Dog_allOf::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Dog_allOf::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Dog_allOf::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Dog_allOf::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Dog_allOf::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("breed", m_Breed);
	return pt;
}

void Dog_allOf::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Breed = pt.get("breed", "");
}

std::string Dog_allOf::getBreed() const
{
    return m_Breed;
}

void Dog_allOf::setBreed(std::string value)
{
	m_Breed = value;
}

std::vector<Dog_allOf> createDog_allOfVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Dog_allOf>();
    for (const auto& child: pt) {
        vec.emplace_back(Dog_allOf(child.second));
    }

    return vec;
}

}
}
}
}

