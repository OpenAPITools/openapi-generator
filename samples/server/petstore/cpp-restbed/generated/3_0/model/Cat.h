/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator unset.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cat.h
 *
 * 
 */

#ifndef Cat_H_
#define Cat_H_



#include <string>
#include "Animal.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "Animal.h"
#include "Cat_allOf.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Cat : public Animal, public Cat_allOf
{
public:
    Cat() = default;
    explicit Cat(boost::property_tree::ptree const& pt);
    virtual ~Cat() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Cat members

    /// <summary>
    /// 
    /// </summary>
    std::string getClassName() const;
    void setClassName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    bool isDeclawed() const;
    void setDeclawed(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_ClassName = "";
    std::string m_Color = "red";
    bool m_Declawed = false;
};

std::vector<Cat> createCatVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* Cat_H_ */
