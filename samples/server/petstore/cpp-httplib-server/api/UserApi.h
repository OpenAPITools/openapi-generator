/**
* This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#pragma once
#include <httplib.h>
#include <variant>
#include <optional>
#include "models/User.h"

namespace api {

class User {
public:
    User() = default;
    virtual ~User() = default;
    void registerRoutes(httplib::Server& svr);

    /**
     * @brief Response type for handlePostForUser.
     */
    using UserResponse = std::variant<
    struct UserRequestParams
    {
        std::optional<models::User> m_request;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForUser is a pure virtual function that must be implemented by derived classes to handle.
     * UserRequestParams - struct containing all the query parameters and headers and schemas as available.
     */
    virtual void handlePostForUser(const UserRequestParams& params)=0;


    /**
     * @brief Response type for handlePostForUserCreateWithArray.
     */
    using UserCreateWithArrayResponse = std::variant<
    struct UserCreateWithArrayRequestParams
    {
        std::optional<models::User> m_request;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForUserCreateWithArray is a pure virtual function that must be implemented by derived classes to handle.
     * UserCreateWithArrayRequestParams - struct containing all the query parameters and headers and schemas as available.
     */
    virtual void handlePostForUserCreateWithArray(const UserCreateWithArrayRequestParams& params)=0;


    /**
     * @brief Response type for handlePostForUserCreateWithList.
     */
    using UserCreateWithListResponse = std::variant<
    struct UserCreateWithListRequestParams
    {
        std::optional<models::User> m_request;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForUserCreateWithList is a pure virtual function that must be implemented by derived classes to handle.
     * UserCreateWithListRequestParams - struct containing all the query parameters and headers and schemas as available.
     */
    virtual void handlePostForUserCreateWithList(const UserCreateWithListRequestParams& params)=0;


    /**
     * @brief Response type for handleDeleteForUser{username}.
     */
    using User{username}Response = std::variant<
    /**
     * @brief Handler function for processing API requests.
     *
     * handleDeleteForUser{username} is a pure virtual function that must be implemented by derived classes to handle.
     */
    virtual void handleDeleteForUser{username}()=0;


    /**
     * @brief Response type for handleGetForUser{username}.
     */
    using User{username}Response = std::variant<
                        models::User>;//success type
    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForUser{username} is a pure virtual function that must be implemented by derived classes to handle.
     * @return User{username}Response The response type returned by the handler.
     */
    virtual User{username}Response handleGetForUser{username}()=0;


    /**
     * @brief Response type for handleGetForUserLogin.
     */
    using UserLoginResponse = std::variant<
                        std::string>;//success type
    struct UserLoginRequestParams
    {
        //Query Parameters
        std::string m_username;
        std::string m_password;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForUserLogin is a pure virtual function that must be implemented by derived classes to handle.
     * UserLoginRequestParams - struct containing all the query parameters and headers and schemas as available.
     * @return UserLoginResponse The response type returned by the handler.
     */
    virtual UserLoginResponse handleGetForUserLogin(const UserLoginRequestParams& params)=0;


    /**
     * @brief Response type for handleGetForUserLogout.
     */
    using UserLogoutResponse = std::variant<
    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForUserLogout is a pure virtual function that must be implemented by derived classes to handle.
     */
    virtual void handleGetForUserLogout()=0;


    /**
     * @brief Response type for handlePutForUser{username}.
     */
    using User{username}Response = std::variant<
    struct User{username}RequestParams
    {
        std::optional<models::User> m_request;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePutForUser{username} is a pure virtual function that must be implemented by derived classes to handle.
     * User{username}RequestParams - struct containing all the query parameters and headers and schemas as available.
     */
    virtual void handlePutForUser{username}(const User{username}RequestParams& params)=0;

private:
    // --- Helper function declarations ---
    static UserRequestParams parseUserParams(const httplib::Request& req);
    static UserCreateWithArrayRequestParams parseUserCreateWithArrayParams(const httplib::Request& req);
    static UserCreateWithListRequestParams parseUserCreateWithListParams(const httplib::Request& req);
    static void handleUser{username}Response(const User{username}Response& result, httplib::Response& res);
    static UserLoginRequestParams parseUserLoginParams(const httplib::Request& req);
    static void handleUserLoginResponse(const UserLoginResponse& result, httplib::Response& res);
    static User{username}RequestParams parseUser{username}Params(const httplib::Request& req);
};

} // namespace api