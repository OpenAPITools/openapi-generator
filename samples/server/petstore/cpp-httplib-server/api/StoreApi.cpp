/**
* This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "StoreApi.h"

constexpr int HTTP_RESPONSE_CODE_INT = 200;
constexpr int HTTP_RESPONSE_CODE_ORDER = 200;


namespace api {
// --- Helper function definitions ---
void Store::handleStoreInventoryResponse(const StoreInventoryResponse& result, httplib::Response& res) {
    std::visit([&](const auto& value) {
        using T = std::decay_t<decltype(value)>;
        //Success types
        if constexpr (std::is_same_v<T, int>) {
            res.status = HTTP_RESPONSE_CODE_INT;
            res.set_content(value.toJson(value).dump(), "application/json");
        }
        

    }, result);
}
void Store::handleStoreOrder{orderId}Response(const StoreOrder{orderId}Response& result, httplib::Response& res) {
    std::visit([&](const auto& value) {
        using T = std::decay_t<decltype(value)>;
        //Success types
        if constexpr (std::is_same_v<T, models::Order>) {
            res.status = HTTP_RESPONSE_CODE_ORDER;
            res.set_content(value.toJson(value).dump(), "application/json");
        }
        

    }, result);
}
Store::StoreOrderRequestParams Store::parseStoreOrderParams(const httplib::Request& req) {
    Store::StoreOrderRequestParams params;
    params.m_request = models::Order::fromJson(nlohmann::json::parse(req.body));
    return params;
}
void Store::handleStoreOrderResponse(const StoreOrderResponse& result, httplib::Response& res) {
    std::visit([&](const auto& value) {
        using T = std::decay_t<decltype(value)>;
        //Success types
        if constexpr (std::is_same_v<T, models::Order>) {
            res.status = HTTP_RESPONSE_CODE_ORDER;
            res.set_content(value.toJson(value).dump(), "application/json");
        }
        

    }, result);
}

void Store::registerRoutes(httplib::Server& svr) {
    svr.Delete("/store/order/{orderId}", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto result = handleDeleteForStoreOrder{orderId}();
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Get("/store/inventory", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto result = handleGetForStoreInventory();
            handleStoreInventoryResponse(result, res);
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Get("/store/order/{orderId}", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto result = handleGetForStoreOrder{orderId}();
            handleStoreOrder{orderId}Response(result, res);
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Post("/store/order", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto params = parseStoreOrderParams(req);
            auto result = handlePostForStoreOrder(params);
            handleStoreOrderResponse(result, res);
        }catch (const nlohmann::json::parse_error& e) {
            nlohmann::json errorJson = { {"message", "Invalid JSON: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
}

} // namespace api