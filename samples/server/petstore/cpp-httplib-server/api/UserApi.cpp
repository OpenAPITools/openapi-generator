/**
* This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "UserApi.h"

constexpr int HTTP_RESPONSE_CODE_USER = 200;
constexpr int HTTP_RESPONSE_CODE_STD_STRING = 200;


namespace api {
// --- Helper function definitions ---
User::UserRequestParams User::parseUserParams(const httplib::Request& req) {
    User::UserRequestParams params;
    params.m_request = models::User::fromJson(nlohmann::json::parse(req.body));
    return params;
}
User::UserCreateWithArrayRequestParams User::parseUserCreateWithArrayParams(const httplib::Request& req) {
    User::UserCreateWithArrayRequestParams params;
    params.m_request = models::User::fromJson(nlohmann::json::parse(req.body));
    return params;
}
User::UserCreateWithListRequestParams User::parseUserCreateWithListParams(const httplib::Request& req) {
    User::UserCreateWithListRequestParams params;
    params.m_request = models::User::fromJson(nlohmann::json::parse(req.body));
    return params;
}
void User::handleUser{username}Response(const User{username}Response& result, httplib::Response& res) {
    std::visit([&](const auto& value) {
        using T = std::decay_t<decltype(value)>;
        //Success types
        if constexpr (std::is_same_v<T, models::User>) {
            res.status = HTTP_RESPONSE_CODE_USER;
            res.set_content(value.toJson(value).dump(), "application/json");
        }
        

    }, result);
}
User::UserLoginRequestParams User::parseUserLoginParams(const httplib::Request& req) {
    User::UserLoginRequestParams params;
    params.m_username = req.get_param_value("username");
    params.m_password = req.get_param_value("password");
    return params;
}
void User::handleUserLoginResponse(const UserLoginResponse& result, httplib::Response& res) {
    std::visit([&](const auto& value) {
        using T = std::decay_t<decltype(value)>;
        //Success types
        if constexpr (std::is_same_v<T, std::string>) {
            res.status = HTTP_RESPONSE_CODE_STD_STRING;
            res.set_content(value.toJson(value).dump(), "application/json");
        }
        

    }, result);
}
User::User{username}RequestParams User::parseUser{username}Params(const httplib::Request& req) {
    User::User{username}RequestParams params;
    params.m_request = models::User::fromJson(nlohmann::json::parse(req.body));
    return params;
}

void User::registerRoutes(httplib::Server& svr) {
    svr.Post("/user", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto params = parseUserParams(req);
            auto result = handlePostForUser(params);
        }catch (const nlohmann::json::parse_error& e) {
            nlohmann::json errorJson = { {"message", "Invalid JSON: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Post("/user/createWithArray", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto params = parseUserCreateWithArrayParams(req);
            auto result = handlePostForUserCreateWithArray(params);
        }catch (const nlohmann::json::parse_error& e) {
            nlohmann::json errorJson = { {"message", "Invalid JSON: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Post("/user/createWithList", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto params = parseUserCreateWithListParams(req);
            auto result = handlePostForUserCreateWithList(params);
        }catch (const nlohmann::json::parse_error& e) {
            nlohmann::json errorJson = { {"message", "Invalid JSON: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Delete("/user/{username}", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto result = handleDeleteForUser{username}();
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Get("/user/{username}", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto result = handleGetForUser{username}();
            handleUser{username}Response(result, res);
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Get("/user/login", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto params = parseUserLoginParams(req);
            auto result = handleGetForUserLogin(params);
            handleUserLoginResponse(result, res);
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Get("/user/logout", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto result = handleGetForUserLogout();
        }catch (const std::exception& e) {
            nlohmann::json errorJson = { {"message", "Internal error: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
    svr.Put("/user/{username}", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        try {
            auto params = parseUser{username}Params(req);
            auto result = handlePutForUser{username}(params);
        }catch (const nlohmann::json::parse_error& e) {
            nlohmann::json errorJson = { {"message", "Invalid JSON: " + std::string(e.what())} };
            res.set_content(errorJson.dump(), "application/json");
        }
    });
}

} // namespace api