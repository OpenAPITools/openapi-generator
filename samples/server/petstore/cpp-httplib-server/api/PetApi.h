/**
* This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#pragma once
#include <httplib.h>
#include <variant>
#include <optional>
#include "models/Pet.h"
#include "models/PetError.h"
#include "models/ApiResponse.h"

namespace api {

class Pet {
public:
    Pet() = default;
    virtual ~Pet() = default;
    void registerRoutes(httplib::Server& svr);

    /**
     * @brief Response type for handlePostForPet.
     */
    using PetResponse = std::variant<
                        models::Pet>;//success type
    struct PetRequestParams
    {
        std::optional<models::Pet> m_request;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForPet is a pure virtual function that must be implemented by derived classes to handle.
     * PetRequestParams - struct containing all the query parameters and headers and schemas as available.
     * @return PetResponse The response type returned by the handler.
     */
    virtual PetResponse handlePostForPet(const PetRequestParams& params)=0;


    /**
     * @brief Response type for handleDeleteForPet{petId}.
     */
    using Pet{petId}Response = std::variant<
    struct Pet{petId}RequestParams
    {
        //Header Parameters
        std::string m_apiKey;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handleDeleteForPet{petId} is a pure virtual function that must be implemented by derived classes to handle.
     * Pet{petId}RequestParams - struct containing all the query parameters and headers and schemas as available.
     */
    virtual void handleDeleteForPet{petId}(const Pet{petId}RequestParams& params)=0;


    /**
     * @brief Response type for handleGetForPetFindByStatus.
     */
    using PetFindByStatusResponse = std::variant<
                        models::Pet>;//success type
    struct PetFindByStatusRequestParams
    {
        //Query Parameters
        std::vector&lt;std::string&gt; m_status;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForPetFindByStatus is a pure virtual function that must be implemented by derived classes to handle.
     * PetFindByStatusRequestParams - struct containing all the query parameters and headers and schemas as available.
     * @return PetFindByStatusResponse The response type returned by the handler.
     */
    virtual PetFindByStatusResponse handleGetForPetFindByStatus(const PetFindByStatusRequestParams& params)=0;


    /**
     * @brief Response type for handleGetForPetFindByTags.
     */
    using PetFindByTagsResponse = std::variant<
                        models::Pet,//success type
                        models::PetError>;// error types
    struct PetFindByTagsRequestParams
    {
        //Query Parameters
        std::vector&lt;std::string&gt; m_tags;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForPetFindByTags is a pure virtual function that must be implemented by derived classes to handle.
     * PetFindByTagsRequestParams - struct containing all the query parameters and headers and schemas as available.
     * @return PetFindByTagsResponse The response type returned by the handler.
     */
    virtual PetFindByTagsResponse handleGetForPetFindByTags(const PetFindByTagsRequestParams& params)=0;


    /**
     * @brief Response type for handleGetForPet{petId}.
     */
    using Pet{petId}Response = std::variant<
                        models::Pet>;//success type
    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForPet{petId} is a pure virtual function that must be implemented by derived classes to handle.
     * @return Pet{petId}Response The response type returned by the handler.
     */
    virtual Pet{petId}Response handleGetForPet{petId}()=0;


    /**
     * @brief Response type for handlePutForPet.
     */
    using PetResponse = std::variant<
                        models::Pet>;//success type
    struct PetRequestParams
    {
        std::optional<models::Pet> m_request;
    };
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePutForPet is a pure virtual function that must be implemented by derived classes to handle.
     * PetRequestParams - struct containing all the query parameters and headers and schemas as available.
     * @return PetResponse The response type returned by the handler.
     */
    virtual PetResponse handlePutForPet(const PetRequestParams& params)=0;


    /**
     * @brief Response type for handlePostForPet{petId}.
     */
    using Pet{petId}Response = std::variant<
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForPet{petId} is a pure virtual function that must be implemented by derived classes to handle.
     */
    virtual void handlePostForPet{petId}()=0;


    /**
     * @brief Response type for handlePostForPet{petId}UploadImage.
     */
    using Pet{petId}UploadImageResponse = std::variant<
                        models::ApiResponse>;//success type
    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForPet{petId}UploadImage is a pure virtual function that must be implemented by derived classes to handle.
     * @return Pet{petId}UploadImageResponse The response type returned by the handler.
     */
    virtual Pet{petId}UploadImageResponse handlePostForPet{petId}UploadImage()=0;

private:
    // --- Helper function declarations ---
    static PetRequestParams parsePetParams(const httplib::Request& req);
    static void handlePetResponse(const PetResponse& result, httplib::Response& res);
    static Pet{petId}RequestParams parsePet{petId}Params(const httplib::Request& req);
    static PetFindByStatusRequestParams parsePetFindByStatusParams(const httplib::Request& req);
    static void handlePetFindByStatusResponse(const PetFindByStatusResponse& result, httplib::Response& res);
    static PetFindByTagsRequestParams parsePetFindByTagsParams(const httplib::Request& req);
    static void handlePetFindByTagsResponse(const PetFindByTagsResponse& result, httplib::Response& res);
    static void handlePet{petId}Response(const Pet{petId}Response& result, httplib::Response& res);
    static PetRequestParams parsePetParams(const httplib::Request& req);
    static void handlePetResponse(const PetResponse& result, httplib::Response& res);
    static void handlePet{petId}UploadImageResponse(const Pet{petId}UploadImageResponse& result, httplib::Response& res);
};

} // namespace api