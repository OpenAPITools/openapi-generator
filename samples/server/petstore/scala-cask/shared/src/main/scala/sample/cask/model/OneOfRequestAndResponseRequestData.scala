/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package sample.cask.model
import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID
import scala.math.BigDecimal
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*


type OneOfRequestAndResponseRequestData = AllOfRequestData | ComplexRequestData

object OneOfRequestAndResponseRequestData {

  def validated(d8a : OneOfRequestAndResponseRequestData, failFast: Boolean) : Try[OneOfRequestAndResponseRequest] = {
    d8a match {
      case value : AllOfRequestData => value.validated(failFast)
      case value : ComplexRequestData => value.validated(failFast)
    }
  }

  def fromJsonString(jason : String) = fromJson {
    try {
      read[ujson.Value](jason)
    } catch {
      case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
    }
  }

  def fromJson(jason : ujson.Value) : OneOfRequestAndResponseRequestData = {
      val attempt =  Try(AllOfRequestData.fromJson(jason))  .orElse( Try(ComplexRequestData.fromJson(jason)) ) /* not first */ 
      attempt.get
  }
}
