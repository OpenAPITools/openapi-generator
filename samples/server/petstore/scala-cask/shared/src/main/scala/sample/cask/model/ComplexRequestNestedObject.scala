/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package sample.cask.model

import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*


        
case class ComplexRequestNestedObject(
        /* A field within a nested object */
    nestedField1: Option[String] = None ,
        /* Another field in a nested object */
    nestedField2: Option[Int] = None 


) {

def asJsonString: String = asData.asJsonString
def asJson: ujson.Value = asData.asJson

def asData : ComplexRequestNestedObjectData = {
ComplexRequestNestedObjectData(
    nestedField1 = nestedField1.getOrElse("") /*  1 */,
    nestedField2 = nestedField2.getOrElse(0) /*  1 */

)
}
}

object ComplexRequestNestedObject {
given RW[ComplexRequestNestedObject] = summon[RW[ujson.Value]].bimap[ComplexRequestNestedObject](_.asJson, json => read[ComplexRequestNestedObjectData](json).asModel)

enum Fields(val fieldName : String) extends Field(fieldName) {
    case nestedField1 extends Fields("nestedField1")
    case nestedField2 extends Fields("nestedField2")
}


}


