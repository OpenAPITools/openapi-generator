/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import org.openapitools.server.ApplicationAuthProviders
import org.openapitools.server.Paths
import org.openapitools.server.ApplicationExecutors
import org.openapitools.server.HTTP.client
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import org.openapitools.server.delete

import org.openapitools.server.models.User

fun Route.UserApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/user") {
        post {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    

    route("/user/createWithArray") {
        post {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    

    route("/user/createWithList") {
        post {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    

    delete<Paths.deleteUser> {  it: Paths.deleteUser ->
        call.respond(HttpStatusCode.NotImplemented)
    }
    

    get<Paths.getUserByName> {  it: Paths.getUserByName ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "firstName" : "firstName",
          "lastName" : "lastName",
          "password" : "password",
          "userStatus" : 6,
          "phone" : "phone",
          "id" : 0,
          "email" : "email",
          "username" : "username"
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    get<Paths.loginUser> {  it: Paths.loginUser ->
        call.respond(HttpStatusCode.NotImplemented)
    }
    

    get<Paths.logoutUser> {  it: Paths.logoutUser ->
        call.respond(HttpStatusCode.NotImplemented)
    }
    

    route("/user/{username}") {
        put {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    
}
