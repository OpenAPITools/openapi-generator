/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.virtualan.api;

import java.util.Map;
import org.openapitools.virtualan.model.Order;
import io.swagger.annotations.*;
import org.openapitools.virtualan.VirtualServiceUtil;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.openapitools.virtualan.model.MockRequest;
import org.openapitools.virtualan.model.MockResponse;
import org.openapitools.virtualan.model.MockServiceRequest;
import java.util.HashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Api(value = "store", description = "the store API")
public interface StoreApi {
	default String addQueryParamValue(Object value){
		return String.join(",", (java.util.List)value);
	}
    Logger log = LoggerFactory.getLogger(StoreApi.class);


	default Optional<VirtualServiceUtil> getVirtualServiceUtil() {
        return Optional.empty();
    }

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Delete purchase order by ID", nickname = "deleteOrder", notes = "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/store/order/{order_id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrder(@ApiParam(value = "ID of the order that needs to be deleted",required=true) @PathVariable("order_id") String orderId) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
		paramMap.put("order_id", String.valueOf(orderId));
		try {
			mockServiceRequest.setResource("store");
			mockServiceRequest.setOperationId("deleteOrder");
			mockServiceRequest.setParams(paramMap);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "deleteOrder", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for deleteOrder\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Returns pet inventories by status", nickname = "getInventory", notes = "Returns a map of status codes to quantities", response = Integer.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map") })
    @RequestMapping(value = "/store/inventory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Map<String, Integer>> getInventory() {
			return new ResponseEntity("{\"code\": \"CASE_NOT_HANDLED\", \"message\":\"Mock NOT SUPPORTED AT this time \"}", HttpStatus.INTERNAL_SERVER_ERROR);

    }


    @ApiOperation(value = "Find purchase order by ID", nickname = "getOrderById", notes = "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions", response = Order.class, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/store/order/{order_id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Order> getOrderById(@Min(1L) @Max(5L) @ApiParam(value = "ID of pet that needs to be fetched",required=true) @PathVariable("order_id") Long orderId) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
		paramMap.put("order_id", String.valueOf(orderId));
		try {
			mockServiceRequest.setResource("store");
			mockServiceRequest.setOperationId("getOrderById");
			mockServiceRequest.setParams(paramMap);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "getOrderById", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for getOrderById\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Place an order for a pet", nickname = "placeOrder", notes = "", response = Order.class, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid Order") })
    @RequestMapping(value = "/store/order",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Order> placeOrder(@ApiParam(value = "order placed for purchasing the pet" ,required=true )  @Valid @RequestBody Order order) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();

		try {
			mockServiceRequest.setResource("store");
			mockServiceRequest.setOperationId("placeOrder");
			mockServiceRequest.setParams(paramMap);
			mockServiceRequest.setInputObjectType(order.getClass());
			mockServiceRequest.setInputObject(order);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "placeOrder", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for placeOrder\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }

}
