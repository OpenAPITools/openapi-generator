/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.virtualan.api;

import java.util.List;
import org.openapitools.virtualan.model.User;
import io.swagger.annotations.*;
import org.openapitools.virtualan.VirtualServiceUtil;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.openapitools.virtualan.model.MockRequest;
import org.openapitools.virtualan.model.MockResponse;
import org.openapitools.virtualan.model.MockServiceRequest;
import java.util.HashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Api(value = "user", description = "the user API")
public interface UserApi {
	default String addQueryParamValue(Object value){
		return String.join(",", (java.util.List)value);
	}
    Logger log = LoggerFactory.getLogger(UserApi.class);


	default Optional<VirtualServiceUtil> getVirtualServiceUtil() {
        return Optional.empty();
    }

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Create user", nickname = "createUser", notes = "This can only be done by the logged in user.", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/user",
        method = RequestMethod.POST)
    default ResponseEntity<Void> createUser(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody User user) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();

		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("createUser");
			mockServiceRequest.setParams(paramMap);
			mockServiceRequest.setInputObjectType(user.getClass());
			mockServiceRequest.setInputObject(user);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "createUser", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for createUser\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Creates list of users with given input array", nickname = "createUsersWithArrayInput", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/user/createWithArray",
        method = RequestMethod.POST)
    default ResponseEntity<Void> createUsersWithArrayInput(@ApiParam(value = "List of user object" ,required=true )  @Valid @RequestBody List<User> user) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();

		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("createUsersWithArrayInput");
			mockServiceRequest.setParams(paramMap);
			mockServiceRequest.setInputObjectType(user.getClass());
			mockServiceRequest.setInputObject(user);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "createUsersWithArrayInput", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for createUsersWithArrayInput\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Creates list of users with given input array", nickname = "createUsersWithListInput", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/user/createWithList",
        method = RequestMethod.POST)
    default ResponseEntity<Void> createUsersWithListInput(@ApiParam(value = "List of user object" ,required=true )  @Valid @RequestBody List<User> user) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();

		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("createUsersWithListInput");
			mockServiceRequest.setParams(paramMap);
			mockServiceRequest.setInputObjectType(user.getClass());
			mockServiceRequest.setInputObject(user);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "createUsersWithListInput", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for createUsersWithListInput\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUser(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("username") String username) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
		paramMap.put("username", String.valueOf(username));
		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("deleteUser");
			mockServiceRequest.setParams(paramMap);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "deleteUser", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for deleteUser\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUserByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing.",required=true) @PathVariable("username") String username) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
		paramMap.put("username", String.valueOf(username));
		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("getUserByName");
			mockServiceRequest.setParams(paramMap);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "getUserByName", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for getUserByName\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Logs user into the system", nickname = "loginUser", notes = "", response = String.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid username/password supplied") })
    @RequestMapping(value = "/user/login",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> loginUser(@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "username", required = true) String username,@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
	if(username != null && username.getClass().toString().contains("List")){
		paramMap.put("username", addQueryParamValue(username));
	} else{
		paramMap.put("username", String.valueOf(username));
	}

	if(password != null && password.getClass().toString().contains("List")){
		paramMap.put("password", addQueryParamValue(password));
	} else{
		paramMap.put("password", String.valueOf(password));
	}

		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("loginUser");
			mockServiceRequest.setParams(paramMap);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "loginUser", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for loginUser\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }


    @ApiOperation(value = "Logs out current logged in user session", nickname = "logoutUser", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/user/logout",
        method = RequestMethod.GET)
    default ResponseEntity<Void> logoutUser() {
			return new ResponseEntity("{\"code\": \"CASE_NOT_HANDLED\", \"message\":\"Mock NOT SUPPORTED AT this time \"}", HttpStatus.INTERNAL_SERVER_ERROR);

    }


    @ApiOperation(value = "Updated user", nickname = "updateUser", notes = "This can only be done by the logged in user.", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateUser(@ApiParam(value = "name that need to be deleted",required=true) @PathVariable("username") String username,@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody User user) {
				Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
		paramMap.put("username", String.valueOf(username));

		try {
			mockServiceRequest.setResource("user");
			mockServiceRequest.setOperationId("updateUser");
			mockServiceRequest.setParams(paramMap);
			mockServiceRequest.setInputObjectType(user.getClass());
			mockServiceRequest.setInputObject(user);
			return getVirtualServiceUtil().get().returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e){
			log.error("Unable to load the mock Response for " + "updateUser", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for updateUser\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}

    }

}
