/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* UserApiImpl.h
*
* 
*/

#ifndef USER_API_IMPL_H_
#define USER_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>

#include <UserApi.h>

#include <pistache/optional.h>

#include "User.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class UserApiImpl : public org::openapitools::server::api::UserApi {
public:
    UserApiImpl(Pistache::Address addr);
    ~UserApiImpl() {}

    void create_user(const User &user, Pistache::Http::ResponseWriter &response);
    void create_users_with_array_input(const std::vector<User> &user, Pistache::Http::ResponseWriter &response);
    void create_users_with_list_input(const std::vector<User> &user, Pistache::Http::ResponseWriter &response);
    void delete_user(const std::string &username, Pistache::Http::ResponseWriter &response);
    void get_user_by_name(const std::string &username, Pistache::Http::ResponseWriter &response);
    void login_user(const Pistache::Optional<std::string> &username, const Pistache::Optional<std::string> &password, Pistache::Http::ResponseWriter &response);
    void logout_user(Pistache::Http::ResponseWriter &response);
    void update_user(const std::string &username, const User &user, Pistache::Http::ResponseWriter &response);

};

}
}
}
}



#endif