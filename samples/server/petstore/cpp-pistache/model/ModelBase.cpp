/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
#include "ModelBase.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ModelBase::ModelBase()
{
}
ModelBase::~ModelBase()
{
}

std::string ModelBase::toJson( std::string const& value )
{
    return value;
}

std::string ModelBase::toJson( std::time_t const& value )
{
    char buf[sizeof "2011-10-08T07:07:09Z"];
    strftime(buf, sizeof buf, "%FT%TZ", gmtime(&value));
    return buf;
}

int32_t ModelBase::toJson( int32_t const value )
{
    return value;
}

int64_t ModelBase::toJson( int64_t const value )
{
    return value;
}

double ModelBase::toJson( double const value )
{
    return value;
}

bool ModelBase::toJson( bool const value )
{
    return value;
}

nlohmann::json ModelBase::toJson(ModelBase const& content )
{
    return content.toJson();
}

std::string ModelBase::toStringValue(const std::string &value){
    return std::string(value);
}

std::string ModelBase::toStringValue(const int32_t &value){
    return std::to_string(value);
}

std::string ModelBase::toStringValue(const int64_t &value){
    return std::to_string(value);
}

std::string ModelBase::toStringValue(const bool &value){
    return value?std::string("true"):std::string("false");
}

std::string ModelBase::toStringValue(const float &value){
    return std::to_string(value);
}

std::string ModelBase::toStringValue(const double &value){
    return std::to_string(value);
}

bool ModelBase::fromStringValue(const std::string &inStr, std::string &value){
    value = std::string(inStr);
    return true;
}

bool ModelBase::fromStringValue(const std::string &inStr, int32_t &value){
    try {
        value = std::stoi( inStr );
    }
    catch (const std::invalid_argument) {
        return false;
    }
    return true;
}

bool ModelBase::fromStringValue(const std::string &inStr, int64_t &value){
    try {
        value = std::stol( inStr );
    }
    catch (const std::invalid_argument) {
        return false;
    }
    return true;
}

bool ModelBase::fromStringValue(const std::string &inStr, bool &value){
    inStr == "true"?value = true: value = false;
    return true;
}

bool ModelBase::fromStringValue(const std::string &inStr, float &value){
    try {
        value = std::stof( inStr );
    }
    catch (const std::invalid_argument) {
        return false;
    }
    return true;
}

bool ModelBase::fromStringValue(const std::string &inStr, double &value){
    try {
        value = std::stod( inStr );
    }
    catch (const std::invalid_argument) {
        return false;
    }
    return true;
}


}
}
}
}
