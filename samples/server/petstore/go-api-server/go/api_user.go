/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A UserApiController binds http requests to an api service and writes the service results to the http response
type UserApiController struct {
	service UserApiServicer
}

// NewUserApiController creates a default api controller
func NewUserApiController(s UserApiServicer) Router {
	return &UserApiController{ service: s }
}

// Routes returns all of the api route for the UserApiController
func (c *UserApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateUser",
			strings.ToUpper("Post"),
			"/v2/user",
			c.CreateUser,
		},
		{
			"CreateUsersWithArrayInput",
			strings.ToUpper("Post"),
			"/v2/user/createWithArray",
			c.CreateUsersWithArrayInput,
		},
		{
			"CreateUsersWithListInput",
			strings.ToUpper("Post"),
			"/v2/user/createWithList",
			c.CreateUsersWithListInput,
		},
		{
			"DeleteUser",
			strings.ToUpper("Delete"),
			"/v2/user/{username}",
			c.DeleteUser,
		},
		{
			"GetUserByName",
			strings.ToUpper("Get"),
			"/v2/user/{username}",
			c.GetUserByName,
		},
		{
			"LoginUser",
			strings.ToUpper("Get"),
			"/v2/user/login",
			c.LoginUser,
		},
		{
			"LogoutUser",
			strings.ToUpper("Get"),
			"/v2/user/logout",
			c.LogoutUser,
		},
		{
			"UpdateUser",
			strings.ToUpper("Put"),
			"/v2/user/{username}",
			c.UpdateUser,
		},
	}
}

// CreateUser - Create user
func (c *UserApiController) CreateUser(w http.ResponseWriter, r *http.Request) { 
	body := &User{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, status, err := c.service.CreateUser(r.Context(), *body)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// CreateUsersWithArrayInput - Creates list of users with given input array
func (c *UserApiController) CreateUsersWithArrayInput(w http.ResponseWriter, r *http.Request) { 
	body := &[]User{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, status, err := c.service.CreateUsersWithArrayInput(r.Context(), *body)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// CreateUsersWithListInput - Creates list of users with given input array
func (c *UserApiController) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) { 
	body := &[]User{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, status, err := c.service.CreateUsersWithListInput(r.Context(), *body)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// DeleteUser - Delete user
func (c *UserApiController) DeleteUser(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	username := params["username"]
	result, status, err := c.service.DeleteUser(r.Context(), username)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// GetUserByName - Get user by user name
func (c *UserApiController) GetUserByName(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	username := params["username"]
	result, status, err := c.service.GetUserByName(r.Context(), username)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// LoginUser - Logs user into the system
func (c *UserApiController) LoginUser(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	username := query.Get("username")
	password := query.Get("password")
	result, status, err := c.service.LoginUser(r.Context(), username, password)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// LogoutUser - Logs out current logged in user session
func (c *UserApiController) LogoutUser(w http.ResponseWriter, r *http.Request) { 
	result, status, err := c.service.LogoutUser(r.Context())
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}

// UpdateUser - Updated user
func (c *UserApiController) UpdateUser(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	username := params["username"]
	body := &User{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, status, err := c.service.UpdateUser(r.Context(), username, *body)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	if genericResponseHandler, ok := result.(GenericResponseHandler); ok {
		genericResponseHandler(w)
	} else {
		JSONResponseEncoder(result, &status, w)
	}
}
