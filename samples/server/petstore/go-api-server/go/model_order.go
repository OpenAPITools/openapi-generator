/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver


import (
	"time"
)


import "errors" // FIXME: why not in #imports
import "encoding/json" // FIXME: why not in #imports

var _ = errors.New("") // to enforce the use of errors
var _ = json.NewDecoder(nil) // to enforce the use of encoding/json


// Order - An order for a pets from the pet store
type Order struct {

	Id int64 `json:"id,omitempty"`

	PetId int64 `json:"petId,omitempty"`

	Quantity int32 `json:"quantity,omitempty"`

	ShipDate time.Time `json:"shipDate,omitempty"`

	// Order Status
	Status string `json:"status,omitempty"`

	Complete bool `json:"complete,omitempty"`
}

// UnmarshalJSON parse JSON while respecting the default values specified
func (o *Order) UnmarshalJSON(data []byte) error {
    type Alias Order // Avoid infinite recursion
    aux := Alias{
		Complete: false,
	}
    if err := json.Unmarshal(data, &aux); err != nil {
        return err
    }
    *o = Order(aux)
    return nil
}

// AssertOrderRequired checks if the required fields are not zero-ed
func AssertOrderRequired(obj Order) error {
	return nil
}

// AssertOrderConstraints checks if the values respects the defined constraints
func AssertOrderConstraints(obj Order) error {
	return nil
}

// AssertRecurseOrderRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Order (e.g. [][]Order), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseOrderRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aOrder, ok := obj.(Order)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertOrderRequired(aOrder)
	})
}
