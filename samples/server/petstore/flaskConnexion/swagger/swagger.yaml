---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net,\
    \ #swagger.  For this sample, you can use the api key \"special-key\" to test\
    \ the authorization filters"
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
schemes:
- "http"
paths:
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "controllers.default_controller.add_pet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: false
        schema:
          $ref: "#/definitions/Pet"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "controllers.default_controller.update_pet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: false
        schema:
          $ref: "#/definitions/Pet"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "controllers.default_controller.find_pets_by_status"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
        collectionFormat: "multi"
        default: "available"
        enum:
        - "available"
        - "pending"
        - "sold"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma seperated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "controllers.default_controller.find_pets_by_tags"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate\
        \ API error conditions"
      operationId: "controllers.default_controller.get_pet_by_id"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "controllers.default_controller.update_pet_with_form"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "controllers.default_controller.delete_pet"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        description: ""
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid pet value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "controllers.default_controller.upload_file"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        default:
          description: "successful operation"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet/{petId}?response=inline_arbitrary_object:
    get:
      tags:
      - "pet"
      summary: "Fake endpoint to test inline arbitrary object return by 'Find pet\
        \ by ID'"
      description: "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate\
        \ API error conditions"
      operationId: "controllers.default_controller.get_pet_by_id_in_object"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet/{petId}?testing_byte_array=true:
    get:
      tags:
      - "pet"
      summary: "Fake endpoint to test byte array return by 'Find pet by ID'"
      description: "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate\
        \ API error conditions"
      operationId: "controllers.default_controller.pet_pet_idtesting_byte_arraytrue_get"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            format: "binary"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /pet?testing_byte_array=true:
    post:
      tags:
      - "pet"
      summary: "Fake endpoint to test byte array in body parameter for adding a new\
        \ pet to the store"
      description: ""
      operationId: "controllers.default_controller.add_pet_using_byte_array"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object in the form of byte array"
        required: false
        schema:
          type: "string"
          format: "binary"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      x-tags:
      - tag: "pet"
  /store/findByStatus:
    get:
      tags:
      - "store"
      summary: "Finds orders by status"
      description: "A single status value can be provided as a string"
      operationId: "controllers.default_controller.find_orders_by_status"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status value that needs to be considered for query"
        required: false
        type: "string"
        default: "placed"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        400:
          description: "Invalid status value"
      security:
      - test_api_client_secret: []
        test_api_client_id: []
      x-tags:
      - tag: "store"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "controllers.default_controller.get_inventory"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
      x-tags:
      - tag: "store"
  /store/inventory?response=arbitrary_object:
    get:
      tags:
      - "store"
      summary: "Fake endpoint to test arbitrary object return by 'Get inventory'"
      description: "Returns an arbitrary object which is actually a map of status\
        \ codes to quantities"
      operationId: "controllers.default_controller.get_inventory_in_object"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - api_key: []
      x-tags:
      - tag: "store"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "controllers.default_controller.place_order"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: false
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
      security:
      - test_api_client_secret: []
        test_api_client_id: []
      x-tags:
      - tag: "store"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value <= 5 or > 10. Other\
        \ values will generated exceptions"
      operationId: "controllers.default_controller.get_order_by_id"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      security:
      - test_api_key_header: []
      - test_api_key_query: []
      x-tags:
      - tag: "store"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with value < 1000. Anything\
        \ above 1000 or nonintegers will generate API errors"
      operationId: "controllers.default_controller.delete_order"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      x-tags:
      - tag: "store"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "controllers.default_controller.create_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-tags:
      - tag: "user"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "controllers.default_controller.create_users_with_array_input"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-tags:
      - tag: "user"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "controllers.default_controller.create_users_with_list_input"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-tags:
      - tag: "user"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "controllers.default_controller.login_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: false
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-tags:
      - tag: "user"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "controllers.default_controller.logout_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-tags:
      - tag: "user"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "controllers.default_controller.get_user_by_name"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
          examples:
            application/json:
              id: 1
              username: "johnp"
              firstName: "John"
              lastName: "Public"
              email: "johnp@swagger.io"
              password: "-secret-"
              phone: "0123456789"
              userStatus: 0
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-tags:
      - tag: "user"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "controllers.default_controller.update_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be deleted"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-tags:
      - tag: "user"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "controllers.default_controller.delete_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - test_http_basic: []
      x-tags:
      - tag: "user"
securityDefinitions:
  test_api_key_header:
    type: "apiKey"
    name: "test_api_key_header"
    in: "header"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  test_http_basic:
    type: "basic"
  test_api_client_secret:
    type: "apiKey"
    name: "x-test_api_client_secret"
    in: "header"
  test_api_client_id:
    type: "apiKey"
    name: "x-test_api_client_id"
    in: "header"
  test_api_key_query:
    type: "apiKey"
    name: "test_api_key_query"
    in: "query"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/api/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
definitions:
  User:
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Category:
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Pet:
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  Tag:
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Order:
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
    xml:
      name: "Order"
  $special[model.name]:
    properties:
      $special[property.name]:
        type: "integer"
        format: "int64"
    xml:
      name: "$special[model.name]"
  Return:
    properties:
      return:
        type: "integer"
        format: "int32"
    description: "Model for testing reserved words"
    xml:
      name: "Return"
  Name:
    required:
    - "name"
    properties:
      name:
        type: "integer"
        format: "int32"
      snake_case:
        type: "integer"
        format: "int32"
        readOnly: true
    description: "Model for testing model name same as property name"
    xml:
      name: "Name"
  200_response:
    properties:
      name:
        type: "integer"
        format: "int32"
    description: "Model for testing model name starting with number"
    xml:
      name: "Name"
  Dog:
    allOf:
    - $ref: "#/definitions/Animal"
    - type: "object"
      properties:
        breed:
          type: "string"
  Cat:
    allOf:
    - $ref: "#/definitions/Animal"
    - type: "object"
      properties:
        declawed:
          type: "boolean"
  Animal:
    type: "object"
    required:
    - "className"
    discriminator: "className"
    properties:
      className:
        type: "string"
  format_test:
    type: "object"
    required:
    - "number"
    properties:
      integer:
        type: "integer"
      int32:
        type: "integer"
        format: "int32"
      int64:
        type: "integer"
        format: "int64"
      number:
        type: "number"
      float:
        type: "number"
        format: "float"
      double:
        type: "number"
        format: "double"
      string:
        type: "string"
      byte:
        type: "string"
        format: "byte"
      binary:
        type: "string"
        format: "binary"
      date:
        type: "string"
        format: "date"
      dateTime:
        type: "string"
        format: "date-time"
      password:
        type: "string"
        format: "password"
  inline_response_200:
    required:
    - "id"
    properties:
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      id:
        type: "integer"
        format: "int64"
      category:
        type: "object"
        properties: {}
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        items:
          type: "string"
