/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver

import (
	"net/http"
	"os"
	"os"
)


// AnotherFakeAPIRouter defines the required methods for binding the api requests to a responses for the AnotherFakeAPI
// The AnotherFakeAPIRouter implementation should parse necessary information from the http request, 
// pass the data to a AnotherFakeAPIServicer to perform the required actions, then write the service results to the http response.
type AnotherFakeAPIRouter interface { 
	Call123TestSpecialTags(http.ResponseWriter, *http.Request)
}
// DefaultAPIRouter defines the required methods for binding the api requests to a responses for the DefaultAPI
// The DefaultAPIRouter implementation should parse necessary information from the http request, 
// pass the data to a DefaultAPIServicer to perform the required actions, then write the service results to the http response.
type DefaultAPIRouter interface { 
	FooGet(http.ResponseWriter, *http.Request)
}
// FakeAPIRouter defines the required methods for binding the api requests to a responses for the FakeAPI
// The FakeAPIRouter implementation should parse necessary information from the http request, 
// pass the data to a FakeAPIServicer to perform the required actions, then write the service results to the http response.
type FakeAPIRouter interface { 
	FakeHealthGet(http.ResponseWriter, *http.Request)
	FakeOuterBooleanSerialize(http.ResponseWriter, *http.Request)
	FakeOuterCompositeSerialize(http.ResponseWriter, *http.Request)
	FakeOuterNumberSerialize(http.ResponseWriter, *http.Request)
	FakeOuterStringSerialize(http.ResponseWriter, *http.Request)
	TestBodyWithFileSchema(http.ResponseWriter, *http.Request)
	TestBodyWithQueryParams(http.ResponseWriter, *http.Request)
	TestClientModel(http.ResponseWriter, *http.Request)
	TestEndpointParameters(http.ResponseWriter, *http.Request)
	TestEnumParameters(http.ResponseWriter, *http.Request)
	TestGroupParameters(http.ResponseWriter, *http.Request)
	TestInlineAdditionalProperties(http.ResponseWriter, *http.Request)
	TestJSONFormData(http.ResponseWriter, *http.Request)
	TestQueryParameterCollectionFormat(http.ResponseWriter, *http.Request)
}
// FakeClassnameTags123APIRouter defines the required methods for binding the api requests to a responses for the FakeClassnameTags123API
// The FakeClassnameTags123APIRouter implementation should parse necessary information from the http request, 
// pass the data to a FakeClassnameTags123APIServicer to perform the required actions, then write the service results to the http response.
type FakeClassnameTags123APIRouter interface { 
	TestClassname(http.ResponseWriter, *http.Request)
}
// PetAPIRouter defines the required methods for binding the api requests to a responses for the PetAPI
// The PetAPIRouter implementation should parse necessary information from the http request, 
// pass the data to a PetAPIServicer to perform the required actions, then write the service results to the http response.
type PetAPIRouter interface { 
	AddPet(http.ResponseWriter, *http.Request)
	DeletePet(http.ResponseWriter, *http.Request)
	FindPetsByStatus(http.ResponseWriter, *http.Request)
	FindPetsByTags(http.ResponseWriter, *http.Request)
	GetPetByID(http.ResponseWriter, *http.Request)
	UpdatePet(http.ResponseWriter, *http.Request)
	UpdatePetWithForm(http.ResponseWriter, *http.Request)
	UploadFile(http.ResponseWriter, *http.Request)
	UploadFileWithRequiredFile(http.ResponseWriter, *http.Request)
}
// StoreAPIRouter defines the required methods for binding the api requests to a responses for the StoreAPI
// The StoreAPIRouter implementation should parse necessary information from the http request, 
// pass the data to a StoreAPIServicer to perform the required actions, then write the service results to the http response.
type StoreAPIRouter interface { 
	DeleteOrder(http.ResponseWriter, *http.Request)
	GetInventory(http.ResponseWriter, *http.Request)
	GetOrderByID(http.ResponseWriter, *http.Request)
	PlaceOrder(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request, 
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	CreateUser(http.ResponseWriter, *http.Request)
	CreateUsersWithArrayInput(http.ResponseWriter, *http.Request)
	CreateUsersWithListInput(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	GetUserByName(http.ResponseWriter, *http.Request)
	LoginUser(http.ResponseWriter, *http.Request)
	LogoutUser(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
}


// AnotherFakeAPIServicer defines the api actions for the AnotherFakeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type AnotherFakeAPIServicer interface { 
	Call123TestSpecialTags(Client) (interface{}, error)
}


// DefaultAPIServicer defines the api actions for the DefaultAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type DefaultAPIServicer interface { 
	FooGet() (interface{}, error)
}


// FakeAPIServicer defines the api actions for the FakeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type FakeAPIServicer interface { 
	FakeHealthGet() (interface{}, error)
	FakeOuterBooleanSerialize(bool) (interface{}, error)
	FakeOuterCompositeSerialize(OuterComposite) (interface{}, error)
	FakeOuterNumberSerialize(float32) (interface{}, error)
	FakeOuterStringSerialize(string) (interface{}, error)
	TestBodyWithFileSchema(FileSchemaTestClass) (interface{}, error)
	TestBodyWithQueryParams(string, User) (interface{}, error)
	TestClientModel(Client) (interface{}, error)
	TestEndpointParameters(float32, float64, string, string, int32, int32, int64, float32, string, *os.File, string, time.Time, string, string) (interface{}, error)
	TestEnumParameters([]string, string, []string, string, int32, float64, []string, string) (interface{}, error)
	TestGroupParameters(int32, bool, int64, int32, bool, int64) (interface{}, error)
	TestInlineAdditionalProperties(map[string]string) (interface{}, error)
	TestJSONFormData(string, string) (interface{}, error)
	TestQueryParameterCollectionFormat([]string, []string, []string, []string, []string) (interface{}, error)
}


// FakeClassnameTags123APIServicer defines the api actions for the FakeClassnameTags123API service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type FakeClassnameTags123APIServicer interface { 
	TestClassname(Client) (interface{}, error)
}


// PetAPIServicer defines the api actions for the PetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type PetAPIServicer interface { 
	AddPet(Pet) (interface{}, error)
	DeletePet(int64, string) (interface{}, error)
	FindPetsByStatus([]string) (interface{}, error)
	FindPetsByTags([]string) (interface{}, error)
	GetPetByID(int64) (interface{}, error)
	UpdatePet(Pet) (interface{}, error)
	UpdatePetWithForm(int64, string, string) (interface{}, error)
	UploadFile(int64, string, *os.File) (interface{}, error)
	UploadFileWithRequiredFile(int64, *os.File, string) (interface{}, error)
}


// StoreAPIServicer defines the api actions for the StoreAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type StoreAPIServicer interface { 
	DeleteOrder(string) (interface{}, error)
	GetInventory() (interface{}, error)
	GetOrderByID(int64) (interface{}, error)
	PlaceOrder(Order) (interface{}, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	CreateUser(User) (interface{}, error)
	CreateUsersWithArrayInput([]User) (interface{}, error)
	CreateUsersWithListInput([]User) (interface{}, error)
	DeleteUser(string) (interface{}, error)
	GetUserByName(string) (interface{}, error)
	LoginUser(string, string) (interface{}, error)
	LogoutUser() (interface{}, error)
	UpdateUser(string, User) (interface{}, error)
}
