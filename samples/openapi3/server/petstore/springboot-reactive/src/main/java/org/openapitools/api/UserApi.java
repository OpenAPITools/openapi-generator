/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.Explode;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.enums.ParameterStyle;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.OAuthFlow;
import io.swagger.v3.oas.annotations.security.OAuthFlows;
import io.swagger.v3.oas.annotations.security.OAuthScope;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * POST /user : Create user
     * This can only be done by the logged in user.
     *
     * @param user Created user object (required)
     * @return successful operation (status code 200)
     */
    @Operation(summary = "Create user", operationId = "createUser" , security = {
        @SecurityRequirement(name = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "200", description = "successful operation" ) })
    @RequestMapping(value = "/user",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void> createUser(@Parameter(description = "Created user object" ,required=true )  @Valid @RequestBody Mono<User> user, ServerWebExchange exchange) {
        return getDelegate().createUser(user, exchange);
    }


    /**
     * POST /user/createWithArray : Creates list of users with given input array
     *
     * @param user List of user object (required)
     * @return successful operation (status code 200)
     */
    @Operation(summary = "Creates list of users with given input array", operationId = "createUsersWithArrayInput" , security = {
        @SecurityRequirement(name = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "200", description = "successful operation" ) })
    @RequestMapping(value = "/user/createWithArray",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void> createUsersWithArrayInput(@Parameter(description = "List of user object" ,required=true )  @Valid @RequestBody Flux<User> user, ServerWebExchange exchange) {
        return getDelegate().createUsersWithArrayInput(user, exchange);
    }


    /**
     * POST /user/createWithList : Creates list of users with given input array
     *
     * @param user List of user object (required)
     * @return successful operation (status code 200)
     */
    @Operation(summary = "Creates list of users with given input array", operationId = "createUsersWithListInput" , security = {
        @SecurityRequirement(name = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "200", description = "successful operation" ) })
    @RequestMapping(value = "/user/createWithList",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void> createUsersWithListInput(@Parameter(description = "List of user object" ,required=true )  @Valid @RequestBody Flux<User> user, ServerWebExchange exchange) {
        return getDelegate().createUsersWithListInput(user, exchange);
    }


    /**
     * DELETE /user/{username} : Delete user
     * This can only be done by the logged in user.
     *
     * @param username The name that needs to be deleted (required)
     * @return Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(summary = "Delete user", operationId = "deleteUser" , security = {
        @SecurityRequirement(name = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "400", description = "Invalid username supplied" ),
       @ApiResponse(responseCode = "404", description = "User not found" ) })
    @RequestMapping(value = "/user/{username}",
        method = RequestMethod.DELETE)
    default Mono<ResponseEntity<Void> deleteUser(@Parameter(description = "The name that needs to be deleted",required=true) @PathVariable("username") String username, ServerWebExchange exchange) {
        return getDelegate().deleteUser(username, exchange);
    }


    /**
     * GET /user/{username} : Get user by user name
     *
     * @param username The name that needs to be fetched. Use user1 for testing. (required)
     * @return successful operation (status code 200)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(summary = "Get user by user name", operationId = "getUserByName" , tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "200", description = "successful operation" , content = { @Content( schema = @Schema(implementation = User.class)) }),
       @ApiResponse(responseCode = "400", description = "Invalid username supplied" ),
       @ApiResponse(responseCode = "404", description = "User not found" ) })
    @RequestMapping(value = "/user/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<User> getUserByName(@Parameter(description = "The name that needs to be fetched. Use user1 for testing.",required=true) @PathVariable("username") String username, ServerWebExchange exchange) {
        return getDelegate().getUserByName(username, exchange);
    }


    /**
     * GET /user/login : Logs user into the system
     *
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @return successful operation (status code 200)
     *         or Invalid username/password supplied (status code 400)
     */
    @Operation(summary = "Logs user into the system", operationId = "loginUser" , tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "200", description = "successful operation" , content = { @Content( schema = @Schema(implementation = String.class)) }),
       @ApiResponse(responseCode = "400", description = "Invalid username/password supplied" ) })
    @RequestMapping(value = "/user/login",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<String> loginUser(@NotNull @Pattern(regexp="^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$") @Parameter(description = "The user name for login", required = true) @Valid @RequestParam(value = "username", required = true) String username,@NotNull @Parameter(description = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password, ServerWebExchange exchange) {
        return getDelegate().loginUser(username, password, exchange);
    }


    /**
     * GET /user/logout : Logs out current logged in user session
     *
     * @return successful operation (status code 200)
     */
    @Operation(summary = "Logs out current logged in user session", operationId = "logoutUser" , security = {
        @SecurityRequirement(name = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "200", description = "successful operation" ) })
    @RequestMapping(value = "/user/logout",
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Void> logoutUser(ServerWebExchange exchange) {
        return getDelegate().logoutUser(exchange);
    }


    /**
     * PUT /user/{username} : Updated user
     * This can only be done by the logged in user.
     *
     * @param username name that need to be deleted (required)
     * @param user Updated user object (required)
     * @return Invalid user supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(summary = "Updated user", operationId = "updateUser" , security = {
        @SecurityRequirement(name = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
       @ApiResponse(responseCode = "400", description = "Invalid user supplied" ),
       @ApiResponse(responseCode = "404", description = "User not found" ) })
    @RequestMapping(value = "/user/{username}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default Mono<ResponseEntity<Void> updateUser(@Parameter(description = "name that need to be deleted",required=true) @PathVariable("username") String username,@Parameter(description = "Updated user object" ,required=true )  @Valid @RequestBody Mono<User> user, ServerWebExchange exchange) {
        return getDelegate().updateUser(username, user, exchange);
    }

}
