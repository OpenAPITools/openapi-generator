# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from edu_sharing_client_api import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from edu_sharing_client_api.model.error_response import ErrorResponse

from . import path

# query params
BaseUrlSchema = StrSchema
SetSchema = StrSchema
MetadataPrefixSchema = StrSchema
MetadatasetSchema = StrSchema
ClassNameSchema = StrSchema
ImporterClassNameSchema = StrSchema
RecordHandlerClassNameSchema = StrSchema
BinaryHandlerClassNameSchema = StrSchema
PersistentHandlerClassNameSchema = StrSchema
FileUrlSchema = StrSchema
OaiIdsSchema = StrSchema
ForceUpdateSchema = BoolSchema
ModelFromSchema = StrSchema
UntilSchema = StrSchema
PeriodInDaysSchema = StrSchema
RequestRequiredQueryParams = typing.TypedDict(
    'RequestRequiredQueryParams',
    {
        'baseUrl': BaseUrlSchema,
        'set': SetSchema,
        'metadataPrefix': MetadataPrefixSchema,
        'className': ClassNameSchema,
    }
)
RequestOptionalQueryParams = typing.TypedDict(
    'RequestOptionalQueryParams',
    {
        'metadataset': MetadatasetSchema,
        'importerClassName': ImporterClassNameSchema,
        'recordHandlerClassName': RecordHandlerClassNameSchema,
        'binaryHandlerClassName': BinaryHandlerClassNameSchema,
        'persistentHandlerClassName': PersistentHandlerClassNameSchema,
        'fileUrl': FileUrlSchema,
        'oaiIds': OaiIdsSchema,
        'forceUpdate': ForceUpdateSchema,
        'from': ModelFromSchema,
        'until': UntilSchema,
        'periodInDays': PeriodInDaysSchema,
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_base_url = api_client.QueryParameter(
    name="baseUrl",
    style=api_client.ParameterStyle.FORM,
    schema=BaseUrlSchema,
    required=True,
    explode=True,
)
request_query_set = api_client.QueryParameter(
    name="set",
    style=api_client.ParameterStyle.FORM,
    schema=SetSchema,
    required=True,
    explode=True,
)
request_query_metadata_prefix = api_client.QueryParameter(
    name="metadataPrefix",
    style=api_client.ParameterStyle.FORM,
    schema=MetadataPrefixSchema,
    required=True,
    explode=True,
)
request_query_metadataset = api_client.QueryParameter(
    name="metadataset",
    style=api_client.ParameterStyle.FORM,
    schema=MetadatasetSchema,
    explode=True,
)
request_query_class_name = api_client.QueryParameter(
    name="className",
    style=api_client.ParameterStyle.FORM,
    schema=ClassNameSchema,
    required=True,
    explode=True,
)
request_query_importer_class_name = api_client.QueryParameter(
    name="importerClassName",
    style=api_client.ParameterStyle.FORM,
    schema=ImporterClassNameSchema,
    explode=True,
)
request_query_record_handler_class_name = api_client.QueryParameter(
    name="recordHandlerClassName",
    style=api_client.ParameterStyle.FORM,
    schema=RecordHandlerClassNameSchema,
    explode=True,
)
request_query_binary_handler_class_name = api_client.QueryParameter(
    name="binaryHandlerClassName",
    style=api_client.ParameterStyle.FORM,
    schema=BinaryHandlerClassNameSchema,
    explode=True,
)
request_query_persistent_handler_class_name = api_client.QueryParameter(
    name="persistentHandlerClassName",
    style=api_client.ParameterStyle.FORM,
    schema=PersistentHandlerClassNameSchema,
    explode=True,
)
request_query_file_url = api_client.QueryParameter(
    name="fileUrl",
    style=api_client.ParameterStyle.FORM,
    schema=FileUrlSchema,
    explode=True,
)
request_query_oai_ids = api_client.QueryParameter(
    name="oaiIds",
    style=api_client.ParameterStyle.FORM,
    schema=OaiIdsSchema,
    explode=True,
)
request_query_force_update = api_client.QueryParameter(
    name="forceUpdate",
    style=api_client.ParameterStyle.FORM,
    schema=ForceUpdateSchema,
    explode=True,
)
request_query__from = api_client.QueryParameter(
    name="from",
    style=api_client.ParameterStyle.FORM,
    schema=ModelFromSchema,
    explode=True,
)
request_query_until = api_client.QueryParameter(
    name="until",
    style=api_client.ParameterStyle.FORM,
    schema=UntilSchema,
    explode=True,
)
request_query_period_in_days = api_client.QueryParameter(
    name="periodInDays",
    style=api_client.ParameterStyle.FORM,
    schema=PeriodInDaysSchema,
    explode=True,
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        Unset,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _import_oai(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        Import oai data
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_base_url,
            request_query_set,
            request_query_metadata_prefix,
            request_query_metadataset,
            request_query_class_name,
            request_query_importer_class_name,
            request_query_record_handler_class_name,
            request_query_binary_handler_class_name,
            request_query_persistent_handler_class_name,
            request_query_file_url,
            request_query_oai_ids,
            request_query_force_update,
            request_query__from,
            request_query_until,
            request_query_period_in_days,
        ):
            parameter_data = query_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class ImportOai(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def import_oai(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._import_oai(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._import_oai(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


