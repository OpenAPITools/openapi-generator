# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class TrackingNode(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class counts(
        DictSchema
    ):
        _additional_properties = Int32Schema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'counts':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    date = StrSchema
    
    
    class fields(
        DictSchema
    ):
        _additional_properties = DictSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'fields':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class groups(
        DictSchema
    ):
        
        
        class _additional_properties(
            DictSchema
        ):
            
            
            class _additional_properties(
                DictSchema
            ):
                _additional_properties = Int64Schema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict, ],
                    _configuration: typing.Optional[Configuration] = None,
                    **kwargs: typing.Type[Schema],
                ) -> '_additional_properties':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> '_additional_properties':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'groups':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )

    @classmethod
    @property
    def node(cls) -> typing.Type['Node']:
        return Node

    @classmethod
    @property
    def authority(cls) -> typing.Type['TrackingAuthority']:
        return TrackingAuthority


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        counts: typing.Union[counts, Unset] = unset,
        date: typing.Union[date, Unset] = unset,
        fields: typing.Union[fields, Unset] = unset,
        groups: typing.Union[groups, Unset] = unset,
        node: typing.Union['Node', Unset] = unset,
        authority: typing.Union['TrackingAuthority', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'TrackingNode':
        return super().__new__(
            cls,
            *args,
            counts=counts,
            date=date,
            fields=fields,
            groups=groups,
            node=node,
            authority=authority,
            _configuration=_configuration,
            **kwargs,
        )

from edu_sharing_client_api.model.node import Node
from edu_sharing_client_api.model.tracking_authority import TrackingAuthority
