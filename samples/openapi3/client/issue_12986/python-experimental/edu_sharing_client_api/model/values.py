# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Values(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class supportedLanguages(
        ListSchema
    ):
        _items = StrSchema
    extension = StrSchema
    loginUrl = StrSchema
    loginAllowLocal = BoolSchema
    loginProvidersUrl = StrSchema
    loginProviderTargetUrl = StrSchema

    @classmethod
    @property
    def register(cls) -> typing.Type['Register']:
        return Register
    recoverPasswordUrl = StrSchema
    imprintUrl = StrSchema
    privacyInformationUrl = StrSchema
    helpUrl = StrSchema
    whatsNewUrl = StrSchema
    editProfileUrl = StrSchema
    editProfile = BoolSchema
    
    
    class workspaceColumns(
        ListSchema
    ):
        _items = StrSchema
    workspaceSharedToMeDefaultAll = BoolSchema
    
    
    class hideMainMenu(
        ListSchema
    ):
        _items = StrSchema

    @classmethod
    @property
    def logout(cls) -> typing.Type['LogoutInfo']:
        return LogoutInfo
    
    
    class menuEntries(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['MenuEntry']:
            return MenuEntry
    
    
    class customOptions(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['ContextMenuEntry']:
            return ContextMenuEntry
    
    
    class userMenuOverrides(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['ContextMenuEntry']:
            return ContextMenuEntry
    
    
    class allowedLicenses(
        ListSchema
    ):
        _items = StrSchema
    
    
    class customLicenses(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['License']:
            return License

    @classmethod
    @property
    def workflow(cls) -> typing.Type['ConfigWorkflow']:
        return ConfigWorkflow
    licenseDialogOnUpload = BoolSchema
    nodeReport = BoolSchema
    branding = BoolSchema

    @classmethod
    @property
    def rating(cls) -> typing.Type['ConfigRating']:
        return ConfigRating
    publishingNotice = BoolSchema
    siteTitle = StrSchema
    userDisplayName = StrSchema
    userSecondaryDisplayName = StrSchema
    userAffiliation = BoolSchema
    defaultUsername = StrSchema
    defaultPassword = StrSchema

    @classmethod
    @property
    def banner(cls) -> typing.Type['Banner']:
        return Banner
    
    
    class availableMds(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['AvailableMds']:
            return AvailableMds
    
    
    class availableRepositories(
        ListSchema
    ):
        _items = StrSchema
    searchViewType = Int32Schema
    workspaceViewType = Int32Schema
    itemsPerRequest = Int32Schema

    @classmethod
    @property
    def rendering(cls) -> typing.Type['Rendering']:
        return Rendering
    sessionExpiredDialog = DictSchema
    loginDefaultLocation = StrSchema
    searchGroupResults = BoolSchema

    @classmethod
    @property
    def mainnav(cls) -> typing.Type['Mainnav']:
        return Mainnav
    searchSidenavMode = StrSchema

    @classmethod
    @property
    def guest(cls) -> typing.Type['Guest']:
        return Guest

    @classmethod
    @property
    def collections(cls) -> typing.Type['Collections']:
        return Collections

    @classmethod
    @property
    def licenseAgreement(cls) -> typing.Type['LicenseAgreement']:
        return LicenseAgreement

    @classmethod
    @property
    def services(cls) -> typing.Type['Services']:
        return Services
    
    
    class helpMenuOptions(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['HelpMenuOptions']:
            return HelpMenuOptions
    
    
    class images(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Image']:
            return Image
    
    
    class icons(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['FontIcon']:
            return FontIcon

    @classmethod
    @property
    def stream(cls) -> typing.Type['Stream']:
        return Stream

    @classmethod
    @property
    def admin(cls) -> typing.Type['Admin']:
        return Admin

    @classmethod
    @property
    def simpleEdit(cls) -> typing.Type['SimpleEdit']:
        return SimpleEdit

    @classmethod
    @property
    def frontpage(cls) -> typing.Type['ConfigFrontpage']:
        return ConfigFrontpage

    @classmethod
    @property
    def upload(cls) -> typing.Type['ConfigUpload']:
        return ConfigUpload

    @classmethod
    @property
    def publish(cls) -> typing.Type['ConfigPublish']:
        return ConfigPublish

    @classmethod
    @property
    def remote(cls) -> typing.Type['ConfigRemote']:
        return ConfigRemote
    customCSS = StrSchema

    @classmethod
    @property
    def privacy(cls) -> typing.Type['ConfigPrivacy']:
        return ConfigPrivacy


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        supportedLanguages: typing.Union[supportedLanguages, Unset] = unset,
        extension: typing.Union[extension, Unset] = unset,
        loginUrl: typing.Union[loginUrl, Unset] = unset,
        loginAllowLocal: typing.Union[loginAllowLocal, Unset] = unset,
        loginProvidersUrl: typing.Union[loginProvidersUrl, Unset] = unset,
        loginProviderTargetUrl: typing.Union[loginProviderTargetUrl, Unset] = unset,
        register: typing.Union['Register', Unset] = unset,
        recoverPasswordUrl: typing.Union[recoverPasswordUrl, Unset] = unset,
        imprintUrl: typing.Union[imprintUrl, Unset] = unset,
        privacyInformationUrl: typing.Union[privacyInformationUrl, Unset] = unset,
        helpUrl: typing.Union[helpUrl, Unset] = unset,
        whatsNewUrl: typing.Union[whatsNewUrl, Unset] = unset,
        editProfileUrl: typing.Union[editProfileUrl, Unset] = unset,
        editProfile: typing.Union[editProfile, Unset] = unset,
        workspaceColumns: typing.Union[workspaceColumns, Unset] = unset,
        workspaceSharedToMeDefaultAll: typing.Union[workspaceSharedToMeDefaultAll, Unset] = unset,
        hideMainMenu: typing.Union[hideMainMenu, Unset] = unset,
        logout: typing.Union['LogoutInfo', Unset] = unset,
        menuEntries: typing.Union[menuEntries, Unset] = unset,
        customOptions: typing.Union[customOptions, Unset] = unset,
        userMenuOverrides: typing.Union[userMenuOverrides, Unset] = unset,
        allowedLicenses: typing.Union[allowedLicenses, Unset] = unset,
        customLicenses: typing.Union[customLicenses, Unset] = unset,
        workflow: typing.Union['ConfigWorkflow', Unset] = unset,
        licenseDialogOnUpload: typing.Union[licenseDialogOnUpload, Unset] = unset,
        nodeReport: typing.Union[nodeReport, Unset] = unset,
        branding: typing.Union[branding, Unset] = unset,
        rating: typing.Union['ConfigRating', Unset] = unset,
        publishingNotice: typing.Union[publishingNotice, Unset] = unset,
        siteTitle: typing.Union[siteTitle, Unset] = unset,
        userDisplayName: typing.Union[userDisplayName, Unset] = unset,
        userSecondaryDisplayName: typing.Union[userSecondaryDisplayName, Unset] = unset,
        userAffiliation: typing.Union[userAffiliation, Unset] = unset,
        defaultUsername: typing.Union[defaultUsername, Unset] = unset,
        defaultPassword: typing.Union[defaultPassword, Unset] = unset,
        banner: typing.Union['Banner', Unset] = unset,
        availableMds: typing.Union[availableMds, Unset] = unset,
        availableRepositories: typing.Union[availableRepositories, Unset] = unset,
        searchViewType: typing.Union[searchViewType, Unset] = unset,
        workspaceViewType: typing.Union[workspaceViewType, Unset] = unset,
        itemsPerRequest: typing.Union[itemsPerRequest, Unset] = unset,
        rendering: typing.Union['Rendering', Unset] = unset,
        sessionExpiredDialog: typing.Union[sessionExpiredDialog, Unset] = unset,
        loginDefaultLocation: typing.Union[loginDefaultLocation, Unset] = unset,
        searchGroupResults: typing.Union[searchGroupResults, Unset] = unset,
        mainnav: typing.Union['Mainnav', Unset] = unset,
        searchSidenavMode: typing.Union[searchSidenavMode, Unset] = unset,
        guest: typing.Union['Guest', Unset] = unset,
        collections: typing.Union['Collections', Unset] = unset,
        licenseAgreement: typing.Union['LicenseAgreement', Unset] = unset,
        services: typing.Union['Services', Unset] = unset,
        helpMenuOptions: typing.Union[helpMenuOptions, Unset] = unset,
        images: typing.Union[images, Unset] = unset,
        icons: typing.Union[icons, Unset] = unset,
        stream: typing.Union['Stream', Unset] = unset,
        admin: typing.Union['Admin', Unset] = unset,
        simpleEdit: typing.Union['SimpleEdit', Unset] = unset,
        frontpage: typing.Union['ConfigFrontpage', Unset] = unset,
        upload: typing.Union['ConfigUpload', Unset] = unset,
        publish: typing.Union['ConfigPublish', Unset] = unset,
        remote: typing.Union['ConfigRemote', Unset] = unset,
        customCSS: typing.Union[customCSS, Unset] = unset,
        privacy: typing.Union['ConfigPrivacy', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Values':
        return super().__new__(
            cls,
            *args,
            supportedLanguages=supportedLanguages,
            extension=extension,
            loginUrl=loginUrl,
            loginAllowLocal=loginAllowLocal,
            loginProvidersUrl=loginProvidersUrl,
            loginProviderTargetUrl=loginProviderTargetUrl,
            register=register,
            recoverPasswordUrl=recoverPasswordUrl,
            imprintUrl=imprintUrl,
            privacyInformationUrl=privacyInformationUrl,
            helpUrl=helpUrl,
            whatsNewUrl=whatsNewUrl,
            editProfileUrl=editProfileUrl,
            editProfile=editProfile,
            workspaceColumns=workspaceColumns,
            workspaceSharedToMeDefaultAll=workspaceSharedToMeDefaultAll,
            hideMainMenu=hideMainMenu,
            logout=logout,
            menuEntries=menuEntries,
            customOptions=customOptions,
            userMenuOverrides=userMenuOverrides,
            allowedLicenses=allowedLicenses,
            customLicenses=customLicenses,
            workflow=workflow,
            licenseDialogOnUpload=licenseDialogOnUpload,
            nodeReport=nodeReport,
            branding=branding,
            rating=rating,
            publishingNotice=publishingNotice,
            siteTitle=siteTitle,
            userDisplayName=userDisplayName,
            userSecondaryDisplayName=userSecondaryDisplayName,
            userAffiliation=userAffiliation,
            defaultUsername=defaultUsername,
            defaultPassword=defaultPassword,
            banner=banner,
            availableMds=availableMds,
            availableRepositories=availableRepositories,
            searchViewType=searchViewType,
            workspaceViewType=workspaceViewType,
            itemsPerRequest=itemsPerRequest,
            rendering=rendering,
            sessionExpiredDialog=sessionExpiredDialog,
            loginDefaultLocation=loginDefaultLocation,
            searchGroupResults=searchGroupResults,
            mainnav=mainnav,
            searchSidenavMode=searchSidenavMode,
            guest=guest,
            collections=collections,
            licenseAgreement=licenseAgreement,
            services=services,
            helpMenuOptions=helpMenuOptions,
            images=images,
            icons=icons,
            stream=stream,
            admin=admin,
            simpleEdit=simpleEdit,
            frontpage=frontpage,
            upload=upload,
            publish=publish,
            remote=remote,
            customCSS=customCSS,
            privacy=privacy,
            _configuration=_configuration,
            **kwargs,
        )

from edu_sharing_client_api.model.admin import Admin
from edu_sharing_client_api.model.available_mds import AvailableMds
from edu_sharing_client_api.model.banner import Banner
from edu_sharing_client_api.model.collections import Collections
from edu_sharing_client_api.model.config_frontpage import ConfigFrontpage
from edu_sharing_client_api.model.config_privacy import ConfigPrivacy
from edu_sharing_client_api.model.config_publish import ConfigPublish
from edu_sharing_client_api.model.config_rating import ConfigRating
from edu_sharing_client_api.model.config_remote import ConfigRemote
from edu_sharing_client_api.model.config_upload import ConfigUpload
from edu_sharing_client_api.model.config_workflow import ConfigWorkflow
from edu_sharing_client_api.model.context_menu_entry import ContextMenuEntry
from edu_sharing_client_api.model.font_icon import FontIcon
from edu_sharing_client_api.model.guest import Guest
from edu_sharing_client_api.model.help_menu_options import HelpMenuOptions
from edu_sharing_client_api.model.image import Image
from edu_sharing_client_api.model.license import License
from edu_sharing_client_api.model.license_agreement import LicenseAgreement
from edu_sharing_client_api.model.logout_info import LogoutInfo
from edu_sharing_client_api.model.mainnav import Mainnav
from edu_sharing_client_api.model.menu_entry import MenuEntry
from edu_sharing_client_api.model.register import Register
from edu_sharing_client_api.model.rendering import Rendering
from edu_sharing_client_api.model.services import Services
from edu_sharing_client_api.model.simple_edit import SimpleEdit
from edu_sharing_client_api.model.stream import Stream
