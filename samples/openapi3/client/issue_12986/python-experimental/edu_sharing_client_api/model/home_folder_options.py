# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class HomeFolderOptions(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class folders(
        _SchemaEnumMaker(
            enum_value_to_name={
                "none": "NONE",
                "assign": "ASSIGN",
                "delete": "DELETE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def NONE(cls):
            return cls("none")
        
        @classmethod
        @property
        def ASSIGN(cls):
            return cls("assign")
        
        @classmethod
        @property
        def DELETE(cls):
            return cls("delete")
    
    
    class privateFiles(
        _SchemaEnumMaker(
            enum_value_to_name={
                "none": "NONE",
                "assign": "ASSIGN",
                "delete": "DELETE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def NONE(cls):
            return cls("none")
        
        @classmethod
        @property
        def ASSIGN(cls):
            return cls("assign")
        
        @classmethod
        @property
        def DELETE(cls):
            return cls("delete")
    
    
    class ccFiles(
        _SchemaEnumMaker(
            enum_value_to_name={
                "none": "NONE",
                "assign": "ASSIGN",
                "delete": "DELETE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def NONE(cls):
            return cls("none")
        
        @classmethod
        @property
        def ASSIGN(cls):
            return cls("assign")
        
        @classmethod
        @property
        def DELETE(cls):
            return cls("delete")
    keepFolderStructure = BoolSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        folders: typing.Union[folders, Unset] = unset,
        privateFiles: typing.Union[privateFiles, Unset] = unset,
        ccFiles: typing.Union[ccFiles, Unset] = unset,
        keepFolderStructure: typing.Union[keepFolderStructure, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'HomeFolderOptions':
        return super().__new__(
            cls,
            *args,
            folders=folders,
            privateFiles=privateFiles,
            ccFiles=ccFiles,
            keepFolderStructure=keepFolderStructure,
            _configuration=_configuration,
            **kwargs,
        )
