# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class MdsWidget(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    link = StrSchema
    configuration = StrSchema
    format = StrSchema
    allowValuespaceSuggestions = BoolSchema

    @classmethod
    @property
    def condition(cls) -> typing.Type['MdsWidgetCondition']:
        return MdsWidgetCondition
    maxlength = Int32Schema
    
    
    class interactionType(
        _SchemaEnumMaker(
            enum_value_to_name={
                "Input": "INPUT",
                "None": "NONE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def INPUT(cls):
            return cls("Input")
        
        @classmethod
        @property
        def NONE(cls):
            return cls("None")
    
    
    class subwidgets(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['MdsSubwidget']:
            return MdsSubwidget
    
    
    class required(
        _SchemaEnumMaker(
            enum_value_to_name={
                "mandatory": "MANDATORY",
                "mandatoryForPublish": "MANDATORY_FOR_PUBLISH",
                "recommended": "RECOMMENDED",
                "optional": "OPTIONAL",
                "ignore": "IGNORE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def MANDATORY(cls):
            return cls("mandatory")
        
        @classmethod
        @property
        def MANDATORY_FOR_PUBLISH(cls):
            return cls("mandatoryForPublish")
        
        @classmethod
        @property
        def RECOMMENDED(cls):
            return cls("recommended")
        
        @classmethod
        @property
        def OPTIONAL(cls):
            return cls("optional")
        
        @classmethod
        @property
        def IGNORE(cls):
            return cls("ignore")
    id = StrSchema
    caption = StrSchema
    bottomCaption = StrSchema
    icon = StrSchema
    _items = StrSchema
    template = StrSchema
    hasValues = BoolSchema
    
    
    class values(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['MdsValue']:
            return MdsValue
    placeholder = StrSchema
    unit = StrSchema
    min = Int32Schema
    max = Int32Schema
    defaultMin = Int32Schema
    defaultMax = Int32Schema
    step = Int32Schema
    
    
    class isRequired(
        _SchemaEnumMaker(
            enum_value_to_name={
                "mandatory": "MANDATORY",
                "mandatoryForPublish": "MANDATORY_FOR_PUBLISH",
                "recommended": "RECOMMENDED",
                "optional": "OPTIONAL",
                "ignore": "IGNORE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def MANDATORY(cls):
            return cls("mandatory")
        
        @classmethod
        @property
        def MANDATORY_FOR_PUBLISH(cls):
            return cls("mandatoryForPublish")
        
        @classmethod
        @property
        def RECOMMENDED(cls):
            return cls("recommended")
        
        @classmethod
        @property
        def OPTIONAL(cls):
            return cls("optional")
        
        @classmethod
        @property
        def IGNORE(cls):
            return cls("ignore")
    allowempty = BoolSchema
    defaultvalue = StrSchema
    isSearchable = BoolSchema
    isExtended = BoolSchema
    hideIfEmpty = BoolSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        link: typing.Union[link, Unset] = unset,
        configuration: typing.Union[configuration, Unset] = unset,
        format: typing.Union[format, Unset] = unset,
        allowValuespaceSuggestions: typing.Union[allowValuespaceSuggestions, Unset] = unset,
        condition: typing.Union['MdsWidgetCondition', Unset] = unset,
        maxlength: typing.Union[maxlength, Unset] = unset,
        interactionType: typing.Union[interactionType, Unset] = unset,
        subwidgets: typing.Union[subwidgets, Unset] = unset,
        required: typing.Union[required, Unset] = unset,
        id: typing.Union[id, Unset] = unset,
        caption: typing.Union[caption, Unset] = unset,
        bottomCaption: typing.Union[bottomCaption, Unset] = unset,
        icon: typing.Union[icon, Unset] = unset,
        _items: typing.Union[_items, Unset] = unset,
        template: typing.Union[template, Unset] = unset,
        hasValues: typing.Union[hasValues, Unset] = unset,
        values: typing.Union[values, Unset] = unset,
        placeholder: typing.Union[placeholder, Unset] = unset,
        unit: typing.Union[unit, Unset] = unset,
        min: typing.Union[min, Unset] = unset,
        max: typing.Union[max, Unset] = unset,
        defaultMin: typing.Union[defaultMin, Unset] = unset,
        defaultMax: typing.Union[defaultMax, Unset] = unset,
        step: typing.Union[step, Unset] = unset,
        isRequired: typing.Union[isRequired, Unset] = unset,
        allowempty: typing.Union[allowempty, Unset] = unset,
        defaultvalue: typing.Union[defaultvalue, Unset] = unset,
        isSearchable: typing.Union[isSearchable, Unset] = unset,
        isExtended: typing.Union[isExtended, Unset] = unset,
        hideIfEmpty: typing.Union[hideIfEmpty, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'MdsWidget':
        return super().__new__(
            cls,
            *args,
            link=link,
            configuration=configuration,
            format=format,
            allowValuespaceSuggestions=allowValuespaceSuggestions,
            condition=condition,
            maxlength=maxlength,
            interactionType=interactionType,
            subwidgets=subwidgets,
            required=required,
            id=id,
            caption=caption,
            bottomCaption=bottomCaption,
            icon=icon,
            _items=_items,
            template=template,
            hasValues=hasValues,
            values=values,
            placeholder=placeholder,
            unit=unit,
            min=min,
            max=max,
            defaultMin=defaultMin,
            defaultMax=defaultMax,
            step=step,
            isRequired=isRequired,
            allowempty=allowempty,
            defaultvalue=defaultvalue,
            isSearchable=isSearchable,
            isExtended=isExtended,
            hideIfEmpty=hideIfEmpty,
            _configuration=_configuration,
            **kwargs,
        )

from edu_sharing_client_api.model.mds_subwidget import MdsSubwidget
from edu_sharing_client_api.model.mds_value import MdsValue
from edu_sharing_client_api.model.mds_widget_condition import MdsWidgetCondition
