# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Provider(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    legalName = StrSchema
    url = StrSchema
    email = StrSchema
    
    
    class areaServed(
        _SchemaEnumMaker(
            enum_value_to_name={
                "Organization": "ORGANIZATION",
                "City": "CITY",
                "State": "STATE",
                "Country": "COUNTRY",
                "Continent": "CONTINENT",
                "World": "WORLD",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def ORGANIZATION(cls):
            return cls("Organization")
        
        @classmethod
        @property
        def CITY(cls):
            return cls("City")
        
        @classmethod
        @property
        def STATE(cls):
            return cls("State")
        
        @classmethod
        @property
        def COUNTRY(cls):
            return cls("Country")
        
        @classmethod
        @property
        def CONTINENT(cls):
            return cls("Continent")
        
        @classmethod
        @property
        def WORLD(cls):
            return cls("World")

    @classmethod
    @property
    def location(cls) -> typing.Type['Location']:
        return Location


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        legalName: typing.Union[legalName, Unset] = unset,
        url: typing.Union[url, Unset] = unset,
        email: typing.Union[email, Unset] = unset,
        areaServed: typing.Union[areaServed, Unset] = unset,
        location: typing.Union['Location', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Provider':
        return super().__new__(
            cls,
            *args,
            legalName=legalName,
            url=url,
            email=email,
            areaServed=areaServed,
            location=location,
            _configuration=_configuration,
            **kwargs,
        )

from edu_sharing_client_api.model.location import Location
