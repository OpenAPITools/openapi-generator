# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from edu_sharing_client_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class JobDetail(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    name = StrSchema
    group = StrSchema
    description = StrSchema
    
    
    class jobDataMap(
        DictSchema
    ):
        dirty = BoolSchema
        allowsTransientData = BoolSchema
        
        
        class keys(
            ListSchema
        ):
            _items = StrSchema
        
        
        class wrappedMap(
            DictSchema
        ):
            _additional_properties = DictSchema
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'wrappedMap':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        empty = BoolSchema
        _additional_properties = DictSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            dirty: typing.Union[dirty, Unset] = unset,
            allowsTransientData: typing.Union[allowsTransientData, Unset] = unset,
            keys: typing.Union[keys, Unset] = unset,
            wrappedMap: typing.Union[wrappedMap, Unset] = unset,
            empty: typing.Union[empty, Unset] = unset,
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'jobDataMap':
            return super().__new__(
                cls,
                *args,
                dirty=dirty,
                allowsTransientData=allowsTransientData,
                keys=keys,
                wrappedMap=wrappedMap,
                empty=empty,
                _configuration=_configuration,
                **kwargs,
            )
    volatility = BoolSchema
    durability = BoolSchema

    @classmethod
    @property
    def key(cls) -> typing.Type['Key']:
        return Key
    durable = BoolSchema
    stateful = BoolSchema
    requestsRecovery = BoolSchema
    
    
    class jobListenerNames(
        ListSchema
    ):
        _items = StrSchema
    fullName = StrSchema
    volatile = BoolSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: typing.Union[name, Unset] = unset,
        group: typing.Union[group, Unset] = unset,
        description: typing.Union[description, Unset] = unset,
        jobDataMap: typing.Union[jobDataMap, Unset] = unset,
        volatility: typing.Union[volatility, Unset] = unset,
        durability: typing.Union[durability, Unset] = unset,
        key: typing.Union['Key', Unset] = unset,
        durable: typing.Union[durable, Unset] = unset,
        stateful: typing.Union[stateful, Unset] = unset,
        requestsRecovery: typing.Union[requestsRecovery, Unset] = unset,
        jobListenerNames: typing.Union[jobListenerNames, Unset] = unset,
        fullName: typing.Union[fullName, Unset] = unset,
        volatile: typing.Union[volatile, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'JobDetail':
        return super().__new__(
            cls,
            *args,
            name=name,
            group=group,
            description=description,
            jobDataMap=jobDataMap,
            volatility=volatility,
            durability=durability,
            key=key,
            durable=durable,
            stateful=stateful,
            requestsRecovery=requestsRecovery,
            jobListenerNames=jobListenerNames,
            fullName=fullName,
            volatile=volatile,
            _configuration=_configuration,
            **kwargs,
        )

from edu_sharing_client_api.model.key import Key
