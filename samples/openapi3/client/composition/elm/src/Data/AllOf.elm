{-
   Composition and Inheritence (Polymorphism)
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.AllOf exposing (AllOf, decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias AllOf =
    { objectType : String
    , valueA : Maybe String
    , valueB : Maybe Float
    }


decoder : Decoder AllOf
decoder =
    Decode.succeed AllOf
        |> required "objectType" Decode.string
        |> optional "valueA" (Decode.nullable Decode.string) Nothing
        |> optional "valueB" (Decode.nullable Decode.float) Nothing


encode : AllOf -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> AllOf -> Encode.Value
encodeWithTag ( tagField, tag ) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : AllOf -> List ( String, Encode.Value )
encodePairs model =
    [ ( "objectType", Encode.string model.objectType )
    , ( "valueA", Maybe.withDefault Encode.null (Maybe.map Encode.string model.valueA) )
    , ( "valueB", Maybe.withDefault Encode.null (Maybe.map Encode.float model.valueB) )
    ]


toString : AllOf -> String
toString =
    Encode.encode 0 << encode
