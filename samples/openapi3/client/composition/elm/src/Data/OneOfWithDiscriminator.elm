{-
   Composition and Inheritence (Polymorphism)
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.OneOfWithDiscriminator exposing (OneOfWithDiscriminator, decoder, encode, toString)

import Data.ObjectA as ObjectA exposing (ObjectA)
import Data.ObjectB as ObjectB exposing (ObjectB)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type OneOfWithDiscriminator
    = ObjectAType ObjectA
    | ObjectBType ObjectB


decoder : Decoder OneOfWithDiscriminator
decoder =
    Decode.field "objectType" Decode.string
        |> Decode.andThen oneOfWithDiscriminatorDecoder


oneOfWithDiscriminatorDecoder : String -> Decoder OneOfWithDiscriminator
oneOfWithDiscriminatorDecoder tag =
    case tag of
        "a" ->
            Decode.map ObjectAType ObjectA.decoder

        "b" ->
            Decode.map ObjectBType ObjectB.decoder

        _ ->
            Decode.fail <| "Trying to decode OneOfWithDiscriminator, but objectType '" ++ tag ++ "' is not supported."


encode : OneOfWithDiscriminator -> Encode.Value
encode model =
    case model of
        ObjectAType subModel ->
            ObjectA.encodeWithTag ( "objectType", "a" ) subModel

        ObjectBType subModel ->
            ObjectB.encodeWithTag ( "objectType", "b" ) subModel


toString : OneOfWithDiscriminator -> String
toString =
    Encode.encode 0 << encode
