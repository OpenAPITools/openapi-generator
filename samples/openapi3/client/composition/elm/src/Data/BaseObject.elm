{-
   Composition and Inheritence (Polymorphism)
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.BaseObject exposing (BaseObject(..), decoder, encode, toString)

import Data.SubObjectA as SubObjectA exposing (SubObjectA)
import Data.SubObjectB as SubObjectB exposing (SubObjectB)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type BaseObject
    = SubObjectAType SubObjectA
    | SubObjectBType SubObjectB


decoder : Decoder BaseObject
decoder =
    Decode.field "objectType" Decode.string
        |> Decode.andThen baseObjectDecoder


baseObjectDecoder : String -> Decoder BaseObject
baseObjectDecoder tag =
    case tag of
        "SubObjectA" ->
            Decode.map SubObjectAType SubObjectA.decoder

        "SubObjectB" ->
            Decode.map SubObjectBType SubObjectB.decoder

        _ ->
            Decode.fail <| "Trying to decode BaseObject, but objectType '" ++ tag ++ "' is not supported."


encode : BaseObject -> Encode.Value
encode model =
    case model of
        SubObjectAType subModel ->
            SubObjectA.encodeWithTag ( "objectType", "SubObjectA" ) subModel

        SubObjectBType subModel ->
            SubObjectB.encodeWithTag ( "objectType", "SubObjectB" ) subModel


toString : BaseObject -> String
toString =
    Encode.encode 0 << encode
