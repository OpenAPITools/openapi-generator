# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

import unittest
from unittest.mock import patch

import urllib3

import unit_test_api
from unit_test_api.paths.response_body_post_uniqueitems_validation_response_body_for_content_types import post  # noqa: E501
from unit_test_api import configuration, schemas, api_client

from . import ApiTestMixin


class TestResponseBodyPostUniqueitemsValidationResponseBodyForContentTypes(ApiTestMixin, unittest.TestCase):
    """ResponseBodyPostUniqueitemsValidationResponseBodyForContentTypes unit test stubs"""
    _configuration = configuration.Configuration()

    def setUp(self):
        used_api_client = api_client.ApiClient(configuration=self._configuration)
        self.api = post.ApiForpost(api_client=used_api_client)  # noqa: E501

    def tearDown(self):
        pass

    def test_post_uniqueitems_validation_response_body_for_content_types(self):
        """Test case for post_uniqueitems_validation_response_body_for_content_types

        """
        response_status = 200
        accept_content_type = 'application/json'


        # test_unique_array_of_objects_is_valid_passes
        # unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "baz",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_true_and_a1_are_unique_passes
        # {&quot;a&quot;: true} and {&quot;a&quot;: 1} are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            True,
                    },
                    {
                        "a":
                            1,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_heterogeneous_types_are_invalid_fails
        # non-unique heterogeneous types are invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    {
                    },
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_nested0_and_false_are_unique_passes
        # nested [0] and [false] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            0,
                        ],
                        "foo",
                    ],
                    [
                        [
                            False,
                        ],
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_false_and_a0_are_unique_passes
        # {&quot;a&quot;: false} and {&quot;a&quot;: 0} are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            False,
                    },
                    {
                        "a":
                            0,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_numbers_are_unique_if_mathematically_unequal_fails
        # numbers are unique if mathematically unequal
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1.0,
                    1.0,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_false_is_not_equal_to_zero_passes
        # false is not equal to zero
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_0_and_false_are_unique_passes
        # [0] and [false] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        0,
                    ],
                    [
                        False,
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_arrays_is_valid_passes
        # unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_nested_objects_is_invalid_fails
        # non-unique array of nested objects is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_non_unique_array_of_more_than_two_integers_is_invalid_fails
        # non-unique array of more than two integers is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_true_is_not_equal_to_one_passes
        # true is not equal to one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_objects_are_non_unique_despite_key_order_fails
        # objects are non-unique despite key order
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            1,
                        "b":
                            2,
                    },
                    {
                        "b":
                            2,
                        "a":
                            1,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_unique_array_of_strings_is_valid_passes
        # unique array of strings is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    "foo",
                    "bar",
                    "baz",
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_1_and_true_are_unique_passes
        # [1] and [true] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        1,
                    ],
                    [
                        True,
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_different_objects_are_unique_passes
        # different objects are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            1,
                        "b":
                            2,
                    },
                    {
                        "a":
                            2,
                        "b":
                            1,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_integers_is_valid_passes
        # unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_more_than_two_arrays_is_invalid_fails
        # non-unique array of more than two arrays is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_non_unique_array_of_objects_is_invalid_fails
        # non-unique array of objects is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "bar",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_unique_array_of_nested_objects_is_valid_passes
        # unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            False,
                                    },
                            },
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_arrays_is_invalid_fails
        # non-unique array of arrays is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_non_unique_array_of_strings_is_invalid_fails
        # non-unique array of strings is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    "foo",
                    "bar",
                    "foo",
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_nested1_and_true_are_unique_passes
        # nested [1] and [true] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            1,
                        ],
                        "foo",
                    ],
                    [
                        [
                            True,
                        ],
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_heterogeneous_types_are_valid_passes
        # unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    1,
                    "{}",
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_integers_is_invalid_fails
        # non-unique array of integers is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass


if __name__ == '__main__':
    unittest.main()
