# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

import unittest
from unittest.mock import patch

import urllib3

import unit_test_api
from unit_test_api.paths.request_body_post_by_small_number_request_body import post  # noqa: E501
from unit_test_api import configuration, schemas, api_client

from . import ApiTestMixin


class TestRequestBodyPostBySmallNumberRequestBody(ApiTestMixin, unittest.TestCase):
    """RequestBodyPostBySmallNumberRequestBody unit test stubs"""
    _configuration = configuration.Configuration()

    def setUp(self):
        used_api_client = api_client.ApiClient(configuration=self._configuration)
        self.api = post.ApiForpost(api_client=used_api_client)  # noqa: E501

    def tearDown(self):
        pass

    def test_post_by_small_number_request_body(self):
        """Test case for post_by_small_number_request_body

        """
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_000751_is_not_multiple_of00001_fails
        # 0.00751 is not multiple of 0.0001
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.00751
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = post.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post(body=body)

        # test_00075_is_multiple_of00001_passes
        # 0.0075 is multiple of 0.0001
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0075
            )
            body = post.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postBySmallNumberRequestBody',
                method='post',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)




if __name__ == '__main__':
    unittest.main()
