# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

import unittest
from unittest.mock import patch

import urllib3

import unit_test_api
from unit_test_api.paths.response_body_post_maximum_validation_with_unsigned_integer_response_body_for_content_types import post  # noqa: E501
from unit_test_api import configuration, schemas, api_client

from . import ApiTestMixin


class TestResponseBodyPostMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes(ApiTestMixin, unittest.TestCase):
    """ResponseBodyPostMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes unit test stubs"""
    _configuration = configuration.Configuration()

    def setUp(self):
        used_api_client = api_client.ApiClient(configuration=self._configuration)
        self.api = post.ApiForpost(api_client=used_api_client)  # noqa: E501

    def tearDown(self):
        pass

    def test_post_maximum_validation_with_unsigned_integer_response_body_for_content_types(self):
        """Test case for post_maximum_validation_with_unsigned_integer_response_body_for_content_types

        """
        response_status = 200
        accept_content_type = 'application/json'


        # test_below_the_maximum_is_invalid_passes
        # below the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                299.97
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_above_the_maximum_is_invalid_fails
        # above the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='post',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_boundary_point_integer_is_valid_passes
        # boundary point integer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_boundary_point_float_is_valid_passes
        # boundary point float is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='post',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, post.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = post.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass


if __name__ == '__main__':
    unittest.main()
