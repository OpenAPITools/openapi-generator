# coding: utf-8

"""
    openapi 3.0.3 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

import unittest

import unit_test_api
from unit_test_api.model.allof_combined_with_anyof_oneof import AllofCombinedWithAnyofOneof


class TestAllofCombinedWithAnyofOneof(unittest.TestCase):
    """AllofCombinedWithAnyofOneof unit test stubs"""

    def test_allof_true_anyof_false_oneof_false_fails(self):
        # allOf: true, anyOf: false, oneOf: false
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                2            )

    def test_allof_false_anyof_false_oneof_true_fails(self):
        # allOf: false, anyOf: false, oneOf: true
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                5            )

    def test_allof_false_anyof_true_oneof_true_fails(self):
        # allOf: false, anyOf: true, oneOf: true
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                15            )

    def test_allof_true_anyof_true_oneof_false_fails(self):
        # allOf: true, anyOf: true, oneOf: false
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                6            )

    def test_allof_true_anyof_true_oneof_true_passes(self):
        # allOf: true, anyOf: true, oneOf: true
        AllofCombinedWithAnyofOneof(
            30        )

    def test_allof_true_anyof_false_oneof_true_fails(self):
        # allOf: true, anyOf: false, oneOf: true
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                10            )

    def test_allof_false_anyof_true_oneof_false_fails(self):
        # allOf: false, anyOf: true, oneOf: false
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                3            )

    def test_allof_false_anyof_false_oneof_false_fails(self):
        # allOf: false, anyOf: false, oneOf: false
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            AllofCombinedWithAnyofOneof(
                1            )


if __name__ == '__main__':
    unittest.main()
