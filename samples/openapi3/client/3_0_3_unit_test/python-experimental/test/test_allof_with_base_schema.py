# coding: utf-8

"""
    openapi 3.0.3 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

import unittest

import unit_test_api
from unit_test_api.model.allof_with_base_schema import AllofWithBaseSchema


class TestAllofWithBaseSchema(unittest.TestCase):
    """AllofWithBaseSchema unit test stubs"""

    def test_valid_passes(self):
        # valid
        AllofWithBaseSchema(
            {
                "foo":
                    "quux",
                "bar":
                    2,
                "baz":
                    None,
            }
            nl        )

    def test_mismatch_first_allof_fails(self):
        # mismatch first allOf
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            AllofWithBaseSchema(
                {
                    "bar":
                        2,
                    "baz":
                        None,
                }
                nl            )

    def test_mismatch_base_schema_fails(self):
        # mismatch base schema
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            AllofWithBaseSchema(
                {
                    "foo":
                        "quux",
                    "baz":
                        None,
                }
                nl            )

    def test_mismatch_both_fails(self):
        # mismatch both
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            AllofWithBaseSchema(
                {
                    "bar":
                        2,
                }
                nl            )

    def test_mismatch_second_allof_fails(self):
        # mismatch second allOf
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
            AllofWithBaseSchema(
                {
                    "foo":
                        "quux",
                    "bar":
                        2,
                }
                nl            )


if __name__ == '__main__':
    unittest.main()
