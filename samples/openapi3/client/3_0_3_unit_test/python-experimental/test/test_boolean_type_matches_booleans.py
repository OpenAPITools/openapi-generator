# coding: utf-8

"""
    openapi 3.0.3 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

import unittest

import unit_test_api
from unit_test_api.model.boolean_type_matches_booleans import BooleanTypeMatchesBooleans


class TestBooleanTypeMatchesBooleans(unittest.TestCase):
    """BooleanTypeMatchesBooleans unit test stubs"""

    def test_an_empty_string_is_not_a_boolean_fails(self):
        # an empty string is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(

                ""            )

    def test_a_float_is_not_a_boolean_fails(self):
        # a float is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(
                1.1            )

    def test_null_is_not_a_boolean_fails(self):
        # null is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(

                None            )

    def test_zero_is_not_a_boolean_fails(self):
        # zero is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(
                0            )

    def test_an_array_is_not_a_boolean_fails(self):
        # an array is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(
                [
                ]
            )

    def test_a_string_is_not_a_boolean_fails(self):
        # a string is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(

                "foo"            )

    def test_false_is_a_boolean_passes(self):
        # false is a boolean
        BooleanTypeMatchesBooleans(

            False        )

    def test_an_integer_is_not_a_boolean_fails(self):
        # an integer is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(
                1            )

    def test_true_is_a_boolean_passes(self):
        # true is a boolean
        BooleanTypeMatchesBooleans(

            True        )

    def test_an_object_is_not_a_boolean_fails(self):
        # an object is not a boolean
        with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError, TypeError)):
            BooleanTypeMatchesBooleans(
                {
                }
            )


if __name__ == '__main__':
    unittest.main()
