# coding: utf-8

"""
    openapi 3.0.3 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

import unittest
from unittest.mock import patch

import urllib3

import unit_test_api
from unit_test_api.api.content_type_json_api import ContentTypeJsonApi  # noqa: E501
from unit_test_api import configuration, schemas, api_client

from . import ApiTestMixin


class TestContentTypeJsonApi(ApiTestMixin, unittest.TestCase):
    """ContentTypeJsonApi unit test stubs"""
    _configuration = configuration.Configuration()

    def setUp(self):
        used_api_client = api_client.ApiClient(configuration=self._configuration)
        self.api = ContentTypeJsonApi(api_client=used_api_client)  # noqa: E501

    def tearDown(self):
        pass

    def test_post_additionalproperties_allows_a_schema_which_should_validate_request_body(self):
        """Test case for post_additionalproperties_allows_a_schema_which_should_validate_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_allows_a_schema_which_should_validate_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_no_additional_properties_is_valid_passes
        # no additional properties is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_allows_a_schema_which_should_validate_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_additional_invalid_property_is_invalid_fails
        # an additional invalid property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "quux":
                        12,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_additionalproperties_allows_a_schema_which_should_validate_request_body(body=body)

        # test_an_additional_valid_property_is_valid_passes
        # an additional valid property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "quux":
                        True,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_allows_a_schema_which_should_validate_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_additionalproperties_allows_a_schema_which_should_validate_response_body_for_content_types(self):
        """Test case for post_additionalproperties_allows_a_schema_which_should_validate_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_allows_a_schema_which_should_validate_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_no_additional_properties_is_valid_passes
        # no additional properties is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_allows_a_schema_which_should_validate_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_additional_invalid_property_is_invalid_fails
        # an additional invalid property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "quux":
                        12,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_additionalproperties_allows_a_schema_which_should_validate_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_additional_valid_property_is_valid_passes
        # an additional valid property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "quux":
                        True,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_allows_a_schema_which_should_validate_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_additionalproperties_are_allowed_by_default_request_body(self):
        """Test case for post_additionalproperties_are_allowed_by_default_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_are_allowed_by_default_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_additional_properties_are_allowed_passes
        # additional properties are allowed
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "quux":
                        True,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_are_allowed_by_default_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAdditionalpropertiesAreAllowedByDefaultRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_additionalproperties_are_allowed_by_default_response_body_for_content_types(self):
        """Test case for post_additionalproperties_are_allowed_by_default_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_are_allowed_by_default_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_additional_properties_are_allowed_passes
        # additional properties are allowed
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "quux":
                        True,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_are_allowed_by_default_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_additionalproperties_can_exist_by_itself_request_body(self):
        """Test case for post_additionalproperties_can_exist_by_itself_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_can_exist_by_itself_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_an_additional_invalid_property_is_invalid_fails
        # an additional invalid property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_additionalproperties_can_exist_by_itself_request_body(body=body)

        # test_an_additional_valid_property_is_valid_passes
        # an additional valid property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        True,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_can_exist_by_itself_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAdditionalpropertiesCanExistByItselfRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_additionalproperties_can_exist_by_itself_response_body_for_content_types(self):
        """Test case for post_additionalproperties_can_exist_by_itself_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_can_exist_by_itself_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_an_additional_invalid_property_is_invalid_fails
        # an additional invalid property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_additionalproperties_can_exist_by_itself_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_additional_valid_property_is_valid_passes
        # an additional valid property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        True,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_can_exist_by_itself_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_additionalproperties_should_not_look_in_applicators_request_body(self):
        """Test case for post_additionalproperties_should_not_look_in_applicators_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_should_not_look_in_applicators_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_properties_defined_in_allof_are_not_examined_fails
        # properties defined in allOf are not examined
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        True,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_additionalproperties_should_not_look_in_applicators_request_body(body=body)

        # test_valid_test_case_passes
        # valid test case
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        False,
                    "bar":
                        True,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_should_not_look_in_applicators_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAdditionalpropertiesShouldNotLookInApplicatorsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_additionalproperties_should_not_look_in_applicators_response_body_for_content_types(self):
        """Test case for post_additionalproperties_should_not_look_in_applicators_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_additionalproperties_should_not_look_in_applicators_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_properties_defined_in_allof_are_not_examined_fails
        # properties defined in allOf are not examined
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        True,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_additionalproperties_should_not_look_in_applicators_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesShouldNotLookInApplicatorsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_valid_test_case_passes
        # valid test case
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        False,
                    "bar":
                        True,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_additionalproperties_should_not_look_in_applicators_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAdditionalpropertiesShouldNotLookInApplicatorsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_allof_combined_with_anyof_oneof_request_body(self):
        """Test case for post_allof_combined_with_anyof_oneof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_combined_with_anyof_oneof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_allof_true_anyof_false_oneof_false_fails
        # allOf: true, anyOf: false, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)

        # test_allof_false_anyof_false_oneof_true_fails
        # allOf: false, anyOf: false, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                5
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)

        # test_allof_false_anyof_true_oneof_true_fails
        # allOf: false, anyOf: true, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                15
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)

        # test_allof_true_anyof_true_oneof_false_fails
        # allOf: true, anyOf: true, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                6
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)

        # test_allof_true_anyof_true_oneof_true_passes
        # allOf: true, anyOf: true, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                30
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_combined_with_anyof_oneof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofCombinedWithAnyofOneofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_allof_true_anyof_false_oneof_true_fails
        # allOf: true, anyOf: false, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                10
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)

        # test_allof_false_anyof_true_oneof_false_fails
        # allOf: false, anyOf: true, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)

        # test_allof_false_anyof_false_oneof_false_fails
        # allOf: false, anyOf: false, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_combined_with_anyof_oneof_request_body(body=body)



    def test_post_allof_combined_with_anyof_oneof_response_body_for_content_types(self):
        """Test case for post_allof_combined_with_anyof_oneof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_combined_with_anyof_oneof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_allof_true_anyof_false_oneof_false_fails
        # allOf: true, anyOf: false, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_allof_false_anyof_false_oneof_true_fails
        # allOf: false, anyOf: false, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_allof_false_anyof_true_oneof_true_fails
        # allOf: false, anyOf: true, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                15
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_allof_true_anyof_true_oneof_false_fails
        # allOf: true, anyOf: true, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                6
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_allof_true_anyof_true_oneof_true_passes
        # allOf: true, anyOf: true, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                30
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_allof_true_anyof_false_oneof_true_fails
        # allOf: true, anyOf: false, oneOf: true
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                10
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_allof_false_anyof_true_oneof_false_fails
        # allOf: false, anyOf: true, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_allof_false_anyof_false_oneof_false_fails
        # allOf: false, anyOf: false, oneOf: false
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_combined_with_anyof_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_allof_request_body(self):
        """Test case for post_allof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_allof_passes
        # allOf
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_mismatch_first_fails
        # mismatch first
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_request_body(body=body)

        # test_mismatch_second_fails
        # mismatch second
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_request_body(body=body)

        # test_wrong_type_fails
        # wrong type
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        "quux",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_request_body(body=body)



    def test_post_allof_response_body_for_content_types(self):
        """Test case for post_allof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_allof_passes
        # allOf
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_mismatch_first_fails
        # mismatch first
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_mismatch_second_fails
        # mismatch second
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_wrong_type_fails
        # wrong type
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        "quux",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_allof_simple_types_request_body(self):
        """Test case for post_allof_simple_types_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_simple_types_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_valid_passes
        # valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                25
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_simple_types_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofSimpleTypesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_mismatch_one_fails
        # mismatch one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                35
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_simple_types_request_body(body=body)



    def test_post_allof_simple_types_response_body_for_content_types(self):
        """Test case for post_allof_simple_types_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_simple_types_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_valid_passes
        # valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                25
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_simple_types_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofSimpleTypesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_mismatch_one_fails
        # mismatch one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                35
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_simple_types_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofSimpleTypesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_allof_with_base_schema_request_body(self):
        """Test case for post_allof_with_base_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_base_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_valid_passes
        # valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "quux",
                    "bar":
                        2,
                    "baz":
                        None,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_with_base_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofWithBaseSchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_mismatch_first_allof_fails
        # mismatch first allOf
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                    "baz":
                        None,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_with_base_schema_request_body(body=body)

        # test_mismatch_base_schema_fails
        # mismatch base schema
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "quux",
                    "baz":
                        None,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_with_base_schema_request_body(body=body)

        # test_mismatch_both_fails
        # mismatch both
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_with_base_schema_request_body(body=body)

        # test_mismatch_second_allof_fails
        # mismatch second allOf
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "quux",
                    "bar":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_with_base_schema_request_body(body=body)



    def test_post_allof_with_base_schema_response_body_for_content_types(self):
        """Test case for post_allof_with_base_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_base_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_valid_passes
        # valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "quux",
                    "bar":
                        2,
                    "baz":
                        None,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_with_base_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_mismatch_first_allof_fails
        # mismatch first allOf
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                    "baz":
                        None,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_mismatch_base_schema_fails
        # mismatch base schema
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "quux",
                    "baz":
                        None,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_mismatch_both_fails
        # mismatch both
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_mismatch_second_allof_fails
        # mismatch second allOf
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "quux",
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_allof_with_one_empty_schema_request_body(self):
        """Test case for post_allof_with_one_empty_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_one_empty_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_any_data_is_valid_passes
        # any data is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_with_one_empty_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofWithOneEmptySchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_allof_with_one_empty_schema_response_body_for_content_types(self):
        """Test case for post_allof_with_one_empty_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_one_empty_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_any_data_is_valid_passes
        # any data is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_with_one_empty_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithOneEmptySchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_allof_with_the_first_empty_schema_request_body(self):
        """Test case for post_allof_with_the_first_empty_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_the_first_empty_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_string_is_invalid_fails
        # string is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_with_the_first_empty_schema_request_body(body=body)

        # test_number_is_valid_passes
        # number is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_with_the_first_empty_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofWithTheFirstEmptySchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_allof_with_the_first_empty_schema_response_body_for_content_types(self):
        """Test case for post_allof_with_the_first_empty_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_the_first_empty_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_string_is_invalid_fails
        # string is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_with_the_first_empty_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_number_is_valid_passes
        # number is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_with_the_first_empty_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_allof_with_the_last_empty_schema_request_body(self):
        """Test case for post_allof_with_the_last_empty_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_the_last_empty_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_string_is_invalid_fails
        # string is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_allof_with_the_last_empty_schema_request_body(body=body)

        # test_number_is_valid_passes
        # number is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_with_the_last_empty_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofWithTheLastEmptySchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_allof_with_the_last_empty_schema_response_body_for_content_types(self):
        """Test case for post_allof_with_the_last_empty_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_the_last_empty_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_string_is_invalid_fails
        # string is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_allof_with_the_last_empty_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithTheLastEmptySchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_number_is_valid_passes
        # number is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_with_the_last_empty_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithTheLastEmptySchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_allof_with_two_empty_schemas_request_body(self):
        """Test case for post_allof_with_two_empty_schemas_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_two_empty_schemas_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_any_data_is_valid_passes
        # any data is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_allof_with_two_empty_schemas_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAllofWithTwoEmptySchemasRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_allof_with_two_empty_schemas_response_body_for_content_types(self):
        """Test case for post_allof_with_two_empty_schemas_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_allof_with_two_empty_schemas_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_any_data_is_valid_passes
        # any data is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_allof_with_two_empty_schemas_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAllofWithTwoEmptySchemasResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_anyof_complex_types_request_body(self):
        """Test case for post_anyof_complex_types_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_complex_types_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_second_anyof_valid_complex_passes
        # second anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_complex_types_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofComplexTypesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_neither_anyof_valid_complex_fails
        # neither anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        2,
                    "bar":
                        "quux",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_anyof_complex_types_request_body(body=body)

        # test_both_anyof_valid_complex_passes
        # both anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_complex_types_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofComplexTypesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_first_anyof_valid_complex_passes
        # first anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_complex_types_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofComplexTypesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_anyof_complex_types_response_body_for_content_types(self):
        """Test case for post_anyof_complex_types_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_complex_types_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_second_anyof_valid_complex_passes
        # second anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_complex_types_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofComplexTypesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_neither_anyof_valid_complex_fails
        # neither anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        2,
                    "bar":
                        "quux",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_anyof_complex_types_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofComplexTypesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_both_anyof_valid_complex_passes
        # both anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_complex_types_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofComplexTypesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_first_anyof_valid_complex_passes
        # first anyOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_complex_types_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofComplexTypesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_anyof_request_body(self):
        """Test case for post_anyof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_second_anyof_valid_passes
        # second anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.5
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_neither_anyof_valid_fails
        # neither anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.5
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_anyof_request_body(body=body)

        # test_both_anyof_valid_passes
        # both anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_first_anyof_valid_passes
        # first anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_anyof_response_body_for_content_types(self):
        """Test case for post_anyof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_second_anyof_valid_passes
        # second anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_neither_anyof_valid_fails
        # neither anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_anyof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_both_anyof_valid_passes
        # both anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_first_anyof_valid_passes
        # first anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_anyof_with_base_schema_request_body(self):
        """Test case for post_anyof_with_base_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_with_base_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_one_anyof_valid_passes
        # one anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_with_base_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofWithBaseSchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_both_anyof_invalid_fails
        # both anyOf invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_anyof_with_base_schema_request_body(body=body)

        # test_mismatch_base_schema_fails
        # mismatch base schema
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_anyof_with_base_schema_request_body(body=body)



    def test_post_anyof_with_base_schema_response_body_for_content_types(self):
        """Test case for post_anyof_with_base_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_with_base_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_one_anyof_valid_passes
        # one anyOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_with_base_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_both_anyof_invalid_fails
        # both anyOf invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_anyof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_mismatch_base_schema_fails
        # mismatch base schema
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_anyof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_anyof_with_one_empty_schema_request_body(self):
        """Test case for post_anyof_with_one_empty_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_with_one_empty_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_string_is_valid_passes
        # string is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_with_one_empty_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofWithOneEmptySchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_number_is_valid_passes
        # number is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_anyof_with_one_empty_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postAnyofWithOneEmptySchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_anyof_with_one_empty_schema_response_body_for_content_types(self):
        """Test case for post_anyof_with_one_empty_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_anyof_with_one_empty_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_string_is_valid_passes
        # string is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_with_one_empty_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofWithOneEmptySchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_number_is_valid_passes
        # number is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_anyof_with_one_empty_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postAnyofWithOneEmptySchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_array_type_matches_arrays_request_body(self):
        """Test case for post_array_type_matches_arrays_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_array_type_matches_arrays_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_a_float_is_not_an_array_fails
        # a float is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_array_type_matches_arrays_request_body(body=body)

        # test_a_boolean_is_not_an_array_fails
        # a boolean is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_array_type_matches_arrays_request_body(body=body)

        # test_null_is_not_an_array_fails
        # null is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_array_type_matches_arrays_request_body(body=body)

        # test_an_object_is_not_an_array_fails
        # an object is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_array_type_matches_arrays_request_body(body=body)

        # test_a_string_is_not_an_array_fails
        # a string is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_array_type_matches_arrays_request_body(body=body)

        # test_an_array_is_an_array_passes
        # an array is an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_array_type_matches_arrays_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postArrayTypeMatchesArraysRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_integer_is_not_an_array_fails
        # an integer is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_array_type_matches_arrays_request_body(body=body)



    def test_post_array_type_matches_arrays_response_body_for_content_types(self):
        """Test case for post_array_type_matches_arrays_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_array_type_matches_arrays_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_a_float_is_not_an_array_fails
        # a float is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_array_type_matches_arrays_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_boolean_is_not_an_array_fails
        # a boolean is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_array_type_matches_arrays_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_not_an_array_fails
        # null is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_array_type_matches_arrays_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_object_is_not_an_array_fails
        # an object is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_array_type_matches_arrays_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_not_an_array_fails
        # a string is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_array_type_matches_arrays_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_array_is_an_array_passes
        # an array is an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_array_type_matches_arrays_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_integer_is_not_an_array_fails
        # an integer is not an array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_array_type_matches_arrays_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_boolean_type_matches_booleans_request_body(self):
        """Test case for post_boolean_type_matches_booleans_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_boolean_type_matches_booleans_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_an_empty_string_is_not_a_boolean_fails
        # an empty string is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_a_float_is_not_a_boolean_fails
        # a float is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_null_is_not_a_boolean_fails
        # null is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_zero_is_not_a_boolean_fails
        # zero is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_an_array_is_not_a_boolean_fails
        # an array is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_a_string_is_not_a_boolean_fails
        # a string is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_false_is_a_boolean_passes
        # false is a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_boolean_type_matches_booleans_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postBooleanTypeMatchesBooleansRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_integer_is_not_a_boolean_fails
        # an integer is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)

        # test_true_is_a_boolean_passes
        # true is a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_boolean_type_matches_booleans_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postBooleanTypeMatchesBooleansRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_object_is_not_a_boolean_fails
        # an object is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_boolean_type_matches_booleans_request_body(body=body)



    def test_post_boolean_type_matches_booleans_response_body_for_content_types(self):
        """Test case for post_boolean_type_matches_booleans_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_boolean_type_matches_booleans_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_an_empty_string_is_not_a_boolean_fails
        # an empty string is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_float_is_not_a_boolean_fails
        # a float is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_not_a_boolean_fails
        # null is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_zero_is_not_a_boolean_fails
        # zero is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_array_is_not_a_boolean_fails
        # an array is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_not_a_boolean_fails
        # a string is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_false_is_a_boolean_passes
        # false is a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_integer_is_not_a_boolean_fails
        # an integer is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_true_is_a_boolean_passes
        # true is a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_object_is_not_a_boolean_fails
        # an object is not a boolean
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_boolean_type_matches_booleans_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_by_int_request_body(self):
        """Test case for post_by_int_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_by_int_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_int_by_int_fail_fails
        # int by int fail
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                7
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_by_int_request_body(body=body)

        # test_int_by_int_passes
        # int by int
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                10
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_by_int_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postByIntRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_by_int_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postByIntRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_by_int_response_body_for_content_types(self):
        """Test case for post_by_int_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_by_int_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_int_by_int_fail_fails
        # int by int fail
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_by_int_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postByIntResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_int_by_int_passes
        # int by int
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                10
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_by_int_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postByIntResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_by_int_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postByIntResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_by_number_request_body(self):
        """Test case for post_by_number_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_by_number_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_45_is_multiple_of15_passes
        # 4.5 is multiple of 1.5
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                4.5
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_by_number_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postByNumberRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_35_is_not_multiple_of15_fails
        # 35 is not multiple of 1.5
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                35
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_by_number_request_body(body=body)

        # test_zero_is_multiple_of_anything_passes
        # zero is multiple of anything
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_by_number_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postByNumberRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_by_number_response_body_for_content_types(self):
        """Test case for post_by_number_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_by_number_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_45_is_multiple_of15_passes
        # 4.5 is multiple of 1.5
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                4.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_by_number_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postByNumberResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_35_is_not_multiple_of15_fails
        # 35 is not multiple of 1.5
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                35
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_by_number_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postByNumberResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_zero_is_multiple_of_anything_passes
        # zero is multiple of anything
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_by_number_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postByNumberResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_by_small_number_request_body(self):
        """Test case for post_by_small_number_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_by_small_number_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_000751_is_not_multiple_of00001_fails
        # 0.00751 is not multiple of 0.0001
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.00751
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_by_small_number_request_body(body=body)

        # test_00075_is_multiple_of00001_passes
        # 0.0075 is multiple of 0.0001
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0075
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_by_small_number_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postBySmallNumberRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_by_small_number_response_body_for_content_types(self):
        """Test case for post_by_small_number_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_by_small_number_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_000751_is_not_multiple_of00001_fails
        # 0.00751 is not multiple of 0.0001
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.00751
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_by_small_number_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBySmallNumberResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_00075_is_multiple_of00001_passes
        # 0.0075 is multiple of 0.0001
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0075
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_by_small_number_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postBySmallNumberResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_date_time_format_request_body(self):
        """Test case for post_date_time_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_date_time_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_date_time_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postDateTimeFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_date_time_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postDateTimeFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_date_time_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postDateTimeFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_date_time_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postDateTimeFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_date_time_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postDateTimeFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_date_time_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postDateTimeFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_date_time_format_response_body_for_content_types(self):
        """Test case for post_date_time_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_date_time_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_date_time_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postDateTimeFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_date_time_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postDateTimeFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_date_time_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postDateTimeFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_date_time_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postDateTimeFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_date_time_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postDateTimeFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_date_time_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postDateTimeFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_email_format_request_body(self):
        """Test case for post_email_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_email_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_email_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEmailFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_email_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEmailFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_email_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEmailFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_email_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEmailFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_email_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEmailFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_email_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEmailFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_email_format_response_body_for_content_types(self):
        """Test case for post_email_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_email_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_email_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEmailFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_email_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEmailFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_email_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEmailFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_email_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEmailFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_email_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEmailFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_email_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEmailFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_enum_with0_does_not_match_false_request_body(self):
        """Test case for post_enum_with0_does_not_match_false_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with0_does_not_match_false_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_integer_zero_is_valid_passes
        # integer zero is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with0_does_not_match_false_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWith0DoesNotMatchFalseRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_float_zero_is_valid_passes
        # float zero is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with0_does_not_match_false_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWith0DoesNotMatchFalseRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_false_is_invalid_fails
        # false is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with0_does_not_match_false_request_body(body=body)



    def test_post_enum_with0_does_not_match_false_response_body_for_content_types(self):
        """Test case for post_enum_with0_does_not_match_false_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with0_does_not_match_false_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_integer_zero_is_valid_passes
        # integer zero is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with0_does_not_match_false_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_float_zero_is_valid_passes
        # float zero is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with0_does_not_match_false_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_false_is_invalid_fails
        # false is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with0_does_not_match_false_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_enum_with1_does_not_match_true_request_body(self):
        """Test case for post_enum_with1_does_not_match_true_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with1_does_not_match_true_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_true_is_invalid_fails
        # true is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with1_does_not_match_true_request_body(body=body)

        # test_integer_one_is_valid_passes
        # integer one is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with1_does_not_match_true_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWith1DoesNotMatchTrueRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_float_one_is_valid_passes
        # float one is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with1_does_not_match_true_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWith1DoesNotMatchTrueRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_enum_with1_does_not_match_true_response_body_for_content_types(self):
        """Test case for post_enum_with1_does_not_match_true_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with1_does_not_match_true_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_true_is_invalid_fails
        # true is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with1_does_not_match_true_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_integer_one_is_valid_passes
        # integer one is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with1_does_not_match_true_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_float_one_is_valid_passes
        # float one is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with1_does_not_match_true_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_enum_with_escaped_characters_request_body(self):
        """Test case for post_enum_with_escaped_characters_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with_escaped_characters_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_member2_is_valid_passes
        # member 2 is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo\rbar"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with_escaped_characters_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWithEscapedCharactersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_member1_is_valid_passes
        # member 1 is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo\nbar"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with_escaped_characters_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWithEscapedCharactersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_another_string_is_invalid_fails
        # another string is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "abc"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with_escaped_characters_request_body(body=body)



    def test_post_enum_with_escaped_characters_response_body_for_content_types(self):
        """Test case for post_enum_with_escaped_characters_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with_escaped_characters_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_member2_is_valid_passes
        # member 2 is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo\rbar"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with_escaped_characters_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithEscapedCharactersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_member1_is_valid_passes
        # member 1 is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo\nbar"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with_escaped_characters_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithEscapedCharactersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_another_string_is_invalid_fails
        # another string is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "abc"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with_escaped_characters_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithEscapedCharactersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_enum_with_false_does_not_match0_request_body(self):
        """Test case for post_enum_with_false_does_not_match0_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with_false_does_not_match0_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_false_is_valid_passes
        # false is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with_false_does_not_match0_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWithFalseDoesNotMatch0RequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_float_zero_is_invalid_fails
        # float zero is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with_false_does_not_match0_request_body(body=body)

        # test_integer_zero_is_invalid_fails
        # integer zero is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with_false_does_not_match0_request_body(body=body)



    def test_post_enum_with_false_does_not_match0_response_body_for_content_types(self):
        """Test case for post_enum_with_false_does_not_match0_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with_false_does_not_match0_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_false_is_valid_passes
        # false is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with_false_does_not_match0_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_float_zero_is_invalid_fails
        # float zero is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with_false_does_not_match0_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_integer_zero_is_invalid_fails
        # integer zero is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with_false_does_not_match0_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_enum_with_true_does_not_match1_request_body(self):
        """Test case for post_enum_with_true_does_not_match1_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with_true_does_not_match1_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_float_one_is_invalid_fails
        # float one is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with_true_does_not_match1_request_body(body=body)

        # test_true_is_valid_passes
        # true is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enum_with_true_does_not_match1_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumWithTrueDoesNotMatch1RequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_integer_one_is_invalid_fails
        # integer one is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enum_with_true_does_not_match1_request_body(body=body)



    def test_post_enum_with_true_does_not_match1_response_body_for_content_types(self):
        """Test case for post_enum_with_true_does_not_match1_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enum_with_true_does_not_match1_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_float_one_is_invalid_fails
        # float one is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with_true_does_not_match1_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_true_is_valid_passes
        # true is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enum_with_true_does_not_match1_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_integer_one_is_invalid_fails
        # integer one is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enum_with_true_does_not_match1_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_enums_in_properties_request_body(self):
        """Test case for post_enums_in_properties_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enums_in_properties_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_missing_optional_property_is_valid_passes
        # missing optional property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        "bar",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enums_in_properties_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumsInPropertiesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_wrong_foo_value_fails
        # wrong foo value
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foot",
                    "bar":
                        "bar",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enums_in_properties_request_body(body=body)

        # test_both_properties_are_valid_passes
        # both properties are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foo",
                    "bar":
                        "bar",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_enums_in_properties_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postEnumsInPropertiesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_wrong_bar_value_fails
        # wrong bar value
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foo",
                    "bar":
                        "bart",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enums_in_properties_request_body(body=body)

        # test_missing_all_properties_is_invalid_fails
        # missing all properties is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enums_in_properties_request_body(body=body)

        # test_missing_required_property_is_invalid_fails
        # missing required property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foo",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_enums_in_properties_request_body(body=body)



    def test_post_enums_in_properties_response_body_for_content_types(self):
        """Test case for post_enums_in_properties_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_enums_in_properties_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_missing_optional_property_is_valid_passes
        # missing optional property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        "bar",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enums_in_properties_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumsInPropertiesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_wrong_foo_value_fails
        # wrong foo value
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foot",
                    "bar":
                        "bar",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enums_in_properties_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumsInPropertiesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_both_properties_are_valid_passes
        # both properties are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foo",
                    "bar":
                        "bar",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_enums_in_properties_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumsInPropertiesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_wrong_bar_value_fails
        # wrong bar value
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foo",
                    "bar":
                        "bart",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enums_in_properties_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumsInPropertiesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_missing_all_properties_is_invalid_fails
        # missing all properties is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enums_in_properties_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumsInPropertiesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_missing_required_property_is_invalid_fails
        # missing required property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "foo",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_enums_in_properties_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postEnumsInPropertiesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_forbidden_property_request_body(self):
        """Test case for post_forbidden_property_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_forbidden_property_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_present_fails
        # property present
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_forbidden_property_request_body(body=body)

        # test_property_absent_passes
        # property absent
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        1,
                    "baz":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_forbidden_property_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postForbiddenPropertyRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_forbidden_property_response_body_for_content_types(self):
        """Test case for post_forbidden_property_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_forbidden_property_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_present_fails
        # property present
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_forbidden_property_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postForbiddenPropertyResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_property_absent_passes
        # property absent
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        1,
                    "baz":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_forbidden_property_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postForbiddenPropertyResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_hostname_format_request_body(self):
        """Test case for post_hostname_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_hostname_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_hostname_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postHostnameFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_hostname_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postHostnameFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_hostname_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postHostnameFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_hostname_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postHostnameFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_hostname_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postHostnameFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_hostname_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postHostnameFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_hostname_format_response_body_for_content_types(self):
        """Test case for post_hostname_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_hostname_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_hostname_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postHostnameFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_hostname_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postHostnameFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_hostname_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postHostnameFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_hostname_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postHostnameFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_hostname_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postHostnameFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_hostname_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postHostnameFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_integer_type_matches_integers_request_body(self):
        """Test case for post_integer_type_matches_integers_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_integer_type_matches_integers_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_an_object_is_not_an_integer_fails
        # an object is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)

        # test_a_string_is_not_an_integer_fails
        # a string is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)

        # test_null_is_not_an_integer_fails
        # null is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)

        # test_a_float_with_zero_fractional_part_is_an_integer_passes
        # a float with zero fractional part is an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_integer_type_matches_integers_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIntegerTypeMatchesIntegersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_float_is_not_an_integer_fails
        # a float is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)

        # test_a_boolean_is_not_an_integer_fails
        # a boolean is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)

        # test_an_integer_is_an_integer_passes
        # an integer is an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_integer_type_matches_integers_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIntegerTypeMatchesIntegersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_string_is_still_not_an_integer_even_if_it_looks_like_one_fails
        # a string is still not an integer, even if it looks like one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "1"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)

        # test_an_array_is_not_an_integer_fails
        # an array is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_integer_type_matches_integers_request_body(body=body)



    def test_post_integer_type_matches_integers_response_body_for_content_types(self):
        """Test case for post_integer_type_matches_integers_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_integer_type_matches_integers_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_an_object_is_not_an_integer_fails
        # an object is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_not_an_integer_fails
        # a string is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_not_an_integer_fails
        # null is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_float_with_zero_fractional_part_is_an_integer_passes
        # a float with zero fractional part is an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_integer_type_matches_integers_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_float_is_not_an_integer_fails
        # a float is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_boolean_is_not_an_integer_fails
        # a boolean is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_integer_is_an_integer_passes
        # an integer is an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_integer_type_matches_integers_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_string_is_still_not_an_integer_even_if_it_looks_like_one_fails
        # a string is still not an integer, even if it looks like one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "1"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_array_is_not_an_integer_fails
        # an array is not an integer
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_integer_type_matches_integers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_invalid_instance_should_not_raise_error_when_float_division_inf_request_body(self):
        """Test case for post_invalid_instance_should_not_raise_error_when_float_division_inf_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_invalid_instance_should_not_raise_error_when_float_division_inf_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_always_invalid_but_naive_implementations_may_raise_an_overflow_error_fails
        # always invalid, but naive implementations may raise an overflow error
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0E308
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_invalid_instance_should_not_raise_error_when_float_division_inf_request_body(body=body)

        # test_valid_integer_with_multipleof_float_passes
        # valid integer with multipleOf float
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123456789
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_invalid_instance_should_not_raise_error_when_float_division_inf_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_invalid_instance_should_not_raise_error_when_float_division_inf_response_body_for_content_types(self):
        """Test case for post_invalid_instance_should_not_raise_error_when_float_division_inf_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_invalid_instance_should_not_raise_error_when_float_division_inf_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_always_invalid_but_naive_implementations_may_raise_an_overflow_error_fails
        # always invalid, but naive implementations may raise an overflow error
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0E308
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_invalid_instance_should_not_raise_error_when_float_division_inf_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_valid_integer_with_multipleof_float_passes
        # valid integer with multipleOf float
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123456789
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_invalid_instance_should_not_raise_error_when_float_division_inf_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_invalid_string_value_for_default_request_body(self):
        """Test case for post_invalid_string_value_for_default_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_invalid_string_value_for_default_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_valid_when_property_is_specified_passes
        # valid when property is specified
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        "good",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_invalid_string_value_for_default_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postInvalidStringValueForDefaultRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_still_valid_when_the_invalid_default_is_used_passes
        # still valid when the invalid default is used
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_invalid_string_value_for_default_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postInvalidStringValueForDefaultRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_invalid_string_value_for_default_response_body_for_content_types(self):
        """Test case for post_invalid_string_value_for_default_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_invalid_string_value_for_default_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_valid_when_property_is_specified_passes
        # valid when property is specified
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        "good",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_invalid_string_value_for_default_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postInvalidStringValueForDefaultResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_still_valid_when_the_invalid_default_is_used_passes
        # still valid when the invalid default is used
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_invalid_string_value_for_default_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postInvalidStringValueForDefaultResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_ipv4_format_request_body(self):
        """Test case for post_ipv4_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ipv4_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv4FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv4FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv4FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv4FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv4FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv4FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_ipv4_format_response_body_for_content_types(self):
        """Test case for post_ipv4_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ipv4_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv4FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv4FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv4FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv4FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv4FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv4_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv4FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_ipv6_format_request_body(self):
        """Test case for post_ipv6_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ipv6_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv6FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv6FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv6FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv6FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv6FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postIpv6FormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_ipv6_format_response_body_for_content_types(self):
        """Test case for post_ipv6_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ipv6_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv6FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv6FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv6FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv6FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv6FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ipv6_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postIpv6FormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_json_pointer_format_request_body(self):
        """Test case for post_json_pointer_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_json_pointer_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postJsonPointerFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postJsonPointerFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postJsonPointerFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postJsonPointerFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postJsonPointerFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postJsonPointerFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_json_pointer_format_response_body_for_content_types(self):
        """Test case for post_json_pointer_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_json_pointer_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postJsonPointerFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postJsonPointerFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postJsonPointerFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postJsonPointerFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postJsonPointerFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_json_pointer_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postJsonPointerFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_maximum_validation_request_body(self):
        """Test case for post_maximum_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maximum_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_below_the_maximum_is_valid_passes
        # below the maximum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.6
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaximumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_boundary_point_is_valid_passes
        # boundary point is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaximumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_above_the_maximum_is_invalid_fails
        # above the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3.5
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_maximum_validation_request_body(body=body)

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "x"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaximumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_maximum_validation_response_body_for_content_types(self):
        """Test case for post_maximum_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maximum_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_below_the_maximum_is_valid_passes
        # below the maximum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.6
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_boundary_point_is_valid_passes
        # boundary point is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_above_the_maximum_is_invalid_fails
        # above the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_maximum_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "x"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_maximum_validation_with_unsigned_integer_request_body(self):
        """Test case for post_maximum_validation_with_unsigned_integer_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maximum_validation_with_unsigned_integer_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_below_the_maximum_is_invalid_passes
        # below the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                299.97
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_with_unsigned_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaximumValidationWithUnsignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_above_the_maximum_is_invalid_fails
        # above the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300.5
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_maximum_validation_with_unsigned_integer_request_body(body=body)

        # test_boundary_point_integer_is_valid_passes
        # boundary point integer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_with_unsigned_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaximumValidationWithUnsignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_boundary_point_float_is_valid_passes
        # boundary point float is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_with_unsigned_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaximumValidationWithUnsignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_maximum_validation_with_unsigned_integer_response_body_for_content_types(self):
        """Test case for post_maximum_validation_with_unsigned_integer_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maximum_validation_with_unsigned_integer_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_below_the_maximum_is_invalid_passes
        # below the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                299.97
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_with_unsigned_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_above_the_maximum_is_invalid_fails
        # above the maximum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_maximum_validation_with_unsigned_integer_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_boundary_point_integer_is_valid_passes
        # boundary point integer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_with_unsigned_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_boundary_point_float_is_valid_passes
        # boundary point float is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                300.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maximum_validation_with_unsigned_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_maxitems_validation_request_body(self):
        """Test case for post_maxitems_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxitems_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_too_long_is_invalid_fails
        # too long is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    3,
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_maxitems_validation_request_body(body=body)

        # test_ignores_non_arrays_passes
        # ignores non-arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_shorter_is_valid_passes
        # shorter is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_maxitems_validation_response_body_for_content_types(self):
        """Test case for post_maxitems_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxitems_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_too_long_is_invalid_fails
        # too long is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    3,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_maxitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_non_arrays_passes
        # ignores non-arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_shorter_is_valid_passes
        # shorter is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_maxlength_validation_request_body(self):
        """Test case for post_maxlength_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxlength_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_too_long_is_invalid_fails
        # too long is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_maxlength_validation_request_body(body=body)

        # test_ignores_non_strings_passes
        # ignores non-strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                100
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_shorter_is_valid_passes
        # shorter is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "f"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_two_supplementary_unicode_code_points_is_long_enough_passes
        # two supplementary Unicode code points is long enough
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "💩💩"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "fo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_maxlength_validation_response_body_for_content_types(self):
        """Test case for post_maxlength_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxlength_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_too_long_is_invalid_fails
        # too long is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_maxlength_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxlengthValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_non_strings_passes
        # ignores non-strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                100
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_shorter_is_valid_passes
        # shorter is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "f"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_two_supplementary_unicode_code_points_is_long_enough_passes
        # two supplementary Unicode code points is long enough
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "💩💩"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "fo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_maxproperties0_means_the_object_is_empty_request_body(self):
        """Test case for post_maxproperties0_means_the_object_is_empty_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxproperties0_means_the_object_is_empty_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_no_properties_is_valid_passes
        # no properties is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxproperties0_means_the_object_is_empty_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxproperties0MeansTheObjectIsEmptyRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_one_property_is_invalid_fails
        # one property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_maxproperties0_means_the_object_is_empty_request_body(body=body)



    def test_post_maxproperties0_means_the_object_is_empty_response_body_for_content_types(self):
        """Test case for post_maxproperties0_means_the_object_is_empty_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxproperties0_means_the_object_is_empty_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_no_properties_is_valid_passes
        # no properties is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxproperties0_means_the_object_is_empty_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_one_property_is_invalid_fails
        # one property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_maxproperties0_means_the_object_is_empty_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_maxproperties_validation_request_body(self):
        """Test case for post_maxproperties_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxproperties_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_too_long_is_invalid_fails
        # too long is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "baz":
                        3,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_maxproperties_validation_request_body(body=body)

        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    3,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_strings_passes
        # ignores strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_shorter_is_valid_passes
        # shorter is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMaxpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_maxproperties_validation_response_body_for_content_types(self):
        """Test case for post_maxproperties_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_maxproperties_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_too_long_is_invalid_fails
        # too long is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                    "baz":
                        3,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_maxproperties_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    3,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_strings_passes
        # ignores strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_shorter_is_valid_passes
        # shorter is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_maxproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMaxpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_minimum_validation_request_body(self):
        """Test case for post_minimum_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minimum_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_boundary_point_is_valid_passes
        # boundary point is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_below_the_minimum_is_invalid_fails
        # below the minimum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.6
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minimum_validation_request_body(body=body)

        # test_above_the_minimum_is_valid_passes
        # above the minimum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.6
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "x"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_minimum_validation_response_body_for_content_types(self):
        """Test case for post_minimum_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minimum_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_boundary_point_is_valid_passes
        # boundary point is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_below_the_minimum_is_invalid_fails
        # below the minimum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0.6
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minimum_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_above_the_minimum_is_valid_passes
        # above the minimum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.6
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "x"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_minimum_validation_with_signed_integer_request_body(self):
        """Test case for post_minimum_validation_with_signed_integer_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minimum_validation_with_signed_integer_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_boundary_point_is_valid_passes
        # boundary point is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -2
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationWithSignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_positive_above_the_minimum_is_valid_passes
        # positive above the minimum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationWithSignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_int_below_the_minimum_is_invalid_fails
        # int below the minimum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -3
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minimum_validation_with_signed_integer_request_body(body=body)

        # test_float_below_the_minimum_is_invalid_fails
        # float below the minimum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -2.0001
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minimum_validation_with_signed_integer_request_body(body=body)

        # test_boundary_point_with_float_is_valid_passes
        # boundary point with float is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -2.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationWithSignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_negative_above_the_minimum_is_valid_passes
        # negative above the minimum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationWithSignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "x"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinimumValidationWithSignedIntegerRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_minimum_validation_with_signed_integer_response_body_for_content_types(self):
        """Test case for post_minimum_validation_with_signed_integer_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minimum_validation_with_signed_integer_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_boundary_point_is_valid_passes
        # boundary point is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -2
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_positive_above_the_minimum_is_valid_passes
        # positive above the minimum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_int_below_the_minimum_is_invalid_fails
        # int below the minimum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -3
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_float_below_the_minimum_is_invalid_fails
        # float below the minimum is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -2.0001
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_boundary_point_with_float_is_valid_passes
        # boundary point with float is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -2.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_negative_above_the_minimum_is_valid_passes
        # negative above the minimum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                -1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_non_numbers_passes
        # ignores non-numbers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "x"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minimum_validation_with_signed_integer_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_minitems_validation_request_body(self):
        """Test case for post_minitems_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minitems_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_too_short_is_invalid_fails
        # too short is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minitems_validation_request_body(body=body)

        # test_ignores_non_arrays_passes
        # ignores non-arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_longer_is_valid_passes
        # longer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_minitems_validation_response_body_for_content_types(self):
        """Test case for post_minitems_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minitems_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_too_short_is_invalid_fails
        # too short is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_non_arrays_passes
        # ignores non-arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_longer_is_valid_passes
        # longer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_minlength_validation_request_body(self):
        """Test case for post_minlength_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minlength_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_too_short_is_invalid_fails
        # too short is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "f"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minlength_validation_request_body(body=body)

        # test_one_supplementary_unicode_code_point_is_not_long_enough_fails
        # one supplementary Unicode code point is not long enough
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "💩"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minlength_validation_request_body(body=body)

        # test_longer_is_valid_passes
        # longer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_non_strings_passes
        # ignores non-strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "fo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minlength_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinlengthValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_minlength_validation_response_body_for_content_types(self):
        """Test case for post_minlength_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minlength_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_too_short_is_invalid_fails
        # too short is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "f"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minlength_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinlengthValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_one_supplementary_unicode_code_point_is_not_long_enough_fails
        # one supplementary Unicode code point is not long enough
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "💩"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minlength_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinlengthValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_longer_is_valid_passes
        # longer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_non_strings_passes
        # ignores non-strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "fo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minlength_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinlengthValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_minproperties_validation_request_body(self):
        """Test case for post_minproperties_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minproperties_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_too_short_is_invalid_fails
        # too short is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_minproperties_validation_request_body(body=body)

        # test_ignores_strings_passes
        # ignores strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_longer_is_valid_passes
        # longer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postMinpropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_minproperties_validation_response_body_for_content_types(self):
        """Test case for post_minproperties_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_minproperties_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_too_short_is_invalid_fails
        # too short is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_minproperties_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_strings_passes
        # ignores strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_longer_is_valid_passes
        # longer is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_exact_length_is_valid_passes
        # exact length is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_minproperties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postMinpropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_nested_allof_to_check_validation_semantics_request_body(self):
        """Test case for post_nested_allof_to_check_validation_semantics_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_allof_to_check_validation_semantics_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_anything_non_null_is_invalid_fails
        # anything non-null is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_nested_allof_to_check_validation_semantics_request_body(body=body)

        # test_null_is_valid_passes
        # null is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_nested_allof_to_check_validation_semantics_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNestedAllofToCheckValidationSemanticsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_nested_allof_to_check_validation_semantics_response_body_for_content_types(self):
        """Test case for post_nested_allof_to_check_validation_semantics_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_allof_to_check_validation_semantics_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_anything_non_null_is_invalid_fails
        # anything non-null is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_nested_allof_to_check_validation_semantics_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_valid_passes
        # null is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_nested_allof_to_check_validation_semantics_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_nested_anyof_to_check_validation_semantics_request_body(self):
        """Test case for post_nested_anyof_to_check_validation_semantics_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_anyof_to_check_validation_semantics_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_anything_non_null_is_invalid_fails
        # anything non-null is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_nested_anyof_to_check_validation_semantics_request_body(body=body)

        # test_null_is_valid_passes
        # null is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_nested_anyof_to_check_validation_semantics_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNestedAnyofToCheckValidationSemanticsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_nested_anyof_to_check_validation_semantics_response_body_for_content_types(self):
        """Test case for post_nested_anyof_to_check_validation_semantics_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_anyof_to_check_validation_semantics_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_anything_non_null_is_invalid_fails
        # anything non-null is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_nested_anyof_to_check_validation_semantics_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_valid_passes
        # null is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_nested_anyof_to_check_validation_semantics_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_nested_items_request_body(self):
        """Test case for post_nested_items_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_items_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_valid_nested_array_passes
        # valid nested array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            [
                                1,
                            ],
                        ],
                        [
                            [
                                2,
                            ],
                            [
                                3,
                            ],
                        ],
                    ],
                    [
                        [
                            [
                                4,
                            ],
                            [
                                5,
                            ],
                            [
                                6,
                            ],
                        ],
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_nested_items_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNestedItemsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_nested_array_with_invalid_type_fails
        # nested array with invalid type
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            [
                                "1",
                            ],
                        ],
                        [
                            [
                                2,
                            ],
                            [
                                3,
                            ],
                        ],
                    ],
                    [
                        [
                            [
                                4,
                            ],
                            [
                                5,
                            ],
                            [
                                6,
                            ],
                        ],
                    ],
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_nested_items_request_body(body=body)

        # test_not_deep_enough_fails
        # not deep enough
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            1,
                        ],
                        [
                            2,
                        ],
                        [
                            3,
                        ],
                    ],
                    [
                        [
                            4,
                        ],
                        [
                            5,
                        ],
                        [
                            6,
                        ],
                    ],
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_nested_items_request_body(body=body)



    def test_post_nested_items_response_body_for_content_types(self):
        """Test case for post_nested_items_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_items_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_valid_nested_array_passes
        # valid nested array
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            [
                                1,
                            ],
                        ],
                        [
                            [
                                2,
                            ],
                            [
                                3,
                            ],
                        ],
                    ],
                    [
                        [
                            [
                                4,
                            ],
                            [
                                5,
                            ],
                            [
                                6,
                            ],
                        ],
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_nested_items_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedItemsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_nested_array_with_invalid_type_fails
        # nested array with invalid type
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            [
                                "1",
                            ],
                        ],
                        [
                            [
                                2,
                            ],
                            [
                                3,
                            ],
                        ],
                    ],
                    [
                        [
                            [
                                4,
                            ],
                            [
                                5,
                            ],
                            [
                                6,
                            ],
                        ],
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_nested_items_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedItemsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_not_deep_enough_fails
        # not deep enough
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            1,
                        ],
                        [
                            2,
                        ],
                        [
                            3,
                        ],
                    ],
                    [
                        [
                            4,
                        ],
                        [
                            5,
                        ],
                        [
                            6,
                        ],
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_nested_items_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedItemsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_nested_oneof_to_check_validation_semantics_request_body(self):
        """Test case for post_nested_oneof_to_check_validation_semantics_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_oneof_to_check_validation_semantics_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_anything_non_null_is_invalid_fails
        # anything non-null is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_nested_oneof_to_check_validation_semantics_request_body(body=body)

        # test_null_is_valid_passes
        # null is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_nested_oneof_to_check_validation_semantics_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNestedOneofToCheckValidationSemanticsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_nested_oneof_to_check_validation_semantics_response_body_for_content_types(self):
        """Test case for post_nested_oneof_to_check_validation_semantics_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nested_oneof_to_check_validation_semantics_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_anything_non_null_is_invalid_fails
        # anything non-null is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_nested_oneof_to_check_validation_semantics_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_valid_passes
        # null is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_nested_oneof_to_check_validation_semantics_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_not_more_complex_schema_request_body(self):
        """Test case for post_not_more_complex_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_not_more_complex_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_other_match_passes
        # other match
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_not_more_complex_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNotMoreComplexSchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_mismatch_fails
        # mismatch
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "bar",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_not_more_complex_schema_request_body(body=body)

        # test_match_passes
        # match
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_not_more_complex_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNotMoreComplexSchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_not_more_complex_schema_response_body_for_content_types(self):
        """Test case for post_not_more_complex_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_not_more_complex_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_other_match_passes
        # other match
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_not_more_complex_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNotMoreComplexSchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_mismatch_fails
        # mismatch
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "bar",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_not_more_complex_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNotMoreComplexSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_match_passes
        # match
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_not_more_complex_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNotMoreComplexSchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_not_request_body(self):
        """Test case for post_not_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_not_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_allowed_passes
        # allowed
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_not_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNotRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_disallowed_fails
        # disallowed
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_not_request_body(body=body)



    def test_post_not_response_body_for_content_types(self):
        """Test case for post_not_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_not_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_allowed_passes
        # allowed
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_not_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNotResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_disallowed_fails
        # disallowed
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_not_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNotResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_nul_characters_in_strings_request_body(self):
        """Test case for post_nul_characters_in_strings_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nul_characters_in_strings_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_match_string_with_nul_passes
        # match string with nul
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "hello\x00there"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_nul_characters_in_strings_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNulCharactersInStringsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_do_not_match_string_lacking_nul_fails
        # do not match string lacking nul
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "hellothere"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_nul_characters_in_strings_request_body(body=body)



    def test_post_nul_characters_in_strings_response_body_for_content_types(self):
        """Test case for post_nul_characters_in_strings_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_nul_characters_in_strings_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_match_string_with_nul_passes
        # match string with nul
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "hello\x00there"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_nul_characters_in_strings_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNulCharactersInStringsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_do_not_match_string_lacking_nul_fails
        # do not match string lacking nul
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "hellothere"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_nul_characters_in_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNulCharactersInStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_null_type_matches_only_the_null_object_request_body(self):
        """Test case for post_null_type_matches_only_the_null_object_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_null_type_matches_only_the_null_object_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_a_float_is_not_null_fails
        # a float is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_an_object_is_not_null_fails
        # an object is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_false_is_not_null_fails
        # false is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_an_integer_is_not_null_fails
        # an integer is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_true_is_not_null_fails
        # true is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_zero_is_not_null_fails
        # zero is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_an_empty_string_is_not_null_fails
        # an empty string is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_null_is_null_passes
        # null is null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_null_type_matches_only_the_null_object_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNullTypeMatchesOnlyTheNullObjectRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_array_is_not_null_fails
        # an array is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)

        # test_a_string_is_not_null_fails
        # a string is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_null_type_matches_only_the_null_object_request_body(body=body)



    def test_post_null_type_matches_only_the_null_object_response_body_for_content_types(self):
        """Test case for post_null_type_matches_only_the_null_object_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_null_type_matches_only_the_null_object_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_a_float_is_not_null_fails
        # a float is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_object_is_not_null_fails
        # an object is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_false_is_not_null_fails
        # false is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_integer_is_not_null_fails
        # an integer is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_true_is_not_null_fails
        # true is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_zero_is_not_null_fails
        # zero is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_empty_string_is_not_null_fails
        # an empty string is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_null_passes
        # null is null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_array_is_not_null_fails
        # an array is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_not_null_fails
        # a string is not null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_null_type_matches_only_the_null_object_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_number_type_matches_numbers_request_body(self):
        """Test case for post_number_type_matches_numbers_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_number_type_matches_numbers_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_an_array_is_not_a_number_fails
        # an array is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_number_type_matches_numbers_request_body(body=body)

        # test_null_is_not_a_number_fails
        # null is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_number_type_matches_numbers_request_body(body=body)

        # test_an_object_is_not_a_number_fails
        # an object is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_number_type_matches_numbers_request_body(body=body)

        # test_a_boolean_is_not_a_number_fails
        # a boolean is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_number_type_matches_numbers_request_body(body=body)

        # test_a_float_is_a_number_passes
        # a float is a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_number_type_matches_numbers_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNumberTypeMatchesNumbersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_string_is_still_not_a_number_even_if_it_looks_like_one_fails
        # a string is still not a number, even if it looks like one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "1"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_number_type_matches_numbers_request_body(body=body)

        # test_a_string_is_not_a_number_fails
        # a string is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_number_type_matches_numbers_request_body(body=body)

        # test_an_integer_is_a_number_passes
        # an integer is a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_number_type_matches_numbers_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNumberTypeMatchesNumbersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_float_with_zero_fractional_part_is_a_number_and_an_integer_passes
        # a float with zero fractional part is a number (and an integer)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_number_type_matches_numbers_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postNumberTypeMatchesNumbersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_number_type_matches_numbers_response_body_for_content_types(self):
        """Test case for post_number_type_matches_numbers_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_number_type_matches_numbers_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_an_array_is_not_a_number_fails
        # an array is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_number_type_matches_numbers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_not_a_number_fails
        # null is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_number_type_matches_numbers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_object_is_not_a_number_fails
        # an object is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_number_type_matches_numbers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_boolean_is_not_a_number_fails
        # a boolean is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_number_type_matches_numbers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_float_is_a_number_passes
        # a float is a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_number_type_matches_numbers_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_string_is_still_not_a_number_even_if_it_looks_like_one_fails
        # a string is still not a number, even if it looks like one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "1"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_number_type_matches_numbers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_not_a_number_fails
        # a string is not a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_number_type_matches_numbers_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_integer_is_a_number_passes
        # an integer is a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_number_type_matches_numbers_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_float_with_zero_fractional_part_is_a_number_and_an_integer_passes
        # a float with zero fractional part is a number (and an integer)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_number_type_matches_numbers_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_object_properties_validation_request_body(self):
        """Test case for post_object_properties_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_object_properties_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postObjectPropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postObjectPropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_one_property_invalid_is_invalid_fails
        # one property invalid is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        {
                        },
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_properties_validation_request_body(body=body)

        # test_both_properties_present_and_valid_is_valid_passes
        # both properties present and valid is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        "baz",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postObjectPropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_doesn_t_invalidate_other_properties_passes
        # doesn&#x27;t invalidate other properties
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "quux":
                        [
                        ],
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postObjectPropertiesValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_both_properties_invalid_is_invalid_fails
        # both properties invalid is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        [
                        ],
                    "bar":
                        {
                        },
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_properties_validation_request_body(body=body)



    def test_post_object_properties_validation_response_body_for_content_types(self):
        """Test case for post_object_properties_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_object_properties_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectPropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectPropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_one_property_invalid_is_invalid_fails
        # one property invalid is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        {
                        },
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_properties_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectPropertiesValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_both_properties_present_and_valid_is_valid_passes
        # both properties present and valid is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                    "bar":
                        "baz",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectPropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_doesn_t_invalidate_other_properties_passes
        # doesn&#x27;t invalidate other properties
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "quux":
                        [
                        ],
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_object_properties_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectPropertiesValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_both_properties_invalid_is_invalid_fails
        # both properties invalid is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        [
                        ],
                    "bar":
                        {
                        },
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_properties_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectPropertiesValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_object_type_matches_objects_request_body(self):
        """Test case for post_object_type_matches_objects_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_object_type_matches_objects_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_a_float_is_not_an_object_fails
        # a float is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_type_matches_objects_request_body(body=body)

        # test_null_is_not_an_object_fails
        # null is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_type_matches_objects_request_body(body=body)

        # test_an_array_is_not_an_object_fails
        # an array is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_type_matches_objects_request_body(body=body)

        # test_an_object_is_an_object_passes
        # an object is an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_object_type_matches_objects_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postObjectTypeMatchesObjectsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_string_is_not_an_object_fails
        # a string is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_type_matches_objects_request_body(body=body)

        # test_an_integer_is_not_an_object_fails
        # an integer is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_type_matches_objects_request_body(body=body)

        # test_a_boolean_is_not_an_object_fails
        # a boolean is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_object_type_matches_objects_request_body(body=body)



    def test_post_object_type_matches_objects_response_body_for_content_types(self):
        """Test case for post_object_type_matches_objects_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_object_type_matches_objects_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_a_float_is_not_an_object_fails
        # a float is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_type_matches_objects_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_not_an_object_fails
        # null is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_type_matches_objects_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_array_is_not_an_object_fails
        # an array is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_type_matches_objects_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_object_is_an_object_passes
        # an object is an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_object_type_matches_objects_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_string_is_not_an_object_fails
        # a string is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_type_matches_objects_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_integer_is_not_an_object_fails
        # an integer is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_type_matches_objects_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_boolean_is_not_an_object_fails
        # a boolean is not an object
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_object_type_matches_objects_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_oneof_complex_types_request_body(self):
        """Test case for post_oneof_complex_types_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_complex_types_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_first_oneof_valid_complex_passes
        # first oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_oneof_complex_types_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postOneofComplexTypesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_neither_oneof_valid_complex_fails
        # neither oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        2,
                    "bar":
                        "quux",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_complex_types_request_body(body=body)

        # test_both_oneof_valid_complex_fails
        # both oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_complex_types_request_body(body=body)

        # test_second_oneof_valid_complex_passes
        # second oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_oneof_complex_types_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postOneofComplexTypesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_oneof_complex_types_response_body_for_content_types(self):
        """Test case for post_oneof_complex_types_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_complex_types_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_first_oneof_valid_complex_passes
        # first oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_oneof_complex_types_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofComplexTypesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_neither_oneof_valid_complex_fails
        # neither oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        2,
                    "bar":
                        "quux",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_complex_types_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofComplexTypesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_both_oneof_valid_complex_fails
        # both oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                    "bar":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_complex_types_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofComplexTypesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_second_oneof_valid_complex_passes
        # second oneOf valid (complex)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        "baz",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_oneof_complex_types_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofComplexTypesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_oneof_request_body(self):
        """Test case for post_oneof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_second_oneof_valid_passes
        # second oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.5
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_oneof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postOneofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_both_oneof_valid_fails
        # both oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_request_body(body=body)

        # test_first_oneof_valid_passes
        # first oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_oneof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postOneofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_neither_oneof_valid_fails
        # neither oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.5
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_request_body(body=body)



    def test_post_oneof_response_body_for_content_types(self):
        """Test case for post_oneof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_second_oneof_valid_passes
        # second oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                2.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_oneof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_both_oneof_valid_fails
        # both oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_first_oneof_valid_passes
        # first oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_oneof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_neither_oneof_valid_fails
        # neither oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.5
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_oneof_with_base_schema_request_body(self):
        """Test case for post_oneof_with_base_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_with_base_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_both_oneof_valid_fails
        # both oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_with_base_schema_request_body(body=body)

        # test_mismatch_base_schema_fails
        # mismatch base schema
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_with_base_schema_request_body(body=body)

        # test_one_oneof_valid_passes
        # one oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_oneof_with_base_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postOneofWithBaseSchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_oneof_with_base_schema_response_body_for_content_types(self):
        """Test case for post_oneof_with_base_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_with_base_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_both_oneof_valid_fails
        # both oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_mismatch_base_schema_fails
        # mismatch base schema
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                3
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_with_base_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_one_oneof_valid_passes
        # one oneOf valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foobar"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_oneof_with_base_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofWithBaseSchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_oneof_with_empty_schema_request_body(self):
        """Test case for post_oneof_with_empty_schema_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_with_empty_schema_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_both_valid_invalid_fails
        # both valid - invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_oneof_with_empty_schema_request_body(body=body)

        # test_one_valid_valid_passes
        # one valid - valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_oneof_with_empty_schema_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postOneofWithEmptySchemaRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_oneof_with_empty_schema_response_body_for_content_types(self):
        """Test case for post_oneof_with_empty_schema_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_oneof_with_empty_schema_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_both_valid_invalid_fails
        # both valid - invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_oneof_with_empty_schema_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofWithEmptySchemaResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_one_valid_valid_passes
        # one valid - valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_oneof_with_empty_schema_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postOneofWithEmptySchemaResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_pattern_is_not_anchored_request_body(self):
        """Test case for post_pattern_is_not_anchored_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_pattern_is_not_anchored_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_matches_a_substring_passes
        # matches a substring
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "xxaayy"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_is_not_anchored_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternIsNotAnchoredRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_pattern_is_not_anchored_response_body_for_content_types(self):
        """Test case for post_pattern_is_not_anchored_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_pattern_is_not_anchored_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_matches_a_substring_passes
        # matches a substring
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "xxaayy"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_is_not_anchored_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternIsNotAnchoredResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_pattern_validation_request_body(self):
        """Test case for post_pattern_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_pattern_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_objects_passes
        # ignores objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_null_passes
        # ignores null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_floats_passes
        # ignores floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_non_matching_pattern_is_invalid_fails
        # a non-matching pattern is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "abc"
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_pattern_validation_request_body(body=body)

        # test_ignores_booleans_passes
        # ignores booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_matching_pattern_is_valid_passes
        # a matching pattern is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "aaa"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_integers_passes
        # ignores integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPatternValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_pattern_validation_response_body_for_content_types(self):
        """Test case for post_pattern_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_pattern_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_objects_passes
        # ignores objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_null_passes
        # ignores null
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_floats_passes
        # ignores floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.0
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_non_matching_pattern_is_invalid_fails
        # a non-matching pattern is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "abc"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_pattern_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_ignores_booleans_passes
        # ignores booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_matching_pattern_is_valid_passes
        # a matching pattern is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "aaa"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_integers_passes
        # ignores integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                123
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_pattern_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPatternValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_properties_with_escaped_characters_request_body(self):
        """Test case for post_properties_with_escaped_characters_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_properties_with_escaped_characters_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_object_with_all_numbers_is_valid_passes
        # object with all numbers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo\nbar":
                        1,
                    "foo\"bar":
                        1,
                    "foo\\bar":
                        1,
                    "foo\rbar":
                        1,
                    "foo\tbar":
                        1,
                    "foo\fbar":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_properties_with_escaped_characters_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPropertiesWithEscapedCharactersRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_object_with_strings_is_invalid_fails
        # object with strings is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo\nbar":
                        "1",
                    "foo\"bar":
                        "1",
                    "foo\\bar":
                        "1",
                    "foo\rbar":
                        "1",
                    "foo\tbar":
                        "1",
                    "foo\fbar":
                        "1",
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_properties_with_escaped_characters_request_body(body=body)



    def test_post_properties_with_escaped_characters_response_body_for_content_types(self):
        """Test case for post_properties_with_escaped_characters_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_properties_with_escaped_characters_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_object_with_all_numbers_is_valid_passes
        # object with all numbers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo\nbar":
                        1,
                    "foo\"bar":
                        1,
                    "foo\\bar":
                        1,
                    "foo\rbar":
                        1,
                    "foo\tbar":
                        1,
                    "foo\fbar":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_properties_with_escaped_characters_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPropertiesWithEscapedCharactersResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_object_with_strings_is_invalid_fails
        # object with strings is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo\nbar":
                        "1",
                    "foo\"bar":
                        "1",
                    "foo\\bar":
                        "1",
                    "foo\rbar":
                        "1",
                    "foo\tbar":
                        "1",
                    "foo\fbar":
                        "1",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_properties_with_escaped_characters_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPropertiesWithEscapedCharactersResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_property_named_ref_that_is_not_a_reference_request_body(self):
        """Test case for post_property_named_ref_that_is_not_a_reference_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_property_named_ref_that_is_not_a_reference_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_property_named_ref_that_is_not_a_reference_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postPropertyNamedRefThatIsNotAReferenceRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_property_named_ref_that_is_not_a_reference_request_body(body=body)



    def test_post_property_named_ref_that_is_not_a_reference_response_body_for_content_types(self):
        """Test case for post_property_named_ref_that_is_not_a_reference_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_property_named_ref_that_is_not_a_reference_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_property_named_ref_that_is_not_a_reference_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPropertyNamedRefThatIsNotAReferenceResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_property_named_ref_that_is_not_a_reference_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postPropertyNamedRefThatIsNotAReferenceResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_ref_in_additionalproperties_request_body(self):
        """Test case for post_ref_in_additionalproperties_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_additionalproperties_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "someProp":
                        {
                            "$ref":
                                "a",
                        },
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ref_in_additionalproperties_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRefInAdditionalpropertiesRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "someProp":
                        {
                            "$ref":
                                2,
                        },
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_ref_in_additionalproperties_request_body(body=body)



    def test_post_ref_in_additionalproperties_response_body_for_content_types(self):
        """Test case for post_ref_in_additionalproperties_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_additionalproperties_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "someProp":
                        {
                            "$ref":
                                "a",
                        },
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ref_in_additionalproperties_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInAdditionalpropertiesResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "someProp":
                        {
                            "$ref":
                                2,
                        },
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_ref_in_additionalproperties_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInAdditionalpropertiesResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_ref_in_allof_request_body(self):
        """Test case for post_ref_in_allof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_allof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ref_in_allof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRefInAllofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_ref_in_allof_request_body(body=body)



    def test_post_ref_in_allof_response_body_for_content_types(self):
        """Test case for post_ref_in_allof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_allof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ref_in_allof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInAllofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_ref_in_allof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInAllofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_ref_in_anyof_request_body(self):
        """Test case for post_ref_in_anyof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_anyof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ref_in_anyof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRefInAnyofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_ref_in_anyof_request_body(body=body)



    def test_post_ref_in_anyof_response_body_for_content_types(self):
        """Test case for post_ref_in_anyof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_anyof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ref_in_anyof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInAnyofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_ref_in_anyof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInAnyofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_ref_in_items_request_body(self):
        """Test case for post_ref_in_items_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_items_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "$ref":
                            "a",
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ref_in_items_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRefInItemsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "$ref":
                            2,
                    },
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_ref_in_items_request_body(body=body)



    def test_post_ref_in_items_response_body_for_content_types(self):
        """Test case for post_ref_in_items_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_items_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "$ref":
                            "a",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ref_in_items_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInItemsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "$ref":
                            2,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_ref_in_items_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInItemsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_ref_in_oneof_request_body(self):
        """Test case for post_ref_in_oneof_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_oneof_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ref_in_oneof_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRefInOneofRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_ref_in_oneof_request_body(body=body)



    def test_post_ref_in_oneof_response_body_for_content_types(self):
        """Test case for post_ref_in_oneof_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_oneof_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        "a",
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ref_in_oneof_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInOneofResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "$ref":
                        2,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_ref_in_oneof_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInOneofResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_ref_in_property_request_body(self):
        """Test case for post_ref_in_property_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_property_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "a":
                        {
                            "$ref":
                                "a",
                        },
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_ref_in_property_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRefInPropertyRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "a":
                        {
                            "$ref":
                                2,
                        },
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_ref_in_property_request_body(body=body)



    def test_post_ref_in_property_response_body_for_content_types(self):
        """Test case for post_ref_in_property_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_ref_in_property_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_named_ref_valid_passes
        # property named $ref valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "a":
                        {
                            "$ref":
                                "a",
                        },
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_ref_in_property_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInPropertyResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_property_named_ref_invalid_fails
        # property named $ref invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "a":
                        {
                            "$ref":
                                2,
                        },
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_ref_in_property_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRefInPropertyResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_required_default_validation_request_body(self):
        """Test case for post_required_default_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_required_default_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_not_required_by_default_passes
        # not required by default
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_required_default_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRequiredDefaultValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_required_default_validation_response_body_for_content_types(self):
        """Test case for post_required_default_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_required_default_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_not_required_by_default_passes
        # not required by default
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_required_default_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredDefaultValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_required_validation_request_body(self):
        """Test case for post_required_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_required_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_required_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRequiredValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_present_required_property_is_valid_passes
        # present required property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_required_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRequiredValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_required_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRequiredValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_ignores_strings_passes
        # ignores strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_required_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRequiredValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_present_required_property_is_invalid_fails
        # non-present required property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        1,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_required_validation_request_body(body=body)



    def test_post_required_validation_response_body_for_content_types(self):
        """Test case for post_required_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_required_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_ignores_arrays_passes
        # ignores arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_required_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_present_required_property_is_valid_passes
        # present required property is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "foo":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_required_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_other_non_objects_passes
        # ignores other non-objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_required_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_ignores_strings_passes
        # ignores strings
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_required_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_present_required_property_is_invalid_fails
        # non-present required property is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "bar":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_required_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_required_with_empty_array_request_body(self):
        """Test case for post_required_with_empty_array_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_required_with_empty_array_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_property_not_required_passes
        # property not required
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_required_with_empty_array_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postRequiredWithEmptyArrayRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_required_with_empty_array_response_body_for_content_types(self):
        """Test case for post_required_with_empty_array_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_required_with_empty_array_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_property_not_required_passes
        # property not required
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_required_with_empty_array_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postRequiredWithEmptyArrayResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_simple_enum_validation_request_body(self):
        """Test case for post_simple_enum_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_simple_enum_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_something_else_is_invalid_fails
        # something else is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                4
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_simple_enum_validation_request_body(body=body)

        # test_one_of_the_enum_is_valid_passes
        # one of the enum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_simple_enum_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postSimpleEnumValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_simple_enum_validation_response_body_for_content_types(self):
        """Test case for post_simple_enum_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_simple_enum_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_something_else_is_invalid_fails
        # something else is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                4
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_simple_enum_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postSimpleEnumValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_one_of_the_enum_is_valid_passes
        # one of the enum is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_simple_enum_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postSimpleEnumValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_string_type_matches_strings_request_body(self):
        """Test case for post_string_type_matches_strings_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_string_type_matches_strings_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_1_is_not_a_string_fails
        # 1 is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_string_type_matches_strings_request_body(body=body)

        # test_a_string_is_still_a_string_even_if_it_looks_like_a_number_passes
        # a string is still a string, even if it looks like a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "1"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_string_type_matches_strings_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postStringTypeMatchesStringsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_empty_string_is_still_a_string_passes
        # an empty string is still a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_string_type_matches_strings_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postStringTypeMatchesStringsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_float_is_not_a_string_fails
        # a float is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_string_type_matches_strings_request_body(body=body)

        # test_an_object_is_not_a_string_fails
        # an object is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_string_type_matches_strings_request_body(body=body)

        # test_an_array_is_not_a_string_fails
        # an array is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_string_type_matches_strings_request_body(body=body)

        # test_a_boolean_is_not_a_string_fails
        # a boolean is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_string_type_matches_strings_request_body(body=body)

        # test_null_is_not_a_string_fails
        # null is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_string_type_matches_strings_request_body(body=body)

        # test_a_string_is_a_string_passes
        # a string is a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_string_type_matches_strings_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postStringTypeMatchesStringsRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_string_type_matches_strings_response_body_for_content_types(self):
        """Test case for post_string_type_matches_strings_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_string_type_matches_strings_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_1_is_not_a_string_fails
        # 1 is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_string_type_matches_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_still_a_string_even_if_it_looks_like_a_number_passes
        # a string is still a string, even if it looks like a number
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "1"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_string_type_matches_strings_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_empty_string_is_still_a_string_passes
        # an empty string is still a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                ""
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_string_type_matches_strings_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_float_is_not_a_string_fails
        # a float is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                1.1
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_string_type_matches_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_object_is_not_a_string_fails
        # an object is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_string_type_matches_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_an_array_is_not_a_string_fails
        # an array is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_string_type_matches_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_boolean_is_not_a_string_fails
        # a boolean is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                True
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_string_type_matches_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_null_is_not_a_string_fails
        # null is not a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_string_type_matches_strings_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_a_string_is_a_string_passes
        # a string is a string
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                "foo"
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_string_type_matches_strings_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_request_body(self):
        """Test case for post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_missing_properties_are_not_filled_in_with_the_default_passes
        # missing properties are not filled in with the default
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_explicit_property_value_is_checked_against_maximum_passing_passes
        # an explicit property value is checked against maximum (passing)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "alpha":
                        1,
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_an_explicit_property_value_is_checked_against_maximum_failing_fails
        # an explicit property value is checked against maximum (failing)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "alpha":
                        5,
                }
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_request_body(body=body)



    def test_post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_response_body_for_content_types(self):
        """Test case for post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_missing_properties_are_not_filled_in_with_the_default_passes
        # missing properties are not filled in with the default
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_explicit_property_value_is_checked_against_maximum_passing_passes
        # an explicit property value is checked against maximum (passing)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "alpha":
                        1,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_an_explicit_property_value_is_checked_against_maximum_failing_fails
        # an explicit property value is checked against maximum (failing)
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                    "alpha":
                        5,
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_the_default_keyword_does_not_do_anything_if_the_property_is_missing_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_uniqueitems_false_validation_request_body(self):
        """Test case for post_uniqueitems_false_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uniqueitems_false_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_non_unique_array_of_integers_is_valid_passes
        # non-unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    1,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_array_of_objects_is_valid_passes
        # unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "baz",
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_nested_objects_is_valid_passes
        # non-unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_objects_is_valid_passes
        # non-unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "bar",
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_1_and_true_are_unique_passes
        # 1 and true are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_array_of_integers_is_valid_passes
        # unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_arrays_is_valid_passes
        # non-unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_numbers_are_unique_if_mathematically_unequal_passes
        # numbers are unique if mathematically unequal
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1.0,
                    1.0,
                    1,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_false_is_not_equal_to_zero_passes
        # false is not equal to zero
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_array_of_nested_objects_is_valid_passes
        # unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            False,
                                    },
                            },
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_0_and_false_are_unique_passes
        # 0 and false are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_array_of_arrays_is_valid_passes
        # unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_true_is_not_equal_to_one_passes
        # true is not equal to one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_heterogeneous_types_are_valid_passes
        # non-unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    {
                    },
                    1,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_heterogeneous_types_are_valid_passes
        # unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    1,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsFalseValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_uniqueitems_false_validation_response_body_for_content_types(self):
        """Test case for post_uniqueitems_false_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uniqueitems_false_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_non_unique_array_of_integers_is_valid_passes
        # non-unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_objects_is_valid_passes
        # unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "baz",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_nested_objects_is_valid_passes
        # non-unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_objects_is_valid_passes
        # non-unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "bar",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_1_and_true_are_unique_passes
        # 1 and true are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_integers_is_valid_passes
        # unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_arrays_is_valid_passes
        # non-unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_numbers_are_unique_if_mathematically_unequal_passes
        # numbers are unique if mathematically unequal
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1.0,
                    1.0,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_false_is_not_equal_to_zero_passes
        # false is not equal to zero
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_nested_objects_is_valid_passes
        # unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            False,
                                    },
                            },
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_0_and_false_are_unique_passes
        # 0 and false are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_arrays_is_valid_passes
        # unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_true_is_not_equal_to_one_passes
        # true is not equal to one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_heterogeneous_types_are_valid_passes
        # non-unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    {
                    },
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_heterogeneous_types_are_valid_passes
        # unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_false_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_uniqueitems_validation_request_body(self):
        """Test case for post_uniqueitems_validation_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uniqueitems_validation_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_unique_array_of_objects_is_valid_passes
        # unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "baz",
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_true_and_a1_are_unique_passes
        # {&quot;a&quot;: true} and {&quot;a&quot;: 1} are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            True,
                    },
                    {
                        "a":
                            1,
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_heterogeneous_types_are_invalid_fails
        # non-unique heterogeneous types are invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    {
                    },
                    1,
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_nested0_and_false_are_unique_passes
        # nested [0] and [false] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            0,
                        ],
                        "foo",
                    ],
                    [
                        [
                            False,
                        ],
                        "foo",
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_a_false_and_a0_are_unique_passes
        # {&quot;a&quot;: false} and {&quot;a&quot;: 0} are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            False,
                    },
                    {
                        "a":
                            0,
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_numbers_are_unique_if_mathematically_unequal_fails
        # numbers are unique if mathematically unequal
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1.0,
                    1.0,
                    1,
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_false_is_not_equal_to_zero_passes
        # false is not equal to zero
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_0_and_false_are_unique_passes
        # [0] and [false] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        0,
                    ],
                    [
                        False,
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_array_of_arrays_is_valid_passes
        # unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_nested_objects_is_invalid_fails
        # non-unique array of nested objects is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_non_unique_array_of_more_than_two_integers_is_invalid_fails
        # non-unique array of more than two integers is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    1,
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_true_is_not_equal_to_one_passes
        # true is not equal to one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_objects_are_non_unique_despite_key_order_fails
        # objects are non-unique despite key order
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            1,
                        "b":
                            2,
                    },
                    {
                        "b":
                            2,
                        "a":
                            1,
                    },
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_unique_array_of_strings_is_valid_passes
        # unique array of strings is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    "foo",
                    "bar",
                    "baz",
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_1_and_true_are_unique_passes
        # [1] and [true] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        1,
                    ],
                    [
                        True,
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_different_objects_are_unique_passes
        # different objects are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            1,
                        "b":
                            2,
                    },
                    {
                        "a":
                            2,
                        "b":
                            1,
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_array_of_integers_is_valid_passes
        # unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_more_than_two_arrays_is_invalid_fails
        # non-unique array of more than two arrays is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_non_unique_array_of_objects_is_invalid_fails
        # non-unique array of objects is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "bar",
                    },
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_unique_array_of_nested_objects_is_valid_passes
        # unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            False,
                                    },
                            },
                    },
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_arrays_is_invalid_fails
        # non-unique array of arrays is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_non_unique_array_of_strings_is_invalid_fails
        # non-unique array of strings is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    "foo",
                    "bar",
                    "foo",
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)

        # test_nested1_and_true_are_unique_passes
        # nested [1] and [true] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            1,
                        ],
                        "foo",
                    ],
                    [
                        [
                            True,
                        ],
                        "foo",
                    ],
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_unique_heterogeneous_types_are_valid_passes
        # unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    1,
                    "{}",
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUniqueitemsValidationRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_non_unique_array_of_integers_is_invalid_fails
        # non-unique array of integers is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    1,
                ]
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.post_uniqueitems_validation_request_body(body=body)



    def test_post_uniqueitems_validation_response_body_for_content_types(self):
        """Test case for post_uniqueitems_validation_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uniqueitems_validation_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_unique_array_of_objects_is_valid_passes
        # unique array of objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "baz",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_true_and_a1_are_unique_passes
        # {&quot;a&quot;: true} and {&quot;a&quot;: 1} are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            True,
                    },
                    {
                        "a":
                            1,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_heterogeneous_types_are_invalid_fails
        # non-unique heterogeneous types are invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    {
                    },
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_nested0_and_false_are_unique_passes
        # nested [0] and [false] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            0,
                        ],
                        "foo",
                    ],
                    [
                        [
                            False,
                        ],
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_a_false_and_a0_are_unique_passes
        # {&quot;a&quot;: false} and {&quot;a&quot;: 0} are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            False,
                    },
                    {
                        "a":
                            0,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_numbers_are_unique_if_mathematically_unequal_fails
        # numbers are unique if mathematically unequal
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1.0,
                    1.0,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_false_is_not_equal_to_zero_passes
        # false is not equal to zero
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    0,
                    False,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_0_and_false_are_unique_passes
        # [0] and [false] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        0,
                    ],
                    [
                        False,
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_arrays_is_valid_passes
        # unique array of arrays is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_nested_objects_is_invalid_fails
        # non-unique array of nested objects is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_non_unique_array_of_more_than_two_integers_is_invalid_fails
        # non-unique array of more than two integers is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_true_is_not_equal_to_one_passes
        # true is not equal to one
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    True,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_objects_are_non_unique_despite_key_order_fails
        # objects are non-unique despite key order
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            1,
                        "b":
                            2,
                    },
                    {
                        "b":
                            2,
                        "a":
                            1,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_unique_array_of_strings_is_valid_passes
        # unique array of strings is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    "foo",
                    "bar",
                    "baz",
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_1_and_true_are_unique_passes
        # [1] and [true] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        1,
                    ],
                    [
                        True,
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_different_objects_are_unique_passes
        # different objects are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "a":
                            1,
                        "b":
                            2,
                    },
                    {
                        "a":
                            2,
                        "b":
                            1,
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_array_of_integers_is_valid_passes
        # unique array of integers is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    2,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_more_than_two_arrays_is_invalid_fails
        # non-unique array of more than two arrays is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "bar",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_non_unique_array_of_objects_is_invalid_fails
        # non-unique array of objects is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            "bar",
                    },
                    {
                        "foo":
                            "bar",
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_unique_array_of_nested_objects_is_valid_passes
        # unique array of nested objects is valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            True,
                                    },
                            },
                    },
                    {
                        "foo":
                            {
                                "bar":
                                    {
                                        "baz":
                                            False,
                                    },
                            },
                    },
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_arrays_is_invalid_fails
        # non-unique array of arrays is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        "foo",
                    ],
                    [
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_non_unique_array_of_strings_is_invalid_fails
        # non-unique array of strings is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    "foo",
                    "bar",
                    "foo",
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )

        # test_nested1_and_true_are_unique_passes
        # nested [1] and [true] are unique
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    [
                        [
                            1,
                        ],
                        "foo",
                    ],
                    [
                        [
                            True,
                        ],
                        "foo",
                    ],
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_unique_heterogeneous_types_are_valid_passes
        # unique heterogeneous types are valid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    {
                    },
                    [
                        1,
                    ],
                    True,
                    None,
                    1,
                    "{}",
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uniqueitems_validation_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_non_unique_array_of_integers_is_invalid_fails
        # non-unique array of integers is invalid
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                    1,
                    1,
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            with self.assertRaises((unit_test_api.ApiValueError, unit_test_api.ApiTypeError)):
                self.api.post_uniqueitems_validation_response_body_for_content_types(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUniqueitemsValidationResponseBodyForContentTypes',
                method='POST',
                content_type=None,
                accept_content_type=accept_content_type,
            )


        pass

    def test_post_uri_format_request_body(self):
        """Test case for post_uri_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uri_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_uri_format_response_body_for_content_types(self):
        """Test case for post_uri_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uri_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_uri_reference_format_request_body(self):
        """Test case for post_uri_reference_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uri_reference_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriReferenceFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriReferenceFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriReferenceFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriReferenceFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriReferenceFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriReferenceFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_uri_reference_format_response_body_for_content_types(self):
        """Test case for post_uri_reference_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uri_reference_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriReferenceFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriReferenceFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriReferenceFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriReferenceFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriReferenceFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_reference_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriReferenceFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass

    def test_post_uri_template_format_request_body(self):
        """Test case for post_uri_template_format_request_body

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uri_template_format_request_body as endpoint_module
        response_status = 200
        response_body = ''
        content_type = 'application/json'

        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriTemplateFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriTemplateFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriTemplateFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriTemplateFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriTemplateFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            body = endpoint_module.SchemaForRequestBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_request_body(
                body=body,
                content_type=content_type
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/requestBody/postUriTemplateFormatRequestBody',
                method='POST',
                body=self.json_bytes(payload),
                content_type=content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)



    def test_post_uri_template_format_response_body_for_content_types(self):
        """Test case for post_uri_template_format_response_body_for_content_types

        """
        from unit_test_api.api.content_type_json_api_endpoints import post_uri_template_format_response_body_for_content_types as endpoint_module
        response_status = 200
        accept_content_type = 'application/json'


        # test_all_string_formats_ignore_objects_passes
        # all string formats ignore objects
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                {
                }
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriTemplateFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_booleans_passes
        # all string formats ignore booleans
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                False
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriTemplateFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_integers_passes
        # all string formats ignore integers
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                12
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriTemplateFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_floats_passes
        # all string formats ignore floats
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                13.7
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriTemplateFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_arrays_passes
        # all string formats ignore arrays
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                [
                ]
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriTemplateFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body

        # test_all_string_formats_ignore_nulls_passes
        # all string formats ignore nulls
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
                None
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
            api_response = self.api.post_uri_template_format_response_body_for_content_types(
                accept_content_types=(accept_content_type,)
            )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '/responseBody/postUriTemplateFormatResponseBodyForContentTypes',
                method='POST',
                accept_content_type=accept_content_type,
            )

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.SchemaFor200ResponseBodyApplicationJson)
            deserialized_response_body = endpoint_module.SchemaFor200ResponseBodyApplicationJson._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body


        pass


if __name__ == '__main__':
    unittest.main()
