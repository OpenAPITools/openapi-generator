# coding: utf-8

"""
    openapi 3.0.3 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft6  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unit_test_api import schemas  # noqa: F401


class PropertiesWithEscapedCharacters(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        class properties:
            foo_nbar = schemas.NumberSchema
            foo_bar = schemas.NumberSchema
            foo__bar = schemas.NumberSchema
            foo_rbar = schemas.NumberSchema
            foo_tbar = schemas.NumberSchema
            foo_fbar = schemas.NumberSchema
            __annotations__ = {
                "foo\nbar": foo_nbar,
                "foo\"bar": foo_bar,
                "foo\\bar": foo__bar,
                "foo\rbar": foo_rbar,
                "foo\tbar": foo_tbar,
                "foo\fbar": foo_fbar,
            }
        additional_properties = schemas.AnyTypeSchema

    
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["foo\nbar"]) -> typing.Union[MetaOapg.properties.foo_nbar, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["foo\"bar"]) -> typing.Union[MetaOapg.properties.foo_bar, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["foo\\bar"]) -> typing.Union[MetaOapg.properties.foo__bar, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["foo\rbar"]) -> typing.Union[MetaOapg.properties.foo_rbar, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["foo\tbar"]) -> typing.Union[MetaOapg.properties.foo_tbar, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["foo\fbar"]) -> typing.Union[MetaOapg.properties.foo_fbar, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def __getitem__(self, name: typing.Union[str, typing.Literal["foo\nbar"], typing.Literal["foo\"bar"], typing.Literal["foo\\bar"], typing.Literal["foo\rbar"], typing.Literal["foo\tbar"], typing.Literal["foo\fbar"], ]):
        # dict_instance[name] accessor
        if not hasattr(self.MetaOapg, 'properties') or name not in self.MetaOapg.properties.__annotations__:
            return super().__getitem__(name)
        try:
            return super().__getitem__(name)
        except KeyError:
            return schemas.unset

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes, ],
    ) -> 'PropertiesWithEscapedCharacters':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
