/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// QuadrilateralInterface struct for QuadrilateralInterface
type QuadrilateralInterface struct {
	QuadrilateralType string `json:"quadrilateralType"`
}

// NewQuadrilateralInterface instantiates a new QuadrilateralInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuadrilateralInterface(quadrilateralType string, ) *QuadrilateralInterface {
	this := QuadrilateralInterface{}
	this.QuadrilateralType = quadrilateralType
	return &this
}

// NewQuadrilateralInterfaceWithDefaults instantiates a new QuadrilateralInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuadrilateralInterfaceWithDefaults() *QuadrilateralInterface {
	this := QuadrilateralInterface{}
	return &this
}

// GetQuadrilateralType returns the QuadrilateralType field value
func (o *QuadrilateralInterface) GetQuadrilateralType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.QuadrilateralType
}

// GetQuadrilateralTypeOk returns a tuple with the QuadrilateralType field value
// and a boolean to check if the value has been set.
func (o *QuadrilateralInterface) GetQuadrilateralTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.QuadrilateralType, true
}

// SetQuadrilateralType sets field value
func (o *QuadrilateralInterface) SetQuadrilateralType(v string) {
	o.QuadrilateralType = v
}

func (o QuadrilateralInterface) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["quadrilateralType"] = o.QuadrilateralType
	}
	return json.Marshal(toSerialize)
}

type NullableQuadrilateralInterface struct {
	value *QuadrilateralInterface
	isSet bool
}

func (v NullableQuadrilateralInterface) Get() *QuadrilateralInterface {
	return v.value
}

func (v *NullableQuadrilateralInterface) Set(val *QuadrilateralInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableQuadrilateralInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableQuadrilateralInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuadrilateralInterface(val *QuadrilateralInterface) *NullableQuadrilateralInterface {
	return &NullableQuadrilateralInterface{value: val, isSet: true}
}

func (v NullableQuadrilateralInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuadrilateralInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
