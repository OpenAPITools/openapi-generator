/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// IsoscelesTriangle struct for IsoscelesTriangle
type IsoscelesTriangle struct {
	ShapeType string `json:"shapeType"`
	TriangleType string `json:"triangleType"`
}

// NewIsoscelesTriangle instantiates a new IsoscelesTriangle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsoscelesTriangle(shapeType string, triangleType string, ) *IsoscelesTriangle {
	this := IsoscelesTriangle{}
	this.ShapeType = shapeType
	this.TriangleType = triangleType
	return &this
}

// NewIsoscelesTriangleWithDefaults instantiates a new IsoscelesTriangle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsoscelesTriangleWithDefaults() *IsoscelesTriangle {
	this := IsoscelesTriangle{}
	return &this
}

// GetShapeType returns the ShapeType field value
func (o *IsoscelesTriangle) GetShapeType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ShapeType
}

// GetShapeTypeOk returns a tuple with the ShapeType field value
// and a boolean to check if the value has been set.
func (o *IsoscelesTriangle) GetShapeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShapeType, true
}

// SetShapeType sets field value
func (o *IsoscelesTriangle) SetShapeType(v string) {
	o.ShapeType = v
}

// GetTriangleType returns the TriangleType field value
func (o *IsoscelesTriangle) GetTriangleType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TriangleType
}

// GetTriangleTypeOk returns a tuple with the TriangleType field value
// and a boolean to check if the value has been set.
func (o *IsoscelesTriangle) GetTriangleTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TriangleType, true
}

// SetTriangleType sets field value
func (o *IsoscelesTriangle) SetTriangleType(v string) {
	o.TriangleType = v
}

func (o IsoscelesTriangle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["shapeType"] = o.ShapeType
	}
	if true {
		toSerialize["triangleType"] = o.TriangleType
	}
	return json.Marshal(toSerialize)
}

// AsTriangle wraps this instance of IsoscelesTriangle in Triangle
func (s *IsoscelesTriangle) AsTriangle() Triangle {
	return Triangle{ TriangleInterface: s }
}
type NullableIsoscelesTriangle struct {
	value *IsoscelesTriangle
	isSet bool
}

func (v NullableIsoscelesTriangle) Get() *IsoscelesTriangle {
	return v.value
}

func (v *NullableIsoscelesTriangle) Set(val *IsoscelesTriangle) {
	v.value = val
	v.isSet = true
}

func (v NullableIsoscelesTriangle) IsSet() bool {
	return v.isSet
}

func (v *NullableIsoscelesTriangle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsoscelesTriangle(val *IsoscelesTriangle) *NullableIsoscelesTriangle {
	return &NullableIsoscelesTriangle{value: val, isSet: true}
}

func (v NullableIsoscelesTriangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsoscelesTriangle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
