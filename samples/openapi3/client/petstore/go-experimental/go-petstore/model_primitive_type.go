/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
	"fmt"
)

// PrimitiveType - struct for PrimitiveType
type PrimitiveType struct {
	Int32 *int32
	String *string
}

// Int32AsPrimitiveType is a convenience function that returns int32 wrapped in PrimitiveType
func Int32AsPrimitiveType(v *int32) PrimitiveType {
	return PrimitiveType{ Int32: v}
}

// StringAsPrimitiveType is a convenience function that returns string wrapped in PrimitiveType
func StringAsPrimitiveType(v *string) PrimitiveType {
	return PrimitiveType{ String: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PrimitiveType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into int32
	err = json.Unmarshal(data, &dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			match++
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into string
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Int32 = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PrimitiveType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PrimitiveType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PrimitiveType) MarshalJSON() ([]byte, error) {
	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PrimitiveType) GetActualInstance() (interface{}) {
	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePrimitiveType struct {
	value *PrimitiveType
	isSet bool
}

func (v NullablePrimitiveType) Get() *PrimitiveType {
	return v.value
}

func (v *NullablePrimitiveType) Set(val *PrimitiveType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimitiveType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimitiveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimitiveType(val *PrimitiveType) *NullablePrimitiveType {
	return &NullablePrimitiveType{value: val, isSet: true}
}

func (v NullablePrimitiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimitiveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


