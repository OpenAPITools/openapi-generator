/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
	"fmt"
)

// Triangle struct for Triangle
type Triangle struct {
	TriangleInterface interface { GetTriangleType() string }
}

func (s Triangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.TriangleInterface)
}

func (s *Triangle) UnmarshalJSON(src []byte) error {
	var err error
	var unmarshaled map[string]interface{}
	err = json.Unmarshal(src, &unmarshaled)
	if err != nil {
		return err
	}
	if v, ok := unmarshaled["triangleType"]; ok {
		switch v {
			case "EquilateralTriangle":
				var result *EquilateralTriangle = &EquilateralTriangle{}
				err = json.Unmarshal(src, result)
				if err != nil {
					return err
				}
				s.TriangleInterface = result
				return nil
			case "IsoscelesTriangle":
				var result *IsoscelesTriangle = &IsoscelesTriangle{}
				err = json.Unmarshal(src, result)
				if err != nil {
					return err
				}
				s.TriangleInterface = result
				return nil
			case "ScaleneTriangle":
				var result *ScaleneTriangle = &ScaleneTriangle{}
				err = json.Unmarshal(src, result)
				if err != nil {
					return err
				}
				s.TriangleInterface = result
				return nil
			default:
				return fmt.Errorf("No oneOf model has 'triangleType' equal to %s", v)
		}
	} else {
		return fmt.Errorf("Discriminator property 'triangleType' not found in unmarshaled payload: %+v", unmarshaled)
	}
}
// AsShape wraps this instance of Triangle in Shape
func (s *Triangle) AsShape() Shape {
	return Shape{ ShapeInterface: s }
}
type NullableTriangle struct {
	value *Triangle
	isSet bool
}

func (v NullableTriangle) Get() *Triangle {
	return v.value
}

func (v *NullableTriangle) Set(val *Triangle) {
	v.value = val
	v.isSet = true
}

func (v NullableTriangle) IsSet() bool {
	return v.isSet
}

func (v *NullableTriangle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriangle(val *Triangle) *NullableTriangle {
	return &NullableTriangle{value: val, isSet: true}
}

func (v NullableTriangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriangle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
