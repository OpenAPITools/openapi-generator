/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
	"fmt"
)

// FruitReq - struct for FruitReq
type FruitReq struct {
	AppleReq *AppleReq
	BananaReq *BananaReq
}

// Unmarshl JSON data into one of the pointers in the struct
func (dst *FruitReq) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppleReq
	err = json.Unmarshal(data, &dst.AppleReq);
	if err == nil {
		jsonAppleReq, _ := json.Marshal(dst.AppleReq)
		if string(jsonAppleReq) == "{}" { // empty struct
			dst.AppleReq = nil
		} else {
			match++
		}
	} else {
		dst.AppleReq = nil
	}

	// try to unmarshal data into BananaReq
	err = json.Unmarshal(data, &dst.BananaReq);
	if err == nil {
		jsonBananaReq, _ := json.Marshal(dst.BananaReq)
		if string(jsonBananaReq) == "{}" { // empty struct
			dst.BananaReq = nil
		} else {
			match++
		}
	} else {
		dst.BananaReq = nil
	}

	if match > 1 { // more than 1 match
		return fmt.Errorf("Data matches more than one schema in oneOf(FruitReq)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FruitReq)")
	}
}

// Marshl data from the first non-nil pointers in the struct to JSON
func (src *FruitReq) MarshalJSON() ([]byte, error) {
	if src.AppleReq != nil {
		return json.Marshal(&src.AppleReq)
	}

	if src.BananaReq != nil {
		return json.Marshal(&src.BananaReq)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FruitReq) GetActualInstance() (interface{}) {
	if obj.AppleReq != nil {
		return obj.AppleReq
	}

	if obj.BananaReq != nil {
		return obj.BananaReq
	}

	// all schemas are nil
	return nil
}

