/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"bytes"
	"encoding/json"
)

// User struct for User
type User struct {
	Id *int64 `json:"id,omitempty"`
	Username *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	Email *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
	Phone *string `json:"phone,omitempty"`
	// User Status
	UserStatus *int32 `json:"userStatus,omitempty"`
	// test code generation for objects Value must be a map of strings to values. It cannot be the 'null' value.
	ArbitraryObject *map[string]interface{} `json:"arbitraryObject,omitempty"`
	// test code generation for nullable objects. Value must be a map of strings to values or the 'null' value.
	ArbitraryNullableObject *map[string]interface{} `json:"arbitraryNullableObject,omitempty"`
	// test code generation for any type Value can be any type - string, number, boolean, array or object.
	ArbitraryType *map[string]interface{} `json:"arbitraryType,omitempty"`
	// test code generation for any type Value can be any type - string, number, boolean, array, object or the 'null' value.
	ArbitraryNullableType *NullableMap[string]interface{} `json:"arbitraryNullableType,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
    this := User{}
    return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
    this := User{}
    return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *User) SetId(v int64) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (string, bool) {
	if o == nil || o.Username == nil {
		var ret string
		return ret, false
	}
	return *o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (string, bool) {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret, false
	}
	return *o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *User) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (string, bool) {
	if o == nil || o.LastName == nil {
		var ret string
		return ret, false
	}
	return *o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *User) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *User) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (string, bool) {
	if o == nil || o.Email == nil {
		var ret string
		return ret, false
	}
	return *o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *User) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPasswordOk() (string, bool) {
	if o == nil || o.Password == nil {
		var ret string
		return ret, false
	}
	return *o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *User) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *User) SetPassword(v string) {
	o.Password = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *User) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhoneOk() (string, bool) {
	if o == nil || o.Phone == nil {
		var ret string
		return ret, false
	}
	return *o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *User) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *User) SetPhone(v string) {
	o.Phone = &v
}

// GetUserStatus returns the UserStatus field value if set, zero value otherwise.
func (o *User) GetUserStatus() int32 {
	if o == nil || o.UserStatus == nil {
		var ret int32
		return ret
	}
	return *o.UserStatus
}

// GetUserStatusOk returns a tuple with the UserStatus field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserStatusOk() (int32, bool) {
	if o == nil || o.UserStatus == nil {
		var ret int32
		return ret, false
	}
	return *o.UserStatus, true
}

// HasUserStatus returns a boolean if a field has been set.
func (o *User) HasUserStatus() bool {
	if o != nil && o.UserStatus != nil {
		return true
	}

	return false
}

// SetUserStatus gets a reference to the given int32 and assigns it to the UserStatus field.
func (o *User) SetUserStatus(v int32) {
	o.UserStatus = &v
}

// GetArbitraryObject returns the ArbitraryObject field value if set, zero value otherwise.
func (o *User) GetArbitraryObject() map[string]interface{} {
	if o == nil || o.ArbitraryObject == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ArbitraryObject
}

// GetArbitraryObjectOk returns a tuple with the ArbitraryObject field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetArbitraryObjectOk() (map[string]interface{}, bool) {
	if o == nil || o.ArbitraryObject == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.ArbitraryObject, true
}

// HasArbitraryObject returns a boolean if a field has been set.
func (o *User) HasArbitraryObject() bool {
	if o != nil && o.ArbitraryObject != nil {
		return true
	}

	return false
}

// SetArbitraryObject gets a reference to the given map[string]interface{} and assigns it to the ArbitraryObject field.
func (o *User) SetArbitraryObject(v map[string]interface{}) {
	o.ArbitraryObject = &v
}

// GetArbitraryNullableObject returns the ArbitraryNullableObject field value if set, zero value otherwise.
func (o *User) GetArbitraryNullableObject() map[string]interface{} {
	if o == nil || o.ArbitraryNullableObject == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ArbitraryNullableObject
}

// GetArbitraryNullableObjectOk returns a tuple with the ArbitraryNullableObject field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetArbitraryNullableObjectOk() (map[string]interface{}, bool) {
	if o == nil || o.ArbitraryNullableObject == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.ArbitraryNullableObject, true
}

// HasArbitraryNullableObject returns a boolean if a field has been set.
func (o *User) HasArbitraryNullableObject() bool {
	if o != nil && o.ArbitraryNullableObject != nil {
		return true
	}

	return false
}

// SetArbitraryNullableObject gets a reference to the given map[string]interface{} and assigns it to the ArbitraryNullableObject field.
func (o *User) SetArbitraryNullableObject(v map[string]interface{}) {
	o.ArbitraryNullableObject = &v
}

// GetArbitraryType returns the ArbitraryType field value if set, zero value otherwise.
func (o *User) GetArbitraryType() map[string]interface{} {
	if o == nil || o.ArbitraryType == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ArbitraryType
}

// GetArbitraryTypeOk returns a tuple with the ArbitraryType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetArbitraryTypeOk() (map[string]interface{}, bool) {
	if o == nil || o.ArbitraryType == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.ArbitraryType, true
}

// HasArbitraryType returns a boolean if a field has been set.
func (o *User) HasArbitraryType() bool {
	if o != nil && o.ArbitraryType != nil {
		return true
	}

	return false
}

// SetArbitraryType gets a reference to the given map[string]interface{} and assigns it to the ArbitraryType field.
func (o *User) SetArbitraryType(v map[string]interface{}) {
	o.ArbitraryType = &v
}

// GetArbitraryNullableType returns the ArbitraryNullableType field value if set, zero value otherwise.
func (o *User) GetArbitraryNullableType() NullableMap[string]interface{} {
	if o == nil || o.ArbitraryNullableType == nil {
		var ret NullableMap[string]interface{}
		return ret
	}
	return *o.ArbitraryNullableType
}

// GetArbitraryNullableTypeOk returns a tuple with the ArbitraryNullableType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetArbitraryNullableTypeOk() (NullableMap[string]interface{}, bool) {
	if o == nil || o.ArbitraryNullableType == nil {
		var ret NullableMap[string]interface{}
		return ret, false
	}
	return *o.ArbitraryNullableType, true
}

// HasArbitraryNullableType returns a boolean if a field has been set.
func (o *User) HasArbitraryNullableType() bool {
	if o != nil && o.ArbitraryNullableType != nil {
		return true
	}

	return false
}

// SetArbitraryNullableType gets a reference to the given NullableMap[string]interface{} and assigns it to the ArbitraryNullableType field.
func (o *User) SetArbitraryNullableType(v NullableMap[string]interface{}) {
	o.ArbitraryNullableType = &v
}

type NullableUser struct {
	Value User
	ExplicitNull bool
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
