/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// ScaleneTriangle struct for ScaleneTriangle
type ScaleneTriangle struct {
	ShapeType string `json:"shapeType"`
	TriangleType string `json:"triangleType"`
}

// NewScaleneTriangle instantiates a new ScaleneTriangle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScaleneTriangle(shapeType string, triangleType string, ) *ScaleneTriangle {
	this := ScaleneTriangle{}
	this.ShapeType = shapeType
	this.TriangleType = triangleType
	return &this
}

// NewScaleneTriangleWithDefaults instantiates a new ScaleneTriangle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScaleneTriangleWithDefaults() *ScaleneTriangle {
	this := ScaleneTriangle{}
	return &this
}

// GetShapeType returns the ShapeType field value
func (o *ScaleneTriangle) GetShapeType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ShapeType
}

// GetShapeTypeOk returns a tuple with the ShapeType field value
// and a boolean to check if the value has been set.
func (o *ScaleneTriangle) GetShapeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShapeType, true
}

// SetShapeType sets field value
func (o *ScaleneTriangle) SetShapeType(v string) {
	o.ShapeType = v
}

// GetTriangleType returns the TriangleType field value
func (o *ScaleneTriangle) GetTriangleType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TriangleType
}

// GetTriangleTypeOk returns a tuple with the TriangleType field value
// and a boolean to check if the value has been set.
func (o *ScaleneTriangle) GetTriangleTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TriangleType, true
}

// SetTriangleType sets field value
func (o *ScaleneTriangle) SetTriangleType(v string) {
	o.TriangleType = v
}

func (o ScaleneTriangle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["shapeType"] = o.ShapeType
	}
	if true {
		toSerialize["triangleType"] = o.TriangleType
	}
	return json.Marshal(toSerialize)
}

// AsTriangle wraps this instance of ScaleneTriangle in Triangle
func (s *ScaleneTriangle) AsTriangle() Triangle {
	return Triangle{ TriangleInterface: s }
}
type NullableScaleneTriangle struct {
	value *ScaleneTriangle
	isSet bool
}

func (v NullableScaleneTriangle) Get() *ScaleneTriangle {
	return v.value
}

func (v *NullableScaleneTriangle) Set(val *ScaleneTriangle) {
	v.value = val
	v.isSet = true
}

func (v NullableScaleneTriangle) IsSet() bool {
	return v.isSet
}

func (v *NullableScaleneTriangle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScaleneTriangle(val *ScaleneTriangle) *NullableScaleneTriangle {
	return &NullableScaleneTriangle{value: val, isSet: true}
}

func (v NullableScaleneTriangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScaleneTriangle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
