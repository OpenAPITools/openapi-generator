/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
	"fmt"
)

// Quadrilateral struct for Quadrilateral
type Quadrilateral struct {
	QuadrilateralInterface interface { GetQuadrilateralType() string }
}

func (s Quadrilateral) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.QuadrilateralInterface)
}

func (s *Quadrilateral) UnmarshalJSON(src []byte) error {
	var err error
	var unmarshaled map[string]interface{}
	err = json.Unmarshal(src, &unmarshaled)
	if err != nil {
		return err
	}
	if v, ok := unmarshaled["quadrilateralType"]; ok {
		switch v {
			case "ComplexQuadrilateral":
				var result *ComplexQuadrilateral = &ComplexQuadrilateral{}
				err = json.Unmarshal(src, result)
				if err != nil {
					return err
				}
				s.QuadrilateralInterface = result
				return nil
			case "SimpleQuadrilateral":
				var result *SimpleQuadrilateral = &SimpleQuadrilateral{}
				err = json.Unmarshal(src, result)
				if err != nil {
					return err
				}
				s.QuadrilateralInterface = result
				return nil
			default:
				return fmt.Errorf("No oneOf model has 'quadrilateralType' equal to %s", v)
		}
	} else {
		return fmt.Errorf("Discriminator property 'quadrilateralType' not found in unmarshaled payload: %+v", unmarshaled)
	}
}
// AsShape wraps this instance of Quadrilateral in Shape
func (s *Quadrilateral) AsShape() Shape {
	return Shape{ ShapeInterface: s }
}
type NullableQuadrilateral struct {
	value *Quadrilateral
	isSet bool
}

func (v NullableQuadrilateral) Get() *Quadrilateral {
	return v.value
}

func (v *NullableQuadrilateral) Set(val *Quadrilateral) {
	v.value = val
	v.isSet = true
}

func (v NullableQuadrilateral) IsSet() bool {
	return v.isSet
}

func (v *NullableQuadrilateral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuadrilateral(val *Quadrilateral) *NullableQuadrilateral {
	return &NullableQuadrilateral{value: val, isSet: true}
}

func (v NullableQuadrilateral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuadrilateral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
