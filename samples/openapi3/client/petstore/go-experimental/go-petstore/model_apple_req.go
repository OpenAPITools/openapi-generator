/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"bytes"
	"encoding/json"
)

// AppleReq struct for AppleReq
type AppleReq struct {
	Cultivar string `json:"cultivar"`
	Mealy *bool `json:"mealy,omitempty"`
}

// NewAppleReq instantiates a new AppleReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppleReq(cultivar string, ) *AppleReq {
    this := AppleReq{}
    this.Cultivar = cultivar
    return &this
}

// NewAppleReqWithDefaults instantiates a new AppleReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppleReqWithDefaults() *AppleReq {
    this := AppleReq{}
    return &this
}

// GetCultivar returns the Cultivar field value
func (o *AppleReq) GetCultivar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cultivar
}

// SetCultivar sets field value
func (o *AppleReq) SetCultivar(v string) {
	o.Cultivar = v
}

// GetMealy returns the Mealy field value if set, zero value otherwise.
func (o *AppleReq) GetMealy() bool {
	if o == nil || o.Mealy == nil {
		var ret bool
		return ret
	}
	return *o.Mealy
}

// GetMealyOk returns a tuple with the Mealy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AppleReq) GetMealyOk() (bool, bool) {
	if o == nil || o.Mealy == nil {
		var ret bool
		return ret, false
	}
	return *o.Mealy, true
}

// HasMealy returns a boolean if a field has been set.
func (o *AppleReq) HasMealy() bool {
	if o != nil && o.Mealy != nil {
		return true
	}

	return false
}

// SetMealy gets a reference to the given bool and assigns it to the Mealy field.
func (o *AppleReq) SetMealy(v bool) {
	o.Mealy = &v
}

// AsFruitReq wraps this instance of AppleReq in FruitReq
func (s *AppleReq) AsFruitReq() FruitReq {
    return FruitReq{ FruitReqInterface: s }
}
type NullableAppleReq struct {
	Value AppleReq
	ExplicitNull bool
}

func (v NullableAppleReq) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableAppleReq) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
