/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bytes"
	"encoding/json"
	"time"
)

// MixedPropertiesAndAdditionalPropertiesClass struct for MixedPropertiesAndAdditionalPropertiesClass
type MixedPropertiesAndAdditionalPropertiesClass struct {
	UUID *string `json:"uuid,omitempty"`
	DateTime *time.Time `json:"dateTime,omitempty"`
	Map *map[string]Animal `json:"map,omitempty"`
}

// GetUUID returns the UUID field value if set, zero value otherwise.
func (o *MixedPropertiesAndAdditionalPropertiesClass) GetUUID() string {
	if o == nil || o.UUID == nil {
		var ret string
		return ret
	}
	return *o.UUID
}

// GetUUIDOk returns a tuple with the UUID field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MixedPropertiesAndAdditionalPropertiesClass) GetUUIDOk() (string, bool) {
	if o == nil || o.UUID == nil {
		var ret string
		return ret, false
	}
	return *o.UUID, true
}

// HasUUID returns a boolean if a field has been set.
func (o *MixedPropertiesAndAdditionalPropertiesClass) HasUUID() bool {
	if o != nil && o.UUID != nil {
		return true
	}

	return false
}

// SetUUID gets a reference to the given string and assigns it to the UUID field.
func (o *MixedPropertiesAndAdditionalPropertiesClass) SetUUID(v string) {
	o.UUID = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *MixedPropertiesAndAdditionalPropertiesClass) GetDateTime() time.Time {
	if o == nil || o.DateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MixedPropertiesAndAdditionalPropertiesClass) GetDateTimeOk() (time.Time, bool) {
	if o == nil || o.DateTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *MixedPropertiesAndAdditionalPropertiesClass) HasDateTime() bool {
	if o != nil && o.DateTime != nil {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given time.Time and assigns it to the DateTime field.
func (o *MixedPropertiesAndAdditionalPropertiesClass) SetDateTime(v time.Time) {
	o.DateTime = &v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *MixedPropertiesAndAdditionalPropertiesClass) GetMap() map[string]Animal {
	if o == nil || o.Map == nil {
		var ret map[string]Animal
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MixedPropertiesAndAdditionalPropertiesClass) GetMapOk() (map[string]Animal, bool) {
	if o == nil || o.Map == nil {
		var ret map[string]Animal
		return ret, false
	}
	return *o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *MixedPropertiesAndAdditionalPropertiesClass) HasMap() bool {
	if o != nil && o.Map != nil {
		return true
	}

	return false
}

// SetMap gets a reference to the given map[string]Animal and assigns it to the Map field.
func (o *MixedPropertiesAndAdditionalPropertiesClass) SetMap(v map[string]Animal) {
	o.Map = &v
}

type NullableMixedPropertiesAndAdditionalPropertiesClass struct {
	Value MixedPropertiesAndAdditionalPropertiesClass
	ExplicitNull bool
}

func (v NullableMixedPropertiesAndAdditionalPropertiesClass) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableMixedPropertiesAndAdditionalPropertiesClass) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
