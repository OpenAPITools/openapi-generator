/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// EquilateralTriangle struct for EquilateralTriangle
type EquilateralTriangle struct {
	ShapeType string `json:"shapeType"`
	TriangleType string `json:"triangleType"`
}

// NewEquilateralTriangle instantiates a new EquilateralTriangle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquilateralTriangle(shapeType string, triangleType string, ) *EquilateralTriangle {
	this := EquilateralTriangle{}
	this.ShapeType = shapeType
	this.TriangleType = triangleType
	return &this
}

// NewEquilateralTriangleWithDefaults instantiates a new EquilateralTriangle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquilateralTriangleWithDefaults() *EquilateralTriangle {
	this := EquilateralTriangle{}
	return &this
}

// GetShapeType returns the ShapeType field value
func (o *EquilateralTriangle) GetShapeType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ShapeType
}

// GetShapeTypeOk returns a tuple with the ShapeType field value
// and a boolean to check if the value has been set.
func (o *EquilateralTriangle) GetShapeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShapeType, true
}

// SetShapeType sets field value
func (o *EquilateralTriangle) SetShapeType(v string) {
	o.ShapeType = v
}

// GetTriangleType returns the TriangleType field value
func (o *EquilateralTriangle) GetTriangleType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TriangleType
}

// GetTriangleTypeOk returns a tuple with the TriangleType field value
// and a boolean to check if the value has been set.
func (o *EquilateralTriangle) GetTriangleTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TriangleType, true
}

// SetTriangleType sets field value
func (o *EquilateralTriangle) SetTriangleType(v string) {
	o.TriangleType = v
}

func (o EquilateralTriangle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["shapeType"] = o.ShapeType
	}
	if true {
		toSerialize["triangleType"] = o.TriangleType
	}
	return json.Marshal(toSerialize)
}

// AsTriangle wraps this instance of EquilateralTriangle in Triangle
func (s *EquilateralTriangle) AsTriangle() Triangle {
	return Triangle{ TriangleInterface: s }
}
type NullableEquilateralTriangle struct {
	value *EquilateralTriangle
	isSet bool
}

func (v NullableEquilateralTriangle) Get() *EquilateralTriangle {
	return v.value
}

func (v *NullableEquilateralTriangle) Set(val *EquilateralTriangle) {
	v.value = val
	v.isSet = true
}

func (v NullableEquilateralTriangle) IsSet() bool {
	return v.isSet
}

func (v *NullableEquilateralTriangle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquilateralTriangle(val *EquilateralTriangle) *NullableEquilateralTriangle {
	return &NullableEquilateralTriangle{value: val, isSet: true}
}

func (v NullableEquilateralTriangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquilateralTriangle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
