/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
)

// SimpleQuadrilateral struct for SimpleQuadrilateral
type SimpleQuadrilateral struct {
	ShapeType string `json:"shapeType"`
	QuadrilateralType string `json:"quadrilateralType"`
}

// NewSimpleQuadrilateral instantiates a new SimpleQuadrilateral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleQuadrilateral(shapeType string, quadrilateralType string, ) *SimpleQuadrilateral {
	this := SimpleQuadrilateral{}
	this.ShapeType = shapeType
	this.QuadrilateralType = quadrilateralType
	return &this
}

// NewSimpleQuadrilateralWithDefaults instantiates a new SimpleQuadrilateral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleQuadrilateralWithDefaults() *SimpleQuadrilateral {
	this := SimpleQuadrilateral{}
	return &this
}

// GetShapeType returns the ShapeType field value
func (o *SimpleQuadrilateral) GetShapeType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ShapeType
}

// GetShapeTypeOk returns a tuple with the ShapeType field value
// and a boolean to check if the value has been set.
func (o *SimpleQuadrilateral) GetShapeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShapeType, true
}

// SetShapeType sets field value
func (o *SimpleQuadrilateral) SetShapeType(v string) {
	o.ShapeType = v
}

// GetQuadrilateralType returns the QuadrilateralType field value
func (o *SimpleQuadrilateral) GetQuadrilateralType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.QuadrilateralType
}

// GetQuadrilateralTypeOk returns a tuple with the QuadrilateralType field value
// and a boolean to check if the value has been set.
func (o *SimpleQuadrilateral) GetQuadrilateralTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.QuadrilateralType, true
}

// SetQuadrilateralType sets field value
func (o *SimpleQuadrilateral) SetQuadrilateralType(v string) {
	o.QuadrilateralType = v
}

func (o SimpleQuadrilateral) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["shapeType"] = o.ShapeType
	}
	if true {
		toSerialize["quadrilateralType"] = o.QuadrilateralType
	}
	return json.Marshal(toSerialize)
}

// AsQuadrilateral wraps this instance of SimpleQuadrilateral in Quadrilateral
func (s *SimpleQuadrilateral) AsQuadrilateral() Quadrilateral {
	return Quadrilateral{ QuadrilateralInterface: s }
}
type NullableSimpleQuadrilateral struct {
	value *SimpleQuadrilateral
	isSet bool
}

func (v NullableSimpleQuadrilateral) Get() *SimpleQuadrilateral {
	return v.value
}

func (v *NullableSimpleQuadrilateral) Set(val *SimpleQuadrilateral) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleQuadrilateral) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleQuadrilateral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleQuadrilateral(val *SimpleQuadrilateral) *NullableSimpleQuadrilateral {
	return &NullableSimpleQuadrilateral{value: val, isSet: true}
}

func (v NullableSimpleQuadrilateral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleQuadrilateral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
