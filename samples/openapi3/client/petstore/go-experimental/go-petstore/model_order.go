/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bytes"
	"encoding/json"
	"time"
)

// Order struct for Order
type Order struct {
	ID *int64 `json:"id,omitempty"`
	PetID *int64 `json:"petId,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	ShipDate *time.Time `json:"shipDate,omitempty"`
	// Order Status
	Status *string `json:"status,omitempty"`
	Complete *bool `json:"complete,omitempty"`
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *Order) GetID() int64 {
	if o == nil || o.ID == nil {
		var ret int64
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIDOk() (int64, bool) {
	if o == nil || o.ID == nil {
		var ret int64
		return ret, false
	}
	return *o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *Order) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given int64 and assigns it to the ID field.
func (o *Order) SetID(v int64) {
	o.ID = &v
}

// GetPetID returns the PetID field value if set, zero value otherwise.
func (o *Order) GetPetID() int64 {
	if o == nil || o.PetID == nil {
		var ret int64
		return ret
	}
	return *o.PetID
}

// GetPetIDOk returns a tuple with the PetID field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPetIDOk() (int64, bool) {
	if o == nil || o.PetID == nil {
		var ret int64
		return ret, false
	}
	return *o.PetID, true
}

// HasPetID returns a boolean if a field has been set.
func (o *Order) HasPetID() bool {
	if o != nil && o.PetID != nil {
		return true
	}

	return false
}

// SetPetID gets a reference to the given int64 and assigns it to the PetID field.
func (o *Order) SetPetID(v int64) {
	o.PetID = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Order) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuantityOk() (int32, bool) {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret, false
	}
	return *o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Order) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *Order) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetShipDate returns the ShipDate field value if set, zero value otherwise.
func (o *Order) GetShipDate() time.Time {
	if o == nil || o.ShipDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ShipDate
}

// GetShipDateOk returns a tuple with the ShipDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetShipDateOk() (time.Time, bool) {
	if o == nil || o.ShipDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ShipDate, true
}

// HasShipDate returns a boolean if a field has been set.
func (o *Order) HasShipDate() bool {
	if o != nil && o.ShipDate != nil {
		return true
	}

	return false
}

// SetShipDate gets a reference to the given time.Time and assigns it to the ShipDate field.
func (o *Order) SetShipDate(v time.Time) {
	o.ShipDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Order) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Order) SetStatus(v string) {
	o.Status = &v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *Order) GetComplete() bool {
	if o == nil || o.Complete == nil {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCompleteOk() (bool, bool) {
	if o == nil || o.Complete == nil {
		var ret bool
		return ret, false
	}
	return *o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *Order) HasComplete() bool {
	if o != nil && o.Complete != nil {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *Order) SetComplete(v bool) {
	o.Complete = &v
}

type NullableOrder struct {
	Value Order
	ExplicitNull bool
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
