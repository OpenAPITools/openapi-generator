/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstore

import (
	"encoding/json"
	"fmt"
)

// ZebraType the model 'ZebraType'
type ZebraType string

// List of zebraType
const (
	ZEBRATYPE_ZEBRA_TYPE_PLAINS ZebraType = "plains"
	ZEBRATYPE_ZEBRA_TYPE_MOUNTAIN ZebraType = "mountain"
	ZEBRATYPE_ZEBRA_TYPE_GREVYS ZebraType = "grevys"
)

func (v *ZebraType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZebraType(value)
	for _, existing := range []ZebraType{ "plains", "mountain", "grevys",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZebraType", value)
}

// Ptr returns reference to zebraType value
func (v ZebraType) Ptr() *ZebraType {
	return &v
}

type NullableZebraType struct {
	value *ZebraType
	isSet bool
}

func (v NullableZebraType) Get() *ZebraType {
	return v.value
}

func (v *NullableZebraType) Set(val *ZebraType) {
	v.value = val
	v.isSet = true
}

func (v NullableZebraType) IsSet() bool {
	return v.isSet
}

func (v *NullableZebraType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZebraType(val *ZebraType) *NullableZebraType {
	return &NullableZebraType{value: val, isSet: true}
}

func (v NullableZebraType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZebraType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

