/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { OuterEnum } from '../models/OuterEnum';
import { OuterEnumDefaultValue } from '../models/OuterEnumDefaultValue';
import { OuterEnumInteger } from '../models/OuterEnumInteger';
import { OuterEnumIntegerDefaultValue } from '../models/OuterEnumIntegerDefaultValue';
import { AttributeTypeMapEntry } from '../models/ModelTypes';
import { HttpFile } from '../http/http';

export class EnumTest {
    'enumString'?: EnumTestEnumStringEnum;
    'enumStringRequired': EnumTestEnumStringRequiredEnum;
    'enumInteger'?: EnumTestEnumIntegerEnum;
    'enumNumber'?: EnumTestEnumNumberEnum;
    'outerEnum'?: OuterEnum | null;
    'outerEnumInteger'?: OuterEnumInteger;
    'outerEnumDefaultValue'?: OuterEnumDefaultValue;
    'outerEnumIntegerDefaultValue'?: OuterEnumIntegerDefaultValue;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<AttributeTypeMapEntry> = [
        {
            "name": "enumString",
            "baseName": "enum_string",
            "type": "EnumTestEnumStringEnum",
            "format": "",
            "required": false
        },
        {
            "name": "enumStringRequired",
            "baseName": "enum_string_required",
            "type": "EnumTestEnumStringRequiredEnum",
            "format": "",
            "required": true
        },
        {
            "name": "enumInteger",
            "baseName": "enum_integer",
            "type": "EnumTestEnumIntegerEnum",
            "format": "int32",
            "required": false
        },
        {
            "name": "enumNumber",
            "baseName": "enum_number",
            "type": "EnumTestEnumNumberEnum",
            "format": "double",
            "required": false
        },
        {
            "name": "outerEnum",
            "baseName": "outerEnum",
            "type": "OuterEnum",
            "format": "",
            "required": false
        },
        {
            "name": "outerEnumInteger",
            "baseName": "outerEnumInteger",
            "type": "OuterEnumInteger",
            "format": "",
            "required": false
        },
        {
            "name": "outerEnumDefaultValue",
            "baseName": "outerEnumDefaultValue",
            "type": "OuterEnumDefaultValue",
            "format": "",
            "required": false
        },
        {
            "name": "outerEnumIntegerDefaultValue",
            "baseName": "outerEnumIntegerDefaultValue",
            "type": "OuterEnumIntegerDefaultValue",
            "format": "",
            "required": false
        }    ];

    static getAttributeTypeMap() {
        return EnumTest.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum EnumTestEnumStringEnum {
    Upper = 'UPPER',
    Lower = 'lower',
    Empty = ''
}
export enum EnumTestEnumStringRequiredEnum {
    Upper = 'UPPER',
    Lower = 'lower',
    Empty = ''
}
export enum EnumTestEnumIntegerEnum {
    NUMBER_1 = 1,
    NUMBER_MINUS_1 = -1
}
export enum EnumTestEnumNumberEnum {
    NUMBER_1_DOT_1 = 1.1,
    NUMBER_MINUS_1_DOT_2 = -1.2
}

