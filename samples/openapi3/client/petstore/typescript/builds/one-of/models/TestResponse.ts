/**
 * testing oneOf without discriminator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TestA } from '../models/TestA';
import { TestB } from '../models/TestB';
import { OneOfClass } from '../models/OneOfClass';

/**
 * @type TestResponse
 * Type
 * @export
 */
export type TestResponse = TestA | TestB;

/**
* @type TestResponseClass
* @export
*/
export class TestResponseClass extends OneOfClass {
    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly arrayOfTypes: Array<typeof TestA | typeof TestB> = [TestA, TestB];

    public static findMatchingType(data:any): string | undefined {
        for(const type of this.arrayOfTypes) {
            if (this.instanceOf(data, type.getAttributeTypeMap())) {
                return type.name;
            }
        }

        return undefined;
    }
}

