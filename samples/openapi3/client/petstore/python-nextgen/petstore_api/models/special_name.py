# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from petstore_api.models.category import Category

class SpecialName(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    var_property: Optional[StrictInt] = Field(None, alias="property")
    var_async: Optional[Category] = Field(None, alias="async")
    var_schema: Optional[StrictStr] = Field(None, alias="schema", description="pet status in the store")
    additional_properties: Dict[str, Any] = {}
    __properties = ["property", "async", "schema"]

    @validator('var_schema')
    def var_schema_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('available', 'pending', 'sold'):
            raise ValueError("must validate the enum values ('available', 'pending', 'sold')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpecialName:
        """Create an instance of SpecialName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_async
        if self.var_async:
            _dict['async'] = self.var_async.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpecialName:
        """Create an instance of SpecialName from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SpecialName.parse_obj(obj)

        _obj = SpecialName.parse_obj({
            "var_property": obj.get("property"),
            "var_async": Category.from_dict(obj.get("async")) if obj.get("async") is not None else None,
            "var_schema": obj.get("schema")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

