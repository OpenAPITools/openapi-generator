# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six
from petstore_api import models

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from typing import Any, List
from pydantic import StrictStr, Field

ANYOFPIG_ANY_OF_SCHEMAS = ["BasquePig", "DanishPig"]

class AnyOfPig(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: BasquePig
    __anyof_schema_1: Optional[models.BasquePig] = None
    # data type: DanishPig
    __anyof_schema_2: Optional[models.DanishPig] = None
    actual_instance: Any
    any_of_schemas: List[str] = Field(ANYOFPIG_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        error_messages = []
        # validate data type: BasquePig
        if type(v) is not models.BasquePig:
            error_messages.append(f"Error! Input type `{type(v)}` is not `BasquePig`")
        else:
            return v

        # validate data type: DanishPig
        if type(v) is not models.DanishPig:
            error_messages.append(f"Error! Input type `{type(v)}` is not `DanishPig`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AnyOfPig with anyOf schemas: BasquePig, DanishPig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_json(cls, json_str: str) -> AnyOfPig:
        """Returns the string representation of the model"""
        instance = cls()
        error_messages = []
        # __anyof_schema_1: Optional[models.BasquePig] = None
        try:
            instance.actual_instance = models.BasquePig.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_2: Optional[models.DanishPig] = None
        try:
            instance.actual_instance = models.DanishPig.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AnyOfPig with anyOf schemas: BasquePig, DanishPig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return None

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

