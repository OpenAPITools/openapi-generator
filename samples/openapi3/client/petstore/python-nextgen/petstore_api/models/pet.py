# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import json

from petstore_api import models

from typing import List, Literal, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Pet(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[StrictInt] = None
    category: Optional[models.Category] = None
    name: StrictStr = ...
    photo_urls: List[StrictStr] = Field(..., alias="photoUrls", unique_items=True)
    tags: Optional[List[models.Tag]] = None
    status: Optional[Literal['available', 'pending', 'sold']] = Field(None, description="pet status in the store")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pet:
        """Create an instance of Pet from a JSON string"""
        return Pet.parse_raw(json_str)

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pet:
        """Create an instance of Pet from a dict"""
        return Pet.parse_obj(obj)


