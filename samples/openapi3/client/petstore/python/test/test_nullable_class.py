# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import petstore_api
from petstore_api.models.nullable_class import NullableClass  # noqa: E501
from petstore_api.rest import ApiException
from test.utils import EXAMPLES, VAR_NAME_INVALID_TYPES, get_examples


VALID_TYPES_BY_VAR = {
    'integer_prop': ['int', 'NoneType'],
    'number_prop': ['float', 'NoneType'],
    'boolean_prop': ['bool', 'NoneType'],
    'string_prop': ['str', 'NoneType'],
    'array_nullable_prop': ['list', 'NoneType']
}

class TestNullableClass(unittest.TestCase):
    """NullableClass unit test stubs"""

    def test_integer_prop_valid_values(self):
        var_name = 'integer_prop'
        for var_value in get_examples(VALID_TYPES_BY_VAR[var_name]):
            keyword_args = {var_name: var_value}
            a = NullableClass(_check_type=True, **keyword_args)
            assert a[var_name] == var_value
            assert a.to_dict() == keyword_args
            b = NullableClass(_check_type=True)
            b[var_name] = var_value
            assert b[var_name] == var_value
            assert b.to_dict() == keyword_args

    def test_integer_prop_invalid_values(self):
        var_name = 'integer_prop'
        valid_types = VALID_TYPES_BY_VAR[var_name]
        invalid_types = [
            val for val in EXAMPLES.keys() if val not in valid_types
        ]
        for var_value in get_examples(invalid_types):
            keyword_args = {var_name: var_value}
            with self.assertRaises(TypeError):
                a = NullableClass(_check_type=True, **keyword_args)
            with self.assertRaises(TypeError):
                a = NullableClass(_check_type=True)
                a[var_name] = var_value

    # def test_number_prop_valid_values(self):
    #     var_name = 'number_prop'
    #     for var_value in get_examples(VALID_TYPES_BY_VAR[var_name]):
    #         keyword_args = {var_name: var_value}
    #         a = NullableClass(_check_type=True, **keyword_args)
    #         assert a[var_name] == var_value
    #         assert a.to_dict() == keyword_args
    #         b = NullableClass(_check_type=True)
    #         b[var_name] = var_value
    #         assert b[var_name] == var_value
    #         assert b.to_dict() == keyword_args
    #
    # def test_number_prop_invalid_values(self):
    #     var_name = 'number_prop'
    #     valid_types = VALID_TYPES_BY_VAR[var_name]
    #     invalid_types = [
    #         val for val in EXAMPLES.keys() if val not in valid_types
    #     ]
    #     for var_value in get_examples(invalid_types):
    #         keyword_args = {var_name: var_value}
    #         with self.assertRaises(TypeError):
    #             NullableClass(_check_type=True, **keyword_args)
    #         with self.assertRaises(TypeError):
    #             a = NullableClass(_check_type=True)
    #             a[var_name] = var_value
    #
    # def test_boolean_prop_valid_values(self):
    #     var_name = 'boolean_prop'
    #     for var_value in get_examples(VALID_TYPES_BY_VAR[var_name]):
    #         keyword_args = {var_name: var_value}
    #         a = NullableClass(_check_type=True, **keyword_args)
    #         assert a[var_name] == var_value
    #         assert a.to_dict() == keyword_args
    #         b = NullableClass(_check_type=True)
    #         b[var_name] = var_value
    #         assert b[var_name] == var_value
    #         assert b.to_dict() == keyword_args
    #
    # def test_boolean_prop_invalid_values(self):
    #     var_name = 'boolean_prop'
    #     valid_types = VALID_TYPES_BY_VAR[var_name]
    #     invalid_types = [
    #         val for val in EXAMPLES.keys() if val not in valid_types
    #     ]
    #     for var_value in get_examples(invalid_types):
    #         keyword_args = {var_name: var_value}
    #         with self.assertRaises(TypeError):
    #             NullableClass(_check_type=True, **keyword_args)
    #         with self.assertRaises(TypeError):
    #             a = NullableClass(_check_type=True)
    #             a[var_name] = var_value
    #
    # def test_string_prop_valid_values(self):
    #     var_name = 'string_prop'
    #     for var_value in get_examples(VALID_TYPES_BY_VAR[var_name]):
    #         keyword_args = {var_name: var_value}
    #         a = NullableClass(_check_type=True, **keyword_args)
    #         assert a[var_name] == var_value
    #         assert a.to_dict() == keyword_args
    #         b = NullableClass(_check_type=True)
    #         b[var_name] = var_value
    #         assert b[var_name] == var_value
    #         assert b.to_dict() == keyword_args
    #
    # def test_string_prop_invalid_values(self):
    #     var_name = 'string_prop'
    #     valid_types = VALID_TYPES_BY_VAR[var_name]
    #     invalid_types = [
    #         val for val in EXAMPLES.keys() if val not in valid_types
    #     ]
    #     for var_value in get_examples(invalid_types):
    #         keyword_args = {var_name: var_value}
    #         with self.assertRaises(TypeError):
    #             NullableClass(_check_type=True, **keyword_args)
    #         with self.assertRaises(TypeError):
    #             a = NullableClass(_check_type=True)
    #             a[var_name] = var_value
    #
    # def test_array_nullable_prop_valid_values(self):
    #     var_name = 'array_nullable_prop'
    #     for var_value in get_examples(VALID_TYPES_BY_VAR[var_name]):
    #         keyword_args = {var_name: var_value}
    #         a = NullableClass(_check_type=True, **keyword_args)
    #         assert a[var_name] == var_value
    #         assert a.to_dict() == keyword_args
    #         b = NullableClass(_check_type=True)
    #         b[var_name] = var_value
    #         assert b[var_name] == var_value
    #         assert b.to_dict() == keyword_args
    #
    # def test_array_nullable_prop_invalid_values(self):
    #     var_name = 'array_nullable_prop'
    #     valid_types = VALID_TYPES_BY_VAR[var_name]
    #     invalid_types = [
    #         val for val in EXAMPLES.keys() if val not in valid_types
    #     ]
    #     for var_value in get_examples(invalid_types):
    #         keyword_args = {var_name: var_value}
    #         with self.assertRaises(TypeError):
    #             NullableClass(_check_type=True, **keyword_args)
    #         with self.assertRaises(TypeError):
    #             a = NullableClass(_check_type=True)
    #             a[var_name] = var_value


if __name__ == '__main__':
    unittest.main()
