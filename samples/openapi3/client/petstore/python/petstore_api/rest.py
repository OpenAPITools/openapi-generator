# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import json
import logging
import re
import ssl
from typing import Any, Dict, List, Optional, Union, Tuple

import urllib3
from urllib3 import BaseHTTPResponse
from urllib3.util.timeout import _TYPE_TIMEOUT

from petstore_api.configuration import Configuration
from petstore_api.exceptions import ApiException
from petstore_api.exceptions import ApiValueError
from petstore_api.exceptions import BadRequestException
from petstore_api.exceptions import ForbiddenException
from petstore_api.exceptions import NotFoundException
from petstore_api.exceptions import ServiceException
from petstore_api.exceptions import UnauthorizedException


logger = logging.getLogger(__name__)


class RESTResponse:
    """An HTTP response."""
    # This provides a generic object to store HTTP responses.
    # It proxies the original HTTP response from the underlying HTTP library
    # (aiohttp, urllib3, etc.) so that clients of RESTClientObject can work
    # without knowing too much about each library specifics.

    def __init__(self, resp: BaseHTTPResponse) -> None:
        self._urllib3_response = resp
        self.status = resp.status
        self.reason = resp.reason
        self.data = resp.data

    def getheaders(self) -> Dict[str, str]:
        """Returns a dictionary of the response headers."""
        # Note: this can lose the urllib3.HTTPHeaderDict duplicated headers.
        return dict(self._urllib3_response.headers)

    def getheader(self, name: str, default: Optional[str]=None) -> Optional[str]:
        """Returns a given response header."""
        return self._urllib3_response.headers.get(name, default)


PostParam = Tuple[
    str, # The key of the parameter
    Union[
        str, # The value of the parameter
        Tuple[ # or a file: (inspired by https://urllib3.readthedocs.io/en/v2.0.5/user-guide.html#files-binary-data)
            str, # filename
            bytes, # file data  
            str, # mime-type
        ],
    ]
]


class RESTClientObject:
    def __init__(self, configuration: Configuration, pools_size: int=4, maxsize: Optional[int]=None) -> None:
        # urllib3.PoolManager will pass all kw parameters to connectionpool
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/poolmanager.py#L75  # noqa: E501
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/connectionpool.py#L680  # noqa: E501
        # maxsize is the number of requests to host that are allowed in parallel  # noqa: E501
        # Custom SSL certificates and client certificates: http://urllib3.readthedocs.io/en/latest/advanced-usage.html  # noqa: E501

        # cert_reqs
        if configuration.verify_ssl:
            cert_reqs = ssl.CERT_REQUIRED
        else:
            cert_reqs = ssl.CERT_NONE

        addition_pool_args: Dict[str, Any] = {}
        if configuration.assert_hostname is not None:
            addition_pool_args['assert_hostname'] = configuration.assert_hostname  # noqa: E501

        if configuration.retries is not None:
            addition_pool_args['retries'] = configuration.retries

        if configuration.tls_server_name:
            addition_pool_args['server_hostname'] = configuration.tls_server_name


        if configuration.socket_options is not None:
            addition_pool_args['socket_options'] = configuration.socket_options

        if maxsize is None:
            if configuration.connection_pool_maxsize is not None:
                maxsize = configuration.connection_pool_maxsize
            else:
                maxsize = 4

        self.pool_manager: urllib3.PoolManager

        # https pool manager
        if configuration.proxy:
            self.pool_manager = urllib3.ProxyManager(
                num_pools=pools_size,
                maxsize=maxsize,
                cert_reqs=cert_reqs,
                ca_certs=configuration.ssl_ca_cert,
                cert_file=configuration.cert_file,
                key_file=configuration.key_file,
                proxy_url=configuration.proxy,
                proxy_headers=configuration.proxy_headers,
                **addition_pool_args
            )
        else:
            self.pool_manager = urllib3.PoolManager(
                num_pools=pools_size,
                maxsize=maxsize,
                cert_reqs=cert_reqs,
                ca_certs=configuration.ssl_ca_cert,
                cert_file=configuration.cert_file,
                key_file=configuration.key_file,
                **addition_pool_args
            )

    def request(self,
        method: str,
        url: str,
        query_params: Optional[Dict[str, str]]=None,
        headers: Optional[Dict[str, str]]=None,
        body: Any=None,
        post_params: Optional[List[PostParam]]=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        """Perform requests.

        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencoded`
                            and `multipart/form-data`
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        """
        method = method.upper()
        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',
                          'PATCH', 'OPTIONS']

        if post_params and body:
            raise ApiValueError(
                "body parameter cannot be used with post_params parameter."
            )

        post_params = post_params or []
        headers = headers or {}
        # url already contains the URL query string
        # so reset query_params to empty dict
        query_params = {}

        timeout = None
        if _request_timeout:
            if isinstance(_request_timeout, (int,float)):  # noqa: E501,F821
                timeout = urllib3.Timeout(total=_request_timeout)
            elif (isinstance(_request_timeout, tuple) and
                  len(_request_timeout) == 2):
                timeout = urllib3.Timeout(
                    connect=_request_timeout[0], read=_request_timeout[1])

        try:
            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:

                # no content type provided or payload is json
                if not headers.get('Content-Type') or re.search('json', headers['Content-Type'], re.IGNORECASE):
                    request_body = None
                    if body is not None:
                        request_body = json.dumps(body)
                    _r = self.pool_manager.request(
                        method, url,
                        body=request_body,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501
                    _r = self.pool_manager.request(
                        method, url,
                        fields=post_params,
                        encode_multipart=False,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                elif headers['Content-Type'] == 'multipart/form-data':
                    # must del headers['Content-Type'], or the correct
                    # Content-Type which generated by urllib3 will be
                    # overwritten.
                    del headers['Content-Type']
                    _r = self.pool_manager.request(
                        method, url,
                        fields=post_params,
                        encode_multipart=True,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                # Pass a `string` parameter directly in the body to support
                # other content types than Json when `body` argument is
                # provided in serialized form
                elif isinstance(body, str) or isinstance(body, bytes):
                    _r = self.pool_manager.request(
                        method, url,
                        body=body,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                else:
                    # Cannot generate the request from given parameters
                    msg = """Cannot prepare a request message for provided
                             arguments. Please check that your arguments match
                             declared content type."""
                    raise ApiException(status=0, reason=msg)
            # For `GET`, `HEAD`
            else:
                _r = self.pool_manager.request(method, url,
                                              fields={},
                                              preload_content=_preload_content,
                                              timeout=timeout,
                                              headers=headers)
        except urllib3.exceptions.SSLError as e:
            msg = "{0}\n{1}".format(type(e).__name__, str(e))
            raise ApiException(status=0, reason=msg)

        r = RESTResponse(_r)

        if _preload_content:
            # log response body
            logger.debug("response body: %s", r.data)


        if not 200 <= r.status <= 299:
            if r.status == 400:
                raise BadRequestException(http_resp=r)

            if r.status == 401:
                raise UnauthorizedException(http_resp=r)

            if r.status == 403:
                raise ForbiddenException(http_resp=r)

            if r.status == 404:
                raise NotFoundException(http_resp=r)

            if 500 <= r.status <= 599:
                raise ServiceException(http_resp=r)

            raise ApiException(http_resp=r)

        return r

    def get_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("GET", url,
                            headers=headers,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            query_params=query_params)

    def head_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("HEAD", url,
                            headers=headers,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            query_params=query_params)

    def options_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        post_params: Optional[List[PostParam]]=None,
        body: Any=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("OPTIONS", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def delete_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        body: Any=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("DELETE", url,
                            headers=headers,
                            query_params=query_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def post_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        post_params: Optional[List[PostParam]]=None,
        body: Any=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("POST", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def put_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        post_params: Optional[List[PostParam]]=None,
        body: Any=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("PUT", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def patch_request(
        self,
        url: str,
        headers: Optional[Dict[str, str]]=None,
        query_params: Optional[Dict[str, str]]=None,
        post_params: Optional[List[PostParam]]=None,
        body: Any=None,
        _preload_content: bool=True,
        _request_timeout: _TYPE_TIMEOUT=None,
    ) -> RESTResponse:
        return self.request("PATCH", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)
