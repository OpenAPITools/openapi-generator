# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.utils import (
    OpenaApiTypeError,
    date,
    datetime,
    file_type,
    model_to_dict,
    none_type,
    validate_type
)


class FormatTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional, required variables, and
                            additional properties.
    """
    openapi_types = {
        'integer': (int,),
        'int32': (int,),
        'int64': (int,),
        'number': (float,),
        'float': (float,),
        'double': (float,),
        'string': (str,),
        'byte': (str,),
        'binary': (file_type,),
        'date': (date,),
        'date_time': (datetime,),
        'uuid': (str,),
        'password': (str,),
        'pattern_with_digits': (str,),
        'pattern_with_digits_and_delimiter': (str,)
    }
    attribute_map = {
        'integer': 'integer',
        'int32': 'int32',
        'int64': 'int64',
        'number': 'number',
        'float': 'float',
        'double': 'double',
        'string': 'string',
        'byte': 'byte',
        'binary': 'binary',
        'date': 'date',
        'date_time': 'dateTime',
        'uuid': 'uuid',
        'password': 'password',
        'pattern_with_digits': 'pattern_with_digits',
        'pattern_with_digits_and_delimiter': 'pattern_with_digits_and_delimiter'
    }

    def __init__(self, number, byte, date, password, _check_type=False, **kwargs):  # noqa: E501
        """FormatTest - a model defined in OpenAPI

        Args:
            number (float):
            byte (str):
            date (date):
            password (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            integer (int): [optional]
            int32 (int): [optional]
            int64 (int): [optional]
            float (float): [optional]
            double (float): [optional]
            string (str): [optional]
            binary (file): [optional]
            date_time (datetime): [optional]
            uuid (str): [optional]
            pattern_with_digits (str): A string that is a 10 digit number. Can have leading zeros.. [optional]
            pattern_with_digits_and_delimiter (str): A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.. [optional]
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type

        # assign using .var_name to check against nullable and enums
        self.number = number
        self.byte = byte
        self.date = date
        self.password = password
        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_type = self.openapi_types[name]
        else:
            raise KeyError("{0} has no key '{1}'".format(
                type(self).__name__, name))

        variable_path = [name]
        if type(name) != str:
            raise OpenaApiTypeError(
                (str,),
                name,
                variable_path,
                value_type=False
            )
        if check_type:
            validate_type(value, required_type, variable_path)

        self._data_store[name] = value

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]
        raise KeyError("{0} has no key {1}".format(
            type(self).__name__, name))

    @property
    def integer(self):
        """Gets the integer of this FormatTest.  # noqa: E501


        Returns:
            int: The integer of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('integer')

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this FormatTest.


        Returns:
            int: The integer of this FormatTest.  # noqa: E501
        """
        if integer is not None and integer > 100:  # noqa: E501
            raise ValueError("Invalid value for `integer`, must be a value less than or equal to `100`")  # noqa: E501
        if integer is not None and integer < 10:  # noqa: E501
            raise ValueError("Invalid value for `integer`, must be a value greater than or equal to `10`")  # noqa: E501

        self.__setitem__('integer', integer)

    @property
    def int32(self):
        """Gets the int32 of this FormatTest.  # noqa: E501


        Returns:
            int: The int32 of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('int32')

    @int32.setter
    def int32(self, int32):
        """Sets the int32 of this FormatTest.


        Returns:
            int: The int32 of this FormatTest.  # noqa: E501
        """
        if int32 is not None and int32 > 200:  # noqa: E501
            raise ValueError("Invalid value for `int32`, must be a value less than or equal to `200`")  # noqa: E501
        if int32 is not None and int32 < 20:  # noqa: E501
            raise ValueError("Invalid value for `int32`, must be a value greater than or equal to `20`")  # noqa: E501

        self.__setitem__('int32', int32)

    @property
    def int64(self):
        """Gets the int64 of this FormatTest.  # noqa: E501


        Returns:
            int: The int64 of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('int64')

    @int64.setter
    def int64(self, int64):
        """Sets the int64 of this FormatTest.


        Returns:
            int: The int64 of this FormatTest.  # noqa: E501
        """

        self.__setitem__('int64', int64)

    @property
    def number(self):
        """Gets the number of this FormatTest.  # noqa: E501


        Returns:
            float: The number of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('number')

    @number.setter
    def number(self, number):
        """Sets the number of this FormatTest.


        Returns:
            float: The number of this FormatTest.  # noqa: E501
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and number > 543.2:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `543.2`")  # noqa: E501
        if number is not None and number < 32.1:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `32.1`")  # noqa: E501

        self.__setitem__('number', number)

    @property
    def float(self):
        """Gets the float of this FormatTest.  # noqa: E501


        Returns:
            float: The float of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('float')

    @float.setter
    def float(self, float):
        """Sets the float of this FormatTest.


        Returns:
            float: The float of this FormatTest.  # noqa: E501
        """
        if float is not None and float > 987.6:  # noqa: E501
            raise ValueError("Invalid value for `float`, must be a value less than or equal to `987.6`")  # noqa: E501
        if float is not None and float < 54.3:  # noqa: E501
            raise ValueError("Invalid value for `float`, must be a value greater than or equal to `54.3`")  # noqa: E501

        self.__setitem__('float', float)

    @property
    def double(self):
        """Gets the double of this FormatTest.  # noqa: E501


        Returns:
            float: The double of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('double')

    @double.setter
    def double(self, double):
        """Sets the double of this FormatTest.


        Returns:
            float: The double of this FormatTest.  # noqa: E501
        """
        if double is not None and double > 123.4:  # noqa: E501
            raise ValueError("Invalid value for `double`, must be a value less than or equal to `123.4`")  # noqa: E501
        if double is not None and double < 67.8:  # noqa: E501
            raise ValueError("Invalid value for `double`, must be a value greater than or equal to `67.8`")  # noqa: E501

        self.__setitem__('double', double)

    @property
    def string(self):
        """Gets the string of this FormatTest.  # noqa: E501


        Returns:
            str: The string of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('string')

    @string.setter
    def string(self, string):
        """Sets the string of this FormatTest.


        Returns:
            str: The string of this FormatTest.  # noqa: E501
        """
        if string is not None and not re.search(r'', string):  # noqa: E501
            raise ValueError(r"Invalid value for `string`, must be a follow pattern or equal to `/[a-z]/i`")  # noqa: E501

        self.__setitem__('string', string)

    @property
    def byte(self):
        """Gets the byte of this FormatTest.  # noqa: E501


        Returns:
            str: The byte of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('byte')

    @byte.setter
    def byte(self, byte):
        """Sets the byte of this FormatTest.


        Returns:
            str: The byte of this FormatTest.  # noqa: E501
        """
        if byte is None:
            raise ValueError("Invalid value for `byte`, must not be `None`")  # noqa: E501

        self.__setitem__('byte', byte)

    @property
    def binary(self):
        """Gets the binary of this FormatTest.  # noqa: E501


        Returns:
            file: The binary of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('binary')

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this FormatTest.


        Returns:
            file: The binary of this FormatTest.  # noqa: E501
        """

        self.__setitem__('binary', binary)

    @property
    def date(self):
        """Gets the date of this FormatTest.  # noqa: E501


        Returns:
            date: The date of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('date')

    @date.setter
    def date(self, date):
        """Sets the date of this FormatTest.


        Returns:
            date: The date of this FormatTest.  # noqa: E501
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self.__setitem__('date', date)

    @property
    def date_time(self):
        """Gets the date_time of this FormatTest.  # noqa: E501


        Returns:
            datetime: The date_time of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('date_time')

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this FormatTest.


        Returns:
            datetime: The date_time of this FormatTest.  # noqa: E501
        """

        self.__setitem__('date_time', date_time)

    @property
    def uuid(self):
        """Gets the uuid of this FormatTest.  # noqa: E501


        Returns:
            str: The uuid of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('uuid')

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FormatTest.


        Returns:
            str: The uuid of this FormatTest.  # noqa: E501
        """

        self.__setitem__('uuid', uuid)

    @property
    def password(self):
        """Gets the password of this FormatTest.  # noqa: E501


        Returns:
            str: The password of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('password')

    @password.setter
    def password(self, password):
        """Sets the password of this FormatTest.


        Returns:
            str: The password of this FormatTest.  # noqa: E501
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if password is not None and len(password) > 64:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `64`")  # noqa: E501
        if password is not None and len(password) < 10:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `10`")  # noqa: E501

        self.__setitem__('password', password)

    @property
    def pattern_with_digits(self):
        """Gets the pattern_with_digits of this FormatTest.  # noqa: E501

        A string that is a 10 digit number. Can have leading zeros.  # noqa: E501

        Returns:
            str: The pattern_with_digits of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('pattern_with_digits')

    @pattern_with_digits.setter
    def pattern_with_digits(self, pattern_with_digits):
        """Sets the pattern_with_digits of this FormatTest.

        A string that is a 10 digit number. Can have leading zeros.  # noqa: E501

        Returns:
            str: The pattern_with_digits of this FormatTest.  # noqa: E501
        """
        if pattern_with_digits is not None and not re.search(r'', pattern_with_digits):  # noqa: E501
            raise ValueError(r"Invalid value for `pattern_with_digits`, must be a follow pattern or equal to `/^\d{10}$/`")  # noqa: E501

        self.__setitem__('pattern_with_digits', pattern_with_digits)

    @property
    def pattern_with_digits_and_delimiter(self):
        """Gets the pattern_with_digits_and_delimiter of this FormatTest.  # noqa: E501

        A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.  # noqa: E501

        Returns:
            str: The pattern_with_digits_and_delimiter of this FormatTest.  # noqa: E501
        """
        return self._data_store.get('pattern_with_digits_and_delimiter')

    @pattern_with_digits_and_delimiter.setter
    def pattern_with_digits_and_delimiter(self, pattern_with_digits_and_delimiter):
        """Sets the pattern_with_digits_and_delimiter of this FormatTest.

        A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.  # noqa: E501

        Returns:
            str: The pattern_with_digits_and_delimiter of this FormatTest.  # noqa: E501
        """
        if pattern_with_digits_and_delimiter is not None and not re.search(r'', pattern_with_digits_and_delimiter):  # noqa: E501
            raise ValueError(r"Invalid value for `pattern_with_digits_and_delimiter`, must be a follow pattern or equal to `/^image_\d{1,3}$/i`")  # noqa: E501

        self.__setitem__('pattern_with_digits_and_delimiter', pattern_with_digits_and_delimiter)

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormatTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
