# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject5(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'additional_metadata': 'str',
        'required_file': 'file'
    }

    attribute_map = {
        'additional_metadata': 'additionalMetadata',
        'required_file': 'requiredFile'
    }

    def __init__(self, additional_metadata=None, required_file=None):  # noqa: E501
        """InlineObject5 - a model defined in OpenAPI"""  # noqa: E501

        self._additional_metadata = None
        self._required_file = None
        self.discriminator = None

        if additional_metadata is not None:
            self.additional_metadata = additional_metadata
        self.required_file = required_file

    @property
    def additional_metadata(self):
        """Gets the additional_metadata of this InlineObject5.  # noqa: E501

        Additional data to pass to server  # noqa: E501

        :return: The additional_metadata of this InlineObject5.  # noqa: E501
        :rtype: str
        """
        return self._additional_metadata

    @additional_metadata.setter
    def additional_metadata(self, additional_metadata):
        """Sets the additional_metadata of this InlineObject5.

        Additional data to pass to server  # noqa: E501

        :param additional_metadata: The additional_metadata of this InlineObject5.  # noqa: E501
        :type: str
        """

        self._additional_metadata = additional_metadata

    @property
    def required_file(self):
        """Gets the required_file of this InlineObject5.  # noqa: E501

        file to upload  # noqa: E501

        :return: The required_file of this InlineObject5.  # noqa: E501
        :rtype: file
        """
        return self._required_file

    @required_file.setter
    def required_file(self, required_file):
        """Sets the required_file of this InlineObject5.

        file to upload  # noqa: E501

        :param required_file: The required_file of this InlineObject5.  # noqa: E501
        :type: file
        """
        if required_file is None:
            raise ValueError("Invalid value for `required_file`, must not be `None`")  # noqa: E501

        self._required_file = required_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
