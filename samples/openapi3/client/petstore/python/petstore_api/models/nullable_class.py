# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from petstore_api.utils import (
    OpenaApiTypeError,
    date,
    datetime,
    file_type,
    model_to_dict,
    none_type,
    validate_type
)


class NullableClass(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
                            Optional and required variables only.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
                            Optional, required variables, and
                            additional properties.
      additional_properties_type (str): The attribute type for
                                        additional_properties variables only.
    """
    openapi_types = {
        'integer_prop': (int, none_type),
        'number_prop': (float, none_type),
        'boolean_prop': (bool, none_type),
        'string_prop': (str, none_type),
        'array_nullable_prop': ([(bool, dict, float, int, list, str)], none_type),
        'array_and_items_nullable_prop': ([(bool, dict, float, int, list, str, none_type)], none_type),
        'array_items_nullable': ([(bool, dict, float, int, list, str, none_type)],),
        'object_nullable_prop': ({str: (bool, dict, float, int, list, str)}, none_type),
        'object_and_items_nullable_prop': ({str: (bool, dict, float, int, list, str, none_type)}, none_type),
        'object_items_nullable': ({str: (bool, dict, float, int, list, str, none_type)},)
    }
    attribute_map = {
        'integer_prop': 'integer_prop',
        'number_prop': 'number_prop',
        'boolean_prop': 'boolean_prop',
        'string_prop': 'string_prop',
        'array_nullable_prop': 'array_nullable_prop',
        'array_and_items_nullable_prop': 'array_and_items_nullable_prop',
        'array_items_nullable': 'array_items_nullable',
        'object_nullable_prop': 'object_nullable_prop',
        'object_and_items_nullable_prop': 'object_and_items_nullable_prop',
        'object_items_nullable': 'object_items_nullable'
    }
    additional_properties_type = '(bool, dict, float, int, list, str, none_type)'

    def __init__(self, _check_type=False, **kwargs):  # noqa: E501
        """NullableClass - a model defined in OpenAPI



        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to False
            integer_prop (int/None): [optional]
            number_prop (float/None): [optional]
            boolean_prop (bool/None): [optional]
            string_prop (str/None): [optional]
            array_nullable_prop (list[bool/dict/float/int/list/str]/None): [optional]
            array_and_items_nullable_prop (list[bool/dict/float/int/list/str/None]/None): [optional]
            array_items_nullable (list[bool/dict/float/int/list/str/None]): [optional]
            object_nullable_prop (dict(str: bool/dict/float/int/list/str)/None): [optional]
            object_and_items_nullable_prop (dict(str: bool/dict/float/int/list/str/None)/None): [optional]
            object_items_nullable (dict(str: bool/dict/float/int/list/str/None)): [optional]
        """

        self._data_store = {}
        self.discriminator = None
        self._check_type = _check_type

        for var_name, var_value in six.iteritems(kwargs):
            if var_name in self.openapi_types:
                # assign using .var_name to check against nullable and enums
                setattr(self, var_name, var_value)
            else:
                self.__setitem__(var_name, var_value)

    def __setitem__(self, name, value):
        if name in self.openapi_types:
            check_type = self._check_type
            required_type = self.openapi_types[name]
        else:
            check_type = True
            required_type = self.additional_properties_type

        variable_path = [name]
        if type(name) != str:
            raise OpenaApiTypeError(
                (str,),
                name,
                variable_path,
                value_type=False
            )
        if check_type:
            validate_type(value, required_type, variable_path)

        self._data_store[name] = value
        # set a variable name value for json serialization
        if (name not in self.openapi_types and
                name not in self.attribute_map):
            self.attribute_map[name] = name

    def __getitem__(self, name):
        if name in self.openapi_types:
            return self._data_store.get(name)
        if name in self._data_store:
            return self._data_store[name]
        raise KeyError("{0} has no key {1}".format(
            type(self).__name__, name))

    @property
    def integer_prop(self):
        """Gets the integer_prop of this NullableClass.  # noqa: E501


        Returns:
            int/None: The integer_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('integer_prop')

    @integer_prop.setter
    def integer_prop(self, integer_prop):
        """Sets the integer_prop of this NullableClass.


        Returns:
            int/None: The integer_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('integer_prop', integer_prop)

    @property
    def number_prop(self):
        """Gets the number_prop of this NullableClass.  # noqa: E501


        Returns:
            float/None: The number_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('number_prop')

    @number_prop.setter
    def number_prop(self, number_prop):
        """Sets the number_prop of this NullableClass.


        Returns:
            float/None: The number_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('number_prop', number_prop)

    @property
    def boolean_prop(self):
        """Gets the boolean_prop of this NullableClass.  # noqa: E501


        Returns:
            bool/None: The boolean_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('boolean_prop')

    @boolean_prop.setter
    def boolean_prop(self, boolean_prop):
        """Sets the boolean_prop of this NullableClass.


        Returns:
            bool/None: The boolean_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('boolean_prop', boolean_prop)

    @property
    def string_prop(self):
        """Gets the string_prop of this NullableClass.  # noqa: E501


        Returns:
            str/None: The string_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('string_prop')

    @string_prop.setter
    def string_prop(self, string_prop):
        """Sets the string_prop of this NullableClass.


        Returns:
            str/None: The string_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('string_prop', string_prop)

    @property
    def array_nullable_prop(self):
        """Gets the array_nullable_prop of this NullableClass.  # noqa: E501


        Returns:
            list[bool/dict/float/int/list/str]/None: The array_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('array_nullable_prop')

    @array_nullable_prop.setter
    def array_nullable_prop(self, array_nullable_prop):
        """Sets the array_nullable_prop of this NullableClass.


        Returns:
            list[bool/dict/float/int/list/str]/None: The array_nullable_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('array_nullable_prop', array_nullable_prop)

    @property
    def array_and_items_nullable_prop(self):
        """Gets the array_and_items_nullable_prop of this NullableClass.  # noqa: E501


        Returns:
            list[bool/dict/float/int/list/str/None]/None: The array_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('array_and_items_nullable_prop')

    @array_and_items_nullable_prop.setter
    def array_and_items_nullable_prop(self, array_and_items_nullable_prop):
        """Sets the array_and_items_nullable_prop of this NullableClass.


        Returns:
            list[bool/dict/float/int/list/str/None]/None: The array_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('array_and_items_nullable_prop', array_and_items_nullable_prop)

    @property
    def array_items_nullable(self):
        """Gets the array_items_nullable of this NullableClass.  # noqa: E501


        Returns:
            list[bool/dict/float/int/list/str/None]: The array_items_nullable of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('array_items_nullable')

    @array_items_nullable.setter
    def array_items_nullable(self, array_items_nullable):
        """Sets the array_items_nullable of this NullableClass.


        Returns:
            list[bool/dict/float/int/list/str/None]: The array_items_nullable of this NullableClass.  # noqa: E501
        """

        self.__setitem__('array_items_nullable', array_items_nullable)

    @property
    def object_nullable_prop(self):
        """Gets the object_nullable_prop of this NullableClass.  # noqa: E501


        Returns:
            dict(str: bool/dict/float/int/list/str)/None: The object_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('object_nullable_prop')

    @object_nullable_prop.setter
    def object_nullable_prop(self, object_nullable_prop):
        """Sets the object_nullable_prop of this NullableClass.


        Returns:
            dict(str: bool/dict/float/int/list/str)/None: The object_nullable_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('object_nullable_prop', object_nullable_prop)

    @property
    def object_and_items_nullable_prop(self):
        """Gets the object_and_items_nullable_prop of this NullableClass.  # noqa: E501


        Returns:
            dict(str: bool/dict/float/int/list/str/None)/None: The object_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('object_and_items_nullable_prop')

    @object_and_items_nullable_prop.setter
    def object_and_items_nullable_prop(self, object_and_items_nullable_prop):
        """Sets the object_and_items_nullable_prop of this NullableClass.


        Returns:
            dict(str: bool/dict/float/int/list/str/None)/None: The object_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """

        self.__setitem__('object_and_items_nullable_prop', object_and_items_nullable_prop)

    @property
    def object_items_nullable(self):
        """Gets the object_items_nullable of this NullableClass.  # noqa: E501


        Returns:
            dict(str: bool/dict/float/int/list/str/None): The object_items_nullable of this NullableClass.  # noqa: E501
        """
        return self._data_store.get('object_items_nullable')

    @object_items_nullable.setter
    def object_items_nullable(self, object_items_nullable):
        """Sets the object_items_nullable of this NullableClass.


        Returns:
            dict(str: bool/dict/float/int/list/str/None): The object_items_nullable of this NullableClass.  # noqa: E501
        """

        self.__setitem__('object_items_nullable', object_items_nullable)

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NullableClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
