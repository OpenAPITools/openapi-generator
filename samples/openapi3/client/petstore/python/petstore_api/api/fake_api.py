# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_call, ValidationError, Field
from typing import Dict, List, Optional, Tuple, Union, Any, Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import date, datetime

from pydantic import StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, field_validator

from typing import Any, Dict, List, Optional, Union

from petstore_api.models.client import Client
from petstore_api.models.enum_class import EnumClass
from petstore_api.models.file_schema_test_class import FileSchemaTestClass
from petstore_api.models.health_check_result import HealthCheckResult
from petstore_api.models.outer_composite import OuterComposite
from petstore_api.models.outer_object_with_enum_property import OuterObjectWithEnumProperty
from petstore_api.models.pet import Pet
from petstore_api.models.tag import Tag
from petstore_api.models.test_inline_freeform_additional_properties_request import TestInlineFreeformAdditionalPropertiesRequest
from petstore_api.models.user import User

from petstore_api.api_client import ApiClient
from petstore_api.api_response import ApiResponse
from petstore_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from petstore_api.rest import RESTResponseType

from multiprocessing.pool import ApplyResult


class FakeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def fake_any_type_request_body(
        self,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test any type request body
                This method makes a synchronous HTTP request by default.
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_any_type_request_body_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_any_type_request_body_without_preload_content(
        self,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test any type request body
                This method makes a synchronous HTTP request by default.
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_any_type_request_body_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_any_type_request_body_with_async(
        self,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test any type request body
                This method makes a synchronous HTTP request by default.
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_any_type_request_body_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_any_type_request_body_with_http_info_async(
        self,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test any type request body
                This method makes a synchronous HTTP request by default.
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_any_type_request_body_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_any_type_request_body_with_http_info(
        self,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test any type request body
                This method makes a synchronous HTTP request by default.
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_any_type_request_body_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_any_type_request_body_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/any_type_body',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_enum_ref_query_parameter(
        self,
        enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test enum reference query parameter
                This method makes a synchronous HTTP request by default.
        :param enum_ref: enum reference
        :type enum_ref: EnumClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_enum_ref_query_parameter_serialize(
            enum_ref=enum_ref,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_enum_ref_query_parameter_without_preload_content(
        self,
        enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test enum reference query parameter
                This method makes a synchronous HTTP request by default.
        :param enum_ref: enum reference
        :type enum_ref: EnumClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_enum_ref_query_parameter_serialize(
            enum_ref=enum_ref,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_enum_ref_query_parameter_with_async(
        self,
        enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test enum reference query parameter
                This method makes a synchronous HTTP request by default.
        :param enum_ref: enum reference
        :type enum_ref: EnumClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_enum_ref_query_parameter_serialize(
            enum_ref=enum_ref,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_enum_ref_query_parameter_with_http_info_async(
        self,
        enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test enum reference query parameter
                This method makes a synchronous HTTP request by default.
        :param enum_ref: enum reference
        :type enum_ref: EnumClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_enum_ref_query_parameter_serialize(
            enum_ref=enum_ref,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_enum_ref_query_parameter_with_http_info(
        self,
        enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test enum reference query parameter
                This method makes a synchronous HTTP request by default.
        :param enum_ref: enum reference
        :type enum_ref: EnumClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_enum_ref_query_parameter_serialize(
            enum_ref=enum_ref,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_enum_ref_query_parameter_serialize(
        self,
        enum_ref,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if enum_ref is not None:  # noqa: E501
            
            _query_params.append(('enum_ref', enum_ref.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fake/enum_ref_query_parameter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_health_get(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> HealthCheckResult:

        """Health check endpoint
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[HealthCheckResult]
        """

        param = self._fake_health_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthCheckResult"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_health_get_without_preload_content(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """Health check endpoint
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[HealthCheckResult]
        """

        param = self._fake_health_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthCheckResult"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_health_get_with_async(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """Health check endpoint
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[HealthCheckResult]
        """

        param = self._fake_health_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthCheckResult"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_health_get_with_http_info_async(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """Health check endpoint
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[HealthCheckResult]
        """

        param = self._fake_health_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthCheckResult"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_health_get_with_http_info(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> HealthCheckResult:

        """Health check endpoint
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[HealthCheckResult]
        """

        param = self._fake_health_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HealthCheckResult"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_health_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501


        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fake/health',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_http_signature_test(
        self,
        pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
        query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
        header_1: Annotated[Optional[StrictStr], Field(description="header parameter")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test http signature authentication
                This method makes a synchronous HTTP request by default.
        :param pet: Pet object that needs to be added to the store (required)
        :type pet: Pet
        :param query_1: query parameter
        :type query_1: str
        :param header_1: header parameter
        :type header_1: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_http_signature_test_serialize(
            pet=pet,
            query_1=query_1,
            header_1=header_1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_http_signature_test_without_preload_content(
        self,
        pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
        query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
        header_1: Annotated[Optional[StrictStr], Field(description="header parameter")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test http signature authentication
                This method makes a synchronous HTTP request by default.
        :param pet: Pet object that needs to be added to the store (required)
        :type pet: Pet
        :param query_1: query parameter
        :type query_1: str
        :param header_1: header parameter
        :type header_1: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_http_signature_test_serialize(
            pet=pet,
            query_1=query_1,
            header_1=header_1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_http_signature_test_with_async(
        self,
        pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
        query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
        header_1: Annotated[Optional[StrictStr], Field(description="header parameter")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test http signature authentication
                This method makes a synchronous HTTP request by default.
        :param pet: Pet object that needs to be added to the store (required)
        :type pet: Pet
        :param query_1: query parameter
        :type query_1: str
        :param header_1: header parameter
        :type header_1: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_http_signature_test_serialize(
            pet=pet,
            query_1=query_1,
            header_1=header_1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_http_signature_test_with_http_info_async(
        self,
        pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
        query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
        header_1: Annotated[Optional[StrictStr], Field(description="header parameter")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test http signature authentication
                This method makes a synchronous HTTP request by default.
        :param pet: Pet object that needs to be added to the store (required)
        :type pet: Pet
        :param query_1: query parameter
        :type query_1: str
        :param header_1: header parameter
        :type header_1: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_http_signature_test_serialize(
            pet=pet,
            query_1=query_1,
            header_1=header_1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_http_signature_test_with_http_info(
        self,
        pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
        query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
        header_1: Annotated[Optional[StrictStr], Field(description="header parameter")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test http signature authentication
                This method makes a synchronous HTTP request by default.
        :param pet: Pet object that needs to be added to the store (required)
        :type pet: Pet
        :param query_1: query parameter
        :type query_1: str
        :param header_1: header parameter
        :type header_1: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_http_signature_test_serialize(
            pet=pet,
            query_1=query_1,
            header_1=header_1,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_http_signature_test_serialize(
        self,
        pet,
        query_1,
        header_1,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query_1 is not None:  # noqa: E501
            
            _query_params.append(('query_1', query_1))
            
        # process the header parameters
        if header_1 is not None:
            _header_params['header_1'] = header_1
        # process the form parameters
        # process the body parameter
        if pet is not None:
            _body_params = pet


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json', 'application/xml'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = ['http_signature_test']  # noqa: E501

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fake/http-signature-test',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_outer_boolean_serialize(
        self,
        body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> bool:

        """fake_outer_boolean_serialize
        Test serialization of outer boolean types
                This method makes a synchronous HTTP request by default.
        :param body: Input boolean as post body
        :type body: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[bool]
        """

        param = self._fake_outer_boolean_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bool"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_outer_boolean_serialize_without_preload_content(
        self,
        body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """fake_outer_boolean_serialize
        Test serialization of outer boolean types
                This method makes a synchronous HTTP request by default.
        :param body: Input boolean as post body
        :type body: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[bool]
        """

        param = self._fake_outer_boolean_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bool"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_outer_boolean_serialize_with_async(
        self,
        body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_boolean_serialize
        Test serialization of outer boolean types
                This method makes a synchronous HTTP request by default.
        :param body: Input boolean as post body
        :type body: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[bool]
        """

        param = self._fake_outer_boolean_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bool"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_outer_boolean_serialize_with_http_info_async(
        self,
        body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_boolean_serialize
        Test serialization of outer boolean types
                This method makes a synchronous HTTP request by default.
        :param body: Input boolean as post body
        :type body: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[bool]
        """

        param = self._fake_outer_boolean_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bool"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_outer_boolean_serialize_with_http_info(
        self,
        body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> bool:

        """fake_outer_boolean_serialize
        Test serialization of outer boolean types
                This method makes a synchronous HTTP request by default.
        :param body: Input boolean as post body
        :type body: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[bool]
        """

        param = self._fake_outer_boolean_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bool"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_outer_boolean_serialize_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/outer/boolean',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_outer_composite_serialize(
        self,
        outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> OuterComposite:

        """fake_outer_composite_serialize
        Test serialization of object with outer number type
                This method makes a synchronous HTTP request by default.
        :param outer_composite: Input composite as post body
        :type outer_composite: OuterComposite
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterComposite]
        """

        param = self._fake_outer_composite_serialize_serialize(
            outer_composite=outer_composite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterComposite"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_outer_composite_serialize_without_preload_content(
        self,
        outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """fake_outer_composite_serialize
        Test serialization of object with outer number type
                This method makes a synchronous HTTP request by default.
        :param outer_composite: Input composite as post body
        :type outer_composite: OuterComposite
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterComposite]
        """

        param = self._fake_outer_composite_serialize_serialize(
            outer_composite=outer_composite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterComposite"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_outer_composite_serialize_with_async(
        self,
        outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_composite_serialize
        Test serialization of object with outer number type
                This method makes a synchronous HTTP request by default.
        :param outer_composite: Input composite as post body
        :type outer_composite: OuterComposite
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterComposite]
        """

        param = self._fake_outer_composite_serialize_serialize(
            outer_composite=outer_composite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterComposite"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_outer_composite_serialize_with_http_info_async(
        self,
        outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_composite_serialize
        Test serialization of object with outer number type
                This method makes a synchronous HTTP request by default.
        :param outer_composite: Input composite as post body
        :type outer_composite: OuterComposite
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterComposite]
        """

        param = self._fake_outer_composite_serialize_serialize(
            outer_composite=outer_composite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterComposite"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_outer_composite_serialize_with_http_info(
        self,
        outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> OuterComposite:

        """fake_outer_composite_serialize
        Test serialization of object with outer number type
                This method makes a synchronous HTTP request by default.
        :param outer_composite: Input composite as post body
        :type outer_composite: OuterComposite
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterComposite]
        """

        param = self._fake_outer_composite_serialize_serialize(
            outer_composite=outer_composite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterComposite"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_outer_composite_serialize_serialize(
        self,
        outer_composite,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if outer_composite is not None:
            _body_params = outer_composite

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/outer/composite',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_outer_number_serialize(
        self,
        body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> float:

        """fake_outer_number_serialize
        Test serialization of outer number types
                This method makes a synchronous HTTP request by default.
        :param body: Input number as post body
        :type body: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[float]
        """

        param = self._fake_outer_number_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_outer_number_serialize_without_preload_content(
        self,
        body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """fake_outer_number_serialize
        Test serialization of outer number types
                This method makes a synchronous HTTP request by default.
        :param body: Input number as post body
        :type body: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[float]
        """

        param = self._fake_outer_number_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_outer_number_serialize_with_async(
        self,
        body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_number_serialize
        Test serialization of outer number types
                This method makes a synchronous HTTP request by default.
        :param body: Input number as post body
        :type body: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[float]
        """

        param = self._fake_outer_number_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_outer_number_serialize_with_http_info_async(
        self,
        body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_number_serialize
        Test serialization of outer number types
                This method makes a synchronous HTTP request by default.
        :param body: Input number as post body
        :type body: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[float]
        """

        param = self._fake_outer_number_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_outer_number_serialize_with_http_info(
        self,
        body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> float:

        """fake_outer_number_serialize
        Test serialization of outer number types
                This method makes a synchronous HTTP request by default.
        :param body: Input number as post body
        :type body: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[float]
        """

        param = self._fake_outer_number_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "float"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_outer_number_serialize_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/outer/number',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_outer_string_serialize(
        self,
        body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> str:

        """fake_outer_string_serialize
        Test serialization of outer string types
                This method makes a synchronous HTTP request by default.
        :param body: Input string as post body
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[str]
        """

        param = self._fake_outer_string_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_outer_string_serialize_without_preload_content(
        self,
        body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """fake_outer_string_serialize
        Test serialization of outer string types
                This method makes a synchronous HTTP request by default.
        :param body: Input string as post body
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[str]
        """

        param = self._fake_outer_string_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_outer_string_serialize_with_async(
        self,
        body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_string_serialize
        Test serialization of outer string types
                This method makes a synchronous HTTP request by default.
        :param body: Input string as post body
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[str]
        """

        param = self._fake_outer_string_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_outer_string_serialize_with_http_info_async(
        self,
        body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_outer_string_serialize
        Test serialization of outer string types
                This method makes a synchronous HTTP request by default.
        :param body: Input string as post body
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[str]
        """

        param = self._fake_outer_string_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_outer_string_serialize_with_http_info(
        self,
        body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> str:

        """fake_outer_string_serialize
        Test serialization of outer string types
                This method makes a synchronous HTTP request by default.
        :param body: Input string as post body
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[str]
        """

        param = self._fake_outer_string_serialize_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_outer_string_serialize_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/outer/string',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_property_enum_integer_serialize(
        self,
        outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> OuterObjectWithEnumProperty:

        """fake_property_enum_integer_serialize
        Test serialization of enum (int) properties with examples
                This method makes a synchronous HTTP request by default.
        :param outer_object_with_enum_property: Input enum (int) as post body (required)
        :type outer_object_with_enum_property: OuterObjectWithEnumProperty
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterObjectWithEnumProperty]
        """

        param = self._fake_property_enum_integer_serialize_serialize(
            outer_object_with_enum_property=outer_object_with_enum_property,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterObjectWithEnumProperty"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_property_enum_integer_serialize_without_preload_content(
        self,
        outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """fake_property_enum_integer_serialize
        Test serialization of enum (int) properties with examples
                This method makes a synchronous HTTP request by default.
        :param outer_object_with_enum_property: Input enum (int) as post body (required)
        :type outer_object_with_enum_property: OuterObjectWithEnumProperty
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterObjectWithEnumProperty]
        """

        param = self._fake_property_enum_integer_serialize_serialize(
            outer_object_with_enum_property=outer_object_with_enum_property,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterObjectWithEnumProperty"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_property_enum_integer_serialize_with_async(
        self,
        outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_property_enum_integer_serialize
        Test serialization of enum (int) properties with examples
                This method makes a synchronous HTTP request by default.
        :param outer_object_with_enum_property: Input enum (int) as post body (required)
        :type outer_object_with_enum_property: OuterObjectWithEnumProperty
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterObjectWithEnumProperty]
        """

        param = self._fake_property_enum_integer_serialize_serialize(
            outer_object_with_enum_property=outer_object_with_enum_property,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterObjectWithEnumProperty"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_property_enum_integer_serialize_with_http_info_async(
        self,
        outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """fake_property_enum_integer_serialize
        Test serialization of enum (int) properties with examples
                This method makes a synchronous HTTP request by default.
        :param outer_object_with_enum_property: Input enum (int) as post body (required)
        :type outer_object_with_enum_property: OuterObjectWithEnumProperty
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterObjectWithEnumProperty]
        """

        param = self._fake_property_enum_integer_serialize_serialize(
            outer_object_with_enum_property=outer_object_with_enum_property,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterObjectWithEnumProperty"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_property_enum_integer_serialize_with_http_info(
        self,
        outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> OuterObjectWithEnumProperty:

        """fake_property_enum_integer_serialize
        Test serialization of enum (int) properties with examples
                This method makes a synchronous HTTP request by default.
        :param outer_object_with_enum_property: Input enum (int) as post body (required)
        :type outer_object_with_enum_property: OuterObjectWithEnumProperty
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[OuterObjectWithEnumProperty]
        """

        param = self._fake_property_enum_integer_serialize_serialize(
            outer_object_with_enum_property=outer_object_with_enum_property,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OuterObjectWithEnumProperty"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_property_enum_integer_serialize_serialize(
        self,
        outer_object_with_enum_property,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if outer_object_with_enum_property is not None:
            _body_params = outer_object_with_enum_property

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/property/enum-int',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_return_list_of_objects(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> List[List[Tag]]:

        """test returning list of objects
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[List[List[Tag]]]
        """

        param = self._fake_return_list_of_objects_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Tag]]"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_return_list_of_objects_without_preload_content(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test returning list of objects
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[List[List[Tag]]]
        """

        param = self._fake_return_list_of_objects_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Tag]]"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_return_list_of_objects_with_async(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test returning list of objects
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[List[List[Tag]]]
        """

        param = self._fake_return_list_of_objects_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Tag]]"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_return_list_of_objects_with_http_info_async(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test returning list of objects
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[List[List[Tag]]]
        """

        param = self._fake_return_list_of_objects_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Tag]]"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_return_list_of_objects_with_http_info(
        self,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> List[List[Tag]]:

        """test returning list of objects
                This method makes a synchronous HTTP request by default.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[List[List[Tag]]]
        """

        param = self._fake_return_list_of_objects_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Tag]]"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_return_list_of_objects_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501


        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fake/return_list_of_object',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def fake_uuid_example(
        self,
        uuid_example: Annotated[StrictStr, Field(description="uuid example")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test uuid example
                This method makes a synchronous HTTP request by default.
        :param uuid_example: uuid example (required)
        :type uuid_example: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_uuid_example_serialize(
            uuid_example=uuid_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fake_uuid_example_without_preload_content(
        self,
        uuid_example: Annotated[StrictStr, Field(description="uuid example")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test uuid example
                This method makes a synchronous HTTP request by default.
        :param uuid_example: uuid example (required)
        :type uuid_example: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_uuid_example_serialize(
            uuid_example=uuid_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def fake_uuid_example_with_async(
        self,
        uuid_example: Annotated[StrictStr, Field(description="uuid example")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test uuid example
                This method makes a synchronous HTTP request by default.
        :param uuid_example: uuid example (required)
        :type uuid_example: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_uuid_example_serialize(
            uuid_example=uuid_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def fake_uuid_example_with_http_info_async(
        self,
        uuid_example: Annotated[StrictStr, Field(description="uuid example")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test uuid example
                This method makes a synchronous HTTP request by default.
        :param uuid_example: uuid example (required)
        :type uuid_example: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_uuid_example_serialize(
            uuid_example=uuid_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def fake_uuid_example_with_http_info(
        self,
        uuid_example: Annotated[StrictStr, Field(description="uuid example")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test uuid example
                This method makes a synchronous HTTP request by default.
        :param uuid_example: uuid example (required)
        :type uuid_example: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._fake_uuid_example_serialize(
            uuid_example=uuid_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _fake_uuid_example_serialize(
        self,
        uuid_example,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if uuid_example is not None:  # noqa: E501
            
            _query_params.append(('uuid_example', uuid_example))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fake/uuid_example',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_body_with_binary(
        self,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_body_with_binary
        For this test, the body has to be a binary file.
                This method makes a synchronous HTTP request by default.
        :param body: image to upload (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_binary_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_body_with_binary_without_preload_content(
        self,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test_body_with_binary
        For this test, the body has to be a binary file.
                This method makes a synchronous HTTP request by default.
        :param body: image to upload (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_binary_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_body_with_binary_with_async(
        self,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_body_with_binary
        For this test, the body has to be a binary file.
                This method makes a synchronous HTTP request by default.
        :param body: image to upload (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_binary_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_body_with_binary_with_http_info_async(
        self,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_body_with_binary
        For this test, the body has to be a binary file.
                This method makes a synchronous HTTP request by default.
        :param body: image to upload (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_binary_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_body_with_binary_with_http_info(
        self,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_body_with_binary
        For this test, the body has to be a binary file.
                This method makes a synchronous HTTP request by default.
        :param body: image to upload (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_binary_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_body_with_binary_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(_body_params, str):
                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
                    _body_params = _fp.read()


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['image/png'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fake/body-with-binary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_body_with_file_schema(
        self,
        file_schema_test_class: FileSchemaTestClass,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_body_with_file_schema
        For this test, the body for this request must reference a schema named `File`.
                This method makes a synchronous HTTP request by default.
        :param file_schema_test_class: (required)
        :type file_schema_test_class: FileSchemaTestClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_file_schema_serialize(
            file_schema_test_class=file_schema_test_class,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_body_with_file_schema_without_preload_content(
        self,
        file_schema_test_class: FileSchemaTestClass,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test_body_with_file_schema
        For this test, the body for this request must reference a schema named `File`.
                This method makes a synchronous HTTP request by default.
        :param file_schema_test_class: (required)
        :type file_schema_test_class: FileSchemaTestClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_file_schema_serialize(
            file_schema_test_class=file_schema_test_class,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_body_with_file_schema_with_async(
        self,
        file_schema_test_class: FileSchemaTestClass,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_body_with_file_schema
        For this test, the body for this request must reference a schema named `File`.
                This method makes a synchronous HTTP request by default.
        :param file_schema_test_class: (required)
        :type file_schema_test_class: FileSchemaTestClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_file_schema_serialize(
            file_schema_test_class=file_schema_test_class,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_body_with_file_schema_with_http_info_async(
        self,
        file_schema_test_class: FileSchemaTestClass,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_body_with_file_schema
        For this test, the body for this request must reference a schema named `File`.
                This method makes a synchronous HTTP request by default.
        :param file_schema_test_class: (required)
        :type file_schema_test_class: FileSchemaTestClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_file_schema_serialize(
            file_schema_test_class=file_schema_test_class,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_body_with_file_schema_with_http_info(
        self,
        file_schema_test_class: FileSchemaTestClass,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_body_with_file_schema
        For this test, the body for this request must reference a schema named `File`.
                This method makes a synchronous HTTP request by default.
        :param file_schema_test_class: (required)
        :type file_schema_test_class: FileSchemaTestClass
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_file_schema_serialize(
            file_schema_test_class=file_schema_test_class,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_body_with_file_schema_serialize(
        self,
        file_schema_test_class,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if file_schema_test_class is not None:
            _body_params = file_schema_test_class


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fake/body-with-file-schema',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_body_with_query_params(
        self,
        query: StrictStr,
        user: User,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_body_with_query_params
                This method makes a synchronous HTTP request by default.
        :param query: (required)
        :type query: str
        :param user: (required)
        :type user: User
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_query_params_serialize(
            query=query,
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_body_with_query_params_without_preload_content(
        self,
        query: StrictStr,
        user: User,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test_body_with_query_params
                This method makes a synchronous HTTP request by default.
        :param query: (required)
        :type query: str
        :param user: (required)
        :type user: User
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_query_params_serialize(
            query=query,
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_body_with_query_params_with_async(
        self,
        query: StrictStr,
        user: User,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_body_with_query_params
                This method makes a synchronous HTTP request by default.
        :param query: (required)
        :type query: str
        :param user: (required)
        :type user: User
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_query_params_serialize(
            query=query,
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_body_with_query_params_with_http_info_async(
        self,
        query: StrictStr,
        user: User,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_body_with_query_params
                This method makes a synchronous HTTP request by default.
        :param query: (required)
        :type query: str
        :param user: (required)
        :type user: User
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_query_params_serialize(
            query=query,
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_body_with_query_params_with_http_info(
        self,
        query: StrictStr,
        user: User,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_body_with_query_params
                This method makes a synchronous HTTP request by default.
        :param query: (required)
        :type query: str
        :param user: (required)
        :type user: User
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_body_with_query_params_serialize(
            query=query,
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_body_with_query_params_serialize(
        self,
        query,
        user,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:  # noqa: E501
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if user is not None:
            _body_params = user


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fake/body-with-query-params',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_client_model(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> Client:

        """To test \"client\" model
        To test \"client\" model
                This method makes a synchronous HTTP request by default.
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._test_client_model_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_client_model_without_preload_content(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """To test \"client\" model
        To test \"client\" model
                This method makes a synchronous HTTP request by default.
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._test_client_model_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_client_model_with_async(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """To test \"client\" model
        To test \"client\" model
                This method makes a synchronous HTTP request by default.
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._test_client_model_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_client_model_with_http_info_async(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """To test \"client\" model
        To test \"client\" model
                This method makes a synchronous HTTP request by default.
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._test_client_model_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_client_model_with_http_info(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> Client:

        """To test \"client\" model
        To test \"client\" model
                This method makes a synchronous HTTP request by default.
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._test_client_model_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_client_model_serialize(
        self,
        client,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if client is not None:
            _body_params = client

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/fake',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_date_time_query_parameter(
        self,
        date_time_query: datetime,
        str_query: StrictStr,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_date_time_query_parameter
                This method makes a synchronous HTTP request by default.
        :param date_time_query: (required)
        :type date_time_query: datetime
        :param str_query: (required)
        :type str_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_date_time_query_parameter_serialize(
            date_time_query=date_time_query,
            str_query=str_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_date_time_query_parameter_without_preload_content(
        self,
        date_time_query: datetime,
        str_query: StrictStr,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test_date_time_query_parameter
                This method makes a synchronous HTTP request by default.
        :param date_time_query: (required)
        :type date_time_query: datetime
        :param str_query: (required)
        :type str_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_date_time_query_parameter_serialize(
            date_time_query=date_time_query,
            str_query=str_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_date_time_query_parameter_with_async(
        self,
        date_time_query: datetime,
        str_query: StrictStr,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_date_time_query_parameter
                This method makes a synchronous HTTP request by default.
        :param date_time_query: (required)
        :type date_time_query: datetime
        :param str_query: (required)
        :type str_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_date_time_query_parameter_serialize(
            date_time_query=date_time_query,
            str_query=str_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_date_time_query_parameter_with_http_info_async(
        self,
        date_time_query: datetime,
        str_query: StrictStr,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_date_time_query_parameter
                This method makes a synchronous HTTP request by default.
        :param date_time_query: (required)
        :type date_time_query: datetime
        :param str_query: (required)
        :type str_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_date_time_query_parameter_serialize(
            date_time_query=date_time_query,
            str_query=str_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_date_time_query_parameter_with_http_info(
        self,
        date_time_query: datetime,
        str_query: StrictStr,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_date_time_query_parameter
                This method makes a synchronous HTTP request by default.
        :param date_time_query: (required)
        :type date_time_query: datetime
        :param str_query: (required)
        :type str_query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_date_time_query_parameter_serialize(
            date_time_query=date_time_query,
            str_query=str_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_date_time_query_parameter_serialize(
        self,
        date_time_query,
        str_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if date_time_query is not None:  # noqa: E501
            if isinstance(date_time_query, datetime):
                _query_params.append(('date_time_query', date_time_query.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('date_time_query', date_time_query))
            
        if str_query is not None:  # noqa: E501
            
            _query_params.append(('str_query', str_query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fake/date-time-query-params',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_endpoint_parameters(
        self,
        number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
        double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
        pattern_without_delimiter: Annotated[str, Field(strict=True, description="None")],
        byte: Annotated[Union[StrictBytes, StrictStr], Field(description="None")],
        integer: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="None")] = None,
        int32: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=20)]], Field(description="None")] = None,
        int64: Annotated[Optional[StrictInt], Field(description="None")] = None,
        var_float: Annotated[Optional[Annotated[float, Field(le=987.6, strict=True)]], Field(description="None")] = None,
        string: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="None")] = None,
        binary: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="None")] = None,
        byte_with_max_length: Annotated[Optional[Union[Annotated[bytes, Field(strict=True, max_length=64)], Annotated[str, Field(strict=True, max_length=64)]]], Field(description="None")] = None,
        var_date: Annotated[Optional[date], Field(description="None")] = None,
        date_time: Annotated[Optional[datetime], Field(description="None")] = None,
        password: Annotated[Optional[Annotated[str, Field(min_length=10, strict=True, max_length=64)]], Field(description="None")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                This method makes a synchronous HTTP request by default.
        :param number: None (required)
        :type number: float
        :param double: None (required)
        :type double: float
        :param pattern_without_delimiter: None (required)
        :type pattern_without_delimiter: str
        :param byte: None (required)
        :type byte: bytearray
        :param integer: None
        :type integer: int
        :param int32: None
        :type int32: int
        :param int64: None
        :type int64: int
        :param var_float: None
        :type var_float: float
        :param string: None
        :type string: str
        :param binary: None
        :type binary: bytearray
        :param byte_with_max_length: None
        :type byte_with_max_length: bytearray
        :param var_date: None
        :type var_date: date
        :param date_time: None
        :type date_time: datetime
        :param password: None
        :type password: str
        :param param_callback: None
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_endpoint_parameters_serialize(
            number=number,
            double=double,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            integer=integer,
            int32=int32,
            int64=int64,
            var_float=var_float,
            string=string,
            binary=binary,
            byte_with_max_length=byte_with_max_length,
            var_date=var_date,
            date_time=date_time,
            password=password,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_endpoint_parameters_without_preload_content(
        self,
        number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
        double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
        pattern_without_delimiter: Annotated[str, Field(strict=True, description="None")],
        byte: Annotated[Union[StrictBytes, StrictStr], Field(description="None")],
        integer: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="None")] = None,
        int32: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=20)]], Field(description="None")] = None,
        int64: Annotated[Optional[StrictInt], Field(description="None")] = None,
        var_float: Annotated[Optional[Annotated[float, Field(le=987.6, strict=True)]], Field(description="None")] = None,
        string: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="None")] = None,
        binary: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="None")] = None,
        byte_with_max_length: Annotated[Optional[Union[Annotated[bytes, Field(strict=True, max_length=64)], Annotated[str, Field(strict=True, max_length=64)]]], Field(description="None")] = None,
        var_date: Annotated[Optional[date], Field(description="None")] = None,
        date_time: Annotated[Optional[datetime], Field(description="None")] = None,
        password: Annotated[Optional[Annotated[str, Field(min_length=10, strict=True, max_length=64)]], Field(description="None")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                This method makes a synchronous HTTP request by default.
        :param number: None (required)
        :type number: float
        :param double: None (required)
        :type double: float
        :param pattern_without_delimiter: None (required)
        :type pattern_without_delimiter: str
        :param byte: None (required)
        :type byte: bytearray
        :param integer: None
        :type integer: int
        :param int32: None
        :type int32: int
        :param int64: None
        :type int64: int
        :param var_float: None
        :type var_float: float
        :param string: None
        :type string: str
        :param binary: None
        :type binary: bytearray
        :param byte_with_max_length: None
        :type byte_with_max_length: bytearray
        :param var_date: None
        :type var_date: date
        :param date_time: None
        :type date_time: datetime
        :param password: None
        :type password: str
        :param param_callback: None
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_endpoint_parameters_serialize(
            number=number,
            double=double,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            integer=integer,
            int32=int32,
            int64=int64,
            var_float=var_float,
            string=string,
            binary=binary,
            byte_with_max_length=byte_with_max_length,
            var_date=var_date,
            date_time=date_time,
            password=password,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_endpoint_parameters_with_async(
        self,
        number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
        double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
        pattern_without_delimiter: Annotated[str, Field(strict=True, description="None")],
        byte: Annotated[Union[StrictBytes, StrictStr], Field(description="None")],
        integer: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="None")] = None,
        int32: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=20)]], Field(description="None")] = None,
        int64: Annotated[Optional[StrictInt], Field(description="None")] = None,
        var_float: Annotated[Optional[Annotated[float, Field(le=987.6, strict=True)]], Field(description="None")] = None,
        string: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="None")] = None,
        binary: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="None")] = None,
        byte_with_max_length: Annotated[Optional[Union[Annotated[bytes, Field(strict=True, max_length=64)], Annotated[str, Field(strict=True, max_length=64)]]], Field(description="None")] = None,
        var_date: Annotated[Optional[date], Field(description="None")] = None,
        date_time: Annotated[Optional[datetime], Field(description="None")] = None,
        password: Annotated[Optional[Annotated[str, Field(min_length=10, strict=True, max_length=64)]], Field(description="None")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                This method makes a synchronous HTTP request by default.
        :param number: None (required)
        :type number: float
        :param double: None (required)
        :type double: float
        :param pattern_without_delimiter: None (required)
        :type pattern_without_delimiter: str
        :param byte: None (required)
        :type byte: bytearray
        :param integer: None
        :type integer: int
        :param int32: None
        :type int32: int
        :param int64: None
        :type int64: int
        :param var_float: None
        :type var_float: float
        :param string: None
        :type string: str
        :param binary: None
        :type binary: bytearray
        :param byte_with_max_length: None
        :type byte_with_max_length: bytearray
        :param var_date: None
        :type var_date: date
        :param date_time: None
        :type date_time: datetime
        :param password: None
        :type password: str
        :param param_callback: None
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_endpoint_parameters_serialize(
            number=number,
            double=double,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            integer=integer,
            int32=int32,
            int64=int64,
            var_float=var_float,
            string=string,
            binary=binary,
            byte_with_max_length=byte_with_max_length,
            var_date=var_date,
            date_time=date_time,
            password=password,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_endpoint_parameters_with_http_info_async(
        self,
        number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
        double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
        pattern_without_delimiter: Annotated[str, Field(strict=True, description="None")],
        byte: Annotated[Union[StrictBytes, StrictStr], Field(description="None")],
        integer: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="None")] = None,
        int32: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=20)]], Field(description="None")] = None,
        int64: Annotated[Optional[StrictInt], Field(description="None")] = None,
        var_float: Annotated[Optional[Annotated[float, Field(le=987.6, strict=True)]], Field(description="None")] = None,
        string: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="None")] = None,
        binary: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="None")] = None,
        byte_with_max_length: Annotated[Optional[Union[Annotated[bytes, Field(strict=True, max_length=64)], Annotated[str, Field(strict=True, max_length=64)]]], Field(description="None")] = None,
        var_date: Annotated[Optional[date], Field(description="None")] = None,
        date_time: Annotated[Optional[datetime], Field(description="None")] = None,
        password: Annotated[Optional[Annotated[str, Field(min_length=10, strict=True, max_length=64)]], Field(description="None")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                This method makes a synchronous HTTP request by default.
        :param number: None (required)
        :type number: float
        :param double: None (required)
        :type double: float
        :param pattern_without_delimiter: None (required)
        :type pattern_without_delimiter: str
        :param byte: None (required)
        :type byte: bytearray
        :param integer: None
        :type integer: int
        :param int32: None
        :type int32: int
        :param int64: None
        :type int64: int
        :param var_float: None
        :type var_float: float
        :param string: None
        :type string: str
        :param binary: None
        :type binary: bytearray
        :param byte_with_max_length: None
        :type byte_with_max_length: bytearray
        :param var_date: None
        :type var_date: date
        :param date_time: None
        :type date_time: datetime
        :param password: None
        :type password: str
        :param param_callback: None
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_endpoint_parameters_serialize(
            number=number,
            double=double,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            integer=integer,
            int32=int32,
            int64=int64,
            var_float=var_float,
            string=string,
            binary=binary,
            byte_with_max_length=byte_with_max_length,
            var_date=var_date,
            date_time=date_time,
            password=password,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_endpoint_parameters_with_http_info(
        self,
        number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
        double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
        pattern_without_delimiter: Annotated[str, Field(strict=True, description="None")],
        byte: Annotated[Union[StrictBytes, StrictStr], Field(description="None")],
        integer: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=10)]], Field(description="None")] = None,
        int32: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=20)]], Field(description="None")] = None,
        int64: Annotated[Optional[StrictInt], Field(description="None")] = None,
        var_float: Annotated[Optional[Annotated[float, Field(le=987.6, strict=True)]], Field(description="None")] = None,
        string: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="None")] = None,
        binary: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="None")] = None,
        byte_with_max_length: Annotated[Optional[Union[Annotated[bytes, Field(strict=True, max_length=64)], Annotated[str, Field(strict=True, max_length=64)]]], Field(description="None")] = None,
        var_date: Annotated[Optional[date], Field(description="None")] = None,
        date_time: Annotated[Optional[datetime], Field(description="None")] = None,
        password: Annotated[Optional[Annotated[str, Field(min_length=10, strict=True, max_length=64)]], Field(description="None")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                This method makes a synchronous HTTP request by default.
        :param number: None (required)
        :type number: float
        :param double: None (required)
        :type double: float
        :param pattern_without_delimiter: None (required)
        :type pattern_without_delimiter: str
        :param byte: None (required)
        :type byte: bytearray
        :param integer: None
        :type integer: int
        :param int32: None
        :type int32: int
        :param int64: None
        :type int64: int
        :param var_float: None
        :type var_float: float
        :param string: None
        :type string: str
        :param binary: None
        :type binary: bytearray
        :param byte_with_max_length: None
        :type byte_with_max_length: bytearray
        :param var_date: None
        :type var_date: date
        :param date_time: None
        :type date_time: datetime
        :param password: None
        :type password: str
        :param param_callback: None
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_endpoint_parameters_serialize(
            number=number,
            double=double,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            integer=integer,
            int32=int32,
            int64=int64,
            var_float=var_float,
            string=string,
            binary=binary,
            byte_with_max_length=byte_with_max_length,
            var_date=var_date,
            date_time=date_time,
            password=password,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_endpoint_parameters_serialize(
        self,
        number,
        double,
        pattern_without_delimiter,
        byte,
        integer,
        int32,
        int64,
        var_float,
        string,
        binary,
        byte_with_max_length,
        var_date,
        date_time,
        password,
        param_callback,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if integer is not None:
            _form_params.append(('integer', integer))
        if int32 is not None:
            _form_params.append(('int32', int32))
        if int64 is not None:
            _form_params.append(('int64', int64))
        if number is not None:
            _form_params.append(('number', number))
        if var_float is not None:
            _form_params.append(('float', var_float))
        if double is not None:
            _form_params.append(('double', double))
        if string is not None:
            _form_params.append(('string', string))
        if pattern_without_delimiter is not None:
            _form_params.append(('pattern_without_delimiter', pattern_without_delimiter))
        if byte is not None:
            _form_params.append(('byte', byte))
        if binary is not None:
            _files['binary'] = binary
        if byte_with_max_length is not None:
            _form_params.append(('byte_with_max_length', byte_with_max_length))
        if var_date is not None:
            _form_params.append(('date', var_date))
        if date_time is not None:
            _form_params.append(('dateTime', date_time))
        if password is not None:
            _form_params.append(('password', password))
        if param_callback is not None:
            _form_params.append(('callback', param_callback))
        # process the body parameter


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/x-www-form-urlencoded'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = ['http_basic_test']  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_group_parameters(
        self,
        required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
        required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
        required_int64_group: Annotated[StrictInt, Field(description="Required Integer in group parameters")],
        string_group: Annotated[Optional[StrictInt], Field(description="String in group parameters")] = None,
        boolean_group: Annotated[Optional[StrictBool], Field(description="Boolean in group parameters")] = None,
        int64_group: Annotated[Optional[StrictInt], Field(description="Integer in group parameters")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """Fake endpoint to test group parameters (optional)
        Fake endpoint to test group parameters (optional)
                This method makes a synchronous HTTP request by default.
        :param required_string_group: Required String in group parameters (required)
        :type required_string_group: int
        :param required_boolean_group: Required Boolean in group parameters (required)
        :type required_boolean_group: bool
        :param required_int64_group: Required Integer in group parameters (required)
        :type required_int64_group: int
        :param string_group: String in group parameters
        :type string_group: int
        :param boolean_group: Boolean in group parameters
        :type boolean_group: bool
        :param int64_group: Integer in group parameters
        :type int64_group: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_group_parameters_serialize(
            required_string_group=required_string_group,
            required_boolean_group=required_boolean_group,
            required_int64_group=required_int64_group,
            string_group=string_group,
            boolean_group=boolean_group,
            int64_group=int64_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_group_parameters_without_preload_content(
        self,
        required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
        required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
        required_int64_group: Annotated[StrictInt, Field(description="Required Integer in group parameters")],
        string_group: Annotated[Optional[StrictInt], Field(description="String in group parameters")] = None,
        boolean_group: Annotated[Optional[StrictBool], Field(description="Boolean in group parameters")] = None,
        int64_group: Annotated[Optional[StrictInt], Field(description="Integer in group parameters")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """Fake endpoint to test group parameters (optional)
        Fake endpoint to test group parameters (optional)
                This method makes a synchronous HTTP request by default.
        :param required_string_group: Required String in group parameters (required)
        :type required_string_group: int
        :param required_boolean_group: Required Boolean in group parameters (required)
        :type required_boolean_group: bool
        :param required_int64_group: Required Integer in group parameters (required)
        :type required_int64_group: int
        :param string_group: String in group parameters
        :type string_group: int
        :param boolean_group: Boolean in group parameters
        :type boolean_group: bool
        :param int64_group: Integer in group parameters
        :type int64_group: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_group_parameters_serialize(
            required_string_group=required_string_group,
            required_boolean_group=required_boolean_group,
            required_int64_group=required_int64_group,
            string_group=string_group,
            boolean_group=boolean_group,
            int64_group=int64_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_group_parameters_with_async(
        self,
        required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
        required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
        required_int64_group: Annotated[StrictInt, Field(description="Required Integer in group parameters")],
        string_group: Annotated[Optional[StrictInt], Field(description="String in group parameters")] = None,
        boolean_group: Annotated[Optional[StrictBool], Field(description="Boolean in group parameters")] = None,
        int64_group: Annotated[Optional[StrictInt], Field(description="Integer in group parameters")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """Fake endpoint to test group parameters (optional)
        Fake endpoint to test group parameters (optional)
                This method makes a synchronous HTTP request by default.
        :param required_string_group: Required String in group parameters (required)
        :type required_string_group: int
        :param required_boolean_group: Required Boolean in group parameters (required)
        :type required_boolean_group: bool
        :param required_int64_group: Required Integer in group parameters (required)
        :type required_int64_group: int
        :param string_group: String in group parameters
        :type string_group: int
        :param boolean_group: Boolean in group parameters
        :type boolean_group: bool
        :param int64_group: Integer in group parameters
        :type int64_group: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_group_parameters_serialize(
            required_string_group=required_string_group,
            required_boolean_group=required_boolean_group,
            required_int64_group=required_int64_group,
            string_group=string_group,
            boolean_group=boolean_group,
            int64_group=int64_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_group_parameters_with_http_info_async(
        self,
        required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
        required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
        required_int64_group: Annotated[StrictInt, Field(description="Required Integer in group parameters")],
        string_group: Annotated[Optional[StrictInt], Field(description="String in group parameters")] = None,
        boolean_group: Annotated[Optional[StrictBool], Field(description="Boolean in group parameters")] = None,
        int64_group: Annotated[Optional[StrictInt], Field(description="Integer in group parameters")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """Fake endpoint to test group parameters (optional)
        Fake endpoint to test group parameters (optional)
                This method makes a synchronous HTTP request by default.
        :param required_string_group: Required String in group parameters (required)
        :type required_string_group: int
        :param required_boolean_group: Required Boolean in group parameters (required)
        :type required_boolean_group: bool
        :param required_int64_group: Required Integer in group parameters (required)
        :type required_int64_group: int
        :param string_group: String in group parameters
        :type string_group: int
        :param boolean_group: Boolean in group parameters
        :type boolean_group: bool
        :param int64_group: Integer in group parameters
        :type int64_group: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_group_parameters_serialize(
            required_string_group=required_string_group,
            required_boolean_group=required_boolean_group,
            required_int64_group=required_int64_group,
            string_group=string_group,
            boolean_group=boolean_group,
            int64_group=int64_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_group_parameters_with_http_info(
        self,
        required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
        required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
        required_int64_group: Annotated[StrictInt, Field(description="Required Integer in group parameters")],
        string_group: Annotated[Optional[StrictInt], Field(description="String in group parameters")] = None,
        boolean_group: Annotated[Optional[StrictBool], Field(description="Boolean in group parameters")] = None,
        int64_group: Annotated[Optional[StrictInt], Field(description="Integer in group parameters")] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """Fake endpoint to test group parameters (optional)
        Fake endpoint to test group parameters (optional)
                This method makes a synchronous HTTP request by default.
        :param required_string_group: Required String in group parameters (required)
        :type required_string_group: int
        :param required_boolean_group: Required Boolean in group parameters (required)
        :type required_boolean_group: bool
        :param required_int64_group: Required Integer in group parameters (required)
        :type required_int64_group: int
        :param string_group: String in group parameters
        :type string_group: int
        :param boolean_group: Boolean in group parameters
        :type boolean_group: bool
        :param int64_group: Integer in group parameters
        :type int64_group: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_group_parameters_serialize(
            required_string_group=required_string_group,
            required_boolean_group=required_boolean_group,
            required_int64_group=required_int64_group,
            string_group=string_group,
            boolean_group=boolean_group,
            int64_group=int64_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_group_parameters_serialize(
        self,
        required_string_group,
        required_boolean_group,
        required_int64_group,
        string_group,
        boolean_group,
        int64_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if required_string_group is not None:  # noqa: E501
            
            _query_params.append(('required_string_group', required_string_group))
            
        if required_int64_group is not None:  # noqa: E501
            
            _query_params.append(('required_int64_group', required_int64_group))
            
        if string_group is not None:  # noqa: E501
            
            _query_params.append(('string_group', string_group))
            
        if int64_group is not None:  # noqa: E501
            
            _query_params.append(('int64_group', int64_group))
            
        # process the header parameters
        if required_boolean_group is not None:
            _header_params['required_boolean_group'] = required_boolean_group
        if boolean_group is not None:
            _header_params['boolean_group'] = boolean_group
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = ['bearer_test']  # noqa: E501

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/fake',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_inline_additional_properties(
        self,
        request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test inline additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param request_body: request body (required)
        :type request_body: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_additional_properties_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_inline_additional_properties_without_preload_content(
        self,
        request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test inline additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param request_body: request body (required)
        :type request_body: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_additional_properties_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_inline_additional_properties_with_async(
        self,
        request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test inline additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param request_body: request body (required)
        :type request_body: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_additional_properties_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_inline_additional_properties_with_http_info_async(
        self,
        request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test inline additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param request_body: request body (required)
        :type request_body: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_additional_properties_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_inline_additional_properties_with_http_info(
        self,
        request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test inline additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param request_body: request body (required)
        :type request_body: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_additional_properties_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_inline_additional_properties_serialize(
        self,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/inline-additionalProperties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_inline_freeform_additional_properties(
        self,
        test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test inline free-form additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param test_inline_freeform_additional_properties_request: request body (required)
        :type test_inline_freeform_additional_properties_request: TestInlineFreeformAdditionalPropertiesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_freeform_additional_properties_serialize(
            test_inline_freeform_additional_properties_request=test_inline_freeform_additional_properties_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_inline_freeform_additional_properties_without_preload_content(
        self,
        test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test inline free-form additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param test_inline_freeform_additional_properties_request: request body (required)
        :type test_inline_freeform_additional_properties_request: TestInlineFreeformAdditionalPropertiesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_freeform_additional_properties_serialize(
            test_inline_freeform_additional_properties_request=test_inline_freeform_additional_properties_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_inline_freeform_additional_properties_with_async(
        self,
        test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test inline free-form additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param test_inline_freeform_additional_properties_request: request body (required)
        :type test_inline_freeform_additional_properties_request: TestInlineFreeformAdditionalPropertiesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_freeform_additional_properties_serialize(
            test_inline_freeform_additional_properties_request=test_inline_freeform_additional_properties_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_inline_freeform_additional_properties_with_http_info_async(
        self,
        test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test inline free-form additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param test_inline_freeform_additional_properties_request: request body (required)
        :type test_inline_freeform_additional_properties_request: TestInlineFreeformAdditionalPropertiesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_freeform_additional_properties_serialize(
            test_inline_freeform_additional_properties_request=test_inline_freeform_additional_properties_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_inline_freeform_additional_properties_with_http_info(
        self,
        test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test inline free-form additionalProperties
        
                This method makes a synchronous HTTP request by default.
        :param test_inline_freeform_additional_properties_request: request body (required)
        :type test_inline_freeform_additional_properties_request: TestInlineFreeformAdditionalPropertiesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_inline_freeform_additional_properties_serialize(
            test_inline_freeform_additional_properties_request=test_inline_freeform_additional_properties_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_inline_freeform_additional_properties_serialize(
        self,
        test_inline_freeform_additional_properties_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if test_inline_freeform_additional_properties_request is not None:
            _body_params = test_inline_freeform_additional_properties_request


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fake/inline-freeform-additionalProperties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_json_form_data(
        self,
        param: Annotated[StrictStr, Field(description="field1")],
        param2: Annotated[StrictStr, Field(description="field2")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test json serialization of form data
        
                This method makes a synchronous HTTP request by default.
        :param param: field1 (required)
        :type param: str
        :param param2: field2 (required)
        :type param2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_json_form_data_serialize(
            param=param,
            param2=param2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_json_form_data_without_preload_content(
        self,
        param: Annotated[StrictStr, Field(description="field1")],
        param2: Annotated[StrictStr, Field(description="field2")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test json serialization of form data
        
                This method makes a synchronous HTTP request by default.
        :param param: field1 (required)
        :type param: str
        :param param2: field2 (required)
        :type param2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_json_form_data_serialize(
            param=param,
            param2=param2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_json_form_data_with_async(
        self,
        param: Annotated[StrictStr, Field(description="field1")],
        param2: Annotated[StrictStr, Field(description="field2")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test json serialization of form data
        
                This method makes a synchronous HTTP request by default.
        :param param: field1 (required)
        :type param: str
        :param param2: field2 (required)
        :type param2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_json_form_data_serialize(
            param=param,
            param2=param2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_json_form_data_with_http_info_async(
        self,
        param: Annotated[StrictStr, Field(description="field1")],
        param2: Annotated[StrictStr, Field(description="field2")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test json serialization of form data
        
                This method makes a synchronous HTTP request by default.
        :param param: field1 (required)
        :type param: str
        :param param2: field2 (required)
        :type param2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_json_form_data_serialize(
            param=param,
            param2=param2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_json_form_data_with_http_info(
        self,
        param: Annotated[StrictStr, Field(description="field1")],
        param2: Annotated[StrictStr, Field(description="field2")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test json serialization of form data
        
                This method makes a synchronous HTTP request by default.
        :param param: field1 (required)
        :type param: str
        :param param2: field2 (required)
        :type param2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_json_form_data_serialize(
            param=param,
            param2=param2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_json_form_data_serialize(
        self,
        param,
        param2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if param is not None:
            _form_params.append(('param', param))
        if param2 is not None:
            _form_params.append(('param2', param2))
        # process the body parameter


        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/x-www-form-urlencoded'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fake/jsonFormData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



    @validate_call
    def test_query_parameter_collection_format(
        self,
        pipe: List[StrictStr],
        ioutil: List[StrictStr],
        http: List[StrictStr],
        url: List[StrictStr],
        context: List[StrictStr],
        allow_empty: StrictStr,
        language: Optional[Dict[str, StrictStr]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_query_parameter_collection_format
        To test the collection format in query parameters
                This method makes a synchronous HTTP request by default.
        :param pipe: (required)
        :type pipe: List[str]
        :param ioutil: (required)
        :type ioutil: List[str]
        :param http: (required)
        :type http: List[str]
        :param url: (required)
        :type url: List[str]
        :param context: (required)
        :type context: List[str]
        :param allow_empty: (required)
        :type allow_empty: str
        :param language:
        :type language: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_query_parameter_collection_format_serialize(
            pipe=pipe,
            ioutil=ioutil,
            http=http,
            url=url,
            context=context,
            allow_empty=allow_empty,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_query_parameter_collection_format_without_preload_content(
        self,
        pipe: List[StrictStr],
        ioutil: List[StrictStr],
        http: List[StrictStr],
        url: List[StrictStr],
        context: List[StrictStr],
        allow_empty: StrictStr,
        language: Optional[Dict[str, StrictStr]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """test_query_parameter_collection_format
        To test the collection format in query parameters
                This method makes a synchronous HTTP request by default.
        :param pipe: (required)
        :type pipe: List[str]
        :param ioutil: (required)
        :type ioutil: List[str]
        :param http: (required)
        :type http: List[str]
        :param url: (required)
        :type url: List[str]
        :param context: (required)
        :type context: List[str]
        :param allow_empty: (required)
        :type allow_empty: str
        :param language:
        :type language: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_query_parameter_collection_format_serialize(
            pipe=pipe,
            ioutil=ioutil,
            http=http,
            url=url,
            context=context,
            allow_empty=allow_empty,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response

    @validate_call
    def test_query_parameter_collection_format_with_async(
        self,
        pipe: List[StrictStr],
        ioutil: List[StrictStr],
        http: List[StrictStr],
        url: List[StrictStr],
        context: List[StrictStr],
        allow_empty: StrictStr,
        language: Optional[Dict[str, StrictStr]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_query_parameter_collection_format
        To test the collection format in query parameters
                This method makes a synchronous HTTP request by default.
        :param pipe: (required)
        :type pipe: List[str]
        :param ioutil: (required)
        :type ioutil: List[str]
        :param http: (required)
        :type http: List[str]
        :param url: (required)
        :type url: List[str]
        :param context: (required)
        :type context: List[str]
        :param allow_empty: (required)
        :type allow_empty: str
        :param language:
        :type language: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_query_parameter_collection_format_serialize(
            pipe=pipe,
            ioutil=ioutil,
            http=http,
            url=url,
            context=context,
            allow_empty=allow_empty,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))

    @validate_call
    def test_query_parameter_collection_format_with_http_info_async(
        self,
        pipe: List[StrictStr],
        ioutil: List[StrictStr],
        http: List[StrictStr],
        url: List[StrictStr],
        context: List[StrictStr],
        allow_empty: StrictStr,
        language: Optional[Dict[str, StrictStr]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApplyResult:

        """test_query_parameter_collection_format
        To test the collection format in query parameters
                This method makes a synchronous HTTP request by default.
        :param pipe: (required)
        :type pipe: List[str]
        :param ioutil: (required)
        :type ioutil: List[str]
        :param http: (required)
        :type http: List[str]
        :param url: (required)
        :type url: List[str]
        :param context: (required)
        :type context: List[str]
        :param allow_empty: (required)
        :type allow_empty: str
        :param language:
        :type language: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_query_parameter_collection_format_serialize(
            pipe=pipe,
            ioutil=ioutil,
            http=http,
            url=url,
            context=context,
            allow_empty=allow_empty,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        def callback(*args):
            response_data = self.api_client.call_api(*args)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )

        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))


    @validate_call
    def test_query_parameter_collection_format_with_http_info(
        self,
        pipe: List[StrictStr],
        ioutil: List[StrictStr],
        http: List[StrictStr],
        url: List[StrictStr],
        context: List[StrictStr],
        allow_empty: StrictStr,
        language: Optional[Dict[str, StrictStr]] = None,
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> None:

        """test_query_parameter_collection_format
        To test the collection format in query parameters
                This method makes a synchronous HTTP request by default.
        :param pipe: (required)
        :type pipe: List[str]
        :param ioutil: (required)
        :type ioutil: List[str]
        :param http: (required)
        :type http: List[str]
        :param url: (required)
        :type url: List[str]
        :param context: (required)
        :type context: List[str]
        :param allow_empty: (required)
        :type allow_empty: str
        :param language:
        :type language: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[None]
        """

        param = self._test_query_parameter_collection_format_serialize(
            pipe=pipe,
            ioutil=ioutil,
            http=http,
            url=url,
            context=context,
            allow_empty=allow_empty,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }

        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _test_query_parameter_collection_format_serialize(
        self,
        pipe,
        ioutil,
        http,
        url,
        context,
        allow_empty,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
            'pipe': 'pipes',
            'ioutil': 'csv',
            'http': 'ssv',
            'url': 'csv',
            'context': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if pipe is not None:  # noqa: E501
            
            _query_params.append(('pipe', pipe))
            
        if ioutil is not None:  # noqa: E501
            
            _query_params.append(('ioutil', ioutil))
            
        if http is not None:  # noqa: E501
            
            _query_params.append(('http', http))
            
        if url is not None:  # noqa: E501
            
            _query_params.append(('url', url))
            
        if context is not None:  # noqa: E501
            
            _query_params.append(('context', context))
            
        if language is not None:  # noqa: E501
            
            _query_params.append(('language', language))
            
        if allow_empty is not None:  # noqa: E501
            
            _query_params.append(('allowEmpty', allow_empty))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fake/test-query-parameters',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


