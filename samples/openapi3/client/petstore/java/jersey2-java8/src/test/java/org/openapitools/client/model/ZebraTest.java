/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.core.type.TypeReference;
import org.junit.Assert;
import org.junit.Test;
import org.openapitools.client.JSON;

import java.util.HashMap;
import java.util.Map;

/**
 * Model tests for Zebra
 */
public class ZebraTest {
    private final Zebra model = new Zebra();

    /**
     * Model tests for Zebra
     */
    @Test
    public void testZebra() {
        Zebra z = new Zebra();
        z.setClassName("zebra");
        Map<String, String> m = new HashMap<>();
        z.putAdditionalProperty("key1", "value1");
        z.putAdditionalProperty("key2", 12321);
        z.setType(Zebra.TypeEnum.MOUNTAIN);

        JSON j = new JSON();
        try {
            // serialize
            Assert.assertEquals(j.getMapper().writeValueAsString(z), "{\"type\":\"mountain\",\"className\":\"zebra\",\"key1\":\"value1\",\"key2\":12321}");

            // deserialize
            String zebraJson = "{\"type\":\"mountain\",\"className\":\"zebra\",\"key1\":\"value1\",\"key2\":12321}";
            Zebra zebraFromJson = j.getMapper().readValue(zebraJson, Zebra.class);
            Assert.assertEquals(zebraFromJson.getType(), Zebra.TypeEnum.MOUNTAIN);
            Assert.assertEquals(zebraFromJson.getClassName(), "zebra");
            Assert.assertEquals(zebraFromJson.getAdditionalProperties().size(), 2);
            Assert.assertEquals(zebraFromJson.getAdditionalProperty("key1"), "value1");
            Assert.assertEquals(zebraFromJson.getAdditionalProperty("key2"), 12321);
        } catch (Exception ex) {
            Assert.assertEquals(true, false); // exception shouldn't be thrown
        }
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        String zebraJson = "{\"type\":\"mountain\",\"className\":\"zebra\",\"key1\":\"value1\",\"key2\":12321}";

        JSON j = new JSON();
        TypeFactory typeFactory = j.getMapper().getTypeFactory();
        MapType mapType = typeFactory.constructMapType(HashMap.class, String.class, Object.class);
        try {
            HashMap<String, Object> map = j.getMapper().readValue(zebraJson, mapType);
            Assert.assertEquals(map.get("type"), "mountain");

            Map<String,Object> result =
                    j.getMapper().readValue(zebraJson, new TypeReference<Map<String,Object>>() {});

            Assert.assertEquals(result.get("type"), "mountain");
        } catch (Exception ex) {
            Assert.assertEquals(true, false); // exception shouldn't be thrown
        }

    }

    /**
     * Test the property 'className'
     */
    @Test
    public void classNameTest() {

    }

}
