# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from petstore_api.configuration import Configuration


class InlineObject4(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'param': 'str',
        'param2': 'str'
    }

    attribute_map = {
        'param': 'param',
        'param2': 'param2'
    }

    def __init__(self, param=None, param2=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject4 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._param = None
        self._param2 = None
        self.discriminator = None

        self.param = param
        self.param2 = param2

    @property
    def param(self):
        """Gets the param of this InlineObject4.  # noqa: E501

        field1  # noqa: E501

        :return: The param of this InlineObject4.  # noqa: E501
        :rtype: str
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this InlineObject4.

        field1  # noqa: E501

        :param param: The param of this InlineObject4.  # noqa: E501
        :type param: str
        """
        if self.local_vars_configuration.client_side_validation and param is None:  # noqa: E501
            raise ValueError("Invalid value for `param`, must not be `None`")  # noqa: E501

        self._param = param

    @property
    def param2(self):
        """Gets the param2 of this InlineObject4.  # noqa: E501

        field2  # noqa: E501

        :return: The param2 of this InlineObject4.  # noqa: E501
        :rtype: str
        """
        return self._param2

    @param2.setter
    def param2(self, param2):
        """Sets the param2 of this InlineObject4.

        field2  # noqa: E501

        :param param2: The param2 of this InlineObject4.  # noqa: E501
        :type param2: str
        """
        if self.local_vars_configuration.client_side_validation and param2 is None:  # noqa: E501
            raise ValueError("Invalid value for `param2`, must not be `None`")  # noqa: E501

        self._param2 = param2

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject4):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject4):
            return True

        return self.to_dict() != other.to_dict()
