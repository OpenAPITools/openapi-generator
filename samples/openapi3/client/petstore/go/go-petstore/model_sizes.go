/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
)

// Sizes struct for Sizes
type Sizes struct {
	Data [][]*float64 `json:"data"`
	DataWithExamples [][]*float64 `json:"data_with_examples"`
	AdditionalProperties map[string]interface{}
}

type _Sizes Sizes

// NewSizes instantiates a new Sizes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSizes(data [][]*float64, dataWithExamples [][]*float64) *Sizes {
	this := Sizes{}
	this.Data = data
	this.DataWithExamples = dataWithExamples
	return &this
}

// NewSizesWithDefaults instantiates a new Sizes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSizesWithDefaults() *Sizes {
	this := Sizes{}
	return &this
}

// GetData returns the Data field value
func (o *Sizes) GetData() [][]*float64 {
	if o == nil {
		var ret [][]*float64
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Sizes) GetDataOk() (*[][]*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *Sizes) SetData(v [][]*float64) {
	o.Data = v
}

// GetDataWithExamples returns the DataWithExamples field value
func (o *Sizes) GetDataWithExamples() [][]*float64 {
	if o == nil {
		var ret [][]*float64
		return ret
	}

	return o.DataWithExamples
}

// GetDataWithExamplesOk returns a tuple with the DataWithExamples field value
// and a boolean to check if the value has been set.
func (o *Sizes) GetDataWithExamplesOk() (*[][]*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataWithExamples, true
}

// SetDataWithExamples sets field value
func (o *Sizes) SetDataWithExamples(v [][]*float64) {
	o.DataWithExamples = v
}

func (o Sizes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["data_with_examples"] = o.DataWithExamples
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Sizes) UnmarshalJSON(bytes []byte) (err error) {
	varSizes := _Sizes{}

	if err = json.Unmarshal(bytes, &varSizes); err == nil {
		*o = Sizes(varSizes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "data_with_examples")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSizes struct {
	value *Sizes
	isSet bool
}

func (v NullableSizes) Get() *Sizes {
	return v.value
}

func (v *NullableSizes) Set(val *Sizes) {
	v.value = val
	v.isSet = true
}

func (v NullableSizes) IsSet() bool {
	return v.isSet
}

func (v *NullableSizes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSizes(val *Sizes) *NullableSizes {
	return &NullableSizes{value: val, isSet: true}
}

func (v NullableSizes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSizes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


