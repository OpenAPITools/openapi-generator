/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
)

// checks if the FilterTypeRegex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterTypeRegex{}

// FilterTypeRegex struct for FilterTypeRegex
type FilterTypeRegex struct {
	Regex *string `json:"regex,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilterTypeRegex FilterTypeRegex

// NewFilterTypeRegex instantiates a new FilterTypeRegex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterTypeRegex() *FilterTypeRegex {
	this := FilterTypeRegex{}
	return &this
}

// NewFilterTypeRegexWithDefaults instantiates a new FilterTypeRegex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterTypeRegexWithDefaults() *FilterTypeRegex {
	this := FilterTypeRegex{}
	return &this
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *FilterTypeRegex) GetRegex() string {
	if o == nil || IsNil(o.Regex) {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterTypeRegex) GetRegexOk() (*string, bool) {
	if o == nil || IsNil(o.Regex) {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *FilterTypeRegex) HasRegex() bool {
	if o != nil && !IsNil(o.Regex) {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *FilterTypeRegex) SetRegex(v string) {
	o.Regex = &v
}

func (o FilterTypeRegex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterTypeRegex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Regex) {
		toSerialize["regex"] = o.Regex
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilterTypeRegex) UnmarshalJSON(data []byte) (err error) {
	varFilterTypeRegex := _FilterTypeRegex{}

	err = json.Unmarshal(data, &varFilterTypeRegex)

	if err != nil {
		return err
	}

	*o = FilterTypeRegex(varFilterTypeRegex)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "regex")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilterTypeRegex struct {
	value *FilterTypeRegex
	isSet bool
}

func (v NullableFilterTypeRegex) Get() *FilterTypeRegex {
	return v.value
}

func (v *NullableFilterTypeRegex) Set(val *FilterTypeRegex) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterTypeRegex) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterTypeRegex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterTypeRegex(val *FilterTypeRegex) *NullableFilterTypeRegex {
	return &NullableFilterTypeRegex{value: val, isSet: true}
}

func (v NullableFilterTypeRegex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterTypeRegex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


