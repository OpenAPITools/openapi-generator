/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OneOfPrimitiveType - struct for OneOfPrimitiveType
type OneOfPrimitiveType struct {
	OneOfPrimitiveTypeChildValue *OneOfPrimitiveTypeChild
	ArrayOfStringValue *[]string
	Int32Value *int32
}

// OneOfPrimitiveTypeChildAsOneOfPrimitiveType is a convenience function that returns OneOfPrimitiveTypeChild wrapped in OneOfPrimitiveType
func OneOfPrimitiveTypeChildValueAsOneOfPrimitiveType(v *OneOfPrimitiveTypeChild) OneOfPrimitiveType {
	return OneOfPrimitiveType{
		OneOfPrimitiveTypeChildValue: v,
	}
}

// []stringAsOneOfPrimitiveType is a convenience function that returns []string wrapped in OneOfPrimitiveType
func ArrayOfStringValueAsOneOfPrimitiveType(v *[]string) OneOfPrimitiveType {
	return OneOfPrimitiveType{
		ArrayOfStringValue: v,
	}
}

// int32AsOneOfPrimitiveType is a convenience function that returns int32 wrapped in OneOfPrimitiveType
func Int32ValueAsOneOfPrimitiveType(v *int32) OneOfPrimitiveType {
	return OneOfPrimitiveType{
		Int32Value: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OneOfPrimitiveType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OneOfPrimitiveTypeChildValue
	err = newStrictDecoder(data).Decode(&dst.OneOfPrimitiveTypeChildValue)
	if err == nil {
		jsonOneOfPrimitiveTypeChildValue, _ := json.Marshal(dst.OneOfPrimitiveTypeChildValue)
		if string(jsonOneOfPrimitiveTypeChildValue) == "{}" { // empty struct
			dst.OneOfPrimitiveTypeChildValue = nil
		} else {
			if err = validator.Validate(dst.OneOfPrimitiveTypeChildValue); err != nil {
				dst.OneOfPrimitiveTypeChildValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.OneOfPrimitiveTypeChildValue = nil
	}

	// try to unmarshal data into ArrayOfStringValue
	err = newStrictDecoder(data).Decode(&dst.ArrayOfStringValue)
	if err == nil {
		jsonArrayOfStringValue, _ := json.Marshal(dst.ArrayOfStringValue)
		if string(jsonArrayOfStringValue) == "{}" { // empty struct
			dst.ArrayOfStringValue = nil
		} else {
			if err = validator.Validate(dst.ArrayOfStringValue); err != nil {
				dst.ArrayOfStringValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfStringValue = nil
	}

	// try to unmarshal data into Int32Value
	err = newStrictDecoder(data).Decode(&dst.Int32Value)
	if err == nil {
		jsonInt32Value, _ := json.Marshal(dst.Int32Value)
		if string(jsonInt32Value) == "{}" { // empty struct
			dst.Int32Value = nil
		} else {
			if err = validator.Validate(dst.Int32Value); err != nil {
				dst.Int32Value = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32Value = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OneOfPrimitiveTypeChildValue = nil
		dst.ArrayOfStringValue = nil
		dst.Int32Value = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OneOfPrimitiveType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OneOfPrimitiveType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OneOfPrimitiveType) MarshalJSON() ([]byte, error) {
	if src.OneOfPrimitiveTypeChildValue != nil {
		return json.Marshal(&src.OneOfPrimitiveTypeChildValue)
	}

	if src.ArrayOfStringValue != nil {
		return json.Marshal(&src.ArrayOfStringValue)
	}

	if src.Int32Value != nil {
		return json.Marshal(&src.Int32Value)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OneOfPrimitiveType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OneOfPrimitiveTypeChildValue != nil {
		return obj.OneOfPrimitiveTypeChildValue
	}

	if obj.ArrayOfStringValue != nil {
		return obj.ArrayOfStringValue
	}

	if obj.Int32Value != nil {
		return obj.Int32Value
	}

	// all schemas are nil
	return nil
}

type NullableOneOfPrimitiveType struct {
	value *OneOfPrimitiveType
	isSet bool
}

func (v NullableOneOfPrimitiveType) Get() *OneOfPrimitiveType {
	return v.value
}

func (v *NullableOneOfPrimitiveType) Set(val *OneOfPrimitiveType) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfPrimitiveType) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfPrimitiveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfPrimitiveType(val *OneOfPrimitiveType) *NullableOneOfPrimitiveType {
	return &NullableOneOfPrimitiveType{value: val, isSet: true}
}

func (v NullableOneOfPrimitiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfPrimitiveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


