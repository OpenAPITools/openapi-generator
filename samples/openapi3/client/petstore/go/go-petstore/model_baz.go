/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// Baz the model 'Baz'
type Baz string

// List of Baz
const (
	BAZ_VALUE1 Baz = "value1"
)

// All allowed values of Baz enum
var AllowedBazEnumValues = []Baz{
	"value1",
}

func (v *Baz) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Baz(value)
	for _, existing := range AllowedBazEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Baz", value)
}

// NewBazFromValue returns a pointer to a valid Baz
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBazFromValue(v string) (*Baz, error) {
	ev := Baz(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Baz: valid values are %v", v, AllowedBazEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Baz) IsValid() bool {
	for _, existing := range AllowedBazEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Baz value
func (v Baz) Ptr() *Baz {
	return &v
}

type NullableBaz struct {
	value *Baz
	isSet bool
}

func (v NullableBaz) Get() *Baz {
	return v.value
}

func (v *NullableBaz) Set(val *Baz) {
	v.value = val
	v.isSet = true
}

func (v NullableBaz) IsSet() bool {
	return v.isSet
}

func (v *NullableBaz) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaz(val *Baz) *NullableBaz {
	return &NullableBaz{value: val, isSet: true}
}

func (v NullableBaz) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaz) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

