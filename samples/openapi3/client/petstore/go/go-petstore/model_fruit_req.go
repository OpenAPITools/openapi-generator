/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FruitReq - struct for FruitReq
type FruitReq struct {
	AppleReqValue *AppleReq
	BananaReqValue *BananaReq
}

// AppleReqAsFruitReq is a convenience function that returns AppleReq wrapped in FruitReq
func AppleReqValueAsFruitReq(v *AppleReq) FruitReq {
	return FruitReq{
		AppleReqValue: v,
	}
}

// BananaReqAsFruitReq is a convenience function that returns BananaReq wrapped in FruitReq
func BananaReqValueAsFruitReq(v *BananaReq) FruitReq {
	return FruitReq{
		BananaReqValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FruitReq) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppleReqValue
	err = newStrictDecoder(data).Decode(&dst.AppleReqValue)
	if err == nil {
		jsonAppleReqValue, _ := json.Marshal(dst.AppleReqValue)
		if string(jsonAppleReqValue) == "{}" { // empty struct
			dst.AppleReqValue = nil
		} else {
			if err = validator.Validate(dst.AppleReqValue); err != nil {
				dst.AppleReqValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppleReqValue = nil
	}

	// try to unmarshal data into BananaReqValue
	err = newStrictDecoder(data).Decode(&dst.BananaReqValue)
	if err == nil {
		jsonBananaReqValue, _ := json.Marshal(dst.BananaReqValue)
		if string(jsonBananaReqValue) == "{}" { // empty struct
			dst.BananaReqValue = nil
		} else {
			if err = validator.Validate(dst.BananaReqValue); err != nil {
				dst.BananaReqValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.BananaReqValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppleReqValue = nil
		dst.BananaReqValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FruitReq)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FruitReq)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FruitReq) MarshalJSON() ([]byte, error) {
	if src.AppleReqValue != nil {
		return json.Marshal(&src.AppleReqValue)
	}

	if src.BananaReqValue != nil {
		return json.Marshal(&src.BananaReqValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FruitReq) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppleReqValue != nil {
		return obj.AppleReqValue
	}

	if obj.BananaReqValue != nil {
		return obj.BananaReqValue
	}

	// all schemas are nil
	return nil
}

type NullableFruitReq struct {
	value *FruitReq
	isSet bool
}

func (v NullableFruitReq) Get() *FruitReq {
	return v.value
}

func (v *NullableFruitReq) Set(val *FruitReq) {
	v.value = val
	v.isSet = true
}

func (v NullableFruitReq) IsSet() bool {
	return v.isSet
}

func (v *NullableFruitReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFruitReq(val *FruitReq) *NullableFruitReq {
	return &NullableFruitReq{value: val, isSet: true}
}

func (v NullableFruitReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFruitReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


