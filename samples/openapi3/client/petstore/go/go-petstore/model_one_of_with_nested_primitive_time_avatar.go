/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// OneOfWithNestedPrimitiveTimeAvatar - The user's avatar.
type OneOfWithNestedPrimitiveTimeAvatar struct {
	PrimitiveAndPrimitiveTime *PrimitiveAndPrimitiveTime
	String *string
}

// PrimitiveAndPrimitiveTimeAsOneOfWithNestedPrimitiveTimeAvatar is a convenience function that returns PrimitiveAndPrimitiveTime wrapped in OneOfWithNestedPrimitiveTimeAvatar
func PrimitiveAndPrimitiveTimeAsOneOfWithNestedPrimitiveTimeAvatar(v *PrimitiveAndPrimitiveTime) OneOfWithNestedPrimitiveTimeAvatar {
	return OneOfWithNestedPrimitiveTimeAvatar{
		PrimitiveAndPrimitiveTime: v,
	}
}

// stringAsOneOfWithNestedPrimitiveTimeAvatar is a convenience function that returns string wrapped in OneOfWithNestedPrimitiveTimeAvatar
func StringAsOneOfWithNestedPrimitiveTimeAvatar(v *string) OneOfWithNestedPrimitiveTimeAvatar {
	return OneOfWithNestedPrimitiveTimeAvatar{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OneOfWithNestedPrimitiveTimeAvatar) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into PrimitiveAndPrimitiveTime
	err = newStrictDecoder(data).Decode(&dst.PrimitiveAndPrimitiveTime)
	if err == nil {
		jsonPrimitiveAndPrimitiveTime, _ := json.Marshal(dst.PrimitiveAndPrimitiveTime)
		if string(jsonPrimitiveAndPrimitiveTime) == "{}" { // empty struct
			dst.PrimitiveAndPrimitiveTime = nil
		} else {
			match++
		}
	} else {
		dst.PrimitiveAndPrimitiveTime = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PrimitiveAndPrimitiveTime = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OneOfWithNestedPrimitiveTimeAvatar)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OneOfWithNestedPrimitiveTimeAvatar)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OneOfWithNestedPrimitiveTimeAvatar) MarshalJSON() ([]byte, error) {
	if src.PrimitiveAndPrimitiveTime != nil {
		return json.Marshal(&src.PrimitiveAndPrimitiveTime)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OneOfWithNestedPrimitiveTimeAvatar) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PrimitiveAndPrimitiveTime != nil {
		return obj.PrimitiveAndPrimitiveTime
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableOneOfWithNestedPrimitiveTimeAvatar struct {
	value *OneOfWithNestedPrimitiveTimeAvatar
	isSet bool
}

func (v NullableOneOfWithNestedPrimitiveTimeAvatar) Get() *OneOfWithNestedPrimitiveTimeAvatar {
	return v.value
}

func (v *NullableOneOfWithNestedPrimitiveTimeAvatar) Set(val *OneOfWithNestedPrimitiveTimeAvatar) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfWithNestedPrimitiveTimeAvatar) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfWithNestedPrimitiveTimeAvatar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfWithNestedPrimitiveTimeAvatar(val *OneOfWithNestedPrimitiveTimeAvatar) *NullableOneOfWithNestedPrimitiveTimeAvatar {
	return &NullableOneOfWithNestedPrimitiveTimeAvatar{value: val, isSet: true}
}

func (v NullableOneOfWithNestedPrimitiveTimeAvatar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfWithNestedPrimitiveTimeAvatar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


