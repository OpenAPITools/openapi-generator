/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"time"
	"fmt"
	"gopkg.in/validator.v2"
)

// OneOfPrimitiveTypes - struct for OneOfPrimitiveTypes
type OneOfPrimitiveTypes struct {
	StringValue *string
	TimeTimeValue *time.Time
}

// stringAsOneOfPrimitiveTypes is a convenience function that returns string wrapped in OneOfPrimitiveTypes
func StringValueAsOneOfPrimitiveTypes(v *string) OneOfPrimitiveTypes {
	return OneOfPrimitiveTypes{
		StringValue: v,
	}
}

// time.TimeAsOneOfPrimitiveTypes is a convenience function that returns time.Time wrapped in OneOfPrimitiveTypes
func TimeTimeValueAsOneOfPrimitiveTypes(v *time.Time) OneOfPrimitiveTypes {
	return OneOfPrimitiveTypes{
		TimeTimeValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OneOfPrimitiveTypes) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StringValue
	err = newStrictDecoder(data).Decode(&dst.StringValue)
	if err == nil {
		jsonStringValue, _ := json.Marshal(dst.StringValue)
		if string(jsonStringValue) == "{}" { // empty struct
			dst.StringValue = nil
		} else {
			if err = validator.Validate(dst.StringValue); err != nil {
				dst.StringValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.StringValue = nil
	}

	// try to unmarshal data into TimeTimeValue
	err = newStrictDecoder(data).Decode(&dst.TimeTimeValue)
	if err == nil {
		jsonTimeTimeValue, _ := json.Marshal(dst.TimeTimeValue)
		if string(jsonTimeTimeValue) == "{}" { // empty struct
			dst.TimeTimeValue = nil
		} else {
			if err = validator.Validate(dst.TimeTimeValue); err != nil {
				dst.TimeTimeValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeTimeValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StringValue = nil
		dst.TimeTimeValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OneOfPrimitiveTypes)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OneOfPrimitiveTypes)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OneOfPrimitiveTypes) MarshalJSON() ([]byte, error) {
	if src.StringValue != nil {
		return json.Marshal(&src.StringValue)
	}

	if src.TimeTimeValue != nil {
		return json.Marshal(&src.TimeTimeValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OneOfPrimitiveTypes) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StringValue != nil {
		return obj.StringValue
	}

	if obj.TimeTimeValue != nil {
		return obj.TimeTimeValue
	}

	// all schemas are nil
	return nil
}

type NullableOneOfPrimitiveTypes struct {
	value *OneOfPrimitiveTypes
	isSet bool
}

func (v NullableOneOfPrimitiveTypes) Get() *OneOfPrimitiveTypes {
	return v.value
}

func (v *NullableOneOfPrimitiveTypes) Set(val *OneOfPrimitiveTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfPrimitiveTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfPrimitiveTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfPrimitiveTypes(val *OneOfPrimitiveTypes) *NullableOneOfPrimitiveTypes {
	return &NullableOneOfPrimitiveTypes{value: val, isSet: true}
}

func (v NullableOneOfPrimitiveTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfPrimitiveTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


