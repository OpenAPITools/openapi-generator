/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Mammal - struct for Mammal
type Mammal struct {
	WhaleValue *Whale
	ZebraValue *Zebra
}

// WhaleAsMammal is a convenience function that returns Whale wrapped in Mammal
func WhaleValueAsMammal(v *Whale) Mammal {
	return Mammal{
		WhaleValue: v,
	}
}

// ZebraAsMammal is a convenience function that returns Zebra wrapped in Mammal
func ZebraValueAsMammal(v *Zebra) Mammal {
	return Mammal{
		ZebraValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Mammal) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WhaleValue
	err = newStrictDecoder(data).Decode(&dst.WhaleValue)
	if err == nil {
		jsonWhaleValue, _ := json.Marshal(dst.WhaleValue)
		if string(jsonWhaleValue) == "{}" { // empty struct
			dst.WhaleValue = nil
		} else {
			if err = validator.Validate(dst.WhaleValue); err != nil {
				dst.WhaleValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.WhaleValue = nil
	}

	// try to unmarshal data into ZebraValue
	err = newStrictDecoder(data).Decode(&dst.ZebraValue)
	if err == nil {
		jsonZebraValue, _ := json.Marshal(dst.ZebraValue)
		if string(jsonZebraValue) == "{}" { // empty struct
			dst.ZebraValue = nil
		} else {
			if err = validator.Validate(dst.ZebraValue); err != nil {
				dst.ZebraValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.ZebraValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WhaleValue = nil
		dst.ZebraValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Mammal)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Mammal)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Mammal) MarshalJSON() ([]byte, error) {
	if src.WhaleValue != nil {
		return json.Marshal(&src.WhaleValue)
	}

	if src.ZebraValue != nil {
		return json.Marshal(&src.ZebraValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Mammal) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WhaleValue != nil {
		return obj.WhaleValue
	}

	if obj.ZebraValue != nil {
		return obj.ZebraValue
	}

	// all schemas are nil
	return nil
}

type NullableMammal struct {
	value *Mammal
	isSet bool
}

func (v NullableMammal) Get() *Mammal {
	return v.value
}

func (v *NullableMammal) Set(val *Mammal) {
	v.value = val
	v.isSet = true
}

func (v NullableMammal) IsSet() bool {
	return v.isSet
}

func (v *NullableMammal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMammal(val *Mammal) *NullableMammal {
	return &NullableMammal{value: val, isSet: true}
}

func (v NullableMammal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMammal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


