/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"time"
)

// checks if the PrimitiveAndPrimitiveTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrimitiveAndPrimitiveTime{}

// PrimitiveAndPrimitiveTime struct for PrimitiveAndPrimitiveTime
type PrimitiveAndPrimitiveTime struct {
	// Unique identifier for the file.
	Id *string `json:"id,omitempty"`
	// When the file was uploaded.
	UploadedOn *time.Time `json:"uploaded_on,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrimitiveAndPrimitiveTime PrimitiveAndPrimitiveTime

// NewPrimitiveAndPrimitiveTime instantiates a new PrimitiveAndPrimitiveTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimitiveAndPrimitiveTime() *PrimitiveAndPrimitiveTime {
	this := PrimitiveAndPrimitiveTime{}
	return &this
}

// NewPrimitiveAndPrimitiveTimeWithDefaults instantiates a new PrimitiveAndPrimitiveTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimitiveAndPrimitiveTimeWithDefaults() *PrimitiveAndPrimitiveTime {
	this := PrimitiveAndPrimitiveTime{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PrimitiveAndPrimitiveTime) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimitiveAndPrimitiveTime) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PrimitiveAndPrimitiveTime) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PrimitiveAndPrimitiveTime) SetId(v string) {
	o.Id = &v
}

// GetUploadedOn returns the UploadedOn field value if set, zero value otherwise.
func (o *PrimitiveAndPrimitiveTime) GetUploadedOn() time.Time {
	if o == nil || isNil(o.UploadedOn) {
		var ret time.Time
		return ret
	}
	return *o.UploadedOn
}

// GetUploadedOnOk returns a tuple with the UploadedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimitiveAndPrimitiveTime) GetUploadedOnOk() (*time.Time, bool) {
	if o == nil || isNil(o.UploadedOn) {
		return nil, false
	}
	return o.UploadedOn, true
}

// HasUploadedOn returns a boolean if a field has been set.
func (o *PrimitiveAndPrimitiveTime) HasUploadedOn() bool {
	if o != nil && !isNil(o.UploadedOn) {
		return true
	}

	return false
}

// SetUploadedOn gets a reference to the given time.Time and assigns it to the UploadedOn field.
func (o *PrimitiveAndPrimitiveTime) SetUploadedOn(v time.Time) {
	o.UploadedOn = &v
}

func (o PrimitiveAndPrimitiveTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrimitiveAndPrimitiveTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.UploadedOn) {
		toSerialize["uploaded_on"] = o.UploadedOn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrimitiveAndPrimitiveTime) UnmarshalJSON(bytes []byte) (err error) {
	varPrimitiveAndPrimitiveTime := _PrimitiveAndPrimitiveTime{}

	if err = json.Unmarshal(bytes, &varPrimitiveAndPrimitiveTime); err == nil {
		*o = PrimitiveAndPrimitiveTime(varPrimitiveAndPrimitiveTime)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "uploaded_on")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrimitiveAndPrimitiveTime struct {
	value *PrimitiveAndPrimitiveTime
	isSet bool
}

func (v NullablePrimitiveAndPrimitiveTime) Get() *PrimitiveAndPrimitiveTime {
	return v.value
}

func (v *NullablePrimitiveAndPrimitiveTime) Set(val *PrimitiveAndPrimitiveTime) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimitiveAndPrimitiveTime) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimitiveAndPrimitiveTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimitiveAndPrimitiveTime(val *PrimitiveAndPrimitiveTime) *NullablePrimitiveAndPrimitiveTime {
	return &NullablePrimitiveAndPrimitiveTime{value: val, isSet: true}
}

func (v NullablePrimitiveAndPrimitiveTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimitiveAndPrimitiveTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


