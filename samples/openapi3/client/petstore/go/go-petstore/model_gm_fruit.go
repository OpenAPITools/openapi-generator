/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)


// GmFruit struct for GmFruit
type GmFruit struct {
	AppleValue *Apple
	BananaValue *Banana
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GmFruit) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AppleValue
	err = json.Unmarshal(data, &dst.AppleValue);
	if err == nil {
		jsonAppleValue, _ := json.Marshal(dst.AppleValue)
		if string(jsonAppleValue) == "{}" { // empty struct
			dst.AppleValue = nil
		} else {
			return nil // data stored in dst.AppleValue, return on the first match
		}
	} else {
		dst.AppleValue = nil
	}

	// try to unmarshal JSON data into BananaValue
	err = json.Unmarshal(data, &dst.BananaValue);
	if err == nil {
		jsonBananaValue, _ := json.Marshal(dst.BananaValue)
		if string(jsonBananaValue) == "{}" { // empty struct
			dst.BananaValue = nil
		} else {
			return nil // data stored in dst.BananaValue, return on the first match
		}
	} else {
		dst.BananaValue = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GmFruit)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GmFruit) MarshalJSON() ([]byte, error) {
	if src.AppleValue != nil {
		return json.Marshal(&src.AppleValue)
	}

	if src.BananaValue != nil {
		return json.Marshal(&src.BananaValue)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableGmFruit struct {
	value *GmFruit
	isSet bool
}

func (v NullableGmFruit) Get() *GmFruit {
	return v.value
}

func (v *NullableGmFruit) Set(val *GmFruit) {
	v.value = val
	v.isSet = true
}

func (v NullableGmFruit) IsSet() bool {
	return v.isSet
}

func (v *NullableGmFruit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGmFruit(val *GmFruit) *NullableGmFruit {
	return &NullableGmFruit{value: val, isSet: true}
}

func (v NullableGmFruit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGmFruit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


