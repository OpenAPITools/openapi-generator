/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Fruit - struct for Fruit
type Fruit struct {
	AppleValue *Apple
	BananaValue *Banana
}

// AppleAsFruit is a convenience function that returns Apple wrapped in Fruit
func AppleValueAsFruit(v *Apple) Fruit {
	return Fruit{
		AppleValue: v,
	}
}

// BananaAsFruit is a convenience function that returns Banana wrapped in Fruit
func BananaValueAsFruit(v *Banana) Fruit {
	return Fruit{
		BananaValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Fruit) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppleValue
	err = newStrictDecoder(data).Decode(&dst.AppleValue)
	if err == nil {
		jsonAppleValue, _ := json.Marshal(dst.AppleValue)
		if string(jsonAppleValue) == "{}" { // empty struct
			dst.AppleValue = nil
		} else {
			if err = validator.Validate(dst.AppleValue); err != nil {
				dst.AppleValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppleValue = nil
	}

	// try to unmarshal data into BananaValue
	err = newStrictDecoder(data).Decode(&dst.BananaValue)
	if err == nil {
		jsonBananaValue, _ := json.Marshal(dst.BananaValue)
		if string(jsonBananaValue) == "{}" { // empty struct
			dst.BananaValue = nil
		} else {
			if err = validator.Validate(dst.BananaValue); err != nil {
				dst.BananaValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.BananaValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppleValue = nil
		dst.BananaValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Fruit)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Fruit)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Fruit) MarshalJSON() ([]byte, error) {
	if src.AppleValue != nil {
		return json.Marshal(&src.AppleValue)
	}

	if src.BananaValue != nil {
		return json.Marshal(&src.BananaValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Fruit) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppleValue != nil {
		return obj.AppleValue
	}

	if obj.BananaValue != nil {
		return obj.BananaValue
	}

	// all schemas are nil
	return nil
}

type NullableFruit struct {
	value *Fruit
	isSet bool
}

func (v NullableFruit) Get() *Fruit {
	return v.value
}

func (v *NullableFruit) Set(val *Fruit) {
	v.value = val
	v.isSet = true
}

func (v NullableFruit) IsSet() bool {
	return v.isSet
}

func (v *NullableFruit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFruit(val *Fruit) *NullableFruit {
	return &NullableFruit{value: val, isSet: true}
}

func (v NullableFruit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFruit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


