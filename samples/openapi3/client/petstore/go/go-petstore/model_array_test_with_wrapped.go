/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
)

// checks if the ArrayTestWithWrapped type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArrayTestWithWrapped{}

// ArrayTestWithWrapped struct for ArrayTestWithWrapped
type ArrayTestWithWrapped struct {
	ArrayOfString []string `json:"array_of_string,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ArrayTestWithWrapped ArrayTestWithWrapped

// NewArrayTestWithWrapped instantiates a new ArrayTestWithWrapped object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayTestWithWrapped() *ArrayTestWithWrapped {
	this := ArrayTestWithWrapped{}
	return &this
}

// NewArrayTestWithWrappedWithDefaults instantiates a new ArrayTestWithWrapped object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayTestWithWrappedWithDefaults() *ArrayTestWithWrapped {
	this := ArrayTestWithWrapped{}
	return &this
}

// GetArrayOfString returns the ArrayOfString field value if set, zero value otherwise.
func (o *ArrayTestWithWrapped) GetArrayOfString() []string {
	if o == nil || IsNil(o.ArrayOfString) {
		var ret []string
		return ret
	}
	return o.ArrayOfString
}

// GetArrayOfStringOk returns a tuple with the ArrayOfString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayTestWithWrapped) GetArrayOfStringOk() ([]string, bool) {
	if o == nil || IsNil(o.ArrayOfString) {
		return nil, false
	}
	return o.ArrayOfString, true
}

// HasArrayOfString returns a boolean if a field has been set.
func (o *ArrayTestWithWrapped) HasArrayOfString() bool {
	if o != nil && !IsNil(o.ArrayOfString) {
		return true
	}

	return false
}

// SetArrayOfString gets a reference to the given []string and assigns it to the ArrayOfString field.
func (o *ArrayTestWithWrapped) SetArrayOfString(v []string) {
	o.ArrayOfString = v
}

func (o ArrayTestWithWrapped) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArrayTestWithWrapped) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArrayOfString) {
		toSerialize["array_of_string"] = o.ArrayOfString
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArrayTestWithWrapped) UnmarshalJSON(data []byte) (err error) {
	varArrayTestWithWrapped := _ArrayTestWithWrapped{}

	err = json.Unmarshal(data, &varArrayTestWithWrapped)

	if err != nil {
		return err
	}

	*o = ArrayTestWithWrapped(varArrayTestWithWrapped)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "array_of_string")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArrayTestWithWrapped struct {
	value *ArrayTestWithWrapped
	isSet bool
}

func (v NullableArrayTestWithWrapped) Get() *ArrayTestWithWrapped {
	return v.value
}

func (v *NullableArrayTestWithWrapped) Set(val *ArrayTestWithWrapped) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayTestWithWrapped) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayTestWithWrapped) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayTestWithWrapped(val *ArrayTestWithWrapped) *NullableArrayTestWithWrapped {
	return &NullableArrayTestWithWrapped{value: val, isSet: true}
}

func (v NullableArrayTestWithWrapped) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayTestWithWrapped) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


