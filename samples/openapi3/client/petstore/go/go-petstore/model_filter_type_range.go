/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
)

// checks if the FilterTypeRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterTypeRange{}

// FilterTypeRange struct for FilterTypeRange
type FilterTypeRange struct {
	Data []string `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilterTypeRange FilterTypeRange

// NewFilterTypeRange instantiates a new FilterTypeRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterTypeRange() *FilterTypeRange {
	this := FilterTypeRange{}
	return &this
}

// NewFilterTypeRangeWithDefaults instantiates a new FilterTypeRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterTypeRangeWithDefaults() *FilterTypeRange {
	this := FilterTypeRange{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *FilterTypeRange) GetData() []string {
	if o == nil || IsNil(o.Data) {
		var ret []string
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterTypeRange) GetDataOk() ([]string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *FilterTypeRange) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []string and assigns it to the Data field.
func (o *FilterTypeRange) SetData(v []string) {
	o.Data = v
}

func (o FilterTypeRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterTypeRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilterTypeRange) UnmarshalJSON(data []byte) (err error) {
	varFilterTypeRange := _FilterTypeRange{}

	err = json.Unmarshal(data, &varFilterTypeRange)

	if err != nil {
		return err
	}

	*o = FilterTypeRange(varFilterTypeRange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilterTypeRange struct {
	value *FilterTypeRange
	isSet bool
}

func (v NullableFilterTypeRange) Get() *FilterTypeRange {
	return v.value
}

func (v *NullableFilterTypeRange) Set(val *FilterTypeRange) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterTypeRange) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterTypeRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterTypeRange(val *FilterTypeRange) *NullableFilterTypeRange {
	return &NullableFilterTypeRange{value: val, isSet: true}
}

func (v NullableFilterTypeRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterTypeRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


