/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)


// AnyOfPrimitiveType struct for AnyOfPrimitiveType
type AnyOfPrimitiveType struct {
	OneOfPrimitiveTypeChildValue *OneOfPrimitiveTypeChild
	ArrayOfStringValue *[]string
	Int32Value *int32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AnyOfPrimitiveType) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into OneOfPrimitiveTypeChildValue
	err = json.Unmarshal(data, &dst.OneOfPrimitiveTypeChildValue);
	if err == nil {
		jsonOneOfPrimitiveTypeChildValue, _ := json.Marshal(dst.OneOfPrimitiveTypeChildValue)
		if string(jsonOneOfPrimitiveTypeChildValue) == "{}" { // empty struct
			dst.OneOfPrimitiveTypeChildValue = nil
		} else {
			return nil // data stored in dst.OneOfPrimitiveTypeChildValue, return on the first match
		}
	} else {
		dst.OneOfPrimitiveTypeChildValue = nil
	}

	// try to unmarshal JSON data into ArrayOfStringValue
	err = json.Unmarshal(data, &dst.ArrayOfStringValue);
	if err == nil {
		jsonArrayOfStringValue, _ := json.Marshal(dst.ArrayOfStringValue)
		if string(jsonArrayOfStringValue) == "{}" { // empty struct
			dst.ArrayOfStringValue = nil
		} else {
			return nil // data stored in dst.ArrayOfStringValue, return on the first match
		}
	} else {
		dst.ArrayOfStringValue = nil
	}

	// try to unmarshal JSON data into Int32Value
	err = json.Unmarshal(data, &dst.Int32Value);
	if err == nil {
		jsonInt32Value, _ := json.Marshal(dst.Int32Value)
		if string(jsonInt32Value) == "{}" { // empty struct
			dst.Int32Value = nil
		} else {
			return nil // data stored in dst.Int32Value, return on the first match
		}
	} else {
		dst.Int32Value = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AnyOfPrimitiveType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnyOfPrimitiveType) MarshalJSON() ([]byte, error) {
	if src.OneOfPrimitiveTypeChildValue != nil {
		return json.Marshal(&src.OneOfPrimitiveTypeChildValue)
	}

	if src.ArrayOfStringValue != nil {
		return json.Marshal(&src.ArrayOfStringValue)
	}

	if src.Int32Value != nil {
		return json.Marshal(&src.Int32Value)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableAnyOfPrimitiveType struct {
	value *AnyOfPrimitiveType
	isSet bool
}

func (v NullableAnyOfPrimitiveType) Get() *AnyOfPrimitiveType {
	return v.value
}

func (v *NullableAnyOfPrimitiveType) Set(val *AnyOfPrimitiveType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnyOfPrimitiveType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnyOfPrimitiveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnyOfPrimitiveType(val *AnyOfPrimitiveType) *NullableAnyOfPrimitiveType {
	return &NullableAnyOfPrimitiveType{value: val, isSet: true}
}

func (v NullableAnyOfPrimitiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnyOfPrimitiveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


