/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
)

// OneOfWithNestedPrimitiveTime struct for OneOfWithNestedPrimitiveTime
type OneOfWithNestedPrimitiveTime struct {
	Avatar NullableOneOfWithNestedPrimitiveTimeAvatar `json:"avatar,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OneOfWithNestedPrimitiveTime OneOfWithNestedPrimitiveTime

// NewOneOfWithNestedPrimitiveTime instantiates a new OneOfWithNestedPrimitiveTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneOfWithNestedPrimitiveTime() *OneOfWithNestedPrimitiveTime {
	this := OneOfWithNestedPrimitiveTime{}
	return &this
}

// NewOneOfWithNestedPrimitiveTimeWithDefaults instantiates a new OneOfWithNestedPrimitiveTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneOfWithNestedPrimitiveTimeWithDefaults() *OneOfWithNestedPrimitiveTime {
	this := OneOfWithNestedPrimitiveTime{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneOfWithNestedPrimitiveTime) GetAvatar() OneOfWithNestedPrimitiveTimeAvatar {
	if o == nil || isNil(o.Avatar.Get()) {
		var ret OneOfWithNestedPrimitiveTimeAvatar
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneOfWithNestedPrimitiveTime) GetAvatarOk() (*OneOfWithNestedPrimitiveTimeAvatar, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *OneOfWithNestedPrimitiveTime) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableOneOfWithNestedPrimitiveTimeAvatar and assigns it to the Avatar field.
func (o *OneOfWithNestedPrimitiveTime) SetAvatar(v OneOfWithNestedPrimitiveTimeAvatar) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *OneOfWithNestedPrimitiveTime) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *OneOfWithNestedPrimitiveTime) UnsetAvatar() {
	o.Avatar.Unset()
}

func (o OneOfWithNestedPrimitiveTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OneOfWithNestedPrimitiveTime) UnmarshalJSON(bytes []byte) (err error) {
	varOneOfWithNestedPrimitiveTime := _OneOfWithNestedPrimitiveTime{}

	if err = json.Unmarshal(bytes, &varOneOfWithNestedPrimitiveTime); err == nil {
		*o = OneOfWithNestedPrimitiveTime(varOneOfWithNestedPrimitiveTime)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "avatar")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOneOfWithNestedPrimitiveTime struct {
	value *OneOfWithNestedPrimitiveTime
	isSet bool
}

func (v NullableOneOfWithNestedPrimitiveTime) Get() *OneOfWithNestedPrimitiveTime {
	return v.value
}

func (v *NullableOneOfWithNestedPrimitiveTime) Set(val *OneOfWithNestedPrimitiveTime) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfWithNestedPrimitiveTime) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfWithNestedPrimitiveTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfWithNestedPrimitiveTime(val *OneOfWithNestedPrimitiveTime) *NullableOneOfWithNestedPrimitiveTime {
	return &NullableOneOfWithNestedPrimitiveTime{value: val, isSet: true}
}

func (v NullableOneOfWithNestedPrimitiveTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfWithNestedPrimitiveTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


