# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_call, ValidationError, Field
from typing import Dict, List, Optional, Tuple, Union, Any, Annotated

from pydantic import Field
from typing_extensions import Annotated
from petstore_api.models.client import Client

from petstore_api.api_client import ApiClient
from petstore_api.api_response import ApiResponse
from petstore_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from petstore_api.rest import RESTResponseType



class AnotherFakeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    async def call_123_test_special_tags(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> Client:

        """To test special tags
        To test special tags and operation ID starting with number
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._call_123_test_special_tags_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def call_123_test_special_tags_without_preload_content(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> RESTResponseType:

        """To test special tags
        To test special tags and operation ID starting with number
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._call_123_test_special_tags_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
        return response_data.response



    @validate_call
    async def call_123_test_special_tags_with_http_info(
        self,
        client: Annotated[Client, Field(description="client model")],
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le=0,
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> Client:

        """To test special tags
        To test special tags and operation ID starting with number
        :param client: client model (required)
        :type client: Client
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[Client]
        """

        param = self._call_123_test_special_tags_serialize(
            client=client,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Client"
            
        }

        response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    def _call_123_test_special_tags_serialize(
        self,
        client,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _hosts = [
            
        ]
        _host=None if len(_hosts) == 0 else _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if client is not None:
            _body_params = client

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type(['application/json'])
            if _type is not None:
                _header_params['Content-Type'] = _type

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/another-fake/dummy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


