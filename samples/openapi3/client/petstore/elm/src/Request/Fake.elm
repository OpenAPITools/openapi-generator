{-
   OpenAPI Petstore
   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI spec version: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Fake exposing (fakeOuterBooleanSerialize, fakeOuterCompositeSerialize, fakeOuterNumberSerialize, fakeOuterStringSerialize, testBodyWithFileSchema, testBodyWithQueryParams, testClientModel, testEndpointParameters, testEnumParameters, testInlineAdditionalProperties, testJsonFormData)

import Data.Client as Client exposing (Client)
import Data.FileSchemaTestClass as FileSchemaTestClass exposing (FileSchemaTestClass)
import Data.OuterComposite as OuterComposite exposing (OuterComposite)
import Data.User as User exposing (User)
import Dict
import Http
import Json.Decode as Decode
import Json.Encode as Encode


basePath : String
basePath =
    "http://petstore.swagger.io:80/v2"


{-| Test serialization of outer boolean types
-}
fakeOuterBooleanSerialize : Bool -> Http.Request Bool
fakeOuterBooleanSerialize model =
    { method = "POST"
    , url = basePath ++ "/fake/outer/boolean"
    , headers = []
    , body = Http.jsonBody <| Encode.bool model
    , expect = Http.expectJson Decode.bool
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Test serialization of object with outer number type
-}
fakeOuterCompositeSerialize : OuterComposite -> Http.Request OuterComposite
fakeOuterCompositeSerialize model =
    { method = "POST"
    , url = basePath ++ "/fake/outer/composite"
    , headers = []
    , body = Http.jsonBody <| OuterComposite.encoder model
    , expect = Http.expectJson OuterComposite.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Test serialization of outer number types
-}
fakeOuterNumberSerialize : Float -> Http.Request Float
fakeOuterNumberSerialize model =
    { method = "POST"
    , url = basePath ++ "/fake/outer/number"
    , headers = []
    , body = Http.jsonBody <| Encode.float model
    , expect = Http.expectJson Decode.float
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Test serialization of outer string types
-}
fakeOuterStringSerialize : String -> Http.Request String
fakeOuterStringSerialize model =
    { method = "POST"
    , url = basePath ++ "/fake/outer/string"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| For this test, the body for this request much reference a schema named `File`.
-}
testBodyWithFileSchema : FileSchemaTestClass -> Http.Request ()
testBodyWithFileSchema model =
    { method = "PUT"
    , url = basePath ++ "/fake/body-with-file-schema"
    , headers = []
    , body = Http.jsonBody <| FileSchemaTestClass.encoder model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


testBodyWithQueryParams : User -> Http.Request ()
testBodyWithQueryParams model =
    { method = "PUT"
    , url = basePath ++ "/fake/body-with-query-params"
    , headers = []
    , body = Http.jsonBody <| User.encoder model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| To test "client" model
-}
testClientModel : Client -> Http.Request Client
testClientModel model =
    { method = "PATCH"
    , url = basePath ++ "/fake"
    , headers = []
    , body = Http.jsonBody <| Client.encoder model
    , expect = Http.expectJson Client.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
-}
testEndpointParameters : Http.Request ()
testEndpointParameters =
    { method = "POST"
    , url = basePath ++ "/fake"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| To test enum parameters
-}
testEnumParameters : Http.Request ()
testEnumParameters =
    { method = "GET"
    , url = basePath ++ "/fake"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


testInlineAdditionalProperties : String -> Http.Request ()
testInlineAdditionalProperties model =
    { method = "POST"
    , url = basePath ++ "/fake/inline-additionalProperties"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


testJsonFormData : Http.Request ()
testJsonFormData =
    { method = "GET"
    , url = basePath ++ "/fake/jsonFormData"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request
