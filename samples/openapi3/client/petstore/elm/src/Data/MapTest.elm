{-
   OpenAPI Petstore
   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI spec version: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.MapTest exposing (MapTest, String(..), decoder, encoder)

import Data.Map as Map exposing (Map)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias MapTest =
    { map_map_of_string : Maybe (List String)
    , map_of_enum_string : Maybe (List MapOfEnumString)
    , direct_map : Maybe (List Bool)
    , indirect_map : Maybe (List Bool)
    }


type String
    = UPPER
    | Lower


decoder : Decoder MapTest
decoder =
    Decode.succeed MapTest
        |> optional "map_map_of_string" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "map_of_enum_string" (Decode.nullable (Decode.list mapOfEnumStringDecoder)) Nothing
        |> optional "direct_map" (Decode.nullable (Decode.list Decode.bool)) Nothing
        |> optional "indirect_map" (Decode.nullable (Decode.list Decode.bool)) Nothing


encoder : MapTest -> Encode.Value
encoder model =
    Encode.object
        [ ( "map_map_of_string", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.map_map_of_string) )
        , ( "map_of_enum_string", Maybe.withDefault Encode.null (Maybe.map (Encode.list mapOfEnumStringEncoder) model.map_of_enum_string) )
        , ( "direct_map", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.bool) model.direct_map) )
        , ( "indirect_map", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.bool) model.indirect_map) )
        ]


mapOfEnumStringDecoder : Decoder String
mapOfEnumStringDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "UPPER" ->
                        Decode.succeed UPPER

                    "lower" ->
                        Decode.succeed Lower

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )


mapOfEnumStringEncoder : String -> Encode.Value
mapOfEnumStringEncoder model =
    case model of
        UPPER ->
            Encode.string "UPPER"

        Lower ->
            Encode.string "lower"
