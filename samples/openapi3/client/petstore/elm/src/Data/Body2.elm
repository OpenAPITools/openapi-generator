{-
   OpenAPI Petstore
   This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

   OpenAPI spec version: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Body2 exposing (Body2, EnumFormString(..), EnumFormStringArray(..), decoder, encoder)

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Body2 =
    { enum_form_string_array : Maybe (List EnumFormStringArray)
    , enum_form_string : Maybe EnumFormString
    }


type EnumFormStringArray
    = GreaterThan
    | Dollar


type EnumFormString
    = N_abc
    | N_efg
    | Xyz


decoder : Decoder Body2
decoder =
    Decode.succeed Body2
        |> optional "enum_form_string_array" (Decode.nullable (Decode.list enumFormStringArrayDecoder)) Nothing
        |> optional "enum_form_string" (Decode.nullable enumFormStringDecoder) (Just "-efg")


encoder : Body2 -> Encode.Value
encoder model =
    Encode.object
        [ ( "enum_form_string_array", Maybe.withDefault Encode.null (Maybe.map (Encode.list enumFormStringArrayEncoder) model.enum_form_string_array) )
        , ( "enum_form_string", Maybe.withDefault Encode.null (Maybe.map enumFormStringEncoder model.enum_form_string) )
        ]


enumFormStringArrayDecoder : Decoder EnumFormStringArray
enumFormStringArrayDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    ">" ->
                        Decode.succeed GreaterThan

                    "$" ->
                        Decode.succeed Dollar

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )


enumFormStringArrayEncoder : EnumFormStringArray -> Encode.Value
enumFormStringArrayEncoder model =
    case model of
        GreaterThan ->
            Encode.string ">"

        Dollar ->
            Encode.string "$"


enumFormStringDecoder : Decoder EnumFormString
enumFormStringDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "_abc" ->
                        Decode.succeed N_abc

                    "-efg" ->
                        Decode.succeed N_efg

                    "(xyz)" ->
                        Decode.succeed Xyz

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )


enumFormStringEncoder : EnumFormString -> Encode.Value
enumFormStringEncoder model =
    case model of
        N_abc ->
            Encode.string "_abc"

        N_efg ->
            Encode.string "-efg"

        Xyz ->
            Encode.string "(xyz)"
