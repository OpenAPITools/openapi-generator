# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date
import unittest

import petstore_api
from petstore_api.model import apple
from petstore_api.model import banana
from petstore_api.model.fruit import Fruit
from petstore_api.schemas import Singleton


class TestFruit(unittest.TestCase):
    """Fruit unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testFruit(self):
        """Test Fruit"""

        # make an instance of Fruit, a composed schema oneOf model
        # banana test
        length_cm = 20.3
        color = 'yellow'
        fruit = Fruit(lengthCm=length_cm, color=color)
        # check its properties
        self.assertEqual(fruit.lengthCm, length_cm)
        self.assertEqual(fruit['lengthCm'], length_cm)
        self.assertEqual(fruit.get('lengthCm'), length_cm)
        self.assertEqual(getattr(fruit, 'lengthCm'), length_cm)
        self.assertEqual(fruit.color, color)
        self.assertEqual(fruit['color'], color)
        self.assertEqual(getattr(fruit, 'color'), color)
        # check the dict representation
        self.assertEqual(
            fruit,
            {
                'lengthCm': length_cm,
                'color': color
            }
        )
        # setting values after instance creation is not allowed
        with self.assertRaises(TypeError):
            fruit['color'] = 'some value'

        # Assert that we can call the builtin hasattr() function.
        # hasattr should return False for non-existent attribute.
        # Internally hasattr catches the AttributeError exception.
        self.assertFalse(hasattr(fruit, 'invalid_variable'))

        # Assert that we can call the builtin hasattr() function.
        # hasattr should return True for existent attribute.
        self.assertTrue(hasattr(fruit, 'color'))

        # getting a value that doesn't exist raises an exception
        # with a key
        with self.assertRaises(KeyError):
            fruit['cultivar']
        # with getattr
        # Per Python doc, if the named attribute does not exist,
        # default is returned if provided.
        self.assertEqual(getattr(fruit, 'cultivar', 'some value'), 'some value')
        self.assertEqual(fruit.get('cultivar'), None)
        self.assertEqual(fruit.get('cultivar', 'some value'), 'some value')

        # Per Python doc, if the named attribute does not exist,
        # default is returned if provided, otherwise AttributeError is raised.
        with self.assertRaises(AttributeError):
            getattr(fruit, 'cultivar')

        # make sure that the ModelComposed class properties are correct
        # model._composed_schemas stores the anyOf/allOf/oneOf info
        self.assertEqual(
            fruit._composed_schemas,
            {
                'anyOf': [],
                'allOf': [],
                'oneOf': [
                    apple.Apple,
                    banana.Banana,
                ],
            }
        )

        """
        including extra parameters does not raise an exception
        because objects support additional properties by default
        """
        kwargs = dict(
            color=color,
            lengthCm=length_cm,
            additional_string='some value',
            additional_date='2021-01-02',
        )

        fruit = Fruit._from_openapi_data(**kwargs)
        self.assertEqual(
            fruit,
            kwargs
        )

        fruit = Fruit(**kwargs)
        self.assertEqual(
            fruit,
            kwargs
        )

        # including input parameters for two oneOf instances raise an exception
        with self.assertRaises(petstore_api.ApiValueError):
            Fruit(
                lengthCm=length_cm,
                cultivar='granny smith'
            )

        # make an instance of Fruit, a composed schema oneOf model
        # apple test
        color = 'red'
        cultivar = 'golden delicious'
        fruit = Fruit(color=color, cultivar=cultivar)
        # check its properties
        self.assertEqual(fruit.color, color)
        self.assertEqual(fruit['color'], color)
        self.assertEqual(getattr(fruit, 'color'), color)
        self.assertEqual(fruit.cultivar, cultivar)
        self.assertEqual(fruit['cultivar'], cultivar)
        self.assertEqual(getattr(fruit, 'cultivar'), cultivar)
        # check the dict representation
        self.assertEqual(
            fruit,
            {
                'color': color,
                'cultivar': cultivar
            }
        )

    def testFruitNullValue(self):
        # Since 'apple' is nullable, validate we can create an apple with the 'null' value.
        fruit = apple.Apple(None)
        assert isinstance(fruit, Singleton)
        assert isinstance(fruit, apple.Apple)
        assert fruit.is_none() is True

        # 'banana' is not nullable.
        # TODO cast this into ApiTypeError?
        with self.assertRaises(TypeError):
            banana.Banana(None)

        # Since 'fruit' has oneOf 'apple', 'banana' and 'apple' is nullable,
        # validate we can create a fruit with the 'null' value.
        fruit = Fruit(None)
        assert isinstance(fruit, Singleton)
        assert isinstance(fruit, apple.Apple)
        assert isinstance(fruit, Fruit)
        assert fruit.is_none() is True

if __name__ == '__main__':
    unittest.main()
