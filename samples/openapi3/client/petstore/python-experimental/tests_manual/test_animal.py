# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import petstore_api
from petstore_api.model.cat import Cat
from petstore_api.model.cat_all_of import CatAllOf
from petstore_api.model.dog import Dog
from petstore_api.model.dog_all_of import DogAllOf
from petstore_api.model.animal import Animal
from petstore_api.model_utils import StrSchema, BoolSchema


class TestAnimal(unittest.TestCase):
    """Animal unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testAnimal(self):
        """Test Animal"""

        regex_err = (
            r"Invalid discriminator value was passed in to Animal.className "
            r"Only the values \['Cat', 'Dog'\] are allowed at \('dict', 'className'\)"
        )
        with self.assertRaisesRegex(petstore_api.ApiValueError, regex_err):
            Animal(className='Fox', color='red')

        #import pdb
        #pdb.set_trace()
        animal = Animal(className='Cat', color='black')
        assert isinstance(animal, Animal)
        assert isinstance(animal, dict)
        assert isinstance(animal, Cat)
        assert isinstance(animal, CatAllOf)
        assert set(animal.keys()) == {'className', 'color'}
        assert animal.className == 'Cat'
        assert animal.color == 'black'
        assert animal.__class__.color.__bases__ == (StrSchema,)
        assert animal.__class__.className.__bases__ == (StrSchema,)

        # pass in optional param
        animal = Animal(className='Cat', color='black', declawed=True)
        assert isinstance(animal, Animal)
        assert isinstance(animal, dict)
        assert isinstance(animal, Cat)
        assert isinstance(animal, CatAllOf)
        assert set(animal.keys()) == {'className', 'color', 'declawed'}
        assert animal.className == 'Cat'
        assert animal.color == 'black'
        assert animal.declawed.value == True
        assert animal.__class__.color.__bases__ == (StrSchema,)
        assert animal.__class__.className.__bases__ == (StrSchema,)
        assert animal.__class__.declawed == BoolSchema

        # make a Dog
        animal = Animal(className='Dog', color='black')
        assert isinstance(animal, Animal)
        assert isinstance(animal, dict)
        assert isinstance(animal, Dog)
        assert isinstance(animal, DogAllOf)
        assert set(animal.keys()) == {'className', 'color'}
        assert animal.className == 'Dog'
        assert animal.color == 'black'
        assert animal.__class__.color.__bases__ == (StrSchema,)
        assert animal.__class__.className.__bases__ == (StrSchema,)

        # pass in optional param
        animal = Animal(className='Dog', color='black', breed='Labrador')
        assert isinstance(animal, Animal)
        assert isinstance(animal, dict)
        assert isinstance(animal, Dog)
        assert isinstance(animal, DogAllOf)
        assert set(animal.keys()) == {'className', 'color', 'breed'}
        assert animal.className == 'Dog'
        assert animal.color == 'black'
        assert animal.breed == 'Labrador'
        assert animal.__class__.color.__bases__ == (StrSchema,)
        assert animal.__class__.className.__bases__ == (StrSchema,)
        assert animal.__class__.breed == StrSchema


if __name__ == '__main__':
    unittest.main()
