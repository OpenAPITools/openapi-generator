# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import petstore_api
from petstore_api.model.date_with_validations import DateWithValidations
from datetime import date


class TestDateWithValidations(unittest.TestCase):
    """DateWithValidations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testDateWithValidations(self):
        """Test DateWithValidations"""

        # works with date input
        arg = date(2020,1,1)
        inst = DateWithValidations(arg)
        assert inst == arg

        # when passing data in client side (_spec_property_naming=False) one must use the correct type
        with self.assertRaisesRegex(
            petstore_api.ApiTypeError,
            r"Invalid type. Required value type is date and passed type was str at \['args\[0\]'\]"
        ):
            DateWithValidations("2020-01-01")

        # when passing data in from the server (_spec_property_naming=True) we can use str
        valid_values = ["2020-01-01", "2020-01", "2020"]
        expected_date = date(2020,1,1)
        for valid_value in valid_values:
            inst = DateWithValidations(valid_value, _spec_property_naming=True)
            assert inst == expected_date

        # value error is raised if an invalid string is passed in
        with self.assertRaisesRegex(
            petstore_api.ApiValueError,
            r"Date does not conform to the required ISO-8601 format. Invalid value 'abcd' for type date at \('args\[0\]',\)"
        ):
            DateWithValidations("abcd", _spec_property_naming=True)

        # pattern checking
        error_regex = r"Invalid value `2019-01-01`, must match regular expression `.+?` at \('args\[0\]',\)"
        with self.assertRaisesRegex(
            petstore_api.ApiValueError,
            error_regex
        ):
            DateWithValidations("2019-01-01", _spec_property_naming=True)
        with self.assertRaisesRegex(
            petstore_api.ApiValueError,
            error_regex
        ):
            DateWithValidations(date(2019,1,1))


if __name__ == '__main__':
    unittest.main()
