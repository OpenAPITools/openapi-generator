# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import petstore_api
from petstore_api.model.date_time_with_validations import DateTimeWithValidations
from datetime import datetime, timezone


class TestDateTimeWithValidations(unittest.TestCase):
    """DateTimeWithValidations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testDateTimeWithValidations(self):
        """Test DateTimeWithValidations"""

        # works with date input
        arg = datetime(2020,1,1)
        inst = DateTimeWithValidations(arg)
        assert inst == arg

        # when passing data in client side (_spec_property_naming=False) one must use the correct type
        with self.assertRaisesRegex(
            petstore_api.ApiTypeError,
            r"Invalid type. Required value type is datetime and passed type was str at \['args\[0\]'\]"
        ):
            DateTimeWithValidations("2020-01-01")

        # when passing data in from the server (_spec_property_naming=True) we can use str
        valid_values = ["2020-01-01T00:00:00", "2020-01-01", "2020-01", "2020"]
        expected_date = datetime(2020,1,1)
        for valid_value in valid_values:
            inst = DateTimeWithValidations(valid_value, _spec_property_naming=True)
            assert inst == expected_date

        # when passing data in from the server (_spec_property_naming=True) we can use str
        valid_values = ["2020-01-01T00:00:00Z", "2020-01-01T00:00:00+00:00"]
        expected_date = datetime(2020,1,1, tzinfo=timezone.utc)
        for valid_value in valid_values:
            inst = DateTimeWithValidations(valid_value, _spec_property_naming=True)
            assert inst == expected_date


        # value error is raised if an invalid string is passed in
        with self.assertRaisesRegex(
            petstore_api.ApiValueError,
            r"Datetime does not conform to the required ISO-8601 format. Invalid value 'abcd' for type datetime at \('args\[0\]',\)"
        ):
            DateTimeWithValidations("abcd", _spec_property_naming=True)

        # pattern checking
        error_regex = r"Invalid value `2019-01-01`, must match regular expression `.+?` at \('args\[0\]',\)"
        with self.assertRaisesRegex(
            petstore_api.ApiValueError,
            error_regex
        ):
            DateTimeWithValidations("2019-01-01", _spec_property_naming=True)
        error_regex = r"Invalid value `2019-01-01 00:00:00`, must match regular expression `.+?` at \('args\[0\]',\)"
        with self.assertRaisesRegex(
            petstore_api.ApiValueError,
            error_regex
        ):
            DateTimeWithValidations(datetime(2019,1,1))

if __name__ == '__main__':
    unittest.main()
