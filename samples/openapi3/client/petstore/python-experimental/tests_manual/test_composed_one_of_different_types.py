# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import date, datetime, timezone
from dateutil.tz import tzutc

import petstore_api
from petstore_api.schemas import DateSchema, DateTimeSchema, Singleton, NoneClass, frozendict
from petstore_api.model.animal import Animal
from petstore_api.model.cat import Cat
from petstore_api.model.composed_one_of_different_types import ComposedOneOfDifferentTypes
from petstore_api.model.number_with_validations import NumberWithValidations

class TestComposedOneOfDifferentTypes(unittest.TestCase):
    """ComposedOneOfDifferentTypes unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_ComposedOneOfDifferentTypes(self):
        """Test ComposedOneOfDifferentTypes"""
        # we can make an instance that stores float data
        inst = ComposedOneOfDifferentTypes(10.0)
        assert isinstance(inst, NumberWithValidations)

        # we can make an instance that stores object (dict) data
        inst = ComposedOneOfDifferentTypes(className="Cat", color="black")
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert isinstance(inst, Animal)
        assert isinstance(inst, Cat)
        assert isinstance(inst, frozendict)

        # object that holds 4 properties and is not an Animal
        inst = ComposedOneOfDifferentTypes(a="a", b="b", c="c", d="d")
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert not isinstance(inst, Animal)
        assert isinstance(inst, frozendict)

        # None
        inst = ComposedOneOfDifferentTypes(None)
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert isinstance(inst, Singleton)
        assert isinstance(inst, NoneClass)
        assert inst.is_none() is True

        # date
        inst = ComposedOneOfDifferentTypes._from_openapi_data('2019-01-10')
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert isinstance(inst, DateSchema)
        assert isinstance(inst, str)
        assert inst.as_date.year == 2019
        assert inst.as_date.month == 1
        assert inst.as_date.day == 10

        # date
        inst = ComposedOneOfDifferentTypes(date(2019, 1, 10))
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert isinstance(inst, DateSchema)
        assert isinstance(inst, str)
        assert inst.as_date.year == 2019
        assert inst.as_date.month == 1
        assert inst.as_date.day == 10

        # date-time
        inst = ComposedOneOfDifferentTypes._from_openapi_data('2020-01-02T03:04:05Z')
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert isinstance(inst, DateTimeSchema)
        assert isinstance(inst, str)
        assert inst.as_datetime.year == 2020
        assert inst.as_datetime.month == 1
        assert inst.as_datetime.day == 2
        assert inst.as_datetime.hour == 3
        assert inst.as_datetime.minute == 4
        assert inst.as_datetime.second == 5
        utc_tz = tzutc()
        assert inst.as_datetime.tzinfo == utc_tz

        # date-time
        inst = ComposedOneOfDifferentTypes(datetime(2020, 1, 2, 3, 4, 5, tzinfo=timezone.utc))
        assert isinstance(inst, ComposedOneOfDifferentTypes)
        assert isinstance(inst, DateTimeSchema)
        assert isinstance(inst, str)
        assert inst.as_datetime.year == 2020
        assert inst.as_datetime.month == 1
        assert inst.as_datetime.day == 2
        assert inst.as_datetime.hour == 3
        assert inst.as_datetime.minute == 4
        assert inst.as_datetime.second == 5
        assert inst.as_datetime.tzinfo == utc_tz


if __name__ == '__main__':
    unittest.main()
