# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import petstore_api
try:
    from petstore_api.model import quadrilateral
except ImportError:
    quadrilateral = sys.modules[
        'petstore_api.model.quadrilateral']
try:
    from petstore_api.model import triangle
except ImportError:
    triangle = sys.modules[
        'petstore_api.model.triangle']
from petstore_api.model.shape import Shape


class TestShape(unittest.TestCase):
    """Shape unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_recursionlimit(self):
        """Test case for recursionlimit

        """
        assert sys.getrecursionlimit() == 1234

    def testShape(self):
        """Test Shape"""
        from petstore_api.model import complex_quadrilateral
        from petstore_api.model import simple_quadrilateral
        from petstore_api.model import equilateral_triangle
        from petstore_api.model import isosceles_triangle
        from petstore_api.model import scalene_triangle
        from petstore_api.model import triangle
        from petstore_api.model import triangle_interface

        tri = Shape(
            shapeType="Triangle",
            triangleType="EquilateralTriangle"
        )
        assert isinstance(tri, equilateral_triangle.EquilateralTriangle)
        assert isinstance(tri, triangle.Triangle)
        assert isinstance(tri, triangle_interface.TriangleInterface)
        assert isinstance(tri, Shape)
        assert isinstance(tri, dict)

        tri = Shape(
            shapeType="Triangle",
            triangleType="IsoscelesTriangle"
        )
        assert isinstance(tri, isosceles_triangle.IsoscelesTriangle)

        tri = Shape(
            shapeType="Triangle",
            triangleType="ScaleneTriangle"
        )
        assert isinstance(tri, scalene_triangle.ScaleneTriangle)

        quad = Shape(
            shapeType="Quadrilateral",
            quadrilateralType="ComplexQuadrilateral"
        )
        assert isinstance(quad, complex_quadrilateral.ComplexQuadrilateral)

        quad = Shape(
            shapeType="Quadrilateral",
            quadrilateralType="SimpleQuadrilateral"
        )
        assert isinstance(quad, simple_quadrilateral.SimpleQuadrilateral)

        # No discriminator provided.
        err_msg = ("Cannot deserialize input data due to missing discriminator. "
                   "The discriminator property '{}' is missing at path: ()"
                   )
        with self.assertRaisesRegex(
                petstore_api.ApiValueError,
                err_msg.format("shapeType")
        ):
            Shape()

        # invalid shape_type (first discriminator). 'Circle' does not exist in the model.
        err_msg = (
            r"Invalid discriminator value was passed in to Shape.shapeType Only the values "
            r"\['Quadrilateral', 'Triangle'\] are allowed at \('dict', 'shapeType'\)"
        )
        with self.assertRaisesRegex(
                petstore_api.ApiValueError,
                err_msg
        ):
            Shape(shapeType="Circle")

        # invalid quadrilateral_type (second discriminator)
        err_msg = (
            r"Invalid discriminator value was passed in to Quadrilateral.quadrilateralType Only the values "
            r"\['ComplexQuadrilateral', 'SimpleQuadrilateral'\] are allowed at \('dict', 'quadrilateralType'\)"
        )
        with self.assertRaisesRegex(
                petstore_api.ApiValueError,
                err_msg
        ):
            Shape(
                shapeType="Quadrilateral",
                quadrilateralType="Triangle"
            )

if __name__ == '__main__':
    unittest.main()
