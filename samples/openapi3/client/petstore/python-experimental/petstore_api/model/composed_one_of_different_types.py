# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class ComposedOneOfDifferentTypes(
    schemas.ComposedSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    this is a model that allows payloads of type object or number
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        one_of_2 = schemas.NoneSchema
        one_of_3 = schemas.DateSchema
        
        
        class one_of_4(
            schemas.SchemaValidatorClsFactory(
                max_properties=4,
                min_properties=4,
            ),
            schemas.DictSchema
        ):
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Type[schemas.Schema],
            ) -> 'one_of_4':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class one_of_5(
            schemas.SchemaValidatorClsFactory(
                max_items=4,
                min_items=4,
            ),
            schemas.ListSchema
        ):
            _items = schemas.AnyTypeSchema
        
        
        class one_of_6(
            schemas.SchemaValidatorClsFactory(
                regex=[{
                    'pattern': r'^2020.*',  # noqa: E501
                }],
            ),
            schemas.DateTimeSchema
        ):
            pass
        return {
            'allOf': [
            ],
            'oneOf': [
                NumberWithValidations,
                Animal,
                one_of_2,
                one_of_3,
                one_of_4,
                one_of_5,
                one_of_6,
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, str, date, datetime, int, float, decimal.Decimal, None, list, tuple, bytes],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Type[schemas.Schema],
    ) -> 'ComposedOneOfDifferentTypes':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from petstore_api.model.animal import Animal
from petstore_api.model.number_with_validations import NumberWithValidations
