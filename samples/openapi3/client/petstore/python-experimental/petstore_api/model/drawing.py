# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from petstore_api.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Drawing(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    def mainShape(cls) -> typing.Type['Shape']:
        return Shape

    @classmethod
    @property
    def shapeOrNull(cls) -> typing.Type['ShapeOrNull']:
        return ShapeOrNull

    @classmethod
    @property
    def nullableShape(cls) -> typing.Type['NullableShape']:
        return NullableShape
    
    
    class shapes(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Shape']:
            return Shape

    @classmethod
    @property
    def _additional_properties(cls) -> typing.Type['Fruit']:
        return Fruit


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        mainShape: typing.Union['Shape', Unset] = unset,
        shapeOrNull: typing.Union['ShapeOrNull', Unset] = unset,
        nullableShape: typing.Union['NullableShape', Unset] = unset,
        shapes: typing.Union[shapes, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Drawing':
        return super().__new__(
            cls,
            *args,
            mainShape=mainShape,
            shapeOrNull=shapeOrNull,
            nullableShape=nullableShape,
            shapes=shapes,
            _configuration=_configuration,
            **kwargs,
        )

from petstore_api.model.fruit import Fruit
from petstore_api.model.nullable_shape import NullableShape
from petstore_api.model.shape import Shape
from petstore_api.model.shape_or_null import ShapeOrNull
