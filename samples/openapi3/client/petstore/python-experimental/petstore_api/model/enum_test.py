# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from petstore_api.model_utils import (  # noqa: F401
    AnyTypeSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    FloatSchema,
    DateSchema,
    DateTimeSchema,
    BoolSchema,
    FileSchema,
    class_property,
    cached_property,
    isoparse,
    none_type,
)

def lazy_import():
    from petstore_api.model.integer_enum import IntegerEnum
    from petstore_api.model.integer_enum_one_value import IntegerEnumOneValue
    from petstore_api.model.integer_enum_with_default_value import IntegerEnumWithDefaultValue
    from petstore_api.model.string_enum import StringEnum
    from petstore_api.model.string_enum_with_default_value import StringEnumWithDefaultValue
    globals()['IntegerEnum'] = IntegerEnum
    globals()['IntegerEnumOneValue'] = IntegerEnumOneValue
    globals()['IntegerEnumWithDefaultValue'] = IntegerEnumWithDefaultValue
    globals()['StringEnum'] = StringEnum
    globals()['StringEnumWithDefaultValue'] = StringEnumWithDefaultValue



class EnumTest(DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
    enum_string (str,): 
    enum_string_required (str,): 
    enum_integer (int,): 
    enum_number (): 
    stringEnum ( none_type,): 
    IntegerEnum (): 
    StringEnumWithDefaultValue (): 
    IntegerEnumWithDefaultValue (): 
    IntegerEnumOneValue (): 
    _additional_properties (Schema): the definition used for additional properties
        that are not defined in _properties
    """


    class enum_string(StrSchema):

        _enum_info_by_value = {
            "UPPER": ("UPPER", str),
            "lower": ("LOWER", str),
            "": ("EMPTY", str),
        }

        @class_property
        def UPPER(cls):
            return cls._enum_by_value["UPPER"].UPPER

        @class_property
        def LOWER(cls):
            return cls._enum_by_value["lower"].LOWER

        @class_property
        def EMPTY(cls):
            return cls._enum_by_value[""].EMPTY



    class enum_string_required(StrSchema):
        _required = True

        _enum_info_by_value = {
            "UPPER": ("UPPER", str),
            "lower": ("LOWER", str),
            "": ("EMPTY", str),
        }

        @class_property
        def UPPER(cls):
            return cls._enum_by_value["UPPER"].UPPER

        @class_property
        def LOWER(cls):
            return cls._enum_by_value["lower"].LOWER

        @class_property
        def EMPTY(cls):
            return cls._enum_by_value[""].EMPTY



    class enum_integer(IntSchema):

        _enum_info_by_value = {
            1: ("POSITIVE_1", int),
            -1: ("NEGATIVE_1", int),
        }

        @class_property
        def POSITIVE_1(cls):
            return cls._enum_by_value[1].POSITIVE_1

        @class_property
        def NEGATIVE_1(cls):
            return cls._enum_by_value[-1].NEGATIVE_1



    class enum_number(FloatSchema):

        _enum_info_by_value = {
            1.1: ("POSITIVE_1_PT_1", float),
            -1.2: ("NEGATIVE_1_PT_2", float),
        }

        @class_property
        def POSITIVE_1_PT_1(cls):
            return cls._enum_by_value[1.1].POSITIVE_1_PT_1

        @class_property
        def NEGATIVE_1_PT_2(cls):
            return cls._enum_by_value[-1.2].NEGATIVE_1_PT_2


    @cached_property
    def stringEnum():
        lazy_import()
        return StringEnum

    @cached_property
    def IntegerEnum():
        lazy_import()
        return IntegerEnum

    @cached_property
    def StringEnumWithDefaultValue():
        lazy_import()
        return StringEnumWithDefaultValue

    @cached_property
    def IntegerEnumWithDefaultValue():
        lazy_import()
        return IntegerEnumWithDefaultValue

    @cached_property
    def IntegerEnumOneValue():
        lazy_import()
        return IntegerEnumOneValue
    _additional_properties = AnyTypeSchema

