# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class Pet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Pet object that needs to be added to the store
    """
    _required_property_names = {
        "photoUrls",
        "name",
    }
    id = schemas.Int64Schema

    @classmethod
    @property
    def category(cls) -> typing.Type['Category']:
        return Category
    name = schemas.StrSchema
    
    
    class photoUrls(
        schemas.ListSchema
    ):
        _items = schemas.StrSchema
    
    
    class tags(
        schemas.ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Tag']:
            return Tag
    
    
    class status(
        schemas.SchemaEnumMakerClsFactory(
            enum_value_to_name={
                "available": "AVAILABLE",
                "pending": "PENDING",
                "sold": "SOLD",
            }
        ),
        schemas.StrSchema
    ):
        
        @classmethod
        @property
        def AVAILABLE(cls):
            return cls("available")
        
        @classmethod
        @property
        def PENDING(cls):
            return cls("pending")
        
        @classmethod
        @property
        def SOLD(cls):
            return cls("sold")


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        photoUrls: photoUrls,
        name: name,
        id: typing.Union[id, schemas.Unset] = schemas.unset,
        category: typing.Union['Category', schemas.Unset] = schemas.unset,
        tags: typing.Union[tags, schemas.Unset] = schemas.unset,
        status: typing.Union[status, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Type[schemas.Schema],
    ) -> 'Pet':
        return super().__new__(
            cls,
            *args,
            photoUrls=photoUrls,
            name=name,
            id=id,
            category=category,
            tags=tags,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from petstore_api.model.category import Category
from petstore_api.model.tag import Tag
