# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class File(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Must be named `File` for test.
    """


    class MetaOapg:
        class properties:
            sourceURI = schemas.StrSchema
            __annotations__ = {
                "sourceURI": sourceURI,
            }
    
    sourceURI: typing.Union[MetaOapg.properties.sourceURI, schemas.Unset]
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["sourceURI"]) -> typing.Union[MetaOapg.properties.sourceURI, schemas.Unset]: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> typing.Union[schemas.AnyTypeSchema, schemas.Unset]: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["sourceURI", ], str]):
        # dict_instance[name] accessor
        if not hasattr(self.MetaOapg, 'properties') or name not in self.MetaOapg.properties.__annotations__:
            return super().__getitem__(name)
        try:
            return super().__getitem__(name)
        except KeyError:
            return schemas.unset
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sourceURI: typing.Union[MetaOapg.properties.sourceURI, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'File':
        return super().__new__(
            cls,
            *args,
            sourceURI=sourceURI,
            _configuration=_configuration,
            **kwargs,
        )
