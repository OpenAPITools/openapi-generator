# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401


class FormatTest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    _required_property_names = {
        "date",
        "number",
        "password",
        "byte",
    }
    
    
    class integer(
        schemas.IntSchema
    ):
        _inclusive_maximum=100
        _inclusive_minimum=10
        _multiple_of=2
        pass
    int32 = schemas.Int32Schema
    
    
    class int32withValidations(
        schemas.Int32Schema
    ):
        _inclusive_maximum=200
        _inclusive_minimum=20
        pass
    int64 = schemas.Int64Schema
    
    
    class number(
        schemas.NumberSchema
    ):
        _inclusive_maximum=543.2
        _inclusive_minimum=32.1
        _multiple_of=32.5
        pass
    
    
    class _float(
        schemas.Float32Schema
    ):
        _inclusive_maximum=987.6
        _inclusive_minimum=54.3
        pass
    locals()["float"] = _float
    del locals()['_float']
    """
    NOTE:
    openapi/json-schema allows properties to have invalid python names
    The above local assignment allows the code to keep those invalid python names
    This allows properties to have names like 'some-name', '1 bad name'
    Properties with these names are omitted from the __new__ + _from_openapi_data signatures
    - __new__ these properties can be passed in as **kwargs
    - _from_openapi_data these are passed in in a dict in the first positional argument *arg
    If the property is required and was not passed in, an exception will be thrown
    """
    float32 = schemas.Float32Schema
    
    
    class double(
        schemas.Float64Schema
    ):
        _inclusive_maximum=123.4
        _inclusive_minimum=67.8
        pass
    float64 = schemas.Float64Schema
    
    
    class arrayWithUniqueItems(
        schemas.ListSchema
    ):
        _unique_items=True
        _items = schemas.NumberSchema
    
    
    class string(
        schemas.StrSchema
    ):
        _regex=[{
            'pattern': r'[a-z]',  # noqa: E501
            'flags': (
                re.IGNORECASE
            )
        }]
        pass
    byte = schemas.StrSchema
    binary = schemas.BinarySchema
    date = schemas.DateSchema
    dateTime = schemas.DateTimeSchema
    uuid = schemas.UUIDSchema
    uuidNoExample = schemas.UUIDSchema
    
    
    class password(
        schemas.StrSchema
    ):
        _max_length=64
        _min_length=10
        pass
    
    
    class pattern_with_digits(
        schemas.StrSchema
    ):
        _regex=[{
            'pattern': r'^\d{10}$',  # noqa: E501
        }]
        pass
    
    
    class pattern_with_digits_and_delimiter(
        schemas.StrSchema
    ):
        _regex=[{
            'pattern': r'^image_\d{1,3}$',  # noqa: E501
            'flags': (
                re.IGNORECASE
            )
        }]
        pass
    noneProp = schemas.NoneSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        date: date,
        number: number,
        password: password,
        byte: byte,
        integer: typing.Union[integer, schemas.Unset] = schemas.unset,
        int32: typing.Union[int32, schemas.Unset] = schemas.unset,
        int32withValidations: typing.Union[int32withValidations, schemas.Unset] = schemas.unset,
        int64: typing.Union[int64, schemas.Unset] = schemas.unset,
        float32: typing.Union[float32, schemas.Unset] = schemas.unset,
        double: typing.Union[double, schemas.Unset] = schemas.unset,
        float64: typing.Union[float64, schemas.Unset] = schemas.unset,
        arrayWithUniqueItems: typing.Union[arrayWithUniqueItems, schemas.Unset] = schemas.unset,
        string: typing.Union[string, schemas.Unset] = schemas.unset,
        binary: typing.Union[binary, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[dateTime, schemas.Unset] = schemas.unset,
        uuid: typing.Union[uuid, schemas.Unset] = schemas.unset,
        uuidNoExample: typing.Union[uuidNoExample, schemas.Unset] = schemas.unset,
        pattern_with_digits: typing.Union[pattern_with_digits, schemas.Unset] = schemas.unset,
        pattern_with_digits_and_delimiter: typing.Union[pattern_with_digits_and_delimiter, schemas.Unset] = schemas.unset,
        noneProp: typing.Union[noneProp, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Type[schemas.Schema],
    ) -> 'FormatTest':
        return super().__new__(
            cls,
            *args,
            date=date,
            number=number,
            password=password,
            byte=byte,
            integer=integer,
            int32=int32,
            int32withValidations=int32withValidations,
            int64=int64,
            float32=float32,
            double=double,
            float64=float64,
            arrayWithUniqueItems=arrayWithUniqueItems,
            string=string,
            binary=binary,
            dateTime=dateTime,
            uuid=uuid,
            uuidNoExample=uuidNoExample,
            pattern_with_digits=pattern_with_digits,
            pattern_with_digits_and_delimiter=pattern_with_digits_and_delimiter,
            noneProp=noneProp,
            _configuration=_configuration,
            **kwargs,
        )
