# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from petstore_api import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401

from . import path

# query params
UsernameSchema = schemas.StrSchema
PasswordSchema = schemas.StrSchema
request_query_username = api_client.QueryParameter(
    name="username",
    style=api_client.ParameterStyle.FORM,
    schema=UsernameSchema,
    required=True,
    explode=True,
)
request_query_password = api_client.QueryParameter(
    name="password",
    style=api_client.ParameterStyle.FORM,
    schema=PasswordSchema,
    required=True,
    explode=True,
)
XRateLimitSchema = schemas.Int32Schema
x_rate_limit_parameter = api_client.HeaderParameter(
    name="X-Rate-Limit",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRateLimitSchema,
)
XExpiresAfterSchema = schemas.DateTimeSchema
x_expires_after_parameter = api_client.HeaderParameter(
    name="X-Expires-After",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XExpiresAfterSchema,
)
SchemaFor200ResponseBodyApplicationXml = schemas.StrSchema
SchemaFor200ResponseBodyApplicationJson = schemas.StrSchema
ResponseHeadersFor200 = typing.TypedDict(
    'ResponseHeadersFor200',
    {
        'X-Rate-Limit': XRateLimitSchema,
        'X-Expires-After': XExpiresAfterSchema,
    }
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationXml,
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor200


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
    headers=[
        x_rate_limit_parameter,
        x_expires_after_parameter,
    ]
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
}
_all_accept_content_types = (
    'application/xml',
    'application/json',
)


