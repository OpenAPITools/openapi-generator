# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from petstore_api import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401
import uuid  # noqa: F401

from petstore_api import schemas  # noqa: F401

from . import path

# body param


class SchemaForRequestBodyApplicationXWwwFormUrlencoded(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "number",
            "pattern_without_delimiter",
            "byte",
            "double",
        }
        class properties:
            
            
            class integer(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 100
                    inclusive_minimum = 10
            
            
            class int32(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 200
                    inclusive_minimum = 20
            int64 = schemas.Int64Schema
            
            
            class number(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 543.2
                    inclusive_minimum = 32.1
            
            
            class _float(
                schemas.Float32Schema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 987.6
            locals()["float"] = _float
            del locals()['_float']
            """
            NOTE:
            openapi/json-schema allows properties to have invalid python names
            The above local assignment allows the code to keep those invalid python names
            This allows properties to have names like 'some-name', '1 bad name'
            Properties with these names are omitted from the __new__ + _from_openapi_data signatures
            - __new__ these properties can be passed in as **kwargs
            - _from_openapi_data these are passed in in a dict in the first positional argument *arg
            If the property is required and was not passed in, an exception will be thrown
            """
            
            
            class double(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 123.4
                    inclusive_minimum = 67.8
            
            
            class string(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'[a-z]',  # noqa: E501
                        'flags': (
                            re.IGNORECASE
                        )
                    }]
            
            
            class pattern_without_delimiter(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z].*',  # noqa: E501
                    }]
            byte = schemas.StrSchema
            binary = schemas.BinarySchema
            date = schemas.DateSchema
            dateTime = schemas.DateTimeSchema
            
            
            class password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    min_length = 10
            callback = schemas.StrSchema
        additional_properties = schemas.AnyTypeSchema
    
    number: MetaOapg.properties.number
    pattern_without_delimiter: MetaOapg.properties.pattern_without_delimiter
    byte: MetaOapg.properties.byte
    double: MetaOapg.properties.double
    integer: MetaOapg.properties.integer
    int32: MetaOapg.properties.int32
    int64: MetaOapg.properties.int64
    string: MetaOapg.properties.string
    binary: MetaOapg.properties.binary
    date: MetaOapg.properties.date
    dateTime: MetaOapg.properties.dateTime
    password: MetaOapg.properties.password
    callback: MetaOapg.properties.callback

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, float, ],
        pattern_without_delimiter: typing.Union[MetaOapg.properties.pattern_without_delimiter, str, ],
        byte: typing.Union[MetaOapg.properties.byte, str, ],
        double: typing.Union[MetaOapg.properties.double, float, ],
        integer: typing.Union[MetaOapg.properties.integer, int, schemas.Unset] = schemas.unset,
        int32: typing.Union[MetaOapg.properties.int32, int, schemas.Unset] = schemas.unset,
        int64: typing.Union[MetaOapg.properties.int64, int, schemas.Unset] = schemas.unset,
        string: typing.Union[MetaOapg.properties.string, str, schemas.Unset] = schemas.unset,
        binary: typing.Union[MetaOapg.properties.binary, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, date, str, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[MetaOapg.properties.dateTime, datetime, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        callback: typing.Union[MetaOapg.properties.callback, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes, ],
    ) -> 'SchemaForRequestBodyApplicationXWwwFormUrlencoded':
        return super().__new__(
            cls,
            *args,
            number=number,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            double=double,
            integer=integer,
            int32=int32,
            int64=int64,
            string=string,
            binary=binary,
            date=date,
            dateTime=dateTime,
            password=password,
            callback=callback,
            _configuration=_configuration,
            **kwargs,
        )


request_body_body = api_client.RequestBody(
    content={
        'application/x-www-form-urlencoded': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationXWwwFormUrlencoded),
    },
)
_auth = [
    'http_basic_test',
]


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_status_code_to_response = {
    '400': _response_for_400,
    '404': _response_for_404,
}


class BaseApi(api_client.Api):

    def _endpoint_parameters(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict, schemas.Unset] = schemas.unset,
        content_type: str = 'application/x-www-form-urlencoded',
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_body.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class EndpointParameters(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def endpoint_parameters(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict, schemas.Unset] = schemas.unset,
        content_type: str = 'application/x-www-form-urlencoded',
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._endpoint_parameters(
            body=body,
            content_type=content_type,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict, schemas.Unset] = schemas.unset,
        content_type: str = 'application/x-www-form-urlencoded',
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._endpoint_parameters(
            body=body,
            content_type=content_type,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


