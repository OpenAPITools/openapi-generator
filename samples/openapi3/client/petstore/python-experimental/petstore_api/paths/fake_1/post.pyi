# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from petstore_api import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401

from . import path

# body param


class SchemaForRequestBodyApplicationXWwwFormUrlencoded(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "number",
            "pattern_without_delimiter",
            "byte",
            "double",
        }
        class properties:
            
            
            class integer(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 100
                    inclusive_minimum = 10
            
            
            class int32(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 200
                    inclusive_minimum = 20
            int64 = schemas.Int64Schema
            
            
            class number(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 543.2
                    inclusive_minimum = 32.1
            
            
            class float(
                schemas.Float32Schema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 987.6
            
            
            class double(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 123.4
                    inclusive_minimum = 67.8
            
            
            class string(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'[a-z]',  # noqa: E501
                        'flags': (
                            re.IGNORECASE
                        )
                    }]
            
            
            class pattern_without_delimiter(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z].*',  # noqa: E501
                    }]
            byte = schemas.StrSchema
            binary = schemas.BinarySchema
            date = schemas.DateSchema
            dateTime = schemas.DateTimeSchema
            
            
            class password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    min_length = 10
            callback = schemas.StrSchema
            __annotations__ = {
                "integer": integer,
                "int32": int32,
                "int64": int64,
                "number": number,
                "float": float,
                "double": double,
                "string": string,
                "pattern_without_delimiter": pattern_without_delimiter,
                "byte": byte,
                "binary": binary,
                "date": date,
                "dateTime": dateTime,
                "password": password,
                "callback": callback,
            }
        additional_properties = schemas.AnyTypeSchema
    
    number: MetaOapg.properties.number
    pattern_without_delimiter: MetaOapg.properties.pattern_without_delimiter
    byte: MetaOapg.properties.byte
    double: MetaOapg.properties.double
    integer: MetaOapg.properties.integer
    int32: MetaOapg.properties.int32
    int64: MetaOapg.properties.int64
    float: MetaOapg.properties.float
    string: MetaOapg.properties.string
    binary: MetaOapg.properties.binary
    date: MetaOapg.properties.date
    dateTime: MetaOapg.properties.dateTime
    password: MetaOapg.properties.password
    callback: MetaOapg.properties.callback
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["pattern_without_delimiter"]) -> MetaOapg.properties.pattern_without_delimiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["byte"]) -> MetaOapg.properties.byte: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["double"]) -> MetaOapg.properties.double: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["integer"]) -> MetaOapg.properties.integer: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["int32"]) -> MetaOapg.properties.int32: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["int64"]) -> MetaOapg.properties.int64: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["float"]) -> MetaOapg.properties.float: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["string"]) -> MetaOapg.properties.string: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["binary"]) -> MetaOapg.properties.binary: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["dateTime"]) -> MetaOapg.properties.dateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["callback"]) -> MetaOapg.properties.callback: ...
    
    def __getitem__(self, name: str) -> MetaOapg.additional_properties:
        # dict_instance[name] accessor
        return super().__getitem__(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, float, ],
        pattern_without_delimiter: typing.Union[MetaOapg.properties.pattern_without_delimiter, str, ],
        byte: typing.Union[MetaOapg.properties.byte, str, ],
        double: typing.Union[MetaOapg.properties.double, float, ],
        integer: typing.Union[MetaOapg.properties.integer, int, schemas.Unset] = schemas.unset,
        int32: typing.Union[MetaOapg.properties.int32, int, schemas.Unset] = schemas.unset,
        int64: typing.Union[MetaOapg.properties.int64, int, schemas.Unset] = schemas.unset,
        float: typing.Union[MetaOapg.properties.float, float, schemas.Unset] = schemas.unset,
        string: typing.Union[MetaOapg.properties.string, str, schemas.Unset] = schemas.unset,
        binary: typing.Union[MetaOapg.properties.binary, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, date, str, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[MetaOapg.properties.dateTime, datetime, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        callback: typing.Union[MetaOapg.properties.callback, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes, ],
    ) -> 'SchemaForRequestBodyApplicationXWwwFormUrlencoded':
        return super().__new__(
            cls,
            *args,
            number=number,
            pattern_without_delimiter=pattern_without_delimiter,
            byte=byte,
            double=double,
            integer=integer,
            int32=int32,
            int64=int64,
            float=float,
            string=string,
            binary=binary,
            date=date,
            dateTime=dateTime,
            password=password,
            callback=callback,
            _configuration=_configuration,
            **kwargs,
        )
_auth = [
    'http_basic_test',
]


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_status_code_to_response = {
    '400': _response_for_400,
    '404': _response_for_404,
}


