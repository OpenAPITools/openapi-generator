# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from petstore_api import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from petstore_api import schemas  # noqa: F401

from petstore_api.model.pet import Pet

# query params


class StatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.SchemaEnumMakerClsFactory(
                enum_value_to_name={
                    "available": "AVAILABLE",
                    "pending": "PENDING",
                    "sold": "SOLD",
                }
            ),
            schemas.StrSchema
        ):
            
            @classmethod
            @property
            def AVAILABLE(cls):
                return cls("available")
            
            @classmethod
            @property
            def PENDING(cls):
                return cls("pending")
            
            @classmethod
            @property
            def SOLD(cls):
                return cls("sold")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class SchemaFor200ResponseBodyApplicationXml(
    schemas.ListSchema
):


    class MetaOapg:

        @classmethod
        @property
        def items(cls) -> typing.Type['Pet']:
            return Pet

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['Pet'], typing.List['Pet']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationXml':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'Pet':
        return super().__getitem__(i)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:

        @classmethod
        @property
        def items(cls) -> typing.Type['Pet']:
            return Pet

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['Pet'], typing.List['Pet']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'Pet':
        return super().__getitem__(i)
