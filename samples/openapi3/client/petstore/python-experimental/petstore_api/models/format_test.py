# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401
import nulltype  # noqa: F401

from petstore_api.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)


class FormatTest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('number',): {
            'inclusive_maximum': 543.2,
            'inclusive_minimum': 32.1,
        },
        ('password',): {
            'max_length': 64,
            'min_length': 10,
        },
        ('integer',): {
            'inclusive_maximum': 100,
            'inclusive_minimum': 10,
        },
        ('int32',): {
            'inclusive_maximum': 200,
            'inclusive_minimum': 20,
        },
        ('float',): {
            'inclusive_maximum': 987.6,
            'inclusive_minimum': 54.3,
        },
        ('double',): {
            'inclusive_maximum': 123.4,
            'inclusive_minimum': 67.8,
        },
        ('string',): {
            'regex': {
                'pattern': r'[a-z]',  # noqa: E501
                'flags': (re.IGNORECASE)
            },
        },
        ('pattern_with_digits',): {
            'regex': {
                'pattern': r'^\d{10}$',  # noqa: E501
            },
        },
        ('pattern_with_digits_and_delimiter',): {
            'regex': {
                'pattern': r'^image_\d{1,3}$',  # noqa: E501
                'flags': (re.IGNORECASE)
            },
        },
    }

    additional_properties_type = None

    @staticmethod
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'number': (float,),  # noqa: E501
            'byte': (str,),  # noqa: E501
            'date': (date,),  # noqa: E501
            'password': (str,),  # noqa: E501
            'integer': (int,),  # noqa: E501
            'int32': (int,),  # noqa: E501
            'int64': (int,),  # noqa: E501
            'float': (float,),  # noqa: E501
            'double': (float,),  # noqa: E501
            'string': (str,),  # noqa: E501
            'binary': (file_type,),  # noqa: E501
            'date_time': (datetime,),  # noqa: E501
            'uuid': (str,),  # noqa: E501
            'pattern_with_digits': (str,),  # noqa: E501
            'pattern_with_digits_and_delimiter': (str,),  # noqa: E501
        }

    @staticmethod
    def discriminator():
        return None

    attribute_map = {
        'number': 'number',  # noqa: E501
        'byte': 'byte',  # noqa: E501
        'date': 'date',  # noqa: E501
        'password': 'password',  # noqa: E501
        'integer': 'integer',  # noqa: E501
        'int32': 'int32',  # noqa: E501
        'int64': 'int64',  # noqa: E501
        'float': 'float',  # noqa: E501
        'double': 'double',  # noqa: E501
        'string': 'string',  # noqa: E501
        'binary': 'binary',  # noqa: E501
        'date_time': 'dateTime',  # noqa: E501
        'uuid': 'uuid',  # noqa: E501
        'pattern_with_digits': 'pattern_with_digits',  # noqa: E501
        'pattern_with_digits_and_delimiter': 'pattern_with_digits_and_delimiter',  # noqa: E501
    }

    @staticmethod
    def _composed_schemas():
        return None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
    ])

    def __init__(self, number, byte, date, password, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """format_test.FormatTest - a model defined in OpenAPI

        Args:
            number (float):
            byte (str):
            date (date):
            password (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            integer (int): [optional]  # noqa: E501
            int32 (int): [optional]  # noqa: E501
            int64 (int): [optional]  # noqa: E501
            float (float): [optional]  # noqa: E501
            double (float): [optional]  # noqa: E501
            string (str): [optional]  # noqa: E501
            binary (file_type): [optional]  # noqa: E501
            date_time (datetime): [optional]  # noqa: E501
            uuid (str): [optional]  # noqa: E501
            pattern_with_digits (str): A string that is a 10 digit number. Can have leading zeros.. [optional]  # noqa: E501
            pattern_with_digits_and_delimiter (str): A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.. [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        self.number = number
        self.byte = byte
        self.date = date
        self.password = password
        for var_name, var_value in six.iteritems(kwargs):
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
