# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import petstore_api


class TestShape(unittest.TestCase):
    """Shape unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testShape(self):
        """Test Shape"""
        equilateral_triangle = petstore_api.Triangle(
            shape_type="Triangle",
            triangle_type="EquilateralTriangle"
        )
        assert isinstance(equilateral_triangle, petstore_api.EquilateralTriangle)

        isosceles_triangle = petstore_api.Triangle(
            shape_type="Triangle",
            triangle_type="IsoscelesTriangle"
        )
        assert isinstance(isosceles_triangle, petstore_api.IsoscelesTriangle)

        scalene_triangle = petstore_api.Triangle(
            shape_type="Triangle",
            triangle_type="ScaleneTriangle"
        )
        assert isinstance(scalene_triangle, petstore_api.ScaleneTriangle)

        complex_quadrilateral = petstore_api.Shape(
            shape_type="Quadrilateral",
            quadrilateral_type="ComplexQuadrilateral"
        )
        assert isinstance(complex_quadrilateral, petstore_api.ComplexQuadrilateral)

        simple_quadrilateral = petstore_api.Shape(
            shape_type="Quadrilateral",
            quadrilateral_type="SimpleQuadrilateral"
        )
        assert isinstance(simple_quadrilateral, petstore_api.SimpleQuadrilateral)

        # invalid shape_type (first discriminator)
        err_msg = ("Cannot deserialize input data due to invalid discriminator "
            "value. The OpenAPI document has no mapping for discriminator "
            "property '{}'='{}' at path: ()"
        )
        with self.assertRaisesRegexp(
            petstore_api.ApiValueError,
            err_msg.format("shapeType", "Circle")
        ):
            petstore_api.Shape(shape_type="Circle")

        # invalid quadrilateral_type (second discriminator)
        with self.assertRaisesRegexp(
            petstore_api.ApiValueError,
            err_msg.format("quadrilateralType", "Triangle")
        ):
            petstore_api.Shape(
                shape_type="Quadrilateral",
                quadrilateral_type="Triangle"
            )


if __name__ == '__main__':
    unittest.main()
