# coding: utf-8

"""
    openapi 3.1.0 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft2020-12  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unit_test_api import schemas  # noqa: F401


class UrnBaseUriWithFComponent(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            definitions = schemas.AnyTypeSchema
            dependencies = schemas.AnyTypeSchema
            
            
            class recursive_anchor(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'recursive_anchor':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class recursive_ref(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uri-reference'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'recursive_ref':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "definitions": definitions,
                "dependencies": dependencies,
                "$recursiveAnchor": recursive_anchor,
                "$recursiveRef": recursive_ref,
            }

    
    @typing.overload
    def __getitem__(self, name: typing.Literal["definitions"]) -> MetaOapg.properties.definitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["$recursiveAnchor"]) -> MetaOapg.properties.recursive_anchor: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["$recursiveRef"]) -> MetaOapg.properties.recursive_ref: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["definitions", "dependencies", "$recursiveAnchor", "$recursiveRef", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["definitions"]) -> typing.Union[MetaOapg.properties.definitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["dependencies"]) -> typing.Union[MetaOapg.properties.dependencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["$recursiveAnchor"]) -> typing.Union[MetaOapg.properties.recursive_anchor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["$recursiveRef"]) -> typing.Union[MetaOapg.properties.recursive_ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing.Literal["definitions", "dependencies", "$recursiveAnchor", "$recursiveRef", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, ],
        definitions: typing.Union[MetaOapg.properties.definitions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, schemas.Unset] = schemas.unset,
        dependencies: typing.Union[MetaOapg.properties.dependencies, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UrnBaseUriWithFComponent':
        return super().__new__(
            cls,
            *args,
            definitions=definitions,
            dependencies=dependencies,
            _configuration=_configuration,
            **kwargs,
        )
