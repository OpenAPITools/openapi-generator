# coding: utf-8

"""
    openapi 3.1.0 sample spec

    sample spec for testing openapi functionality, built from json schema tests for draft2020-12  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unit_test_api import schemas  # noqa: F401


class PropertiesWhoseNamesAreJavascriptObjectPropertyNames(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            __proto__ = schemas.AnyTypeSchema
            
            
            class toString(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        length = schemas.AnyTypeSchema
                        __annotations__ = {
                            "length": length,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing.Literal["length"]) -> MetaOapg.properties.length: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing.Literal["length", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing.Literal["length", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, ],
                    length: typing.Union[MetaOapg.properties.length, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'toString':
                    return super().__new__(
                        cls,
                        *args,
                        length=length,
                        _configuration=_configuration,
                        **kwargs,
                    )
            constructor = schemas.AnyTypeSchema
            __annotations__ = {
                "__proto__": __proto__,
                "toString": toString,
                "constructor": constructor,
            }

    
    @typing.overload
    def __getitem__(self, name: typing.Literal["__proto__"]) -> MetaOapg.properties.__proto__: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["toString"]) -> MetaOapg.properties.toString: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["constructor"]) -> MetaOapg.properties.constructor: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["__proto__", "toString", "constructor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["__proto__"]) -> typing.Union[MetaOapg.properties.__proto__, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["toString"]) -> typing.Union[MetaOapg.properties.toString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["constructor"]) -> typing.Union[MetaOapg.properties.constructor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing.Literal["__proto__", "toString", "constructor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, ],
        __proto__: typing.Union[MetaOapg.properties.__proto__, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, schemas.Unset] = schemas.unset,
        toString: typing.Union[MetaOapg.properties.toString, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, schemas.Unset] = schemas.unset,
        constructor: typing.Union[MetaOapg.properties.constructor, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PropertiesWhoseNamesAreJavascriptObjectPropertyNames':
        return super().__new__(
            cls,
            *args,
            __proto__=__proto__,
            toString=toString,
            constructor=constructor,
            _configuration=_configuration,
            **kwargs,
        )
