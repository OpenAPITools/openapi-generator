{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} enum {{classname}}: {{dataType}}, {{#useVapor}}Content, Hashable{{/useVapor}}{{^useVapor}}Codable{{/useVapor}}, CaseIterable{{^generateFrozenEnums}}{{#isInteger}}, CaseIterableDefaultsLast{{/isInteger}}{{#isFloat}}, CaseIterableDefaultsLast{{/isFloat}}{{#isDouble}}, CaseIterableDefaultsLast{{/isDouble}}{{#isString}}, CaseIterableDefaultsLast{{/isString}}{{/generateFrozenEnums}} {
{{#allowableValues}}
{{#enumVars}}
    case {{{name}}} = {{{value}}}
{{/enumVars}}
{{/allowableValues}}
{{^generateFrozenEnums}}
    // This case is a catch-all generated by OpenAPI such that the enum is "non-frozen".
    // If new enum cases are added that are unknown to the spec/client, they are safely
    // decoded to this case. The raw value of this case is a dummy value that attempts
    // to avoids collisions with previously specified cases.
{{#isString}}
    case unknownDefaultOpenAPI = "unknown_default_open_api"
{{/isString}}
{{#isNumeric}}
    //
    // 192, used to calculate the raw value, was the Swift Evolution proposal for
    // frozen/non-frozen enums.
    // [SE-0192](https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md)
    //
{{/isNumeric}}
{{#isInteger}}
    case unknownDefaultOpenAPI = -11184809 // Int.min / 192
{{/isInteger}}
{{#isDouble}}
    case unknownDefaultOpenAPI = -11184809 // Int.min / 192
{{/isDouble}}
{{#isFloat}}
    case unknownDefaultOpenAPI = -11184809 // Int.min / 192
{{/isFloat}}
{{/generateFrozenEnums}}
}