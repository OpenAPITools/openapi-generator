package {{package}}

{{#imports}}import {{import}}
{{/imports}}
import io.vertx.core.Vertx
import io.vertx.core.json.JsonObject
import com.github.wooyme.openapi.Response
import io.vertx.ext.web.api.OperationRequest
import io.vertx.kotlin.ext.web.api.contract.openapi3.OpenAPI3RouterFactory
import io.vertx.serviceproxy.ServiceBinder
import io.vertx.ext.web.handler.CookieHandler
import io.vertx.ext.web.handler.SessionHandler
import io.vertx.ext.web.sstore.LocalSessionStore
import java.util.List
import java.util.Map

interface {{classname}}  {
    fun init(vertx:Vertx,config:JsonObject)
{{#operations}}
    {{#operation}}
    /* {{operationId}}
     * {{summary}} */
    suspend fun {{operationId}}({{#allParams}}{{paramName}}:{{{dataType}}}{{^isRequired}}?{{/isRequired}},{{/allParams}}context:OperationRequest):Response<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>
    {{/operation}}
{{/operations}}
    companion object {
        const val address = "{{classname}}-service"
        suspend fun createRouterFactory(vertx: Vertx,path:String,impl:{{classname}}): io.vertx.ext.web.api.contract.openapi3.OpenAPI3RouterFactory {
            val routerFactory = OpenAPI3RouterFactory.createAwait(vertx,path)
            ServiceBinder(vertx)
                .setAddress(address)
                .register({{classname}}::class.java,impl)
            routerFactory.addGlobalHandler(CookieHandler.create())
            routerFactory.addGlobalHandler(SessionHandler.create(LocalSessionStore.create(vertx)))
            routerFactory.mountServiceInterface({{classname}}::class.java, address)
            return routerFactory
        }
    }
}
