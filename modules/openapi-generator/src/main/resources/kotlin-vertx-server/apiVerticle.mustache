package {{package}}

import io.vertx.core.AbstractVerticle
import io.vertx.core.eventbus.Message
import io.vertx.core.json.Json
import io.vertx.core.json.JsonArray
import io.vertx.core.json.JsonObject
import com.google.gson.Gson
import io.vertx.core.logging.Logger
import io.vertx.core.logging.LoggerFactory
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import io.vertx.kotlin.coroutines.dispatcher
import com.github.wooyme.openapi.SwaggerRouter
import io.swagger.parser.OpenAPIParser
import io.swagger.v3.oas.models.OpenAPI
import io.vertx.core.Vertx
import io.vertx.ext.web.Router
import java.nio.charset.Charset
import com.github.wooyme.openapi.Response

{{#imports}}import {{import}}
{{/imports}}

class {{classname}}Verticle(private val service:{{classname}}):AbstractVerticle() {
    companion object {
        fun register(vertx:Vertx,file:String,router:Router) {
            val vertxFileSystem = vertx.fileSystem()
            val authBuffer = vertxFileSystem.readFileBlocking(file)
            val result = OpenAPIParser().readContents(authBuffer.toString(Charset.forName("utf-8")), null, null).openAPI
            SwaggerRouter.swaggerRouter(router, result, vertx.eventBus())
        }
    }
    private val logger = LoggerFactory.getLogger(this::class.java)

    override fun start() {
        super.start()
        service.init(vertx,config())
        {{#operations}}{{#operation}}
        //Consumer for {{#vendorExtensions}}{{operationId}}{{/vendorExtensions}}
        vertx.eventBus().consumer<JsonObject>({{#vendorExtensions}}"{{operationId}}"{{/vendorExtensions}}).handler { message->
            try{
                val serviceId = "{{#vendorExtensions}}{{operationId}}{{/vendorExtensions}}"
        {{#hasParams}}
            {{#allParams}}
                {{#isListContainer}}
                val {{paramName}}Param = message.body().getJsonArray("{{^isBodyParam}}{{baseName}}{{/isBodyParam}}{{#isBodyParam}}body{{/isBodyParam}}")
                    {{#required}}
                if({{paramName}}Param == null) {
                    manageError(message,  {{classname}}Error(400, "{{baseName}} is required"), serviceId)
                    return@handler
                }
                val {{paramName}}:{{{dataType}}} = Gson().fromJson({{paramName}}Param.encode()
                            , object : TypeToken<kotlin.List<{{{baseType}}}>>(){}.type)
                    {{/required}}
                    {{^required}}
                val {{paramName}}:{{{dataType}}}? = if({{paramName}}Param == null) {{#defaultValue}}{{defaultValue}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}
                    else Gson().fromJson({{paramName}}Param.encode(),
                            , object : TypeToken<kotlin.List<{{{baseType}}}>>(){}.type)
                    {{/required}}
                {{/isListContainer}}
                {{^isListContainer}}
                    {{#isPrimitiveType}}
                val {{paramName}}Param = message.body().getString("{{^isBodyParam}}{{baseName}}{{/isBodyParam}}{{#isBodyParam}}body{{/isBodyParam}}")
                        {{#required}}
                if({{paramName}}Param == null) {
                    manageError(message,  {{classname}}Error(400, "{{baseName}} is required"), serviceId)
                    return@handler
                }
                        {{/required}}
                        {{#isString}}
                val {{paramName}} = {{paramName}}Param
                        {{/isString}}
                        {{#isNumber}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.toBigDecimal()
                        {{/isNumber}}
                        {{#isLong}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.toLong()
                        {{/isLong}}
                        {{#isInteger}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.toInt()
                        {{/isInteger}}
                        {{#isFloat}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.toFloat()
                        {{/isFloat}}
                        {{#isDouble}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.toDouble()
                        {{/isDouble}}
                        {{#isBoolean}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.toBoolean()
                        {{/isBoolean}}
                        {{#isFreeFormObject}}
                val {{paramName}} = {{paramName}}Param{{^required}}?{{/required}}.let{ try { JsonObject({{paramName}}Param) }catch( e:Exception ){ {{paramName}}Param } }
                        {{/isFreeFormObject}}
                    {{/isPrimitiveType}}
                    {{^isPrimitiveType}}
                val {{paramName}}Param = message.body().getJsonObject("{{^isBodyParam}}{{baseName}}{{/isBodyParam}}{{#isBodyParam}}body{{/isBodyParam}}")
                        {{#required}}
                if ({{paramName}}Param == null) {
                    manageError(message,  {{classname}}Error(400, "{{baseName}} is required"), serviceId)
                    return@handler
                }
                val {{paramName}} = Gson().fromJson({{paramName}}Param.encode(), {{{dataType}}}::class.java)
                        {{/required}}
                        {{^required}}
                val {{paramName}} = if({{paramName}}Param ==null) null else Gson().fromJson({{paramName}}Param.encode(), {{{dataType}}}::class.java)
                        {{/required}}
                    {{/isPrimitiveType}}
                {{/isListContainer}}
            {{/allParams}}
        {{/hasParams}}
                val session = message.body().getJsonObject("session")
                GlobalScope.launch(vertx.dispatcher()){
                    val result = service.{{operationId}}({{#hasParams}}{{#allParams}}{{paramName}},{{/allParams}}{{/hasParams}}session)
                    val json = JsonObject()
                    if(result.session!=null){
                        json.put("session",result.session)
                    }
        {{#returnType}}
                    json.put("body",Json.encode(result.body))
        {{/returnType}}
                    message.reply(json)
                }.invokeOnCompletion {
                    if(it!=null) manageError(message, it, "{{#vendorExtensions}}{{operationId}}{{/vendorExtensions}}")
                }
            }catch(e:Exception){
                logger.error("Unexpected error in {{#vendorExtensions}}{{operationId}}{{/vendorExtensions}}",e)
            }
        }
        {{/operation}}{{/operations}}

    }

    private fun manageError(message: Message<JsonObject>, cause: Throwable, serviceName: String) {
        var code = {{classname}}Error.INTERNAL_SERVER_ERROR.statusCode
        var statusMessage = {{classname}}Error.INTERNAL_SERVER_ERROR.statusMessage
        if (cause is {{classname}}Error) {
            code = cause.statusCode
            statusMessage = cause.statusMessage
        } else {
            logger.error(serviceName, cause)
        }
        message.fail(code, statusMessage)
    }
}