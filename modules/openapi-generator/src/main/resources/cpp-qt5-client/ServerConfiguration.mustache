{{>licenseInfo}}
/**
 * Representing a Server configuration.
 */
#ifndef SERVERVCONFIGURATION_H
#define SERVERVCONFIGURATION_H
#include <QString>
#include <QMap>
#include <stdexcept>
#include <ServerVariable.h>

class ServerConfiguration {
public:
    /**
     * @param URL A URL to the target host.
     * @param description A description of the host designated by the URL.
     * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
     */
    ServerConfiguration(const QString& URL, const QString& description, const QMap<QString, ServerVariable>& variables)
    : _description(description),
      _variables(variables),
      _URL(URL){}

    ~ServerConfiguration(){}

    /**
     * Format URL template using given variables.
     *
     * @param variables A map between a variable name and its value.
     * @return Formatted URL.
     */
    QString URL() {
        QString url = _URL;
        if(!_variables.empty()){
            // go through variables and replace placeholders
            for (auto const& v : _variables.keys()) {
                QString name = v;
                ServerVariable serverVariable = _variables.value(v);
                QString value = serverVariable._defaultValue;

                if (!serverVariable._enumValues.contains(value)) {
                    throw std::runtime_error(QString("The variable " + name + " in the server URL has invalid value " + value + ".").toUtf8());
                }
                
                url = url.replace("\\{" + name + "\\}", value);
            }
        }
        return url;
    }

    QString _URL;
    QString _description;
    QMap<QString, ServerVariable> _variables;


};
#endif
