class {{classname}}(ComposedSchema):
{{^indent}}
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
{{#description}}

    {{{unescapedDescription}}}
{{/description}}

    Attributes:
{{#vars}}
    {{baseName}} ({{#isArray}}list,{{/isArray}}{{#isBoolean}}bool,{{/isBoolean}}{{#isDate}}date,{{/isDate}}{{#isDateTime}}datetime,{{/isDateTime}}{{#isMap}}dict,{{/isMap}}{{#isFloat}}float,{{/isFloat}}{{#isNumber}}float,{{/isNumber}}{{#isInteger}}int,{{/isInteger}}{{#isLong}}int,{{/isLong}}{{#isString}}str,{{/isString}}{{#isByteArray}}str,{{/isByteArray}}{{#isNullable}} none_type,{{/isNullable}}): {{#description}}{{description}}{{/description}}
{{/vars}}
{{#hasValidation}}
    _validations (dict): the validations which apply to the current Schema
        The value is a dict that stores validations for max_length, min_length, max_items,
        min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
        inclusive_minimum, and regex.
{{/hasValidation}}
{{#additionalProperties}}
    _additional_properties (Schema): the definition used for additional properties
        that are not defined in _properties
{{/additionalProperties}}
{{#discriminator}}
{{#mappedModels}}
{{#-first}}
    _discriminator(cls) -> dict: the key is the required discriminator propertyName
        the value is a dict mapping from a string name to the corresponding Schema class
{{/-first}}
{{/mappedModels}}
{{/discriminator}}
    """
{{/indent}}
{{#discriminator}}
{{#mappedModels}}
{{#-first}}

{{indent}}    @cached_property
{{indent}}    def _discriminator():
{{#imports}}
{{#-first}}
{{indent}}        lazy_import()
{{/-first}}
{{/imports}}
{{indent}}        return {
{{indent}}            '{{{propertyBaseName}}}': {
{{/-first}}
{{indent}}                '{{mappingName}}': {{{modelName}}},
{{#-last}}
{{indent}}            }
{{indent}}        }
{{/-last}}
{{/mappedModels}}
{{/discriminator}}

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
{{#imports}}
{{#-first}}
        lazy_import()
{{/-first}}
{{/imports}}
        return {
          'anyOf': [
{{#anyOf}}
              {{{.}}},
{{/anyOf}}
          ],
          'allOf': [
{{#allOf}}
              {{{.}}},
{{/allOf}}
          ],
          'oneOf': [
{{#oneOf}}
              {{{.}}},
{{/oneOf}}
          ],
        }