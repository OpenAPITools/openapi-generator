# coding: utf-8

{{>partial_header}}

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from {{packageName}}.api_client import ApiClient
from {{packageName}}.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


{{#operations}}
class {{classname}}(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
{{#operation}}

    def {{operationId}}(self{{#requiredParams}}{{^defaultValue}}, {{paramName}}{{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}, {{paramName}}={{{defaultValue}}}{{/defaultValue}}{{/requiredParams}}, **kwargs):  # noqa: E501
        """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{notes}}}  # noqa: E501
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.{{operationId}}({{#requiredParams}}{{^defaultValue}}{{paramName}}, {{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}{{paramName}}={{{defaultValue}}}, {{/defaultValue}}{{/requiredParams}}async_req=True)
        >>> result = thread.get()

{{#requiredParams}}
{{^hasMore}}
        Args:
{{/hasMore}}
{{/requiredParams}}
{{#requiredParams}}
{{^defaultValue}}
            {{paramName}} ({{dataType}}):{{#description}} {{description}}{{/description}}{{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}
            {{paramName}} ({{dataType}}):{{#description}} {{description}}.{{/description}} defaults to {{{defaultValue}}}, must be one of [{{{defaultValue}}}]{{/defaultValue}}{{/requiredParams}}

        Keyword Args:{{#optionalParams}}
            {{paramName}} ({{dataType}}):{{#description}} {{description}}.{{/description}} [optional]{{#defaultValue}} if omitted the server will use the default value of {{{defaultValue}}}{{/defaultValue}}{{/optionalParams}}
            async_req (bool): execute request asynchronously
            param _preload_content (bool): if False, the urllib3.HTTPResponse
                object will be returned without reading/decoding response data.
                Default is True.
            param _request_timeout (float/tuple): timeout setting for this
                request. If one number provided, it will be total request
                timeout. It can also be a pair (tuple) of (connection, read)
                timeouts.

        Returns:
            {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}:
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.{{operationId}}_with_http_info({{#requiredParams}}{{^defaultValue}}{{paramName}}, {{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}{{paramName}}={{paramName}}, {{/defaultValue}}{{/requiredParams}}**kwargs)  # noqa: E501
        else:
            (data) = self.{{operationId}}_with_http_info({{#requiredParams}}{{^defaultValue}}{{paramName}}, {{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}{{paramName}}={{paramName}}, {{/defaultValue}}{{/requiredParams}}**kwargs)  # noqa: E501
            return data

    def {{operationId}}_with_http_info(self{{#requiredParams}}{{^defaultValue}}, {{paramName}}{{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}, {{paramName}}=None{{/defaultValue}}{{/requiredParams}}, **kwargs):  # noqa: E501
        """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{notes}}}  # noqa: E501
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.{{operationId}}_with_http_info({{#requiredParams}}{{^defaultValue}}{{paramName}}, {{/defaultValue}}{{/requiredParams}}async_req=True)
        >>> result = thread.get()

{{#requiredParams}}
{{^hasMore}}
        Args:
{{/hasMore}}
{{/requiredParams}}
{{#requiredParams}}
{{^defaultValue}}
            {{paramName}} ({{dataType}}):{{#description}} {{description}}{{/description}}{{/defaultValue}}{{/requiredParams}}{{#requiredParams}}{{#defaultValue}}
            {{paramName}} ({{dataType}}):{{#description}} {{description}}.{{/description}} defaults to {{{defaultValue}}}, must be one of [{{{defaultValue}}}]{{/defaultValue}}{{/requiredParams}}

        Keyword Args:{{#optionalParams}}
            {{paramName}} ({{dataType}}):{{#description}} {{description}}.{{/description}} [optional]{{#defaultValue}} if omitted the server will use the default value of {{{defaultValue}}}{{/defaultValue}}{{/optionalParams}}
            async_req (bool): execute request asynchronously
            param _preload_content (bool): if False, the urllib3.HTTPResponse
                object will be returned without reading/decoding response data.
                Default is True.
            param _request_timeout (float/tuple): timeout setting for this
                request. If one number provided, it will be total request
                timeout. It can also be a pair (tuple) of (connection, read)
                timeouts.

        Returns:
            {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}:
        """

        {{#servers.0}}
        local_var_hosts = [{{#servers}}
            '{{{url}}}'{{^-last}},{{/-last}}{{/servers}}
        ]
        local_var_host = local_var_hosts[0]
        if kwargs.get('_host_index'):
            if (int(kwargs.get('_host_index')) < 0 or
                    int(kwargs.get('_host_index')) >= len(local_var_hosts)):
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s" %
                    len(local_var_host)
                )
            local_var_host = local_var_hosts[int(kwargs.get('_host_index'))]
        {{/servers.0}}
        local_var_params = locals()

        all_params = [{{#allParams}}'{{paramName}}'{{#hasMore}}, {{/hasMore}}{{/allParams}}]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params{{#servers.0}} and key != "_host_index"{{/servers.0}}:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method {{operationId}}" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
{{#allParams}}
{{^isNullable}}
{{#required}}
        # verify the required parameter '{{paramName}}' is set
        if ('{{paramName}}' not in local_var_params or
                local_var_params['{{paramName}}'] is None):
            raise ApiValueError("Missing the required parameter `{{paramName}}` when calling `{{operationId}}`")  # noqa: E501
{{/required}}
{{/isNullable}}
{{#-last}}
{{/-last}}
{{/allParams}}
{{#allParams}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
{{#isListContainer}}
        if ('{{{paramName}}}' in local_var_params and
                not set(local_var_params['{{{paramName}}}']).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `{{{paramName}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(local_var_params['{{{paramName}}}']) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if ('{{{paramName}}}' in local_var_params and
                not set(local_var_params['{{{paramName}}}'].keys()).issubset(set(allowed_values))):
            raise ValueError(
                "Invalid keys in `{{{paramName}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(local_var_params['{{{paramName}}}'].keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
        if ('{{{paramName}}}' in local_var_params and
                local_var_params['{{{paramName}}}'] not in allowed_values):
            raise ValueError(
                "Invalid value for `{{{paramName}}}` ({0}), must be one of {1}"  # noqa: E501
                .format(local_var_params['{{{paramName}}}'], allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{/allParams}}
{{#allParams}}
{{#hasValidation}}
    {{#maxLength}}
        if ('{{paramName}}' in local_var_params and
                len(local_var_params['{{paramName}}']) > {{maxLength}}):
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
    {{/maxLength}}
    {{#minLength}}
        if ('{{paramName}}' in local_var_params and
                len(local_var_params['{{paramName}}']) < {{minLength}}):
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
    {{/minLength}}
    {{#maximum}}
        if '{{paramName}}' in local_var_params and local_var_params['{{paramName}}'] >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
    {{/maximum}}
    {{#minimum}}
        if '{{paramName}}' in local_var_params and local_var_params['{{paramName}}'] <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
    {{/minimum}}
    {{#pattern}}
        if '{{paramName}}' in local_var_params and not re.search(r'{{{vendorExtensions.x-regex}}}', local_var_params['{{paramName}}']{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must conform to the pattern `{{{pattern}}}`")  # noqa: E501
    {{/pattern}}
    {{#maxItems}}
        if ('{{paramName}}' in local_var_params and
                len(local_var_params['{{paramName}}']) > {{maxItems}}):
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
    {{/maxItems}}
    {{#minItems}}
        if ('{{paramName}}' in local_var_params and
                len(local_var_params['{{paramName}}']) < {{minItems}}):
            raise ApiValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
    {{/minItems}}
{{/hasValidation}}
{{/allParams}}

        collection_formats = {}

        path_params = {}
{{#pathParams}}
        if '{{paramName}}' in local_var_params:
            path_params['{{baseName}}'] = local_var_params['{{paramName}}']{{#isListContainer}}  # noqa: E501
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/pathParams}}

        query_params = []
{{#queryParams}}
        if '{{paramName}}' in local_var_params:
            query_params.append(('{{baseName}}', local_var_params['{{paramName}}'])){{#isListContainer}}  # noqa: E501
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/queryParams}}

        header_params = {}
{{#headerParams}}
        if '{{paramName}}' in local_var_params:
            header_params['{{baseName}}'] = local_var_params['{{paramName}}']{{#isListContainer}}  # noqa: E501
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/headerParams}}

        form_params = []
        local_var_files = {}
{{#formParams}}
        if '{{paramName}}' in local_var_params:
            {{^isFile}}form_params.append(('{{baseName}}', local_var_params['{{paramName}}'])){{/isFile}}{{#isFile}}local_var_files['{{baseName}}'] = local_var_params['{{paramName}}']{{/isFile}}{{#isListContainer}}  # noqa: E501
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/formParams}}

        body_params = None
{{#bodyParam}}
        if '{{paramName}}' in local_var_params:
            body_params = local_var_params['{{paramName}}']
{{/bodyParam}}
        {{#hasProduces}}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}])  # noqa: E501

        {{/hasProduces}}
        {{#hasConsumes}}
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}])  # noqa: E501

        {{/hasConsumes}}
        # Authentication setting
        auth_settings = [{{#authMethods}}'{{name}}'{{#hasMore}}, {{/hasMore}}{{/authMethods}}]  # noqa: E501

        return self.api_client.call_api(
            '{{{path}}}', '{{httpMethod}}',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type={{#returnType}}'{{returnType}}'{{/returnType}}{{^returnType}}None{{/returnType}},  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            {{#servers.0}}
            _host=local_var_host,
            {{/servers.0}}
            collection_formats=collection_formats)
{{/operation}}
{{/operations}}
