# coding: utf-8

{{>partial_header}}

import six


def recursive_type(item):
    """Gets a string describing the full the recursive type of a value"""
    item_type = type(item)
    if item_type == dict:
        child_key_types = set()
        child_value_types = set()
        for child_key, child_value in six.iteritems(item):
            child_key_types.add(recursive_type(child_key))
            child_value_types.add(recursive_type(child_value))
        # only allow empty dicts or dicts with str keys
        if child_key_types not in [set(['str']), set()]:
            raise TypeError('Invalid dict key type. All Openapi dict keys must be strings')
        child_value_types = '|'.join(sorted(list(child_value_types)))
        if child_key_types == set():
            return "dict()"
        return "dict(str, {0})".format(child_value_types)
    elif item_type == list:
        child_value_types = set()
        for child_item in item:
            child_value_types.add(recursive_type(child_item))
        child_value_types = '|'.join(sorted(list(child_value_types)))
        return "list[{0}]".format(child_value_types)
    else:
        return type(item).__name__


def valid_type(passed_type_str, required_type_str):
    """Returns a boolean, True if passed_type is required_type"""
    if passed_type_str == required_type_str:
        return True
    req_types, req_remainder = get_types_remainder(required_type_str)
    passed_types, passed_remainder = get_types_remainder(passed_type_str)
    if not passed_types.issubset(req_types):
        return False
    # passed_types is in req_types
    if req_remainder == '':
        return True
    if (passed_types == set(['list']) and passed_remainder == '' and
            all(char not in req_remainder for char in '([')):
        # we have an empty list, and the inner required types are
        # primitives like str, int etc, allow it
        return True
    if (passed_types == set(['dict']) and passed_remainder == '' and
            all(char not in req_remainder for char in '([')):
        # we have an empty dict, and the inner required types are
        # primitives like str, int etc, allow it
        return True
    return valid_type(passed_remainder, req_remainder)


def get_types_remainder(type_string):
    if type_string == 'dict()':
        return set(['dict']), ''
    container_types = [('dict(str, ', ')'), ('list[', ']')]
    for type_prefix, type_suffix in container_types:
        if type_string.startswith(type_prefix) and type_string.endswith(type_suffix):
            return set([type_prefix[:4]]), type_string[len(type_prefix):-1]
    type_set = set(type_string.split('|'))
    return type_set, ''


def model_to_dict(model_instance, serialize=True):
    """Returns the model properties as a dict

    Args:
        model_instance (one of your model instances): the model instance that
            will be converted to a dict.

    Keyword Args:
        serialize (bool): if True, the keys in the dict will be values from
            attribute_map
    """
    result = {}

    for attr, value in six.iteritems(model_instance._data_store):
        if serialize:
            attr = model_instance.attribute_map[attr]
        if isinstance(value, list):
            result[attr] = list(map(
                lambda x: model_to_dict(x, serialize=serialize)
                if hasattr(x, '_data_store') else x, value
            ))
        elif hasattr(value, '_data_store'):
            result[attr] = model_to_dict(value, serialize=serialize)
        elif isinstance(value, dict):
            result[attr] = dict(map(
                lambda item: (item[0], model_to_dict(item[1], serialize=serialize))
                if hasattr(item[1], '_data_store') else item,
                value.items()
            ))
        else:
            result[attr] = value

    return result
