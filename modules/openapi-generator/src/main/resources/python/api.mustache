# coding: utf-8

{{>partial_header}}

import re  # noqa: F401
import io
import warnings

from pydantic import validate_call, ValidationError, Field
from typing import Dict, List, Optional, Tuple, Union, Any, Annotated

{{#imports}}
{{import}}
{{/imports}}

from {{packageName}}.api_client import ApiClient
from {{packageName}}.api_response import ApiResponse
from {{packageName}}.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


{{#operations}}
class {{classname}}:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client
{{#operation}}

    @validate_call
    {{#asyncio}}async {{/asyncio}}def {{operationId}}(
        self,
        {{#allParams}}
        {{paramName}}: {{{vendorExtensions.x-py-typing}}}{{^required}} = None{{/required}},
        {{/allParams}}
        **kwargs,
    ) -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
        """{{#isDeprecated}}(Deprecated) {{/isDeprecated}}{{{summary}}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{.}}}  # noqa: E501
{{/notes}}
{{^asyncio}}
        This method makes a synchronous HTTP request by default.
{{/asyncio}}

{{#allParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        :type {{paramName}}: {{dataType}}{{#optional}}, optional{{/optional}}
{{/allParams}}
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: {{returnType}}{{^returnType}}None{{/returnType}}
        """

        data = {{#asyncio}}await {{/asyncio}}self.{{operationId}}_with_http_info.raw_function(
            {{#allParams}}
            {{paramName}},
            {{/allParams}}
            **kwargs,
        )
        return data.data

    @validate_call
    {{#asyncio}}async {{/asyncio}}def {{operationId}}_with_http_info(
        self,
        {{#allParams}}
        {{paramName}}: {{{vendorExtensions.x-py-typing}}}{{^required}} = None{{/required}},
        {{/allParams}}
        _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
            description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
        )] = None,
        _request_auth: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the auth_settings for an a single request; this effectively ignores the authentication in the spec for a single request.",
        )] = None,
        _content_type: Annotated[Optional[str], Field(
            description="force content-type for the request",
        )] = None,
        _headers: Annotated[Optional[Dict[str, Any]], Field(
            description="set to override the header params for an a single request; this effectively ignores the header params in the spec for a single request.",
        )] = None,
        _host_index: Annotated[int, Field(
            ge=0,
            le={{#servers.size}}{{servers.size}}{{/servers.size}}{{^servers.size}}1{{/servers.size}},
            description="index of the host to use, if the server has multiple hosts",
        )] = 0,
    ) -> ApiResponse[{{{returnType}}}{{^returnType}}None{{/returnType}}]:
        """{{#isDeprecated}}(Deprecated) {{/isDeprecated}}{{{summary}}}{{^summary}}{{operationId}}{{/summary}}
{{#notes}}
        {{{.}}}
{{/notes}}
{{^asyncio}}
        This method makes a synchronous HTTP request by default.
{{/asyncio}}

{{#allParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        :type {{paramName}}: {{dataType}}{{#optional}}, optional{{/optional}}
{{/allParams}}
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :type _headers: dict, optional: set to override the header params for an a single
                        request; this effectively ignores the header params
                        in the spec for a single request.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponse[{{{returnType}}}{{^returnType}}None{{/returnType}}]
        """

{{#isDeprecated}}
        warnings.warn("{{{httpMethod}}} {{{path}}} is deprecated.", DeprecationWarning)
{{/isDeprecated}}

        _hosts = [
            {{#servers.size}}{{#servers}}'{{{url}}}'{{^-last}},{{/-last}}
            {{/servers}}{{/servers.size}}
        ]

        _collection_formats: Dict[str, str] = {
            {{#allParams}}{{#isArray}}
            '{{baseName}}': '{{collectionFormat}}',{{/isArray}}{{/allParams}}
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, str] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

{{#pathParams}}
        # process the path parameters
        if {{paramName}} is not None:
            _path_params['{{baseName}}'] = {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}
{{/pathParams}}
{{#queryParams}}
        # process the query parameters
        if {{paramName}} is not None:  # noqa: E501
            {{#isDateTime}}
            if isinstance({{paramName}}, datetime):
                _query_params.append(('{{baseName}}', {{paramName}}.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDateTime}}
            {{#isDate}}
            if isinstance({{paramName}}, date):
                _query_params.append(('{{baseName}}', {{paramName}}.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDate}}
            {{^isDateTime}}{{^isDate}}
            _query_params.append(('{{baseName}}', {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}))
            {{/isDate}}{{/isDateTime}}
{{/queryParams}}
{{#headerParams}}
        # process the header parameters
        if {{paramName}} is not None:
            _header_params['{{baseName}}'] = {{paramName}}
{{/headerParams}}
{{#formParams}}
        # process the form parameters
        if {{paramName}} is not None:
            {{#isFile}}
            _files['{{{baseName}}}'] = {{paramName}}
            {{/isFile}}
            {{^isFile}}
            _form_params.append(('{{{baseName}}}', {{paramName}}))
            {{/isFile}}
{{/formParams}}
{{#bodyParam}}
        # process the body parameter
        if {{paramName}} is not None:
            {{#isBinary}}
            # convert to byte array if the input is a file name (str)
            if isinstance(_body_params, str):
                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
                    _body_params = _fp.read()
            {{/isBinary}}
            {{^isBinary}}
            _body_params = {{paramName}}
            {{/isBinary}}
{{/bodyParam}}

        {{#hasProduces}}
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}])  # noqa: E501
        {{/hasProduces}}

        {{#hasConsumes}}
        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _type = self.api_client.select_header_content_type([{{#consumes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}])
            if _type is not None:
                _header_params['Content-Type'] = _type
        {{/hasConsumes}}

        # authentication setting
        _auth_settings: List[str] = [{{#authMethods}}'{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}]  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            {{#returnType}}{{#responses}}{{^isWildcard}}'{{code}}': {{#dataType}}"{{.}}"{{/dataType}}{{^dataType}}None{{/dataType}}{{/isWildcard}}{{^-last}},{{/-last}}
            {{/responses}}{{/returnType}}
        }

        param = self.api_client.param_serialize(
            method='{{httpMethod}}',
            resource_path='{{{path}}}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=None if len(_hosts) == 0 else _hosts[_host_index],
            _request_auth=_request_auth
        )

        response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(*param, _request_timeout=_request_timeout)
        {{#asyncio}}await {{/asyncio}}response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


{{/operation}}
{{/operations}}
