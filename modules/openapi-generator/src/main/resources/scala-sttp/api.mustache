{{>licenseInfo}}
package {{package}}

{{#imports}}
import {{import}}
{{/imports}}
import {{invokerPackage}}._
import {{invokerPackage}}.JsonSupport._
import {{invokerPackage}}.Helpers._
import sttp.client3._
import sttp.model._

{{#operations}}
object {{classname}} {

  def apply(baseUrl: String = "{{{basePath}}}") = new {{classname}}(baseUrl)
}

class {{classname}}(baseUrl: String) {

{{#operation}}
{{#javadocRenderer}}
{{>javadoc}}
{{/javadocRenderer}}
  def {{operationId}}({{>methodParameters}}): RequestT[Identity, {{#separateErrorChannel}}Either[ResponseException[ErrorModel, Exception], {{>operationReturnType}}]{{/separateErrorChannel}}{{^separateErrorChannel}}{{>operationReturnType}}{{/separateErrorChannel}}, Any] =
    basicRequest
      .method(Method.{{httpMethod.toUpperCase}}, uri"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${ {{{paramName}}} }{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}{{#isApiKey}}{{#isKeyInQuery}}{{^queryParams.0}}?{{/queryParams.0}}{{#queryParams.0}}&{{/queryParams.0}}{{keyParamName}}=${apiKey.value}&{{/isKeyInQuery}}{{/isApiKey}}")
      .contentType({{#consumes.0}}"{{{mediaType}}}"{{/consumes.0}}{{^consumes}}"application/json"{{/consumes}}){{#headerParams}}
      .header({{>paramCreation}}){{/headerParams}}{{#authMethods}}{{#isBasic}}{{#isBasicBasic}}
      .auth.basic(username, password){{/isBasicBasic}}{{#isBasicBearer}}
      .auth.bearer(bearerToken){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}
      .header("{{keyParamName}}", apiKey){{/isKeyInHeader}}{{#isKeyInCookie}}
      .cookie("{{keyParamName}}", apiKey){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}{{^isMultipart}}
      .body(Map({{#formParams}}
        {{>paramFormCreation}}{{^-last}}, {{/-last}}{{/formParams}}
      )){{/isMultipart}}{{#isMultipart}}
      .multipartBody(Seq({{#formParams}}
        {{>paramMultipartCreation}}{{^-last}}, {{/-last}}{{/formParams}}
      ).flatten){{/isMultipart}}{{/formParams.0}}{{#bodyParam}}
      .body({{paramName}}){{/bodyParam}}
      {{#vendorExtensions.x-has-only-default-response}}
      .response({{>defaultResponse}})
      {{/vendorExtensions.x-has-only-default-response}}
      {{^vendorExtensions.x-has-only-default-response}}
      .response(fromMetadata(
        {{>defaultResponse}},
        {{#responses}}
        {{^isDefault}}
        ConditionalResponseAs(_.code == StatusCode({{code}}), asJsonEither[{{#vendorExtensions.x-error-model-class}}{{vendorExtensions.x-error-model-class}}{{/vendorExtensions.x-error-model-class}}{{^vendorExtensions.x-error-model-class}}ErrorModel{{/vendorExtensions.x-error-model-class}}, {{>operationReturnType}}]){{^-last}},{{/-last}}
        {{/isDefault}}
        {{/responses}}
      ))
      {{/vendorExtensions.x-has-only-default-response}}

{{/operation}}
}
{{/operations}}
