<?php
/**
 * {{classname}}
 * PHP version 7.4
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace {{apiPackage}};

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use {{invokerPackage}}\ApiException;
use {{invokerPackage}}\Configuration;
use {{invokerPackage}}\HeaderSelector;
use {{invokerPackage}}\ObjectSerializer;

/**
 * {{classname}} Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
{{#operations}}class {{classname}}
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [{{#operation}}
        '{{{operationId}}}' => [{{#consumes}}
            '{{{mediaType}}}',{{/consumes}}
        {{^consumes}}
            'application/json',
{{/consumes}}        ],{{/operation}}
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

{{#operation}}
    /**
     * Operation {{{operationId}}}
{{#summary}}
     *
     * {{.}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{/-first}}
     * URL: {{{url}}}
{{#variables}}
{{#-first}}
     *  Variables:
{{/-first}}
     *    - {{{name}}}: {{{description}}}{{^description}} No description provided{{/description}}{{#enumValues}}
{{#-first}}
     *      Allowed values:
{{/-first}}
     *        - {{{.}}}{{/enumValues}}
{{/variables}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{.}}{{/description}}{{^description}} {{paramName}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
{{/allParams}}
{{#servers}}
{{#-first}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{/-first}}
{{/servers}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return {{#returnType}}{{#responses}}{{#dataType}}{{^-first}}|{{/-first}}{{/dataType}}{{{dataType}}}{{/responses}}{{/returnType}}{{^returnType}}void{{/returnType}}
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
     */
    public function {{operationId}}({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}, {{/allParams}}{{#servers}}{{#-first}}?int $hostIndex = null, array $variables = [], {{/-first}}{{/servers}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
    {
        {{#returnType}}list($response) = {{/returnType}}$this->{{operationId}}WithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}, {{/allParams}}{{#servers}}{{#-first}}$hostIndex, $variables, {{/-first}}{{/servers}}$contentType{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});{{#returnType}}
        return $response;{{/returnType}}
    }

    /**
     * Operation {{{operationId}}}WithHttpInfo
{{#summary}}
     *
     * {{.}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{/-first}}
     * URL: {{{url}}}
{{#variables}}
{{#-first}}
     *  Variables:
{{/-first}}
     *    - {{{name}}}: {{{description}}}{{^description}} No description provided{{/description}}{{#enumValues}}
{{#-first}}
     *      Allowed values:
{{/-first}}
     *        - {{{.}}}{{/enumValues}}
{{/variables}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{.}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
{{/allParams}}
{{#servers}}
{{#-first}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{/-first}}
{{/servers}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \{{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of {{#returnType}}{{#responses}}{{#dataType}}{{^-first}}|{{/-first}}{{/dataType}}{{{dataType}}}{{/responses}}{{/returnType}}{{^returnType}}null{{/returnType}}, HTTP status code, HTTP response headers (array of strings)
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
     */
    public function {{operationId}}WithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}, {{/allParams}}{{#servers}}{{#-first}}?int $hostIndex = null, array $variables = [], {{/-first}}{{/servers}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
    {
        $request = $this->{{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}, {{/allParams}}{{#servers}}{{#-first}}$hostIndex, $variables, {{/-first}}{{/servers}}$contentType{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            {{#returnType}}
            {{#responses}}
            {{#-first}}

            switch($statusCode) {
            {{/-first}}
            {{#dataType}}
                {{^isRange}}{{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                    if ('{{{dataType}}}' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('{{{dataType}}}' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '{{{dataType}}}', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];{{/isRange}}
            {{/dataType}}
            {{#-last}}
            }
            {{/-last}}
            {{/responses}}

            $returnType = '{{{returnType}}}';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
            {{/returnType}}
            {{^returnType}}

            return [null, $statusCode, $response->getHeaders()];
            {{/returnType}}

        } catch (ApiException $e) {
            switch ($e->getCode()) {
        {{#responses}}
            {{#dataType}}
                {{^isRange}}{{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '{{{dataType}}}',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;{{/isRange}}
            {{/dataType}}
        {{/responses}}
            }
            throw $e;
        }
    }

    /**
     * Operation {{{operationId}}}Async
     *
{{#summary}}
     * {{.}}
     *
{{/summary}}
{{#description}}
     * {{.}}
     *
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{/-first}}
     * URL: {{{url}}}
{{#variables}}
{{#-first}}
     *  Variables:
{{/-first}}
     *    - {{{name}}}: {{{description}}}{{^description}} No description provided{{/description}}{{#enumValues}}
{{#-first}}
     *      Allowed values:
{{/-first}}
     *        - {{{.}}}{{/enumValues}}
{{/variables}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{.}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
{{/allParams}}
{{#servers}}
{{#-first}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{/-first}}
{{/servers}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
     */
    public function {{operationId}}Async({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}, {{/allParams}}{{#servers}}{{#-first}}?int $hostIndex = null, array $variables = [], {{/-first}}{{/servers}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
    {
        return $this->{{operationId}}AsyncWithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}, {{/allParams}}{{#servers}}{{#-first}}$hostIndex, $variables, {{/-first}}{{/servers}}$contentType{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation {{{operationId}}}AsyncWithHttpInfo
     *
{{#summary}}
     * {{.}}
     *
{{/summary}}
{{#description}}
     * {{.}}
     *
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{/-first}}
     * URL: {{{url}}}
{{#variables}}
{{#-first}}
     *  Variables:
{{/-first}}
     *    - {{{name}}}: {{{description}}}{{^description}} No description provided{{/description}}{{#enumValues}}
{{#-first}}
     *      Allowed values:
{{/-first}}
     *        - {{{.}}}{{/enumValues}}
{{/variables}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{.}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
{{/allParams}}
{{#servers}}
{{#-first}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{/-first}}
{{/servers}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
     */
    public function {{operationId}}AsyncWithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}, {{/allParams}}{{#servers}}{{#-first}}?int $hostIndex = null, array $variables = [], {{/-first}}{{/servers}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
    {
        $returnType = '{{{returnType}}}';
        $request = $this->{{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}, {{/allParams}}{{#servers}}{{#-first}}$hostIndex, $variables, {{/-first}}{{/servers}}$contentType{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    {{#returnType}}
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                    {{/returnType}}
                    {{^returnType}}
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                    {{/returnType}}
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation '{{{operationId}}}'
     *
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
    * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
    * if needed, use the 'variables' parameter to pass variables to the host.
{{/-first}}
     * URL: {{{url}}}
{{#variables}}
{{#-first}}
     *  Variables:
{{/-first}}
    *    - {{{name}}}: {{{description}}}{{^description}} No description provided{{/description}}{{#enumValues}}
{{#-first}}
     *      Allowed values:
{{/-first}}
     *        - {{{.}}}{{/enumValues}}
{{/variables}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{.}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
{{/allParams}}
{{#servers}}
{{#-first}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{/-first}}
{{/servers}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
     */
    public function {{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}, {{/allParams}}{{#servers}}{{#-first}}?int $hostIndex = null, array $variables = [], {{/-first}}{{/servers}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}})
    {
        {{#vendorExtensions.x-group-parameters}}
        // unbox the parameters from the associative array
{{#allParams}}
        ${{paramName}} = array_key_exists('{{paramName}}', $associative_array) ? $associative_array['{{paramName}}'] : {{{defaultValue}}}{{^defaultValue}}null{{/defaultValue}};
{{/allParams}}{{#servers.0}}
        $hostIndex = $associative_array['hostIndex'];
        $variables = array_key_exists('variables', $associative_array) ? $associative_array['variables'] : [];
{{/servers.0}}
        $contentType = $associative_array['contentType'] ?? self::contentTypes['{{{operationId}}}'][0];
        {{/vendorExtensions.x-group-parameters}}{{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if (${{paramName}} === null || (is_array(${{paramName}}) && count(${{paramName}}) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter ${{paramName}} when calling {{operationId}}'
            );
        }
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}${{paramName}} !== null && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}${{paramName}} !== null && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}${{paramName}} !== null && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}${{paramName}} !== null && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}${{paramName}} !== null && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
            throw new \InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }
        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) < {{minItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}
        {{/hasValidation}}{{/allParams}}

        $resourcePath = '{{{path}}}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        {{#queryParams}}
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            ${{paramName}},
            '{{baseName}}', // param base name
            '{{#schema}}{{openApiType}}{{/schema}}', // openApiType
            '{{style}}', // style
            {{#isExplode}}true{{/isExplode}}{{^isExplode}}false{{/isExplode}}, // explode
            {{required}} // required
        ) ?? []);
        {{/queryParams}}

        {{#headerParams}}
        // header params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $headerParams['{{baseName}}'] = ObjectSerializer::toHeaderValue(${{paramName}});
        }
        {{/headerParams}}

        {{#pathParams}}
        // path params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $resourcePath = str_replace(
                '{' . '{{baseName}}' . '}',
                ObjectSerializer::toPathValue(${{paramName}}),
                $resourcePath
            );
        }
        {{/pathParams}}

        {{#formParams}}
        // form params
        if (${{paramName}} !== null) {
            {{#isFile}}
            $multipart = true;
            $formParams['{{baseName}}'] = [];
            $paramFiles = is_array(${{paramName}}) ? ${{paramName}} : [${{paramName}}];
            foreach ($paramFiles as $paramFile) {
                $formParams['{{baseName}}'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
            {{/isFile}}
            {{^isFile}}
            $formParams['{{baseName}}'] = ObjectSerializer::toFormValue(${{paramName}});
            {{/isFile}}
        }
        {{/formParams}}

        $headers = $this->headerSelector->selectHeaders(
            [{{#produces}}'{{{mediaType}}}', {{/produces}}],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        {{#bodyParams}}
        if (isset(${{paramName}})) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization(${{paramName}}));
            } else {
                $httpBody = ${{paramName}};
            }
        } elseif (count($formParams) > 0) {
        {{/bodyParams}}
        {{^bodyParams}}
        if (count($formParams) > 0) {
        {{/bodyParams}}
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        {{#authMethods}}
        {{#isApiKey}}
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('{{keyParamName}}');
        if ($apiKey !== null) {
            {{#isKeyInHeader}}$headers['{{keyParamName}}'] = $apiKey;{{/isKeyInHeader}}{{#isKeyInQuery}}$queryParams['{{keyParamName}}'] = $apiKey;{{/isKeyInQuery}}
        }
        {{/isApiKey}}
        {{#isBasic}}
        {{#isBasicBasic}}
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        {{/isBasicBasic}}
        {{#isBasicBearer}}
        // this endpoint requires Bearer{{#bearerFormat}} ({{{.}}}){{/bearerFormat}} authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        {{/isBasicBearer}}
        {{/isBasic}}
        {{#isOAuth}}
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        {{/isOAuth}}
        {{/authMethods}}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        {{#servers.0}}
        # Preserve the original behavior of server indexing.
        if ($hostIndex === null) {
            $hostIndex = $this->hostIndex;
        }

        $hostSettings = $this->getHostSettingsFor{{operationId}}();

        if ($hostIndex < 0 || $hostIndex >= count($hostSettings)) {
            throw new \InvalidArgumentException("Invalid index {$hostIndex} when selecting the host. Must be less than ".count($hostSettings));
        }
        $operationHost = Configuration::getHostString($hostSettings, $hostIndex, $variables);
        {{/servers.0}}
        {{^servers.0}}
        $operationHost = $this->config->getHost();
        {{/servers.0}}
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            '{{httpMethod}}',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    {{#servers.0}}
    /**
     * Returns an array of host settings for Operation {{operationId}}
     *
     * @return array an array of host settings
     */
    protected function getHostSettingsFor{{operationId}}(): array
    {
        return [
        {{#servers}}
            [
                "url" => "{{{url}}}",
                "description" => "{{{description}}}{{^description}}No description provided{{/description}}",
                {{#variables}}
                {{#-first}}
                "variables" => [
                {{/-first}}
                    "{{{name}}}" => [
                    "description" => "{{{description}}}{{^description}}No description provided{{/description}}",
                    "default_value" => "{{{defaultValue}}}",
                    {{#enumValues}}
                    {{#-first}}
                    "enum_values" => [
                    {{/-first}}
                        "{{{.}}}",
                    {{#-last}}
                    ]
                    {{/-last}}
                    {{/enumValues}}
                    ]{{^-last}},{{/-last}}
                {{#-last}}
                ]
                {{/-last}}
                {{/variables}}
            ]{{^-last}},{{/-last}}
        {{/servers}}
        ];
    }

    {{/servers.0}}
    {{/operation}}
    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
{{/operations}}
