class {{classname}} implements EnumInterface
{
    /**
     * Possible values of this enum
     */
    {{#allowableValues}}
    {{#enumVars}}
    const {{^isString}}NUMBER_{{/isString}}{{{name}}} = {{{value}}};
    {{/enumVars}}
    {{/allowableValues}}


    /**
     * @var mixed
     */
    private $value;

    public function __construct($value)
    {
        if (!in_array($value, self::getAllowableEnumValues(), true)) {
            throw new \LogicException(sprintf('%s is not a allowed value for enum', $value));
        }
        $this->value = $value;
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            {{#allowableValues}}
            {{#enumVars}}
            self::{{^isString}}NUMBER_{{/isString}}{{{name}}}{{^-last}},
            {{/-last}}
            {{/enumVars}}
            {{/allowableValues}}

        ];
    }
    
    /**
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function getValue()
    {
        return $this->value;
    }
}
