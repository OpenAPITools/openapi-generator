{{>partial_header}}
package {{packageName}}

{{#models}}
import (
	"encoding/json"
{{#imports}}
	"{{import}}"
{{/imports}}
)

{{#model}}
{{#isEnum}}
// {{{classname}}} {{#description}}{{{.}}}{{/description}}{{^description}}the model '{{{classname}}}'{{/description}}
type {{{classname}}} {{^format}}{{dataType}}{{/format}}{{#format}}{{{format}}}{{/format}}

// List of {{{name}}}
const (
	{{#allowableValues}}
	{{#enumVars}}
	{{^-first}}
	{{/-first}}
	{{#enumClassPrefix}}{{{classname.toUpperCase}}}_{{/enumClassPrefix}}{{name}} {{{classname}}} = {{{value}}}
	{{/enumVars}}
	{{/allowableValues}}
)
{{/isEnum}}
{{^isEnum}}
// {{classname}}{{#description}} {{{description}}}{{/description}}{{^description}} struct for {{{classname}}}{{/description}}
type {{classname}} struct {
{{#vendorExtensions.x-is-one-of-interface}}
    {{classname}}Interface interface { {{#discriminator}}{{propertyGetter}}() {{propertyType}}{{/discriminator}} }
{{/vendorExtensions.x-is-one-of-interface}}
{{^vendorExtensions.x-is-one-of-interface}}
{{#parent}}
{{^isMapModel}}
	{{{parent}}}
{{/isMapModel}}
{{/parent}}
{{#vars}}
{{^-first}}
{{/-first}}
{{#description}}
	// {{{description}}}
{{/description}}
	{{name}} {{^required}}{{^isNullable}}*{{/isNullable}}{{/required}}{{{dataType}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
{{/vars}}
{{/vendorExtensions.x-is-one-of-interface}}
}
{{/isEnum}}

{{^isEnum}}
{{^vendorExtensions.x-is-one-of-interface}}
// New{{classname}} instantiates a new {{classname}} object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func New{{classname}}({{#vars}}{{#required}}{{nameInCamelCase}} {{dataType}}, {{/required}}{{/vars}}) *{{classname}} {
    this := {{classname}}{}
{{#vars}}
{{#required}}
    this.{{name}} = {{nameInCamelCase}}
{{/required}}
{{^required}}
{{#defaultValue}}
{{^isContainer}}
{{#isNullable}}
    var {{nameInCamelCase}} {{{datatypeWithEnum}}} = {{{.}}}
    this.{{name}} = *New{{{dataType}}}(&{{nameInCamelCase}})
{{/isNullable}}
{{^isNullable}}
    var {{nameInCamelCase}} {{{dataType}}} = {{{.}}}
    this.{{name}} = &{{nameInCamelCase}}
{{/isNullable}}
{{/isContainer}}
{{/defaultValue}}
{{/required}}
{{/vars}}
    return &this
}

// New{{classname}}WithDefaults instantiates a new {{classname}} object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func New{{classname}}WithDefaults() *{{classname}} {
    this := {{classname}}{}
{{#vars}}
{{#defaultValue}}
{{^isContainer}}
{{#isNullable}}
{{!we use datatypeWithEnum here, since it will represent the non-nullable name of the datatype, e.g. int64 for NullableInt64}}
    var {{nameInCamelCase}} {{{datatypeWithEnum}}} = {{{.}}}
    this.{{name}} = *New{{{dataType}}}(&{{nameInCamelCase}})
{{/isNullable}}
{{^isNullable}}
    var {{nameInCamelCase}} {{{dataType}}} = {{{.}}}
    this.{{name}} = {{^required}}&{{/required}}{{nameInCamelCase}}
{{/isNullable}}
{{/isContainer}}
{{/defaultValue}}
{{/vars}}
    return &this
}

{{#vars}}
{{#required}}
// Get{{name}} returns the {{name}} field value
func (o *{{classname}}) Get{{name}}() {{dataType}} {
	if o == nil {
		var ret {{dataType}}
		return ret
	}

	return o.{{name}}
}

// Set{{name}} sets field value
func (o *{{classname}}) Set{{name}}(v {{dataType}}) {
	o.{{name}} = v
}

{{/required}}
{{^required}}
// Get{{name}} returns the {{name}} field value if set, zero value otherwise.
func (o *{{classname}}) Get{{name}}() {{dataType}} {
	if o == nil {{^isNullable}}|| o.{{name}} == nil{{/isNullable}} {
		var ret {{dataType}}
		return ret
	}
	return {{^isNullable}}*{{/isNullable}}o.{{name}}
}

// Get{{name}}Ok returns a tuple with the {{name}} field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *{{classname}}) Get{{name}}Ok() ({{dataType}}, bool) {
	if o == nil {{^isNullable}}|| o.{{name}} == nil{{/isNullable}} {
		var ret {{dataType}}
		return ret, false
	}
{{#isNullable}}
    return o.{{name}}, {{#isContainer}}o.{{name}} == nil{{/isContainer}}{{^isContainer}}o.{{name}}.IsSet(){{/isContainer}}
{{/isNullable}}
{{^isNullable}}
    return *o.{{name}}, true
{{/isNullable}}
}

// Has{{name}} returns a boolean if a field has been set.
func (o *{{classname}}) Has{{name}}() bool {
    if o != nil && {{^isNullable}}o.{{name}} != nil{{/isNullable}}{{#isNullable}}{{#isContainer}}o.{{name}} != nil{{/isContainer}}{{^isContainer}}o.{{name}}.IsSet(){{/isContainer}}{{/isNullable}} {
		return true
	}

	return false
}

// Set{{name}} gets a reference to the given {{dataType}} and assigns it to the {{name}} field.
func (o *{{classname}}) Set{{name}}(v {{dataType}}) {
	o.{{name}} = {{^isNullable}}&{{/isNullable}}v
}

{{/required}}
{{/vars}}
func (o {{classname}}) MarshalJSON() ([]byte, error) {
    toSerialize := map[string]interface{}{}
    {{#parent}}
    {{^isMapModel}}
    serialized{{parent}}, err{{parent}} := json.Marshal(o.{{parent}})
    if err{{parent}} != nil {
        return []byte{}, err{{parent}}
    }
    err{{parent}} = json.Unmarshal([]byte(serialized{{parent}}), &toSerialize)
    if err{{parent}} != nil {
       return []byte{}, err{{parent}}
    }
    {{/isMapModel}}
    {{/parent}}
    {{#vars}}
    {{! if argument is nullable, only serialize it if it is set}}
    {{#isNullable}}
    {{#isContainer}}
    {{! support for container fields is not ideal at this point because of lack of Nullable* types}}
    if o.{{name}} != nil {
        toSerialize["{{baseName}}"] = o.{{name}}
    }
    {{/isContainer}}
    {{^isContainer}}
    if {{#required}}true{{/required}}{{^required}}o.{{name}}.IsSet(){{/required}} {
        toSerialize["{{baseName}}"] = o.{{name}}.Get()
    }
    {{/isContainer}}
    {{/isNullable}}
    {{! if argument is not nullable, don't set it if it is nil}}
    {{^isNullable}}
    if {{#required}}true{{/required}}{{^required}}o.{{name}} != nil{{/required}} {
        toSerialize["{{baseName}}"] = o.{{name}}
    }
    {{/isNullable}}
    {{/vars}}
    return json.Marshal(toSerialize)
}

{{/vendorExtensions.x-is-one-of-interface}}
{{#vendorExtensions.x-is-one-of-interface}}
func (s {{classname}}) MarshalJSON() ([]byte, error) {
    return json.Marshal(s.{{classname}}Interface)
}

func (s *{{classname}}) UnmarshalJSON(src []byte) error {
    var err error
    {{#discriminator}}
    var unmarshaled map[string]interface{}
    err = json.Unmarshal(src, &unmarshaled)
    if err != nil {
        return err
    }
    if v, ok := unmarshaled["{{discriminator.propertyBaseName}}"]; ok {
        switch v {
        {{#discriminator.mappedModels}}
            case "{{mappingName}}":
                var result *{{modelName}} = &{{modelName}}{}
                err = json.Unmarshal(src, result)
                if err != nil {
                    return err
                }
                s.{{classname}}Interface = result
                return nil
        {{/discriminator.mappedModels}}
            default:
                return fmt.Errorf("No oneOf model has '{{discriminator.propertyBaseName}}' equal to %s", v)
        }
    } else {
        return fmt.Errorf("Discriminator property '{{discriminator.propertyBaseName}}' not found in unmarshaled payload: %+v", unmarshaled)
    }
    {{/discriminator}}
    {{^discriminator}}
    {{#oneOf}}
    var unmarshaled{{{.}}} *{{{.}}} = &{{{.}}}{}
    err = json.Unmarshal(src, unmarshaled{{{.}}})
    if err == nil {
        s.{{classname}}Interface = unmarshaled{{{.}}}
        return nil
    }
    {{/oneOf}}
    return fmt.Errorf("No oneOf model could be deserialized from payload: %s", string(src))
    {{/discriminator}}
}
{{/vendorExtensions.x-is-one-of-interface}}
{{#vendorExtensions.x-implements}}
// As{{{.}}} wraps this instance of {{classname}} in {{{.}}}
func (s *{{classname}}) As{{{.}}}() {{{.}}} {
    return {{{.}}}{ {{{.}}}Interface: s }
}
{{/vendorExtensions.x-implements}}
{{/isEnum}}
type Nullable{{{classname}}} struct {
	value *{{{classname}}}
	isSet bool
}

func (v Nullable{{classname}}) Get() *{{classname}} {
    return v.value
}

func (v Nullable{{classname}}) Set(val *{{classname}}) {
    v.value = val
    v.isSet = true
}

func (v Nullable{{classname}}) IsSet() bool {
    return v.isSet
}

func (v Nullable{{classname}}) Unset() {
    v.value = nil
    v.isSet = false
}

func NewNullable{{classname}}(val *{{classname}}) *Nullable{{classname}} {
    return &Nullable{{classname}}{value: val, isSet: true}
}

func (v Nullable{{{classname}}}) MarshalJSON() ([]byte, error) {
    return json.Marshal(v.value)
}

func (v *Nullable{{{classname}}}) UnmarshalJSON(src []byte) error {
    v.isSet = true
	return json.Unmarshal(src, &v.value)
}
{{/model}}
{{/models}}
