// {{classname}}{{#description}} {{{description}}}{{/description}}{{^description}} struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#anyOf}}
	{{{.}}} *{{{.}}}
	{{/anyOf}}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error
{{#anyOf}}
	// try to unmarshal JSON data into {{{.}}}
	err = json.Unmarshal(data, &dst.{{{.}}});
	if err == nil {
		json{{{.}}}, _ := json.Marshal(dst.{{{.}}})
		if string(json{{{.}}}) == "{}" { // empty struct
			dst.{{{.}}} = nil
		} else {
			return nil // data stored in dst.{{{.}}}, return on the first match
		}
	} else {
		dst.{{{.}}} = nil
	}

{{/anyOf}}
	return fmt.Errorf("Data failed to match schemas in anyOf({{classname}})")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *{{classname}}) MarshalJSON() ([]byte, error) {
{{#anyOf}}
	if src.{{{.}}} != nil {
		return json.Marshal(&src.{{{.}}})
	}

{{/anyOf}}
	return nil, nil // no data in anyOf schemas
}
