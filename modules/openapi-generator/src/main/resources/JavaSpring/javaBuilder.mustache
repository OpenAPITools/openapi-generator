
  public static class Builder {{#parentModel}}extends {{classname}}.Builder {{/parentModel}}{

    private {{classname}} instance;

    public Builder() {
      this(new {{classname}}());
    }

    protected Builder({{classname}} instance) {
    {{#parentModel}}
      super(instance);
    {{/parentModel}}
      this.instance = instance;
    }

{{#vars}}
    public {{classname}}.Builder {{name}}({{{datatypeWithEnum}}} {{name}}) {
      this.instance.{{name}}({{name}});
      return this;
    }
{{/vars}}
{{#parentVars}}

    @Override
    public {{classname}}.Builder {{name}}({{{datatypeWithEnum}}} {{name}}) {
      this.instance.{{name}}({{name}});
      return this;
    }
{{/parentVars}}
    /**
    * returns a built {{classname}} instance.
    *
    * The builder is not reusable (NullPointerException)
    */
    public {{classname}} build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused{{#parentModel}}
        super.build();{{/parentModel}}
        this.instance = null;
      }
  }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static {{classname}}.Builder builder() {
    return new {{classname}}.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public {{classname}}.Builder toBuilder() {
    {{! using the instance setter ensure compatibility with Optional and JsonNullable}}
    {{classname}}.Builder builder = new {{classname}}.Builder();{{#vars}}
    builder.instance.{{setter}}({{name}});{{/vars}}
    {{#parentVars}}
    builder.instance.{{setter}}({{getter}}());
    {{/parentVars}}
    return builder;
  }
