{{#hasParams}}
		Map<String, String> paramMap =  new HashMap<>();
		MockServiceRequest mockServiceRequest = new MockServiceRequest();
{{#allParams}}
	{{#isQueryParam}}
	if({{paramName}} != null && {{paramName}}.getClass().toString().contains("List")){
		paramMap.put("{{baseName}}", addQueryParamValue({{paramName}}));
	} else{
		paramMap.put("{{baseName}}", String.valueOf({{paramName}}));
	}
	{{/isQueryParam}}
	{{#isPathParam}}
		paramMap.put("{{baseName}}", String.valueOf({{paramName}}));{{/isPathParam}}
{{/allParams}}
		try {
			mockServiceRequest.setResource("{{baseName}}");
			mockServiceRequest.setOperationId("{{operationId}}");
			mockServiceRequest.setParams(paramMap);
			{{#bodyParams}}
			mockServiceRequest.setInputObjectType({{#allParams}}{{>bodyParamsInput}}{{/allParams}}.getClass());
			mockServiceRequest.setInputObject({{#allParams}}{{>bodyParamsInput}}{{/allParams}});
			{{/bodyParams}}
			return virtualServiceUtil.returnResponse(mockServiceRequest);
		} catch (ClassNotFoundException | IOException e) {
			log.error("Unable to load the mock Response for " + "{{operationId}}", e);
			return new ResponseEntity("{\"code\": \"ERROR\", \"message\": \"Unable to load the mock Response for {{operationId}}\"}", HttpStatus.INTERNAL_SERVER_ERROR);
		}
{{/hasParams}}
{{^hasParams}}
	return new ResponseEntity("{\"code\": \"CASE_NOT_HANDLED\", \"message\":\"Mock NOT SUPPORTED AT this time \"}", HttpStatus.INTERNAL_SERVER_ERROR);
{{/hasParams}}