{{>licenseInfo}}

package body {{package}}.Models is
   pragma Style_Checks ("-mr");

   pragma Warnings (Off, "*use clause for package*");

   use {{openApiPackageName}}.Streams;

{{#orderedModels}}
{{#model}}{{^isArray}}

   procedure Serialize (Into  : in out {{openApiPackageName}}.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in {{classname}}) is
   begin
      Into.Start_Entity (Name);{{#vars}}{{#vendorExtensions.x-is-stream-type}}{{^isLong}}
      Into.Write_Entity ("{{baseName}}", Value.{{name}});{{/isLong}}{{#isLong}}{{#vendorExtensions.x-is-required}}
      Into.Write_Long_Entity ("{{baseName}}", Value.{{name}});{{/vendorExtensions.x-is-required}}{{^vendorExtensions.x-is-required}}
      Into.Write_Entity ("{{baseName}}", Value.{{name}});{{/vendorExtensions.x-is-required}}{{/isLong}}{{/vendorExtensions.x-is-stream-type}}{{^vendorExtensions.x-is-stream-type}}
      Serialize (Into, "{{baseName}}", Value.{{name}});{{/vendorExtensions.x-is-stream-type}}{{/vars}}
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out {{openApiPackageName}}.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in {{classname}}_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in {{openApiPackageName}}.Value_Type;
                          Name  : in String;
                          Value : out {{classname}}) is
      Object : {{openApiPackageName}}.Value_Type;
   begin
      {{openApiPackageName}}.Streams.Deserialize (From, Name, Object);{{#vars}}{{#vendorExtensions.x-is-model-type}}
      Deserialize (Object, "{{baseName}}", Value.{{name}});{{/vendorExtensions.x-is-model-type}}{{^vendorExtensions.x-is-model-type}}
      {{openApiPackageName}}.Streams.Deserialize (Object, "{{baseName}}", Value.{{name}});{{/vendorExtensions.x-is-model-type}}{{/vars}}
   end Deserialize;

   procedure Deserialize (From  : in {{openApiPackageName}}.Value_Type;
                          Name  : in String;
                          Value : out {{classname}}_Vectors.Vector) is
      List : {{openApiPackageName}}.Value_Array_Type;
      Item : {{classname}};
   begin
      Value.Clear;
      {{openApiPackageName}}.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

{{/isArray}}{{/model}}
{{/orderedModels}}

end {{package}}.Models;
