package {{apiPackage}};

import com.sun.jersey.core.spi.component.ComponentContext;
import com.sun.jersey.spi.inject.Injectable;
import com.sun.jersey.spi.inject.PerRequestTypeInjectableProvider;

import {{javaxPackage}}.ws.rs.QueryParam;
import {{javaxPackage}}.ws.rs.WebApplicationException;
import {{javaxPackage}}.ws.rs.core.Context;
import {{javaxPackage}}.ws.rs.core.Response;
import {{javaxPackage}}.ws.rs.core.Response.Status;
import {{javaxPackage}}.ws.rs.core.UriInfo;
import {{javaxPackage}}.ws.rs.ext.Provider;
import org.joda.time.DateTime;
import java.util.List;

@Provider
public class JodaDateTimeProvider extends PerRequestTypeInjectableProvider<QueryParam, DateTime> {
    private final UriInfo uriInfo;

    public JodaDateTimeProvider(@Context UriInfo uriInfo) {
        super(DateTime.class);
        this.uriInfo = uriInfo;
    }

    @Override
    public Injectable<DateTime> getInjectable(final ComponentContext cc, final QueryParam a) {
        return new Injectable<DateTime>() {
            @Override
            public DateTime getValue() {
                final List<String> values = uriInfo.getQueryParameters().get(a.value());

                if (values == null || values.isEmpty())
                    return null;
                if (values.size() > 1) {
                    throw new WebApplicationException(Response.status(Status.BAD_REQUEST).
                            entity(a.value() + " cannot contain multiple values").build());
                }

                return DateTime.parse(values.get(0));
            }
        };
    }
}