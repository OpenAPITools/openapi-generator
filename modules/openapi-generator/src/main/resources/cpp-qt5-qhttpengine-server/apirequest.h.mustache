{{>licenseInfo}}
#ifndef {{prefix}}_{{classname}}Request_H
#define {{prefix}}_{{classname}}Request_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
{{#imports}}{{{import}}}
{{/imports}}
#include "{{classname}}Handler.h"

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

class {{classname}}Request : public QObject
{
    Q_OBJECT
    
public:
    {{classname}}Request(QHttpEngine::Socket *s, {{classname}}Handler* handler);
    virtual ~{{classname}}Request();

    {{#operations}}{{#operation}}void {{nickname}}Request({{#hasPathParams}}{{#pathParams}}QString {{{paramName}}}{{/pathParams}}{{/hasPathParams}});
    {{/operation}}{{/operations}}

    {{#operations}}{{#operation}}void {{nickname}}Response({{#returnType}}{{{returnType}}} res{{/returnType}});
    {{/operation}}{{/operations}}

    {{#operations}}{{#operation}}void {{nickname}}Error({{#returnType}}{{{returnType}}} res, {{/returnType}}QNetworkReply::NetworkError error_type, QString& error_str);
    {{/operation}}{{/operations}}

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getDefaultHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setHeaders(QMultiMap<QString,QString> headers);

signals:
    {{#operations}}{{#operation}}void {{nickname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/operation}}{{/operations}}

private:
    QMap<QString, QString> defaultHeaders;
    QHttpEngine::Socket  *socket;
    {{classname}}Handler *handler;
};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}

#endif // {{prefix}}_{{classname}}Request_H
