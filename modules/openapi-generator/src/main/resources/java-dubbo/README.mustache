# {{appName}}

{{appDescription}}

This is a microservice project based on Apache Dubbo, generated by [OpenAPI Generator](https://openapi-generator.tech).

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Generator version: {{generatorVersion}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Generator: {{generatorClass}}
{{#externalDocumentationDescription}}
For more information, please visit: [{{{externalDocumentationDescription}}}]({{{externalDocumentationURL}}})
{{/externalDocumentationDescription}}

## Technology Stack

- **Framework**: Apache Dubbo {{dubboVersion}}
{{#useSpringBoot}}
- **Spring Boot**: {{#useSpringBoot3}}3.x{{/useSpringBoot3}}{{^useSpringBoot3}}2.x{{/useSpringBoot3}}
{{/useSpringBoot}}
- **Java**: {{#java8}}8+{{/java8}}{{^java8}}11+{{/java8}}
- **Build Tool**: Maven 3.6+
- **Registry**: {{registryAddress}}
- **Serialization**: Jackson JSON

## System Requirements

Building and running this project requires:
1. Java {{#java8}}8{{/java8}}{{^java8}}11{{/java8}}+
2. Maven 3.6+
3. Registry Center (Nacos or Zookeeper)

## Quick Start

### 1. Clone and Build Project

```bash
git clone <your-repo-url>
cd {{artifactId}}
mvn clean compile
```

### 2. Configure Registry Center

#### Using Nacos (Recommended)
```bash
# Download and start Nacos
wget https://github.com/alibaba/nacos/releases/download/2.2.4/nacos-server-2.2.4.tar.gz
tar -xzf nacos-server-2.2.4.tar.gz
cd nacos/bin
# Linux/Mac
./startup.sh -m standalone
# Windows
startup.cmd -m standalone
```

#### Using Zookeeper (Alternative)
```bash
# Download and start Zookeeper
wget https://downloads.apache.org/zookeeper/zookeeper-3.8.2/apache-zookeeper-3.8.2-bin.tar.gz
tar -xzf apache-zookeeper-3.8.2-bin.tar.gz
cd apache-zookeeper-3.8.2-bin
cp conf/zoo_sample.cfg conf/zoo.cfg
bin/zkServer.sh start
```

### 3. Configure Application

Edit the `src/main/resources/application.yml` file:

```yaml
# Dubbo Configuration
dubbo:
  application:
    name: {{artifactId}}
  registry:
    # Using Nacos
    address: nacos://127.0.0.1:8848
    # Or using Zookeeper
    # address: zookeeper://127.0.0.1:2181
  protocol:
    name: dubbo
    port: 20880
  provider:
    timeout: 10000

{{#useSpringBoot}}
# Spring Boot Configuration
server:
  port: 8080

spring:
  application:
    name: {{artifactId}}

# Logging Configuration
logging:
  level:
    com.alibaba.nacos: WARN
    org.apache.dubbo: INFO
    root: INFO
{{/useSpringBoot}}
```

### 4. Start Application

{{#useSpringBoot}}
```bash
# Using Spring Boot Maven plugin
mvn spring-boot:run

# Or build JAR and run
mvn clean package
java -jar target/{{artifactId}}-{{appVersion}}.jar
```
{{/useSpringBoot}}
{{^useSpringBoot}}
```bash
# Build project
mvn clean compile

# Run main class
mvn exec:java -Dexec.mainClass="{{package}}.Application"
```
{{/useSpringBoot}}

## Project Structure

```
{{artifactId}}/
â”œâ”€â”€ src/main/java/{{package}}/
{{#operations}}
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ {{classname}}.java              # Service Interface
â”‚   â”‚   â””â”€â”€ {{classname}}DubboImpl.java     # Dubbo Service Implementation
{{/operations}}
{{#hasModel}}
â”‚   â”œâ”€â”€ model/                              # Data Models
{{#models}}
{{#model}}
â”‚   â”‚   â””â”€â”€ {{classname}}.java
{{/model}}
{{/models}}
{{/hasModel}}
â”‚   â””â”€â”€ Application.java                    # Main Application Class
â”œâ”€â”€ src/main/resources/
â”‚   â””â”€â”€ application.yml                     # Application Configuration
â”œâ”€â”€ pom.xml                                 # Maven Configuration
â””â”€â”€ README.md                               # Project Documentation
```

## API Interfaces

{{#apiDocumentationUrl}}
For complete API documentation, please visit: [{{apiDocumentationUrl}}]({{apiDocumentationUrl}})
{{/apiDocumentationUrl}}

### Service Interfaces

{{#operations}}
#### {{classname}}
{{#operation}}
- **{{nickname}}**: {{summary}}
  {{#notes}}
  - Description: {{.}}
  {{/notes}}
{{/operation}}

{{/operations}}

## Development Guide

### Implement Business Logic

1. Implement specific business logic in the generated `*DubboImpl.java` classes
2. Inject necessary business service dependencies
3. Handle exceptions and error scenarios

### Custom Configuration

1. **Timeout Configuration**: Adjust `dubbo.provider.timeout` in `application.yml`
2. **Thread Pool Configuration**: Configure `dubbo.provider.threads` and other parameters
3. **Serialization Configuration**: Choose appropriate serialization method

### Monitoring and Operations

1. **Health Checks**: Dubbo provides built-in health check endpoints
2. **Metrics Monitoring**: Integrate with Prometheus or other monitoring systems
3. **Log Management**: Configure appropriate log levels and output formats

## Testing

```bash
# Run unit tests
mvn test

# Run integration tests
mvn integration-test
```

## Deployment

### Development Environment
```bash
mvn spring-boot:run
```

### Production Environment
```bash
# Build production package
mvn clean package -Pprod

# Deploy using Docker
docker build -t {{artifactId}}:{{appVersion}} .
docker run -p 8080:8080 -p 20880:20880 {{artifactId}}:{{appVersion}}
```

## Generator Configuration Options

This project supports the following OpenAPI Generator configuration options:

### Basic Configuration
- `title`: API service title name (Default: "OpenAPI Dubbo")
- `basePackage`: Base package name (Default: "org.openapitools")
- `configPackage`: Configuration class package name (Default: "org.openapitools.configuration")
- `dubboVersion`: Dubbo version (Default: "3.2.0")

### Generation Control
- `interfaceOnly`: Generate interfaces only, no implementation classes (Default: false)
- `serviceInterface`: Generate service interfaces (Default: true)
- `serviceImplementation`: Generate service implementations (Default: true)
- `async`: Use asynchronous methods (Default: false)
- `useTags`: Use tags to create class names (Default: true)
- `useGenericResponse`: Use generic response wrapper (Default: false)

### Registry Configuration
- `registry-address`: Registry address, supports full address format (Default: "zookeeper://127.0.0.1:2181")
  - Zookeeper example: `zookeeper://127.0.0.1:2181`
  - Nacos example: `nacos://127.0.0.1:8848`

#### ðŸ“‹ Automatic Dependency Adaptation by Version
The generator automatically selects the correct dependencies based on Dubbo version:

**Dubbo 3.2 and earlier versions**:
- Zookeeper: `dubbo-dependencies-zookeeper` (Aggregation POM)
- Nacos: `dubbo-registry-nacos` + `nacos-client:2.2.4`

**Dubbo 3.3+ versions**:
- Zookeeper: `dubbo-registry-zookeeper` + `dubbo-remoting-zookeeper-curator5`
- Nacos: `dubbo-registry-nacos` + `nacos-client:2.5.0`

### Date-Time Library Configuration
- `dateLibrary`: Date-time library selection (Default: "java8")
  - `java8`: Java 8 native JSR310 (Recommended, for JDK 1.8+)
  - `java8-localdatetime`: Java 8 using LocalDateTime (For legacy applications only)
  - `joda`: Joda time library (For legacy applications only)
  - `legacy`: Traditional java.util.Date

### Usage Examples

#### ðŸ”§ Dubbo 3.2 Version Example
```bash
# Using Zookeeper (3.2 version automatically uses dubbo-dependencies-zookeeper)
java -jar openapi-generator-cli.jar generate \
-i /Users/redoom/IdeaProjects/openapi.yaml \
-g java-dubbo \
-o /Users/redoom/IdeaProjects/openapi-test \
--additional-properties=registry-address=zookeeper://127.0.0.1:2181 \
--additional-properties=dubboVersion=3.2.0 \
--additional-properties=dateLibrary=java8

# Using Nacos (3.2 version uses nacos-client:2.2.4)
java -jar openapi-generator-cli.jar generate \
-i /Users/redoom/IdeaProjects/openapi.yaml \
-g java-dubbo \
-o /Users/redoom/IdeaProjects/openapi-test \
--additional-properties=registry-address=nacos://127.0.0.1:8848 \
--additional-properties=dubboVersion=3.2.0 \
--additional-properties=dateLibrary=java8
```

#### ðŸš€ Dubbo 3.3+ Version Example
```bash
# Using Zookeeper (3.3+ version automatically uses new modular dependencies)
java -jar openapi-generator-cli.jar generate \
-i /Users/redoom/IdeaProjects/openapi.yaml \
-g java-dubbo \
-o /Users/redoom/IdeaProjects/openapi-test \
--additional-properties=registry-address=zookeeper://127.0.0.1:2181 \
--additional-properties=dubboVersion=3.3.0 \
--additional-properties=dateLibrary=java8

# Using Nacos (3.3+ version uses nacos-client:2.5.0)
java -jar openapi-generator-cli.jar generate \
-i /Users/redoom/IdeaProjects/openapi.yaml \
-g java-dubbo \
-o /Users/redoom/IdeaProjects/openapi-test \
--additional-properties=registry-address=nacos://127.0.0.1:8848 \
--additional-properties=dubboVersion=3.3.0 \
--additional-properties=dateLibrary=java8
```

## Troubleshooting

### Common Issues

1. **Registry Connection Failed**
   - Check if the registry center is started
   - Verify network connection and port configuration

2. **Service Call Timeout**
   - Adjust `dubbo.provider.timeout` settings
   - Check network latency and service performance

3. **Serialization Exception**
   - Ensure all model classes implement `Serializable` interface
   - Check Jackson configuration

### Debug Logging

Enable debug mode to see detailed logs:

```yaml
logging:
  level:
    org.apache.dubbo: DEBUG
    {{package}}: DEBUG
```

## License

This project is licensed under the [Apache License 2.0](LICENSE).

## Contributing

Issues and Pull Requests are welcome!

## Contact

{{#apiDocumentationUrl}}{{infoEmail}}{{/apiDocumentationUrl}}

---

> This project is automatically generated by OpenAPI Generator, based on Apache Dubbo microservice architecture.
