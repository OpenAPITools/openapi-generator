# {{appName}}

{{appDescription}}

Generated by OpenAPI Generator for Beauty C++ Web Server Framework.

## Overview

This server implementation provides:
- **Automatic Request Validation**: Validates path parameters, query parameters, headers, and request bodies according to your OpenAPI specification
- **Type-safe API Handlers**: Generated C++ classes with strongly-typed method signatures
- **Beauty Framework Integration**: Uses the lightweight Beauty web server framework
- **JSON Support**: Built-in JSON parsing and serialization with cJSON
- **Error Handling**: Comprehensive error responses for validation failures

## Validation Features

The generated server includes automatic validation for:

### String Parameters
- **Length validation**: `minLength`, `maxLength` constraints
- **Pattern validation**: Regular expression patterns
- **Enum validation**: Restricted value sets
- **Exact length**: For cases like 32-character tokens

Example OpenAPI spec that generates a 32-character validation:
```yaml
paths:
  /users/{userId}:
    put:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            maxLength: 32
            minLength: 32
            pattern: '^[a-zA-Z0-9]{32}$'
```

### Numeric Parameters
- **Range validation**: `minimum`, `maximum` constraints
- **Exclusive bounds**: `exclusiveMinimum`, `exclusiveMaximum`
- **Type validation**: Ensures valid integers, numbers

### Array Parameters
- **Size validation**: `minItems`, `maxItems`
- **Unique items**: `uniqueItems` constraint

### Request Bodies
- **JSON validation**: Ensures valid JSON format
- **Schema validation**: Type and structure validation

## Building

### Prerequisites

1. **Beauty Web Server Framework**:
   ```bash
   git clone https://github.com/paneda/beauty.git
   cd beauty
   # Follow Beauty's build instructions
   ```

2. **Dependencies**:
   ```bash
   # Ubuntu/Debian
   sudo apt-get install libcjson-dev cmake build-essential

   # CentOS/RHEL
   sudo yum install libcjson-devel cmake gcc-c++
   ```

### Compilation

```bash
mkdir build
cd build
cmake ..
make -j$(nproc)
```

### Running

```bash
./bin/{{packageName}}
```

The server will start on `{{serverHost}}{{^serverHost}}0.0.0.0{{/serverHost}}:{{serverPort}}{{^serverPort}}8080{{/serverPort}}`.

## Implementation

### API Handlers

Each API endpoint is generated as a method in the appropriate class:

```cpp
{{#operations}}
{{#operation}}
// {{httpMethod}} {{path}}
{{#returnType}}{{returnType}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationIdCamelCase}}Implementation({{#allParams}}const {{dataType}}& {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    // Your implementation here
    {{#allParams}}
    {{#isString}}
    {{#hasMaxLength}}
    // {{paramName}} is automatically validated to be {{maxLength}} characters
    {{/hasMaxLength}}
    {{/isString}}
    {{/allParams}}
}
{{/operation}}
{{/operations}}
```

### Custom Validation

You can add custom validation logic in the implementation methods:

```cpp
void MyApiImpl::updateUser(const std::string& userId, const User& userData) {
    // Basic validation is already done by the framework
    // Add business logic validation here
    
    if (userId.length() != 32) {
        throw std::invalid_argument("User ID must be exactly 32 characters");
    }
    
    // Your business logic...
}
```

### Error Responses

Validation errors automatically return HTTP 400 with detailed error messages:

```json
{
  "error": "Parameter 'userId' must be exactly 32 characters long"
}
```

## Customization

### Adding Custom Middleware

You can add custom middleware in `main.cpp`:

```cpp
server->add_middleware([](beauty::Request& req, beauty::Reply& reply, std::function<void()> next) {
    // Custom authentication, logging, etc.
    next();
});
```

### Custom Validation

Extend the validation system by modifying the validation implementation methods or adding business logic validation in your API handlers.

## API Documentation

{{#apiDocumentationUrl}}
API Documentation: {{apiDocumentationUrl}}
{{/apiDocumentationUrl}}

## Generated Files

- **API Classes**: `{{classname}}.hpp/cpp` - Main API endpoint handlers
- **Validation**: `BeautyValidation.hpp/cpp` - Validation utilities
- **Main Server**: `main.cpp` - Server startup and configuration
- **Build System**: `CMakeLists.txt` - CMake build configuration

## Support

For issues with the generated code, please check:
1. Your OpenAPI specification syntax
2. Beauty framework installation
3. Required dependencies (cJSON, etc.)

For Beauty framework issues, see: https://github.com/paneda/beauty
