%% -*- mode: erlang -*-
-module({{packageName}}_schema).

-export([get/0]).
-export([get_raw/0]).
-export([load_raw/0]).
-export([enumerate_components/1]).

-define(COMPONENTS, <<"components">>).

-spec get() -> {{packageName}}:object().
get() ->
    ct_expand:term(enumerate_components(load_raw())).

-spec enumerate_components(Schema :: map()) ->
    Schema :: map() | no_return().
enumerate_components(Schema = #{?COMPONENTS := Components}) ->
    Schema#{?COMPONENTS => maps:map(fun enumerate_discriminator_children/2, Components)};
enumerate_components(Schema) ->
    handle_error(no_components).

-spec enumerate_discriminator_children(Schema :: map()) ->
    Schema :: map() | no_return().
enumerate_discriminator_children(#{<<"schemas">> := Defs}) ->
    try
        maps:fold(fun correct_schema/3, Defs, build_hier(Defs))
    catch
        _:Error ->
            handle_error(Error)
    end;
enumerate_discriminator_children(_) ->
    handle_error(no_schemas).

-spec handle_error(_) ->
    no_return().
handle_error(Error) ->
    erlang:error({schema_invalid, Error}).

build_hier(Defs) ->
    F = fun
        (Name, #{<<"discriminator">> := _Type}, Acc) ->
            insert_parent(Name, Acc);

        (Name, #{<<"allOf">> := Props}, Acc) ->
            lists:foldl(
                fun
                    (#{<<"$ref">> := <<"#/components/schemas/", Type/binary>>}, Hier) ->
                        insert_child( Type, Name, Hier );

                    (_, Hier) ->
                        Hier
                end,
                Acc,
                Props
            )
    end,
    maps:fold(F, #{}, Defs).


insert_parent(Parent, Hier) when not is_map_key(Parent, Hier) ->
    Hier#{Parent => []};
insert_parent(_, Hier) ->
    Hier.

insert_child(Parent, Child, Hier) ->
    maps:put(Parent, [Child | maps:get(Parent, Hier, [])], Hier).


correct_schema(Parent, Children, Schema) ->
    PropertyName = get_sub_schema([Parent, <<"discriminator">>, <<"propertyName">>], Schema),
    update_schema(Children, [Parent, <<"properties">>, PropertyName, <<"enum">>], Schema).

update_schema(Value, [Key], Schema) ->
    Schema#{Key => Value};
update_schema(Value, [Key | Path], Schema) ->
    maps:put(Key, update_schema(Value, Path, maps:get(Key, Schema)), Schema).

get_sub_schema(Path, Schema) ->
    lists:foldl(fun maps:get/2, Schema, Path).

-spec get_raw() -> map().
get_raw() ->
    ct_expand:term(load_raw()).

-spec load_raw() -> map().
load_raw() ->
    {ok, Data} = file:read_file(get_openapi_path()),
    jsx:decode(Data, [return_maps]).

get_openapi_path() ->
    filename:join(code:priv_dir({{packageName}}), "{{{openAPISpecName}}}.json").

-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").

-define(SCHEMA,
<<"{\"components\": {
    \"schemas\": {
       \"Pet\": {
         \"type\":          \"object\",
         \"discriminator\": {
            \"propertyName\": \"petType\"
         },
         \"properties\": {
            \"name\":    {\"type\": \"string\"},
            \"petType\": {\"type\": \"string\"}
         },
         \"required\": [\"name\", \"petType\"]
       },
       \"Cat\": {
         \"description\": \"A representation of a cat\",
         \"allOf\": [
           {\"$ref\": \"#/components/schemas/Pet\"},
           {
             \"type\":       \"object\",
             \"properties\": {
               \"huntingSkill\": {
                 \"type\":        \"string\",
                 \"description\": \"The measured skill for hunting\",
                 \"default\":     \"lazy\",
                 \"enum\":        [\"clueless\", \"lazy\", \"adventurous\", \"aggressive\"]
               }
             },
             \"required\": [\"huntingSkill\"]
           }
         ]
       },
       \"Dog\": {
         \"description\": \"A representation of a dog\",
         \"allOf\": [
           {\"$ref\": \"#/components/schemas/Pet\"},
           {
             \"type\":       \"object\",
             \"properties\": {
               \"packSize\": {
                 \"type\":        \"integer\",
                 \"format\":      \"int32\",
                 \"description\": \"the size of the pack the dog is from\",
                 \"default\":     0,
                 \"minimum\":     0
               }
             }
           }
         ],
         \"required\": [\"packSize\"]
       },
       \"Person\": {
         \"type\":          \"object\",
         \"discriminator\": {
            \"propertyName\": \"personType\"
          },
         \"properties\": {
           \"name\": {\"type\": \"string\"},
           \"sex\": {
             \"type\": \"string\",
             \"enum\": [\"male\", \"female\"]
           },
           \"personType\": {\"type\": \"string\"}
         },
         \"required\": [\"name\", \"sex\", \"personType\"]
       },
       \"WildMix\": {
         \"allOf\": [
           {\"$ref\": \"#/components/schemas/Pet\"},
           {\"$ref\": \"#/components/schemas/Person\"}
         ],
       },
       \"Dummy\": {
         \"type\":          \"object\",
         \"discriminator\": {
            \"propertyName\": \"dummyType\"
         },
         \"properties\": {
           \"name\":      {\"type\": \"string\"},
           \"dummyType\": {\"type\": \"string\"}
         },
         \"required\": [\"name\", \"dummyType\"]
       }
    }
}}">>).

get_enum(Parent, Discr, ComponentType, Schema) ->
    lists:sort(get_sub_schema([?COMPONENTS, ComponentType, Parent, <<"properties">>, Discr, <<"enum">>], Schema)).

-spec test() -> _.
-spec enumerate_discriminator_children_test() -> _.
enumerate_discriminator_children_test() ->
    Schema      = jsx:decode(?SCHEMA, [return_maps]),
    FixedSchema = enumerate_components(Schema),
    ?assertEqual(
        [<<"Cat">>, <<"Dog">>, <<"WildMix">>],
        get_enum(<<"Pet">>, <<"petType">>, <<"schemas">>, FixedSchema)
    ),
    ?assertEqual([<<"WildMix">>], get_enum(<<"Person">>, <<"personType">>, <<"schemas">>, FixedSchema)),
    ?assertEqual([],              get_enum(<<"Dummy">>,  <<"dummyType">>,  <<"schemas">>, FixedSchema)).

-spec get_test() -> _.
get_test() ->
    ?assertEqual(
        enumerate_components(get_raw()),
        ?MODULE:get()
    ).
-endif.
