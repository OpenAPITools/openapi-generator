<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>{{ gatlingParentLibGroupId }}</groupId>
        <artifactId>{{ gatlingParentLibArtifactId }}</artifactId>
        <version>{{ gatlingParentLibVersion }}</version>
        <relativePath/>
    </parent>

    <repositories>
        <repository>
            <id>github</id>
            <name>Github Packages</name>
            <url>https://maven.pkg.github.com/{{ organization }}/{{ artifactId }}</url>
        </repository>
    </repositories>

    <groupId>{{ mainPackage }}</groupId>
    <artifactId>{{ artifactId }}</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>

        <!-- build properties -->
        <maven.compiler.source>{{ javaVersion }}</maven.compiler.source>
        <maven.compiler.target>{{ javaVersion }}</maven.compiler.target>
        <jvm.target>21</jvm.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- dependency versioning -->
        <guava.version>{{ guavaVersion }}</guava.version>


        <!-- Perfana settings - usually no need to touch -->
        <perfanaUrl>{{ perfanaUrl }}</perfanaUrl>
        <influx.host>{{ influxHost }}</influx.host> <!-- Gatling sends its data to influxdb through its graphite output plugin -->
        <influx.port>{{ influxPort }}</influx.port>
        <influx.protocol>{{ influxProtocol }}</influx.protocol>
        <graphite.rootPathPrefix>{{ graphitePrefix }}</graphite.rootPathPrefix> <!-- name of the database in influxdb that stores the gatling data - this matches the grafana Gatling dashboard in Perfana -->
        <perfanaEnabled>{{ perfanaEnabled }}</perfanaEnabled> <!-- if perfanaEnabled is true, the perfana client is enabled, incl. its scheduler -->
        <eventsEnabled>{{ perfanaEnabled }}</eventsEnabled> <!-- if eventsEnabled is true, the events scheduled in the perfana scheduler will be executed -->
        <assertResultsEnabled>{{ perfanaEnabled }}</assertResultsEnabled> <!-- if perfanaEnabled is true, this will pass/fail a run by requesting Perfana for outcome of configured checks -->
        <tags>gatling,springboot,kubernetes</tags> <!-- these tags correspond to profiles in Perfana. These profiles contain dashboards and checks. If your SUT is not on kubernetes/springboot, keeping these here doesn't harm -->
        <debug>false</debug> <!-- by default we don't run in debug mode -->
        <scenario>acceptance</scenario> <!-- In Gatling multiple scenario's can be defined, see file src/test/kotlin/com.ahold/setup/Scenarios.kt. By default we run the Acceptance scenario. -->

        <!-- Project specific settings / make sure they are correct -->
        <systemUnderTest>{{ systemUnderTest }}</systemUnderTest> <!-- this is the name under which the test runs are registered in Perfana. SUT = System Under Test -->
        <!-- If needed, update perfanaApplications with other services that are in scope of the test for example:
        <perfanaApplications>^order-service$|^member-service$</perfanaApplications> -->
        <perfanaApplications>^{{ systemUnderTest }}$</perfanaApplications> <!-- perfanaApplications is used to automatically generate grafana dashboards in Perfana. -->
        <simulationClass>{{ setUpPackage }}.{{ simulationClassName }}</simulationClass>
        <ahIdpUrl>{{ ahIdpUrl }}</ahIdpUrl> <!-- this is the url of the identity/token provider for the test environment -->

        <!-- Optional: database configuration to take Test Data-->
        <db.url>{{ dbUrl }}</db.url>
        <db.username>{{ dbUsername }}</db.username>
        <db.password>{{ dbPassword }}</db.password>

    </properties>

    <dependencies>
        <dependency>
            <groupId>{{ gatlingParentLibGroupId }}</groupId>
            <artifactId>{{ gatlingParentLibDependencyArtifactId }}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.perfana</groupId>
                <artifactId>events-gatling-maven-plugin</artifactId>
                <configuration>
                    <jvmArgs combine.children="append">
                        <!-- If you scroll down this pom you will find the profiles. These profiles can contain properties that you need to pass to Gatling. Add them here.
                        Note, that other properties are already defined in lib-gatling parent library -->
                        <jvmArg>-DtestEnvironment=${testEnvironment}</jvmArg>
                        <jvmArg>-DidpUrl=${ahIdpUrl}</jvmArg>
                        <jvmArg>-Ddb.url=${db.url}</jvmArg>
                        <jvmArg>-Ddb.username=${db.username}</jvmArg>
                        <jvmArg>-Ddb.password=${db.password}</jvmArg>
                        <!-- this is the initial and maximum jvm heap size. 2 GB usually is enough and allows to run on most runners. If you believe you need more, make sure your runner has sufficient memory allocated. -->
                        <jvmArg>-Xms1g</jvmArg>
                        <jvmArg>-Xmx2560m</jvmArg>
                    </jvmArgs>
                    <eventSchedulerConfig>
                        <debugEnabled>false</debugEnabled>
                        <schedulerEnabled>${eventsEnabled}</schedulerEnabled>
                        <failOnError>true</failOnError>
                        <continueOnEventCheckFailure>true</continueOnEventCheckFailure>
                        <testConfig>
                            <systemUnderTest>${systemUnderTest}</systemUnderTest>
                            <version>${sut.version}</version>
                            <workload>${workload}</workload>
                            <testEnvironment>${testEnvironment}</testEnvironment>
                            <testRunId>${testRunId}</testRunId>
                            <buildResultsUrl>${buildResultsUrl}</buildResultsUrl>
                            <rampupTimeInSeconds>${rampupTimeInSeconds}</rampupTimeInSeconds>
                            <constantLoadTimeInSeconds>${constantLoadTimeInSeconds}</constantLoadTimeInSeconds>
                            <annotations>${annotations}</annotations>  <!-- this is used in the default workflow to contain the commit message. This is also shown in Perfana UI. -->
                            <tags>${tags}</tags>
                        </testConfig>
                        <eventConfigs>
                            <eventConfig implementation="io.perfana.event.PerfanaEventConfig">
                                <!-- the PerfanaEventConfig will automatically create testrun ID, but also do start/stop test events. etc. -->
                                <name>PerfanaEvent</name>
                                <perfanaUrl>${perfanaUrl}</perfanaUrl>
                                <enabled>${eventsEnabled}</enabled>
                                <apiKey>${apiKey}</apiKey>
                                <assertResultsEnabled>${assertResultsEnabled}</assertResultsEnabled>
                                <variables>
                                    <perfana-applications>${perfanaApplications}</perfana-applications>
                                </variables>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.testrunconfigcommand.TestRunConfigCommandEventConfig">
                                <name>KubernetesGetDeployment</name>
                                <command>cat ${kubectlJsonOutput}</command>
                                <includes>resources,image,replicas,strategy,kubernetes</includes>
                                <excludes>status,password,TOKEN,env</excludes>
                                <output>keys</output>
                                <tags>${tags}</tags>
                            </eventConfig>
                        </eventConfigs>
                    </eventSchedulerConfig>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- ************************************************************************
     Below we have defined profiles.

     First the test environment profiles, which define the target environment.
     Usually there is a local and acceptance environment defined, but some teams
     also execute tests on their test environment and have a test profile.

     Second, the workload profiles. The workloads define how many users are
     simulated in a ramp-up phase (increase at start of the test) and a constant
     load time.

     At the bottom you'll find the debug profile. The debug profile is a workload,
     but does three special things:
     1. it runs the gatling project in debug mode
     2. it disables perfana integration
     3. it runs the debug scenario (remember: at the top in the 'scenario' property
        we defined the acceptance scenario as the default)
     If you run the debug scenario, you might want to change the resources\logback.xml
     file, so you get more debug information.

     Usually during development of the Performance test you would run the following
     on your workstation:

     $mvn clean events-gatling:test -Pdebug -Pacc
     or:
     $mvn clean events-gatling:test -Pdebug -Plocal

     If you want to test the application/SUT that is running on your local:

     $mvn clean events-gatling:test -Pstress -Plocal

     And from the GitHub action we would run:

     $mvn clean events-gatling:test -Pload -Pacc

     ************************************************************************* -->

    <profiles>

        <!-- Test testEnvironment profiles -->

        <profile>
            <id>local</id>
            <properties>
                <targetBaseUrl>{{ targetBaseUrl }}</targetBaseUrl>
                <idpUrl>${ahIdpUrl}</idpUrl>
                <testEnvironment>local</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>acc</id>
            <properties>
                <targetBaseUrl>{{ targetBaseUrl }}</targetBaseUrl>
                <idpUrl>${ahIdpUrl}</idpUrl>
                <testEnvironment>ah</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>tst</id>
            <properties>
                <targetBaseUrl>{{ targetBaseUrl }}</targetBaseUrl>
                <idpUrl>${ahIdpUrl}</idpUrl>
                <testEnvironment>tst</testEnvironment>
            </properties>
        </profile>

        <!-- Workload profiles for stress, load and endurance tests -->
        <profile>
            <id>stress</id>
            <properties>
                <workload>stressTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>100</targetUsersPerSecond>
                <rampupTimeInSeconds>900</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>1</constantLoadTimeInSeconds>
            </properties>
        </profile>

        <profile>
            <id>load</id>
            <properties>
                <workload>loadTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>30</targetUsersPerSecond>
                <rampupTimeInSeconds>60</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>900</constantLoadTimeInSeconds>
            </properties>
        </profile>

        <profile>
            <id>endurance</id>
            <properties>
                <workload>enduranceTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>10</targetUsersPerSecond>
                <rampupTimeInSeconds>60</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>86400</constantLoadTimeInSeconds>
            </properties>
        </profile>

        <!-- Debug profile -->

        <profile>
            <id>debug</id>
            <properties>
                <debug>true</debug>
                <scenario>debug</scenario>
                <perfanaEnabled>false</perfanaEnabled>
                <eventsEnabled>false</eventsEnabled>
                <assertResultsEnabled>false</assertResultsEnabled>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>1</targetUsersPerSecond>
                <rampupTimeInSeconds>1</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>60</constantLoadTimeInSeconds>
            </properties>
        </profile>

    </profiles>
</project>
