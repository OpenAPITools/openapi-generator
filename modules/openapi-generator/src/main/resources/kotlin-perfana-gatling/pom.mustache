<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.ahold.libraries</groupId>
        <artifactId>lib-gatling-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>

    <repositories>
        <repository>
            <id>github</id>
            <name>Github Packages</name>
            <url>https://maven.pkg.github.com/RoyalAholdDelhaize/price-promotion-superpom</url>
        </repository>
    </repositories>

    <groupId>com.ahold</groupId>
    <artifactId>{{ artifactId }}</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <guava.version>31.1-jre</guava.version>
        <simulationClass>{{ setUpPackage }}.{{ simulationClassName }}</simulationClass>

        <!-- Default scenario -->
        <scenario>acceptance</scenario>

        <!-- Perfana settings -->
        <debug>false</debug>
        <testRunId>test-run</testRunId>
        <eventsEnabled>true</eventsEnabled>
        <eventScheduleScript></eventScheduleScript>
        <perfanaEnabled>{{ perfanaEnabled }}</perfanaEnabled>
        <perfanaUrl>{{ perfanaUrl }}</perfanaUrl>
        <assertResultsEnabled>true</assertResultsEnabled>

        <!-- Perfana Dashboard settings -->
        <systemUnderTest>{{ systemUnderTest }}</systemUnderTest>
        <perfanaApplications>{{ systemUnderTest }}</perfanaApplications>
        <version>1.0</version>
        <tags></tags>
        <influx.host>{{ influxHost }}</influx.host>
        <influx.port>{{ influxPort }}</influx.port>
        <influx.protocol>{{ influxProtocol }}</influx.protocol>
        <graphitePrefix>{{ graphitePrefix }}</graphitePrefix>
        <db.url>{{ dbUrl }}</db.url>
        <db.username>{{ dbUsername }}</db.username>
        <db.password>{{ dbPassword }}</db.password>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.ahold.libraries</groupId>
            <artifactId>lib-gatling</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.perfana</groupId>
                <artifactId>events-gatling-maven-plugin</artifactId>
                <configuration>
                    <jvmArgs combine.children="append">
                        <jvmArg>-DtestEnvironment=${testEnvironment}</jvmArg>
                        <jvmArg>-DidpUrl=${idpUrl}</jvmArg>
                        <jvmArg>-Ddb.url=${db.url}</jvmArg>
                        <jvmArg>-Ddb.username=${db.username}</jvmArg>
                        <jvmArg>-Ddb.password=${db.password}</jvmArg>
                        <jvmArg>-Xms1g</jvmArg>
                        <jvmArg>-Xmx4g</jvmArg>
                    </jvmArgs>
                    <eventSchedulerConfig>
                        <debugEnabled>false</debugEnabled>
                        <schedulerEnabled>${eventsEnabled}</schedulerEnabled>
                        <failOnError>true</failOnError>
                        <continueOnEventCheckFailure>true</continueOnEventCheckFailure>
                        <scheduleScript>
                            ${eventScheduleScript}
                        </scheduleScript>
                        <eventConfigs>
                            <eventConfig implementation="io.perfana.event.PerfanaEventConfig">
                                <name>PerfanaEvent</name>
                                <perfanaUrl>${perfanaUrl}</perfanaUrl>
                                <enabled>${perfanaEnabled}</enabled>
                                <apiKey>${apiKey}</apiKey>
                                <assertResultsEnabled>${assertResultsEnabled}</assertResultsEnabled>
                                <variables>
                                    <perfana-applications>${perfanaApplications}</perfana-applications>
                                </variables>
                                <testConfig>
                                    <systemUnderTest>${systemUnderTest}</systemUnderTest>
                                    <version>${version}</version>
                                    <workload>${workload}</workload>
                                    <testEnvironment>${testEnvironment}</testEnvironment>
                                    <testRunId>${testRunId}</testRunId>
                                    <buildResultsUrl>${buildResultsUrl}</buildResultsUrl>
                                    <rampupTimeInSeconds>${rampupTimeInSeconds}</rampupTimeInSeconds>
                                    <constantLoadTimeInSeconds>${constantLoadTimeInSeconds}</constantLoadTimeInSeconds>
                                    <annotations>${annotations}</annotations>
                                    <tags>${tags}</tags>
                                </testConfig>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.testrunconfigcommand.TestRunConfigCommandEventConfig">
                                <name>KubernetesGetDeployment</name>
                                <command>kubectl get deployment ${systemUnderTest} -n ah -ojson</command>
                                <includes>resources,image,replicas,strategy,kubernetes</includes>
                                <excludes>status,password,TOKEN,env</excludes>
                                <output>keys</output>
                                <tags>kubernetes,${systemUnderTest}</tags>
                            </eventConfig>
                        </eventConfigs>
                    </eventSchedulerConfig>
                </configuration>
            </plugin>
        </plugins>
    </build>

        <!-- ************************************************************************ ==
    == Below we have defined three sets of profiles, which control the type of    ==
    == test that will be run and the targeted testEnvironment.                    ==
    == If you wish to run a stress test with scenario "default" on environment    ==
    == "ah", use: mvn clean events-gatling:test -Pstress,ah             ==
    == ************************************************************************ -->

    <profiles>
        <!-- Test testEnvironment profiles -->
        <profile>
            <id>tst</id>
            <properties>
                <targetBaseUrl>{{ targetBaseUrl }}</targetBaseUrl>
                <idpUrl>http://idp.ah-tst.k8s.digitaldev.nl</idpUrl>
                <testEnvironment>tst</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>ah</id>
            <properties>
                <targetBaseUrl>{{ targetBaseUrl }}</targetBaseUrl>
                <idpUrl>http://idp.ah-acc.k8s.digitaldev.nl</idpUrl>
                <testEnvironment>ah</testEnvironment>
            </properties>
        </profile>

        <!-- Workload profiles for stress, load and endurance tests -->
        <profile>
            <id>stress</id>
            <properties>
                <workload>stress</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>30</targetUsersPerSecond>
                <rampupTimeInSeconds>900</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>1</constantLoadTimeInSeconds>
                <testRunId>${systemUnderTest}-${workload}-${testEnvironment}-${maven.build.timestamp}</testRunId>
                <tags>gatling,stress-test</tags>
            </properties>
        </profile>

        <profile>
            <id>load</id>
            <properties>
                <workload>load</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>2</targetUsersPerSecond>
                <rampupTimeInSeconds>30</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>1200</constantLoadTimeInSeconds>
                <testRunId>${systemUnderTest}-${workload}-${testEnvironment}-${maven.build.timestamp}</testRunId>
                <tags>gatling,load-test</tags>
            </properties>
        </profile>

        <profile>
            <id>endurance</id>
            <properties>
                <workload>endurance</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>60</targetUsersPerSecond>
                <rampupTimeInSeconds>900</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>86400</constantLoadTimeInSeconds>
                <testRunId>${systemUnderTest}-${workload}-${testEnvironment}-${maven.build.timestamp}</testRunId>
                <tags>gatling,endurance-test</tags>
            </properties>
        </profile>

        <profile>
            <id>debug</id>
            <properties>
                <debug>true</debug>
                <scenario>debug</scenario>
<!--                <testRunId>${systemUnderTest}-${workload}-${testEnvironment}-${maven.build.timestamp}</testRunId>-->
                <graphitePrefix>gatling2.debug</graphitePrefix>
                <assertResultsEnabled>false</assertResultsEnabled>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>1</targetUsersPerSecond>
                <rampupTimeInSeconds>1</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>60</constantLoadTimeInSeconds>
                <eventsEnabled>false</eventsEnabled>
            </properties>
        </profile>

        <profile>
            <id>acceptance</id>
            <properties>
                <scenario>acceptance</scenario>
            </properties>
        </profile>

        <!-- This profile can be used to route the traffic through a proxy for debugging  -->
        <profile>
            <id>proxy</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <useProxy>true</useProxy>
            </properties>
        </profile>

        <!-- This profile can be used to trigger the assertions  to assert test run results from the pipeline   -->
        <profile>
            <id>assert-results</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <assertResultsEnabled>true</assertResultsEnabled>
            </properties>
        </profile>

    </profiles>
</project>
