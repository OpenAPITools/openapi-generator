
{{#hasImports}}
{{#imports}}
// eslint-disable-next-line no-duplicate-imports
import type { {{{.}}} } from './{{{.}}}';
{{/imports}}
{{/hasImports}}

{{!imports }
// eslint-disable-next-line no-duplicate-imports
import { {{{.}Mock } from './{{{.}';
{{/imports}
{{/hasImports}

const getDataFromType = (type: string) => {
  switch (type) {
    case 'string':
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return faker.random.words();
    case 'boolean':
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return faker.random.boolean();
    case 'number':
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return faker.random.number();
    case 'string[]':
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return Array.from({length: 10}).map((): string => faker.random.words());
    case 'number[]':
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return Array.from({length: 10}).map((): number => faker.random.number());
    {{#hasImports}
    {{#imports}
    case '{{{.}':
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return {{{.}Mock.build();
    case '{{{.}[]':
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return {{{.}Mock.buildList(10);
    {{/imports}
    {{/hasImports}
    default:
      return '';
  }
};
}}

/**
 * {{{description}}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}} {{#allParents.0}}extends{{#allParents}} {{{.}}}{{^-last}},{{/-last}}{{/allParents}}{{/allParents.0}} {
{{#additionalPropertiesType}}
  [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};
{{/additionalPropertiesType}}
{{#vars}}
  /**
   * {{{description}}}
   * @type {{=<% %>=}}{<%&datatype%>}<%={{ }}=%>
   * @memberof {{classname}}
   */
  {{#isReadOnly}}readonly {{/isReadOnly}}{{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
/**
* @export
* @enum {string}
*/
export enum {{classname}}{{enumName}} {
{{#allowableValues}}
  {{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
  {{/enumVars}}
{{/allowableValues}}
}
{{/isEnum}}
{{/vars}}

{{/hasEnums}}

{{!/****************************************** MOCKS *****************************************************************/
{{!hasEnums}
{{#vars}
{{#isEnum}
/**
* @export
* @mock enum {string}
*/
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call
export const {{classname}{{enumName}Mock = ({
  mock() {
    const enumValues = Object.keys({{classname}{{enumName})
      .map(n => Number.parseInt(n))
      .filter(n => !Number.isNaN(n));
    const randomIndex = Math.floor(Math.random() * enumValues.length);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return enumValues[randomIndex];
  },
  build() {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
    return this.mock();
  },
  buildList(length: number) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment
    return Array.from({length}).map(() => this.mock());
  }
});
{{/isEnum}
{{/vars}
{{/hasEnums}
/**
* {{{description} mock data factory
* @export
* @mock {{classname}
*/
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call
export const {{classname}Mock = Sync.makeFactory<{{classname}>({
{{#vars}
  /**
  * {{{description}
  * @type {{=<% %>=}{<%&datatype%>}<%={{ }=%>
  * @memberof {{classname}
  */
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment
  {{name}: getDataFromType('{{{datatype}'),
{{/vars}
});

/****************************************** END MOCKS **************************************************************/
}}