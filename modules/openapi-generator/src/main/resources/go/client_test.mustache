/*
{{#appName}}
{{{.}}}
{{/appName}}

Testing Client

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package {{packageName}}

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	{{goImportAlias}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}{{#isGoSubmodule}}/{{packageName}}{{/isGoSubmodule}}"
)

func Test_{{packageName}}_jsonCheck(t *testing.T) {
	testCases := []testCase{
		{"application/json", true},
		{"application/vnd.org.application+json", true},
		{"application/hal+json", true},
		{"text/json", true},
		{"text/vnd.org.application+json", true},
		{"text/hal+json", true},

		{"application/bson", false},
		{"application/+json", false},
		{"text/bson", false},
		{"text/+json", false},

		{"zip/json", false},
	}

	for _, c := range testCases {
		assert.Equal(t, c.ShouldMatch, {{goImportAlias}}.jsonCheck.MatchString(c.String))
	}
}

func Test_{{packageName}}_xmlCheck(t *testing.T) {
	testCases := []testCase{
		{"application/xml", true},
		{"application/vnd.org.application+xml", true},
		{"application/hal+xml", true},
		{"text/xml", true},
		{"text/vnd.org.application+xml", true},
		{"text/hal+xml", true},

		{"application/bmx", false},
		{"application/+xml", false},
		{"text/bmx", false},
		{"text/+xml", false},

		{"zip/xml", false},
	}

	for _, c := range testCases {
		assert.Equal(t, c.ShouldMatch, {{goImportAlias}}.xmlCheck.MatchString(c.String))
	}
}

func Test_{{packageName}}_Client(t *testing.T) {

	configuration := {{goImportAlias}}.NewConfiguration()
	apiClient := {{goImportAlias}}.NewAPIClient(configuration)

{{#operations}}
{{#operation}}
	t.Run("Test {{classname}}Service {{{nickname}}}", func(t *testing.T) {

		{{^pathParams}}
		t.Skip("skip test")  // remove to run test
		{{/pathParams}}
		{{#pathParams}}
		{{#-first}}
		t.Skip("skip test")  // remove to run test

		{{/-first}}
		var {{paramName}} {{{dataType}}}
		{{/pathParams}}

		{{#returnType}}resp, {{/returnType}}httpRes, err := apiClient.{{classname}}.{{operationId}}(context.Background(){{#pathParams}}, {{paramName}}{{/pathParams}}).Execute()

		require.Nil(t, err)
		{{#returnType}}
		require.NotNil(t, resp)
		{{/returnType}}
		assert.Equal(t, 200, httpRes.StatusCode)

	})

{{/operation}}
{{/operations}}
}
