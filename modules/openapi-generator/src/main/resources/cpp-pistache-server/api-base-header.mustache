{{>licenseInfo}}
/*
 * ApiBase.h
 *
 * Generalization of the Api classes
 */

#ifndef ApiBase_H_
#define ApiBase_H_

#include <pistache/router.h>
#include <memory>

namespace {{apiNamespace}}
{


    {{#authMethods}}{{#isBasicBasic}}
    typedef struct
    {
        std::string user;
        std::string password;
    } HttpBasicCredentials;

    typedef std::function<bool(const HttpBasicCredentials &)> BasicCredentialsAuthenticator;
    {{/isBasicBasic}}{{/authMethods}}



class ApiBase {
public:
    explicit ApiBase(const std::shared_ptr<Pistache::Rest::Router>& rtr) : router(rtr) {};
    virtual ~ApiBase() = default;
    virtual void init() = 0;

    {{#authMethods}}{{#isBasicBasic}}
    bool canCredentialsBeAccepted(const HttpBasicCredentials& credentials) const;
    void setBasicCredentialsAuthenticator( const BasicCredentialsAuthenticator &newBasicCredentialsAuthenticator)
    {
        basicCredentialsAuthenticator = newBasicCredentialsAuthenticator;
    }

    {{/isBasicBasic}}{{/authMethods}}


protected:
    const std::shared_ptr<Pistache::Rest::Router> router;
    {{#authMethods}}{{#isBasicBasic}}std::optional<BasicCredentialsAuthenticator> basicCredentialsAuthenticator;{{/isBasicBasic}}{{/authMethods}}


};

} // namespace {{apiNamespace}}

#endif /* ApiBase_H_ */
