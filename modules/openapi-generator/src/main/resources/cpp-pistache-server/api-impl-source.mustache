{{>licenseInfo}}
{{#operations}}

#include "{{classname}}Impl.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

{{#hasModelImport}}
using namespace {{modelNamespace}};{{/hasModelImport}}

{{classname}}Impl::{{classname}}Impl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : {{classname}}(rtr)
{
    {{#authMethods}}{{#isBasicBasic}}/*

    Http Basic Auth

    Do this in the individual classes in the constructor

    this->setBasicCredentialsAuthenticator(
    [](const HttpBasicCredentials &credentials)->bool
    {
        return credentials.user == "foo" && credentials.password == "bar";
    }
    );

    or in main:

    for (auto api : apiImpls) {
        api->init();

          setBasicCredentialsAuthenticator(
        [](const HttpBasicCredentials &credentials)->bool
        {
            return credentials.user == "foo" && credentials.password == "bar";
        }
        );
    }

    or a mix.

    Until you do either, protected resources will result in a 401.
    */{{/isBasicBasic}}{{/authMethods}}

}

{{#operation}}
{{#vendorExtensions.x-codegen-pistache-is-parsing-supported}}
void {{classname}}Impl::{{operationIdSnakeCase}}({{#authMethods}}{{#isBasicBasic}}const HttpBasicCredentials &credentials, {{/isBasicBasic}}{{/authMethods}}{{#allParams}}const {{{dataType}}} &{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#hasParams}}, {{/hasParams}}Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
{{/vendorExtensions.x-codegen-pistache-is-parsing-supported}}
{{^vendorExtensions.x-codegen-pistache-is-parsing-supported}}
void {{classname}}Impl::{{operationIdSnakeCase}}(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
{{/vendorExtensions.x-codegen-pistache-is-parsing-supported}}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
