{{>licenseInfo}}
{{#models}}{{#model}}

#include "{{classname}}.h"
{{#isEnum}}#include <stdexcept>
#include <sstream>{{/isEnum}}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}::{{classname}}()
{
    {{#vars}}{{^isContainer}}{{#isPrimitiveType}}m_{{name}} = {{{defaultValue}}};
    {{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}m_{{name}} = {{{defaultValue}}};
    {{/isString}}{{#isDateTime}}m_{{name}} = {{{defaultValue}}};
    {{/isDateTime}}{{/isPrimitiveType}}{{/isContainer}}{{^required}}m_{{name}}IsSet = false;
    {{/required}}{{/vars}}
}

{{classname}}::~{{classname}}()
{
}

void {{classname}}::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const {{classname}}& o)
{
    j = nlohmann::json();
    {{#vars}}
    {{#required}}j["{{baseName}}"] = o.m_{{name}};{{/required}}{{^required}}if(o.{{nameInCamelCase}}IsSet(){{#isContainer}} || !o.m_{{name}}.empty(){{/isContainer}})
        j["{{baseName}}"] = o.m_{{name}};{{/required}}
    {{/vars}}
    {{#isEnum}}{{#allowableValues}}
    switch (o.getValue())
    {
        {{#enumVars}}
        {{#-first}}
        case {{classname}}::e{{classname}}::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        {{/-first}}
        case {{classname}}::e{{classname}}::{{name}}:
            j = "{{value}}";
            break;
        {{/enumVars}}
    }{{/allowableValues}}{{/isEnum}}
}

void from_json(const nlohmann::json& j, {{classname}}& o)
{
    {{#vars}}
    {{#required}}j.at("{{baseName}}").get_to(o.m_{{name}});{{/required}}{{^required}}if(j.find("{{baseName}}") != j.end())
    {
        j.at("{{baseName}}").get_to(o.m_{{name}});
        o.m_{{name}}IsSet = true;
    } {{/required}}
    {{/vars}}
    {{#isEnum}}{{#allowableValues}}
    auto s = j.get<std::string>();
    {{#enumVars}}
    {{#-first}}if{{/-first}}{{^-first}}else if{{/-first}} (s == "{{value}}") {
     o.setValue({{classname}}::e{{classname}}::{{name}});
    } {{#-last}} else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " {{classname}}::e{{classname}}";
     throw std::invalid_argument(ss.str());
    } {{/-last}}
{{/enumVars}}{{/allowableValues}}{{/isEnum}}
}

{{#vars}}{{{dataType}}}{{#isContainer}}&{{/isContainer}} {{classname}}::{{getter}}(){{^isContainer}} const{{/isContainer}}
{
    return m_{{name}};
}
void {{classname}}::{{setter}}({{{dataType}}} const{{^isPrimitiveType}}&{{/isPrimitiveType}} value)
{
    m_{{name}} = value;{{^required}}
    m_{{name}}IsSet = true;{{/required}}
}
{{^required}}bool {{classname}}::{{nameInCamelCase}}IsSet() const
{
    return m_{{name}}IsSet;
}
void {{classname}}::unset{{name}}()
{
    m_{{name}}IsSet = false;
}
{{/required}}
{{/vars}}
{{#isEnum}}{{classname}}::e{{classname}} {{classname}}::getValue() const
{
    return m_value;
}
void {{classname}}::setValue({{classname}}::e{{classname}} value)
{
    m_value = value;
}{{/isEnum}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
