package {{package}}

{{#imports}}import {{import}}
{{/imports}}
{{#swagger2AnnotationLibrary}}
    import io.swagger.v3.oas.annotations.*
    import io.swagger.v3.oas.annotations.enums.*
    import io.swagger.v3.oas.annotations.media.*
    import io.swagger.v3.oas.annotations.responses.*
    import io.swagger.v3.oas.annotations.security.*
{{/swagger2AnnotationLibrary}}
{{#swagger1AnnotationLibrary}}
    import io.swagger.annotations.Api
    import io.swagger.annotations.ApiOperation
    import io.swagger.annotations.ApiParam
    import io.swagger.annotations.ApiResponse
    import io.swagger.annotations.ApiResponses
    import io.swagger.annotations.Authorization
    import io.swagger.annotations.AuthorizationScope
{{/swagger1AnnotationLibrary}}

{{#useBeanValidation}}
    import {{javaxPackage}}.validation.Valid
    import {{javaxPackage}}.validation.constraints.DecimalMax
    import {{javaxPackage}}.validation.constraints.DecimalMin
    import {{javaxPackage}}.validation.constraints.Email
    import {{javaxPackage}}.validation.constraints.Max
    import {{javaxPackage}}.validation.constraints.Min
    import {{javaxPackage}}.validation.constraints.NotNull
    import {{javaxPackage}}.validation.constraints.Pattern
    import {{javaxPackage}}.validation.constraints.Size
{{/useBeanValidation}}

import jakarta.inject.Inject
import jakarta.inject.Singleton

// TODO("Only import what we need")
import misk.web.Delete
import misk.web.Description
import misk.web.Get
import misk.web.HttpCall
import misk.web.PathParam
import misk.web.Post
import misk.web.Put
import misk.web.QueryParam
import misk.web.RequestBody
import misk.web.RequestContentType
import misk.web.RequestHeaders
import misk.web.ResponseContentType
import misk.web.actions.WebAction
import misk.web.interceptors.LogRequestResponse
import misk.web.mediatype.MediaTypes
import okhttp3.Headers

{{#useBeanValidation}}
    @Validated
{{/useBeanValidation}}
{{#swagger1AnnotationLibrary}}
    @Api(value = "{{{baseName}}}", description = "The {{{baseName}}} API")
{{/swagger1AnnotationLibrary}}
{{#operations}}
    @Singleton
    class {{classname}}Controller @Inject constructor(
        // @TODO("camelCase this")
        private val {{classname}} : {{classname}}
    ) : {{classname}}, WebAction {
    {{#operation}}
        {{#swagger2AnnotationLibrary}}
            @Operation(
            summary = "{{{summary}}}",
            operationId = "{{{operationId}}}",
            description = """{{{unescapedNotes}}}""",
            responses = [{{#responses}}
                ApiResponse(responseCode = "{{{code}}}", description = "{{{message}}}"{{#baseType}}, content = [Content({{#isArray}}array = ArraySchema({{/isArray}}schema = Schema(implementation = {{{baseType}}}::class)){{#isArray}}){{/isArray}}]{{/baseType}}){{^-last}},{{/-last}}{{/responses}} ]{{#hasAuthMethods}},
            security = [ {{#authMethods}}SecurityRequirement(name = "{{name}}"{{#isOAuth}}, scopes = [ {{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}} ]{{/isOAuth}}){{^-last}},{{/-last}}{{/authMethods}} ]{{/hasAuthMethods}}
            ){{/swagger2AnnotationLibrary}}{{#swagger1AnnotationLibrary}}
            @ApiOperation(
            value = "{{{summary}}}",
            nickname = "{{{operationId}}}",
            notes = "{{{notes}}}"{{#returnBaseType}},
            response = {{{.}}}::class{{/returnBaseType}}{{#returnContainer}},
            responseContainer = "{{{.}}}"{{/returnContainer}}{{#hasAuthMethods}},
            authorizations = [{{#authMethods}}Authorization(value = "{{name}}"{{#isOAuth}}, scopes = [{{#scopes}}AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}){{^-last}}, {{/-last}}{{/authMethods}}]{{/hasAuthMethods}})
            @ApiResponses(
            value = [{{#responses}}ApiResponse(code = {{{code}}}, message = "{{{message}}}"{{#baseType}}, response = {{{.}}}::class{{/baseType}}{{#containerType}}, responseContainer = "{{{.}}}"{{/containerType}}){{^-last}},{{/-last}}{{/responses}}]){{/swagger1AnnotationLibrary}}
        @{{httpMethod}}("{{path}}")
        @Description("{{{summary}}}"){{#hasConsumes}}
        @RequestContentType({{#consumes}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/consumes}}){{/hasConsumes}}{{#hasProduces}}
        @ResponseContentType({{#produces}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/produces}}){{/hasProduces}}
        @LogRequestResponse(bodySampling = 1.0, errorBodySampling = 1.0)
        @Suppress("unused")
        override fun {{operationId}}({{#allParams}}{{#isQueryParam}}@QueryParam {{{paramName}}}: {{>optionalDataType}}{{/isQueryParam}}{{#isPathParam}}@PathParam("{{baseName}}") {{{paramName}}}: {{>optionalDataType}}{{/isPathParam}}{{#isHeaderParam}} @RequestHeaders headers: Headers{{/isHeaderParam}}{{#isCookieParam}}{{{paramName}}}: HttpCall{{/isCookieParam}}{{#isBodyParam}}@RequestBody{{^required}}(required = false){{/required}} {{{paramName}}}: {{>optionalDataType}}{{/isBodyParam}}{{^-last}},{{/-last}}{{/allParams}}) =
            {{classname}}.{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}})
    {{/operation}}
    }
{{/operations}}
