#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "apiClient.h"
#include "cJSON.h"
#include "keyValuePair.h"
{{#imports}}{{{import}}}
{{/imports}}

#define MAX_BUFFER_LENGTH 4096
#define intToStr(dst, src) \
    do {\
    char dst[256];\
    snprintf(dst, 256, "%ld", (long int)(src));\
}while(0)

{{#operations}}
{{#operation}}
{{#summary}}
// {{{summary}}}
//
{{/summary}}
{{#notes}}
// {{{notes}}}
//
{{/notes}}
{{#returnType}}{{#returnTypeIsPrimitive}}{{#returnSimpleType}}{{{.}}}*{{/returnSimpleType}}{{^returnSimpleType}}{{{.}}}{{/returnSimpleType}}{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}{{{.}}}_t*{{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}void{{/returnType}}
{{{classname}}}_{{{operationId}}}(apiClient_t *apiClient{{#allParams}}, {{{dataType}}}{{#isPrimitiveType}}{{#isString}}*{{/isString}}{{#isFile}}*{{/isFile}}{{/isPrimitiveType}}{{^isPrimitiveType}}_t*{{/isPrimitiveType}} {{baseName}}{{/allParams}}) {
    list_t    *localVarQueryParameters = {{#hasQueryParams}}list_create();{{/hasQueryParams}}{{^hasQueryParams}}NULL;{{/hasQueryParams}}
    list_t    *localVarHeaderParameters = {{#hasHeaderParams}}list_create();{{/hasHeaderParams}}{{^hasHeaderParams}}NULL;{{/hasHeaderParams}}
    list_t    *localVarFormParameters = {{#hasFormParams}}list_create();{{/hasFormParams}}{{^hasFormParams}}NULL;{{/hasFormParams}}
    list_t *localVarHeaderType = {{#hasProduces}}list_create();{{/hasProduces}}{{^hasProduces}}NULL;{{/hasProduces}}
    list_t *localVarContentType = {{#hasConsumes}}list_create();{{/hasConsumes}}{{^hasConsumes}}NULL;{{/hasConsumes}}
    char      *localVarBodyParameters = NULL;

    // create the path
    long sizeOfPath = strlen("{{{path}}}")+1;
    char *localVarPath = malloc(sizeOfPath);
    snprintf(localVarPath, sizeOfPath, "{{{path}}}");

    {{#pathParams}}

    // Path Params
    long sizeOfPathParams_{{baseName}} = {{#pathParams}}{{#isLong}}sizeof({{baseName}})+3{{/isLong}}{{#isString}}strlen({{baseName}})+3{{/isString}}{{/pathParams}} + strlen("{ {{baseName}} }");

    {{#isLong}}
    if({{baseName}} == 0){
        goto end;
    }
    char* localVarToReplace_{{baseName}} = malloc(sizeOfPathParams_{{baseName}});
    snprintf(localVarToReplace_{{baseName}}, sizeOfPathParams_{{baseName}}, "%s%s%s", "{", "{{baseName}}", "}");

    char localVarBuff_{{baseName}}[256];
    intToStr(localVarBuff_{{baseName}}, {{baseName}});

    localVarPath = strReplace(localVarPath, localVarToReplace_{{baseName}}, localVarBuff_{{baseName}});

    {{/isLong}}
    {{#isString}}
    if({{baseName}} == NULL) {
        goto end;
    }
    char* localVarToReplace_{{baseName}} = malloc(sizeOfPathParams_{{baseName}});
    sprintf(localVarToReplace_{{baseName}}, "%s%s%s", "{", "{{baseName}}", "}");

    localVarPath = strReplace(localVarPath, localVarToReplace_{{baseName}}, {{baseName}});
    {{/isString}}
    {{/pathParams}}
    {{#headerParams}}

    {{#isString}}
    // header parameters
    char *keyHeader_{{{baseName}}};
    char *valueHeader_{{{baseName}}};
    keyValuePair_t *keyPairHeader_{{baseName}} = 0;
    if ({{baseName}}) {
        keyHeader_{{{baseName}}} = strdup("{{{baseName}}}");
        valueHeader_{{{baseName}}} = strdup({{{baseName}}});
        keyPairHeader_{{baseName}} = keyValuePair_create(keyHeader_{{{baseName}}}, valueHeader_{{{baseName}}});
        list_addElement(localVarHeaderParameters,keyPairHeader_{{baseName}});
    }
    {{/isString}}
    {{^isString}}
    // header parameters
    char *keyHeader_{{{baseName}}};
    {{dataType}} valueHeader_{{{baseName}}};
    keyValuePair_t *keyPairHeader_{{baseName}} = 0;
    if ({{baseName}}) {
        keyHeader_{{{baseName}}} = strdup("{{{baseName}}}");
        valueHeader_{{{baseName}}} = {{{baseName}}};
        keyPairHeader_{{baseName}} = keyValuePair_create(keyHeader_{{{baseName}}}, &valueHeader_{{{baseName}}});
        list_addElement(localVarHeaderParameters,keyPairHeader_{{baseName}});
    }
    {{/isString}}
    {{/headerParams}}
    {{#queryParams}}

    // query parameters
    {{#isListContainer}}
    if ({{baseName}})
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isString}}
    char *keyQuery_{{{baseName}}};
    char *valueQuery_{{{baseName}}};
    keyValuePair_t *keyPairQuery_{{baseName}} = 0;
    if ({{baseName}})
    {{/isString}}
    {{^isString}}
    char *keyQuery_{{{baseName}}};
    {{dataType}} valueQuery_{{{baseName}}};
    keyValuePair_t *keyPairQuery_{{baseName}} = 0;
    if ({{baseName}})
    {{/isString}}
    {{/isListContainer}}
    {
    {{#isListContainer}}
    //listContainer
    localVarQueryParameters = {{{baseName}}};
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isString}}
    //string
    keyQuery_{{{baseName}}} = strdup("{{{baseName}}}");
    valueQuery_{{{baseName}}} = strdup({{{baseName}}});
    keyPairQuery_{{baseName}} = keyValuePair_create(keyQuery_{{{baseName}}}, valueQuery_{{{baseName}}});
    list_addElement(localVarQueryParameters,keyPairQuery_{{baseName}});
    {{/isString}}
    {{^isString}}
    //not string
    keyQuery_{{{baseName}}} = strdup("{{{baseName}}}");
    valueQuery_{{{baseName}}} = {{{baseName}}};
    keyPairQuery_{{baseName}} = keyValuePair_create(keyQuery_{{{baseName}}}, &valueQuery_{{{baseName}}});
    list_addElement(localVarQueryParameters,keyPairQuery_{{baseName}});
    {{/isString}}
    {{/isListContainer}}
    }
    {{/queryParams}}
    {{#formParams}}

    // form parameters
    {{#isFile}}

    char *keyForm_{{baseName}};
    FileStruct *fileVar_{{baseName}};
    keyValuePair_t *keyPairForm_{{baseName}} = 0;
    if ({{baseName}} != NULL)
    {{/isFile}}
    {{^isFile}}
    {{#isString}}
    char *keyForm_{{baseName}};
    char *valueForm_{{baseName}};
    keyValuePair_t *keyPairForm_{{baseName}} = 0;
    if ({{baseName}})
    {{/isString}}
    {{^isString}}
    char *keyForm_{{baseName}};
    {{dataType}} valueForm_{{baseName}};
    keyValuePair_t *keyPairForm_{{baseName}} = 0;
    if ({{baseName}})
    {{/isString}}
    {{/isFile}}
    {
        {{#isFile}}
        fseek({{baseName}}, 0, SEEK_END);
        long f_size = ftell({{baseName}});
        fseek({{baseName}}, 0, SEEK_SET);
        fileVar_{{baseName}} = malloc(sizeof(FileStruct));
        keyForm_{{baseName}} = strdup("{{{baseName}}}");
        fileVar_{{baseName}}->fileData = malloc((f_size)* sizeof(char*));

        fread(fileVar_{{baseName}}->fileData, f_size, 1, file);
        fileVar_{{baseName}}->fileData[f_size] = '\0';

        fileVar_{{baseName}}->fileSize = f_size;
        char valueFile_{{baseName}}[sizeof(fileVar_{{baseName}})];

        memcpy(valueFile_{{baseName}},&fileVar_{{baseName}}, sizeof(fileVar_{{baseName}}));

        keyPairForm_{{baseName}} = keyValuePair_create(keyForm_{{baseName}},valueFile_{{baseName}});
        list_addElement(localVarFormParameters,keyPairForm_{{baseName}}); //file adding
        {{/isFile}}
        {{^isFile}}
        {{#isString}}
        keyForm_{{baseName}} = strdup("{{{baseName}}}");
        valueForm_{{baseName}} = strdup({{baseName}});
        keyPairForm_{{baseName}} = keyValuePair_create(keyForm_{{baseName}},valueForm_{{baseName}});
        list_addElement(localVarFormParameters,keyPairForm_{{baseName}}); //String
        {{/isString}}
        {{^isString}}
        keyForm_{{baseName}} = strdup("{{{baseName}}}");
        valueForm_{{baseName}} = {{baseName}};
        keyPairForm_{{baseName}} = keyValuePair_create(keyForm_{{baseName}},&valueForm_{{baseName}});
        list_addElement(localVarFormParameters,keyPairForm_{{baseName}}); // not String
        {{/isString}}
        {{/isFile}}
    }
    {{/formParams}}
    {{#bodyParam}}

    // Body Param
    {{#isListContainer}}
    //notstring
    cJSON *localVar_{{baseName}};
    cJSON *localVarItemJSON_{{baseName}};
    cJSON *localVarSingleItemJSON_{{baseName}};
    if ({{baseName}} != NULL) {
        localVarItemJSON_{{baseName}} = cJSON_CreateObject();
        localVarSingleItemJSON_{{baseName}} = cJSON_AddArrayToObject(localVarItemJSON_{{baseName}}, "{{baseName}}");
        if (localVarSingleItemJSON_{{baseName}} == NULL) {
            // nonprimitive container
            const char *error_ptr = cJSON_GetErrorPtr();
            if(error_ptr != NULL) {
            fprintf(stderr, "Error Before: %s\n", error_ptr);
            goto end;
            }
        }
        listEntry_t *{{baseName}}BodyListEntry;

        list_ForEach({{baseName}}BodyListEntry, {{baseName}}) {
            localVar_{{baseName}} = {{baseName}}_convertToJSON({{baseName}}BodyListEntry->data);
            if(localVar_{{baseName}} == NULL) {
                const char *error_ptr = cJSON_GetErrorPtr();
                if(error_ptr != NULL) {
                    fprintf(stderr, "Error Before: %s\n", error_ptr);
                    goto end;
                }
            }
            cJSON_AddItemToArray(localVarSingleItemJSON_{{baseName}}, localVar_{{baseName}});
        }

        localVarBodyParameters = cJSON_Print(localVarItemJSON_{{baseName}});
    }
    {{/isListContainer}}
    {{^isListContainer}}
    cJSON *localVarSingleItemJSON_{{baseName}};
    if ({{baseName}} != NULL) {
        //string
        localVarSingleItemJSON_{{baseName}} = {{baseName}}_convertToJSON({{baseName}});
        localVarBodyParameters = cJSON_Print(localVarSingleItemJSON_{{baseName}});
    }
    {{/isListContainer}}
    {{/bodyParam}}
    {{#produces}}
    list_addElement(localVarHeaderType,"{{{mediaType}}}"); //produces
    {{/produces}}
    {{#consumes}}
    list_addElement(localVarContentType,"{{{mediaType}}}"); //consumes
    {{/consumes}}
    apiClient_invoke(apiClient,
                    localVarPath,
                    localVarQueryParameters,
                    localVarHeaderParameters,
                    localVarFormParameters,
                    localVarHeaderType,
                    localVarContentType,
                    localVarBodyParameters,
                    "{{{httpMethod}}}");

    {{#responses}}
    if (apiClient->response_code == {{code}}) {
        printf("%s\n","{{message}}");
    }
    {{/responses}}
    {{#returnType}}
    {{#returnTypeIsPrimitive}}
    {{#returnSimpleType}}
    //primitive reutrn type simple
    {{returnType}}* elementToReturn =  strdup(({{returnType}}*)apiClient->dataReceived);

    {{/returnSimpleType}}
    {{^returnSimpleType}}
    //primitive reutrn type not simple
    cJSON *{{baseName}}localVarJSON = cJSON_Parse(apiClient->dataReceived);
    cJSON *{{{baseName}}}VarJSON;
    list_t *elementToReturn = list_create();
    cJSON_ArrayForEach({{{baseName}}}VarJSON, {{baseName}}localVarJSON){
        keyValuePair_t *keyPair = keyValuePair_create(strdup({{{baseName}}}VarJSON->string), cJSON_Print({{{baseName}}}VarJSON));
        list_addElement(elementToReturn, keyPair);
    }
    cJSON_Delete({{baseName}}localVarJSON);

    {{/returnSimpleType}}
    {{/returnTypeIsPrimitive}}
    {{^returnTypeIsPrimitive}}
    {{#returnContainer}}
    cJSON *{{classname}}localVarJSON = cJSON_Parse(apiClient->dataReceived);
    if(!cJSON_IsArray({{classname}}localVarJSON)) {
        return 0;//nonprimitive container
    }
    list_t *elementToReturn = list_create();
    cJSON *{{{baseName}}}VarJSON;
    cJSON_ArrayForEach({{{baseName}}}VarJSON, {{classname}}localVarJSON)
    {
        if(!cJSON_IsObject({{{baseName}}}VarJSON))
        {
           // return 0;
        }
        char *localVarJSONToChar = cJSON_Print({{{baseName}}}VarJSON);
        list_addElement(elementToReturn , localVarJSONToChar);
    }

    cJSON_Delete( {{classname}}localVarJSON);
    cJSON_Delete( {{{baseName}}}VarJSON);
    {{/returnContainer}}
    {{^returnContainer}}
    //nonprimitive not container
    {{{returnBaseType}}}_t *elementToReturn = {{{returnBaseType}}}_parseFromJSON(apiClient->dataReceived);
    if(elementToReturn == NULL) {
        // return 0;
    }

    {{/returnContainer}}
    //return type
    {{/returnTypeIsPrimitive}}
    apiClient_free(apiClient);
    {{#hasQueryParams}}list_free(localVarQueryParameters);{{/hasQueryParams}}
    {{#hasHeaderParams}}list_free(localVarHeaderParameters);{{/hasHeaderParams}}
    {{#hasFormParams}}list_free(localVarFormParameters);{{/hasFormParams}}
    {{#hasProduces}}list_free(localVarHeaderType);{{/hasProduces}}
    {{#hasConsumes}}list_free(localVarContentType);{{/hasConsumes}}
    free(localVarPath);
    {{#pathParams}}
    free(localVarToReplace_{{baseName}});
    {{/pathParams}}
    {{#headerParams}}
    {{#isString}}
    free(keyHeader_{{{baseName}}});
    free(valueHeader_{{{baseName}}});
    {{/isString}}
    {{^isString}}
    free(keyHeader_{{{baseName}}});
    {{/isString}}
    free(keyPairHeader_{{baseName}});
    {{/headerParams}}
    {{#bodyParams}}
    {{#isListContainer}}
    cJSON_Delete(localVarItemJSON_{{baseName}});
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    cJSON_Delete(localVar_{{baseName}});
    free(localVarBodyParameters);
    {{/isListContainer}}
    {{^isListContainer}}
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    free(localVarBodyParameters);
    {{/isListContainer}}
    {{/bodyParams}}
    {{#queryParams}}
    {{^isListContainer}}
    {{#isString}}
    free(keyQuery_{{{baseName}}});
    free(valueQuery_{{{baseName}}});
    keyValuePair_free(keyPairQuery_{{{baseName}}});
    {{/isString}}
    {{#isString}}
    free(keyQuery_{{{baseName}}});
    keyValuePair_free(keyPairQuery_{{{baseName}}});
    {{/isString}}
    {{/isListContainer}}
    {{/queryParams}}
    {{#formParams}}
    {{#isFile}}
    free(keyForm_{{{baseName}}});
    free(fileVar_{{baseName}}->fileData);
    free(fileVar_{{baseName}});
    free(keyPairForm_{{baseName}});
    {{/isFile}}
    {{^isFile}}
    {{#isString}}
    free(keyForm_{{{baseName}}});
    free(valueForm_{{{baseName}}});
    free(keyPairForm_{{baseName}});
    {{/isString}}
    {{^isString}}
    free(keyForm_{{{baseName}}});
    free(keyPairForm_{{baseName}});
    {{/isString}}
    {{/isFile}}
    {{/formParams}}
    return elementToReturn;
end:
    return NULL;
    {{/returnType}}
    {{^returnType}}
    //No return type
end:    apiClient_free(apiClient);
    {{#hasQueryParams}}list_free(localVarQueryParameters);{{/hasQueryParams}}
    {{#hasHeaderParams}}list_free(localVarHeaderParameters);{{/hasHeaderParams}}
    {{#hasFormParams}}list_free(localVarFormParameters);{{/hasFormParams}}
    {{#hasProduces}}list_free(localVarHeaderType);{{/hasProduces}}
    {{#hasConsumes}}list_free(localVarContentType);{{/hasConsumes}}
    free(localVarPath);
    {{#pathParams}}
    free(localVarToReplace_{{baseName}});
    {{/pathParams}}
    {{#headerParams}}
    {{#isString}}
    free(keyHeader_{{{baseName}}});
    free(valueHeader_{{{baseName}}});
    {{/isString}}
    {{^isString}}
    free(keyHeader_{{{baseName}}});
    {{/isString}}
    free(keyPairHeader_{{baseName}});
    {{/headerParams}}
    {{#bodyParams}}
    {{#isListContainer}}
    cJSON_Delete(localVarItemJSON_{{baseName}});
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    cJSON_Delete(localVar_{{baseName}});
    free(localVarBodyParameters);
    {{/isListContainer}}
    {{^isListContainer}}
    cJSON_Delete(localVarSingleItemJSON_{{baseName}});
    free(localVarBodyParameters);
    {{/isListContainer}}
    {{/bodyParams}}
    {{#queryParams}}
    {{^isListContainer}}
    {{#isString}}
    free(keyQuery_{{{baseName}}});
    free(valueQuery_{{{baseName}}});
    keyValuePair_free(keyPairQuery_{{{baseName}}});
    {{/isString}}
    {{#isString}}
    free(keyQuery_{{{baseName}}});
    keyValuePair_free(keyPairQuery_{{{baseName}}});
    {{/isString}}
    {{/isListContainer}}
    {{/queryParams}}
    {{#formParams}}
    {{#isFile}}
    free(keyForm_{{{baseName}}});
    free(fileVar_{{baseName}}->fileData);
    free(fileVar_{{baseName}});
    {{/isFile}}
    {{^isFile}}
    {{#isString}}
    free(keyForm_{{{baseName}}});
    free(valueForm_{{{baseName}}});
    keyValuePair_free(keyPairForm_{{{baseName}}});
    {{/isString}}
    {{^isString}}
    free(keyForm_{{{baseName}}});
    free(keyPairForm_{{baseName}});
    {{/isString}}
    {{/isFile}}
    {{/formParams}}
    free(localVarPath);
    {{/returnType}}

}

{{/operation}}
{{/operations}}
