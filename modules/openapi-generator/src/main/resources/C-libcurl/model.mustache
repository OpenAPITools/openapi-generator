{{#models}}
{{#model}}
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "cJSON.h"
{{#imports}}
#include "{{{.}}}h"
{{/imports}}


{{classname}}_t *{{classname}}_create(
		{{#vars}}
		{{{dataType}}}		*{{{baseName}}}{{#hasMore}},{{/hasMore}}
		{{/vars}}
		) {
	{{classname}}_t *{{classname}} = malloc(sizeof({{classname}}_t));
	{{#vars}}
	{{classname}}->{{{baseName}}} = {{{baseName}}};
	{{/vars}}

	return {{classname}};
}


void {{classname}}_free({{classname}}_t *{{classname}}) {
	{{#vars}}
	{{^isContainer}}
	{{^isPrimitiveType}}
	{{{name}}}_free({{{classname}}}->{{{baseName}}})
	{{/isPrimitiveType}}
	{{#isPrimitiveType}}
	{{#isString}}
	free({{{classname}}}->{{{baseName}}})
	{{/isString}}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{#isContainer}}
	{{#isListContainer}}
	{{#isPrimitiveType}}
	listEntry_t *{{{baseName}}}ListEntry;
	list_ForEach({{{baseName}}}ListEntry, {{classname}}->{{baseName}}) {
		free({{{baseName}}}ListEntry->data);
	}
	list_free({{classname}}->{{baseName}});
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	list_ForEach({{{baseName}}}ListEntry, {{classname}}->{{baseName}}) {
		{{baseName}}_free({{{baseName}}}ListEntry->data);
	}
	list_free({{classname}}->{{baseName}});
	{{/isPrimitiveType}}
	{{/isListContainer}}
	{{#isMapContainer}}
	// TODO map/hash not supported at the moment
	{{/isMapContainer}}
	{{/isContainer}}

	{{/vars}}
	free({{classname}});
}

cJSON *{{classname}}_convertToJSON({{classname}}_t *{{classname}}) {
	cJSON *item = cJSON_CreateObject();
	{{#vars}}
	// {{{classname}}}->{{{baseName}}}
	{{^isContainer}}
	{{#isPrimitiveType}}
	{{#isNumeric}}
	if(cJSON_AddNumberToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
    	goto fail;
    }

	{{/isNumeric}}
	{{#isString}}
	if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
		goto fail;
	}
	{{/isString}}
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
		goto fail;
	}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{#isContainer}}
	{{#isListContainer}}
	{{#isPrimitiveType}}
	list_ForEach(listEntry, {{classname}}->{{baseName}}) {
		free(listEntry->data);
	}

	cJSON *{{{baseName}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
	if({{{baseName}}} == NULL) {
		goto fail;
	}

	listEntry_t *{{{baseName}}}ListEntry;
    list_ForEach({{{baseName}}}ListEntry, pet->photoUrls) {
        if(cJSON_AddStringToObject({{{baseName}}}, "", {{{baseName}}}ListEntry->data) == NULL)
        {
            goto fail;
        }
    }
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	cJSON *{{{baseName}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
	if({{{baseName}}} == NULL) {
		goto fail;
	}

	listEntry_t *{{{baseName}}}ListEntry;
	list_ForEach({{{baseName}}}ListEntry, {{classname}}->{{{baseName}}}) {
		cJSON *item = tag_convertToJSON({{{baseName}}}ListEntry->data);
		if(item == NULL) {
			goto fail;
		}
		cJSON_AddItemToArray({{{baseName}}}, item);
	}
	{{/isPrimitiveType}}
	{{/isListContainer}}
	{{#isMapContainer}}
	// TODO map/hash not yet supported
	{{/isMapContainer}}
	{{/isContainer}}

    {{/vars}}
	return item;
fail:
	cJSON_Delete(item);
	return NULL;
}
{{/model}}
{{/models}}