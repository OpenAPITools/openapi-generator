{{#models}}
{{#model}}
#ifndef {{classFilename}}_TEST
#define {{classFilename}}_TEST

// the following is to include only the main from the first c file
#ifndef TEST_MAIN
#define TEST_MAIN
#define {{classFilename}}_MAIN
#endif // TEST_MAIN

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include "../external/cJSON.h"



#include "../model/{{classFilename}}.h"
{{classname}}_t* instantiate_{{classname}}(int include_optional);

{{#vars}}
  {{#isModel}}
    {{#isEnum}}// michele model enum : {{/isEnum}}
{{^isEnum}}#include "test_{{{dataType}}}.c"{{/isEnum}}
  {{/isModel}}
{{/vars}}


{{classname}}_t* instantiate_{{classname}}(int include_optional) {
  {{classname}}_t* {{classname}} = NULL;
if (include_optional) {
  {{classname}} = {{classname}}_create(
{{#vars}}
{{#isEnum}}{{^isContainer}}{{#example}}{{projectName}}_{{classVarName}}_{{enumName}}_{{{.}}}{{/example}}{{/isContainer}}{{#isContainer}}{{#example}}{{{.}}}{{/example}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{#example}}{{{.}}}{{/example}}{{/isEnum}}
{{#isPrimitiveType}}//primitive{{/isPrimitiveType}}
{{#isContainer}}
  {{#isListContainer}}//list {{dataType}}_t *{{/isListContainer}}
  {{#isMapContainer}}// map {{dataType}}{{/isMapContainer}}
{{/isContainer}}
  {{#isModel}}
    {{#isEnum}}// enum {{datatypeWithEnum}}_e{{/isEnum}}
	{{^isEnum}}// modello normale {{{dataType}}}_t *{{/isEnum}}
  {{/isModel}}
{{^example}}
  {{#isModel}}
    {{#isEnum}}// enum {{datatypeWithEnum}}_e{{/isEnum}}
	{{^isEnum}}instantiate_{{{dataType}}}(0) // false, not to have infinite recursion {{/isEnum}}
  {{/isModel}}
  {{^isModel}}
0
  {{/isModel}}
{{/example}}{{#hasMore}},{{/hasMore}} // {{name}}
{{/vars}}
  );
} else {
  {{classname}} = {{classname}}_create(
{{#vars}}
{{#isEnum}}{{^isContainer}}{{#example}}{{projectName}}_{{classVarName}}_{{enumName}}_{{{.}}}{{/example}}{{/isContainer}}{{#isContainer}}{{#example}}{{{.}}}{{/example}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{#example}}{{{.}}}{{/example}}{{/isEnum}}
{{^example}}
  {{#isModel}}
    {{#isEnum}}// enum {{datatypeWithEnum}}_e{{/isEnum}}
	{{^isEnum}}NULL{{/isEnum}}
  {{/isModel}}
  {{^isModel}}
0
  {{/isModel}}
{{/example}}{{#hasMore}},{{/hasMore}} // {{name}}
{{/vars}}
  );
}

return {{classname}};
}


#ifdef {{classFilename}}_MAIN

void test_{{classname}}(int include_optional) {
    {{classname}}_t* {{classname}}_1 = instantiate_{{classname}}(include_optional);

	cJSON* json{{classname}}_1 = {{classname}}_convertToJSON({{classname}}_1);
	printf("{{classname}} :\n%s\n", cJSON_Print(json{{classname}}_1));
	{{classname}}_t* {{classname}}_2 = {{classname}}_parseFromJSON(json{{classname}}_1);
	cJSON* json{{classname}}_2 = {{classname}}_convertToJSON({{classname}}_2);
	printf("repeating {{classname}}:\n%s\n", cJSON_Print(json{{classname}}_2));
}

int main() {
{{#models}}
{{#model}}
  test_{{classname}}(1);
  test_{{classname}}(0);
{{/model}}
{{/models}}

  printf("Hello world \n");
  return 0;
}

#endif // {{classFilename}}_MAIN
#endif // {{classFilename}}_TEST
{{/model}}
{{/models}}
