{{#models}}
{{#model}}
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "cJSON.h"
#include "{{classname}}.h"
{{#imports}}
#include "{{{.}}}.h"
{{/imports}}


{{classname}}_t *{{classname}}_create(
    {{#vars}}
    {{^isContainer}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{#isNumeric}}
    {{datatype}} {{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isNumeric}}
    {{#isBoolean}}
    {{datatype}} {{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    {{datatype}} *{{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    {{datatype}} *{{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isString}}
    {{/isEnum}}
    {{#isDateTime}}
    {{datatype}} *{{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
    {{#isListContainer}}
    {{#isPrimitiveType}}
    {{datatype}}_t *{{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{baseName}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{#isMapContainer}}
    {{datatype}} *{{baseName}}{{#hasMore}},{{/hasMore}}
    // TODO map/hash not supported at the moment
    {{/isMapContainer}}
    {{/isContainer}}
    {{/vars}}
    ) {
	{{classname}}_t *{{classname}} = malloc(sizeof({{classname}}_t));
	{{#vars}}
	{{classname}}->{{{baseName}}} = {{{baseName}}};
	{{/vars}}

	return {{classname}};
}


void {{classname}}_free({{classname}}_t *{{classname}}) {
	{{#vars}}
	{{^isContainer}}
	{{^isPrimitiveType}}
	{{{name}}}_free({{{classname}}}->{{{baseName}}});
	{{/isPrimitiveType}}
	{{#isPrimitiveType}}
    {{#isNumeric}}
    //free({{{classname}}}->{{{baseName}}});
    {{/isNumeric}}
    {{#isBoolean}}
    //free({{{classname}}}->{{{baseName}}});
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    free({{{classname}}}->{{{baseName}}});
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    free({{{classname}}}->{{{baseName}}});
    {{/isString}}
    {{/isEnum}}
    {{#isDateTime}}
    free({{{classname}}}->{{{baseName}}});
    {{/isDateTime}}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{#isContainer}}
	{{#isListContainer}}
	{{#isPrimitiveType}}
	listEntry_t *{{{baseName}}}ListEntry;
	list_ForEach({{{baseName}}}ListEntry, {{classname}}->{{baseName}}) {
		free({{{baseName}}}ListEntry->data);
	}
	list_free({{classname}}->{{baseName}});
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
    listEntry_t *{{{baseName}}}ListEntry;
	list_ForEach({{{baseName}}}ListEntry, {{classname}}->{{baseName}}) {
		{{baseName}}_free({{{baseName}}}ListEntry->data);
	}
	list_free({{classname}}->{{baseName}});
	{{/isPrimitiveType}}
	{{/isListContainer}}
	{{#isMapContainer}}
	// TODO map/hash not supported at the moment
	{{/isMapContainer}}
	{{/isContainer}}
	{{/vars}}

	free({{classname}});
}

cJSON *{{classname}}_convertToJSON({{classname}}_t *{{classname}}) {
	cJSON *item = cJSON_CreateObject();
	{{#vars}}
	// {{{classname}}}->{{{baseName}}}
	{{^isContainer}}
	{{#isPrimitiveType}}
    {{#isNumeric}}
    if(cJSON_AddNumberToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
    goto fail; //Numeric
    }
    {{/isNumeric}}
    {{#isBoolean}}
    if(cJSON_AddNumberToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
    goto fail; //Numeric
    }
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
    goto fail; //String
    }
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
    goto fail; //String
    }
    {{/isString}}
    {{/isEnum}}
    {{#isDateTime}}
    if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{baseName}}}) == NULL) {
    goto fail; //String
    }
    {{/isDateTime}}
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	cJSON *{{{baseName}}} = {{{baseName}}}_convertToJSON({{{classname}}}->{{{baseName}}});
	if({{{baseName}}} == NULL) {
		goto fail; //nonprimitive
	}
	cJSON_AddItemToObject(item, "{{{baseName}}}", {{{baseName}}});
	if(item->child == NULL) {
		goto fail; 
	}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{#isContainer}}
	{{#isListContainer}}
	{{#isPrimitiveType}}
	cJSON *{{{baseName}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
	if({{{baseName}}} == NULL) {
		goto fail; //primitive container
	}

	listEntry_t *{{{baseName}}}ListEntry;
    list_ForEach({{{baseName}}}ListEntry, pet->photoUrls) {
        if(cJSON_AddStringToObject({{{baseName}}}, "", {{{baseName}}}ListEntry->data) == NULL)
        {
            goto fail;
        }
    }
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	cJSON *{{{baseName}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
	if({{{baseName}}} == NULL) {
		goto fail; //nonprimitive container
	}

	listEntry_t *{{{baseName}}}ListEntry;
	list_ForEach({{{baseName}}}ListEntry, {{classname}}->{{{baseName}}}) {
		cJSON *item = {{baseName}}_convertToJSON({{{baseName}}}ListEntry->data);
		if(item == NULL) {
			goto fail;
		}
		cJSON_AddItemToArray({{{baseName}}}, item);
	}
	{{/isPrimitiveType}}
	{{/isListContainer}}
	{{#isMapContainer}}
	// TODO map/hash not yet supported
	{{/isMapContainer}}
	{{/isContainer}}

    {{/vars}}
	return item;
fail:
	cJSON_Delete(item);
	return NULL;
}

{{classname}}_t *{{classname}}_parseFromJSON(cJSON *jsonString){

    {{classname}}_t *{{classname}} = NULL;
    char *parsedString = cJSON_Print(jsonString);
    cJSON *{{classname}}JSON = cJSON_Parse(parsedString);
    if({{classname}}JSON == NULL){
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL) {
            fprintf(stderr, "Error Before: %s\n", error_ptr);
            goto end;
        }
    }

    {{#vars}}
    // {{{classname}}}->{{{baseName}}}
    {{^isContainer}}
    {{#isPrimitiveType}}
    {{#isNumeric}}
    cJSON *{{{baseName}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsNumber({{{baseName}}}))
    {
    goto end; //Numeric
    }
    {{/isNumeric}}
    {{#isBoolean}}
    cJSON *{{{baseName}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsNumber({{{baseName}}}))
    {
    goto end; //Numeric
    }
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    cJSON *{{{baseName}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsString({{{baseName}}}) || ({{{baseName}}}->valuestring == NULL)){
    goto end; //String
    }
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    cJSON *{{{baseName}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsString({{{baseName}}}) || ({{{baseName}}}->valuestring == NULL)){
    goto end; //String
    }
    {{/isString}}
    {{/isEnum}}
    {{#isDateTime}}
    cJSON *{{{baseName}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsString({{{baseName}}}) || ({{{baseName}}}->valuestring == NULL)){
    goto end; //String
    }
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{baseName}}_t *{{baseName}};
    cJSON *{{baseName}}JSON = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{baseName}}");
    if({{classname}}JSON == NULL){
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL)
            fprintf(stderr, "Error Before: %s\n", error_ptr);
        goto end; //nonprimitive
    }
    {{{baseName}}} = {{{baseName}}}_parseFromJSON({{{baseName}}}JSON);
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
    {{#isListContainer}}
    {{#isPrimitiveType}}
    cJSON *{{{baseName}}};
    cJSON *{{{baseName}}}JSON = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    if(!cJSON_IsArray({{{baseName}}}JSON)) {
        goto end;//primitive container
    }
    list_t *{{{baseName}}}List = list_create();

    cJSON_ArrayForEach({{{baseName}}}, {{{baseName}}}JSON)
    {
        if(!cJSON_IsString({{{baseName}}}) || ({{{baseName}}}->valuestring == NULL))
        {
            goto end;
        }
        list_addElement({{{baseName}}}List , strdup({{{baseName}}}->valuestring));
    }
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    cJSON *{{{baseName}}};
    cJSON *{{{baseName}}}JSON = cJSON_GetObjectItemCaseSensitive({{classname}}JSON,"{{{baseName}}}");
    if(!cJSON_IsArray({{{baseName}}}JSON)){
        goto end; //nonprimitive container
    }

    list_t *{{{baseName}}}List = list_create();

    cJSON_ArrayForEach({{{baseName}}},{{{baseName}}}JSON )
    {
        if(!cJSON_IsObject({{{baseName}}})){
            goto end;
        }

        {{{baseName}}}_t *{{{baseName}}}Item = {{{baseName}}}_parseFromJSON({{{baseName}}});

        list_addEement({{{baseName}}}List, {{{baseName}}}Item);
    }
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{#isMapContainer}}
    // TODO map/hash not yet supported
    {{/isMapContainer}}
    {{/isContainer}}

    {{/vars}}

    {{classname}} = {{classname}}_create (
        {{#vars}}
        {{^isContainer}}
        {{^isPrimitiveType}}
        {{{baseName}}}{{#hasMore}},{{/hasMore}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
        {{#isNumeric}}
        {{{baseName}}}->valuedouble{{#hasMore}},{{/hasMore}}
        {{/isNumeric}}
        {{#isBoolean}}
        {{{baseName}}}->valuedouble{{#hasMore}},{{/hasMore}}
        {{/isBoolean}}
        {{#isEnum}}
        {{#isString}}
        strdup({{{baseName}}}->valuestring){{#hasMore}},{{/hasMore}}
        {{/isString}}
        {{/isEnum}}
        {{^isEnum}}
        {{#isString}}
        strdup({{{baseName}}}->valuestring){{#hasMore}},{{/hasMore}}
        {{/isString}}
        {{/isEnum}}
        {{#isDateTime}}
        strdup({{{baseName}}}->valuestring){{#hasMore}},{{/hasMore}}
        {{/isDateTime}}
        {{/isPrimitiveType}}
        {{/isContainer}}
        {{#isContainer}}
        {{#isListContainer}}
        {{#isPrimitiveType}}
        {{{baseName}}}List{{#hasMore}},{{/hasMore}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        {{{baseName}}}List{{#hasMore}},{{/hasMore}}
        {{/isPrimitiveType}}
        {{/isListContainer}}
        {{#isMapContainer}}
        // TODO map/hash not supported at the moment
        {{/isMapContainer}}
        {{/isContainer}}
        {{/vars}}
        );

    return {{classname}};
end:
    cJSON_Delete({{classname}}JSON);
    return NULL;

}

{{/model}}
{{/models}}