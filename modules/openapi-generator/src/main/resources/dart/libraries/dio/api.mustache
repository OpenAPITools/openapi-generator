{{>header}}
import 'dart:async';

{{#includeLibraryTemplate}}api/imports{{/includeLibraryTemplate}}
import 'package:dio/dio.dart';

{{#operations}}
{{! No need to Import all the required model files as freezed uses the part of directive for it models}}
{{^useFreezed}}
    {{#imports}}
import '{{.}}';
    {{/imports}}
{{/useFreezed}}

class {{classname}} {

  final Dio _dio;

{{#includeLibraryTemplate}}api/constructor{{/includeLibraryTemplate}}

  {{#operation}}
  /// {{summary}}{{^summary}}{{nickname}}{{/summary}}
  /// {{notes}}
  ///
  /// Parameters:
  {{#allParams}}
  /// * [{{paramName}}] {{#description}}- {{{.}}}{{/description}}
  {{/allParams}}
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]{{#returnType}} containing a [Response] with a [{{{.}}}] as data{{/returnType}}
  /// Throws [DioException] if API call or serialization fails
  {{#externalDocs}}
  /// {{description}}
  /// Also see [{{summary}} Documentation]({{url}})
  {{/externalDocs}}
  {{#isDeprecated}}
  @Deprecated('This operation has been deprecated')
  {{/isDeprecated}}
  {{#useFreezed}}
      {{#freezedUnionResponse}}
          Future<Response<{{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Data>> {{nickname}}({
      {{/freezedUnionResponse}}
      {{^freezedUnionResponse}}
              Future<Response<{{{returnType}}}{{^returnType}}void{{/returnType}}>> {{nickname}}({
      {{/freezedUnionResponse}}
  {{/useFreezed}}
  {{^useFreezed}}
  Future<Response<{{{returnType}}}{{^returnType}}void{{/returnType}}>> {{nickname}}({ {{/useFreezed}}{{#allParams}}{{#isPathParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}required {{{dataType}}} {{paramName}},{{/isPathParam}}{{#isQueryParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}{{^defaultValue}}required {{/defaultValue}}{{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}}{{^isContainer}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isContainer}},{{/isQueryParam}}{{#isHeaderParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}{{^defaultValue}}required {{/defaultValue}}{{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}}{{^isContainer}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isContainer}},{{/isHeaderParam}}{{#isBodyParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}required {{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}},{{/isBodyParam}}{{#isFormParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}required {{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}},{{/isFormParam}}{{/allParams}}
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'{{{path}}}'{{#pathParams}}.replaceAll('{' r'{{{baseName}}}' '}', {{#includeLibraryTemplate}}api/query_param{{/includeLibraryTemplate}}.toString()){{/pathParams}};
    final _options = Options(
      method: r'{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}',
      {{#isResponseFile}}
      responseType: ResponseType.bytes,
      {{/isResponseFile}}
      headers: <String, dynamic>{
        {{#httpUserAgent}}
        r'User-Agent': r'{{{.}}}',
        {{/httpUserAgent}}
        {{#headerParams}}
        {{^required}}{{^isNullable}}if ({{{paramName}}} != null) {{/isNullable}}{{/required}}r'{{baseName}}': {{paramName}},
        {{/headerParams}}
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[{{^hasAuthMethods}}],{{/hasAuthMethods}}{{#hasAuthMethods}}
          {{#authMethods}}{
            'type': '{{type}}',{{#scheme}}
            'scheme': '{{.}}',{{/scheme}}
            'name': '{{name}}',{{#isApiKey}}
            'keyName': '{{keyParamName}}',
            'where': '{{#isKeyInQuery}}query{{/isKeyInQuery}}{{#isKeyInHeader}}header{{/isKeyInHeader}}',{{/isApiKey}}
          },{{/authMethods}}
        ],{{/hasAuthMethods}}
        ...?extra,
      },{{#hasConsumes}}
      contentType: '{{#prioritizedContentTypes}}{{#-first}}{{{mediaType}}}{{/-first}}{{/prioritizedContentTypes}}',{{/hasConsumes}}
      validateStatus: validateStatus,
    );{{#hasQueryParams}}

    final _queryParameters = <String, dynamic>{
      {{#queryParams}}
      {{^required}}{{^isNullable}}if ({{{paramName}}} != null) {{/isNullable}}{{/required}}r'{{baseName}}': {{#includeLibraryTemplate}}api/query_param{{/includeLibraryTemplate}},
      {{/queryParams}}
    };{{/hasQueryParams}}{{#hasBodyOrFormParams}}

    dynamic _bodyData;

    try {
{{#includeLibraryTemplate}}api/serialize{{/includeLibraryTemplate}}
    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,{{#hasQueryParams}}
          queryParameters: _queryParameters,{{/hasQueryParams}}
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }{{/hasBodyOrFormParams}}

    final _response = await _dio.request<Object>(
      _path,{{#hasBodyOrFormParams}}
      data: _bodyData,{{/hasBodyOrFormParams}}
      options: _options,{{#hasQueryParams}}
      queryParameters: _queryParameters,{{/hasQueryParams}}
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );
    {{#returnType}}

    {{#useFreezed}}
        {{#freezedUnionResponse}}
            {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Data _responseData;
        {{/freezedUnionResponse}}
        {{^freezedUnionResponse}}
            {{{returnType}}} _responseData;
        {{/freezedUnionResponse}}
    {{/useFreezed}}
    {{^useFreezed}}{{{.}}}? _responseData;{{/useFreezed}}

    try {
{{#includeLibraryTemplate}}api/deserialize{{/includeLibraryTemplate}}
    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    {{#useFreezed}}
        {{#freezedUnionResponse}}
    return Response<{{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Data>(
        {{/freezedUnionResponse}}
        {{^freezedUnionResponse}}
    return Response<{{{returnType}}}>(
        {{/freezedUnionResponse}}
    {{/useFreezed}}
    {{^useFreezed}}
    return Response<{{{returnType}}}>(
    {{/useFreezed}}
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );{{/returnType}}
    {{^returnType}}
        {{^useFreezed}}
    return _response;
        {{/useFreezed}}
        {{#useFreezed}}
            {{#freezedUnionResponse}}
                {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Data _responseData;
                    try {
                        {{#includeLibraryTemplate}}api/deserialize{{/includeLibraryTemplate}}
                    } catch (error, stackTrace) {
                    throw DioException(
                    requestOptions: _response.requestOptions,
                    response: _response,
                    type: DioExceptionType.unknown,
                    error: error,
                    stackTrace: stackTrace,
                    );
                    }
                return Response<{{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Data>(
                    data: _responseData,
                    headers: _response.headers,
                    isRedirect: _response.isRedirect,
                    requestOptions: _response.requestOptions,
                    redirects: _response.redirects,
                    statusCode: _response.statusCode,
                    statusMessage: _response.statusMessage,
                    extra: _response.extra,
                    );
            {{/freezedUnionResponse}}
            {{^freezedUnionResponse}}
                    return _response;
            {{/freezedUnionResponse}}
        {{/useFreezed}}
    {{/returnType}}
  }

  {{/operation}}
}
{{/operations}}
