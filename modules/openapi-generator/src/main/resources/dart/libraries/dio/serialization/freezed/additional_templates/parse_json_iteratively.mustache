final fromJsonMethods = <FromJsonMethodType <dynamic>>[{{#anyOf}}{{#lambda.titlecase}}{{#PrimitiveFromJson}}{{{.}}}{{/PrimitiveFromJson}}{{/lambda.titlecase}}.fromJson,{{/anyOf}}{{#oneOf}}{{#lambda.titlecase}}{{#PrimitiveFromJson}}{{{.}}}{{/PrimitiveFromJson}}{{/lambda.titlecase}}.fromJson,{{/oneOf}}];
final deserializedModels = <{{classname}}>[];
for (final fromJsonMethod in fromJsonMethods) {
    try {
        final dynamic parsedModel= fromJsonMethod.call(json);
        // Note following line won't be executed if already the above parsing fails.
        {{#anyOf}}
                if (parsedModel is {{#lambda.titlecase}}{{#PrimitiveInUnion}}{{{.}}}{{/PrimitiveInUnion}}{{/lambda.titlecase}}) {
                deserializedModel =  {{classname}}.as{{#lambda.titlecase}}{{#PrimitiveInUnion}}{{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}{{/PrimitiveInUnion}}{{/lambda.titlecase}}(
            {{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}Value : parsedModel,
                );
                } else
        {{/anyOf}}
        {{#oneOf}}
                if (parsedModel is {{#lambda.titlecase}}{{#PrimitiveInUnion}}{{{.}}}{{/PrimitiveInUnion}}{{/lambda.titlecase}}) {
                deserializedModel =  {{classname}}.as{{#lambda.titlecase}}{{#PrimitiveInUnion}}{{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}{{/PrimitiveInUnion}}{{/lambda.titlecase}}(
            {{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}Value : parsedModel,
                );
                } else
        {{/oneOf}}
        {
        deserializedModel =  {{classname}}.unknown(json: json);
        }
        deserializedModels.add(deserializedModel);
    } catch (e) {
        // We are suppressing the deserialization error when the json could not
        // be parsed into one of the model. Because we return [{{classname}}.unknown]
        // if the deserialization fails.
    }
}
// Return an unknown type when the incoming json parses into more than one models.
// Since we pass deserializedModels, clients can still use the deserialized model.
// EvenThough this is valid for AnyOf types, Dart doesn't have polymorphic types.
// So we still return this as an unknown type.
if(deserializedModels.length > 1){
    deserializedModel =  {{classname}}.unknown(
        json: json,
        deserializedModels: deserializedModels,
        errorType: DeserializationErrorType.MoreThanOneTypeSatisfied,
    );
}