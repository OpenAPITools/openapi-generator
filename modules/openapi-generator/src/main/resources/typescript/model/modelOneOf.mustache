/**
 * @type {{classname}}
 * Type
 * @export
 */
export type {{classname}} = {{#oneOf}}{{{.}}}{{^-last}} | {{/-last}}{{/oneOf}};

/**
* @type {{classname}}Class{{#description}}
    * {{{.}}}{{/description}}
* @export
*/
export class {{classname}}Class extends OneOfClass {
    {{#discriminator}}
    static readonly discriminator: string | undefined = "{{discriminatorName}}";
    {{/discriminator}}
    {{^discriminator}}
    static readonly discriminator: string | undefined = undefined;
    {{/discriminator}}
    {{#hasDiscriminatorWithNonEmptyMapping}}

    static readonly mapping: {[index: string]: string} | undefined = {
    {{#discriminator.mappedModels}}
        "{{mappingName}}": "{{modelName}}",
    {{/discriminator.mappedModels}}
    };
    {{/hasDiscriminatorWithNonEmptyMapping}}
    {{^hasDiscriminatorWithNonEmptyMapping}}

    static readonly mapping: {[index: string]: string} | undefined = undefined;
    {{/hasDiscriminatorWithNonEmptyMapping}}

    static readonly arrayOfTypes: Array<{{#oneOf}}typeof {{{.}}}{{^-last}} | {{/-last}}{{/oneOf}}> = [{{#oneOf}}{{{.}}}{{^-last}}, {{/-last}}{{/oneOf}}];

    public static findMatchingType(data:any): string | undefined {
        for(const type of this.arrayOfTypes) {
            if (this.instanceOf(data, type.getAttributeTypeMap())) {
                return type.name;
            }
        }

        return undefined;
    }
}