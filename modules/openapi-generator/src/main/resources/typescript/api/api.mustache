// TODO: better import syntax?
import { BaseAPIRequestFactory, RequiredError } from './baseapi';
import {Configuration} from '../configuration';
import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';
{{#platforms}}
{{#node}}
import * as FormData from "form-data";
{{/node}}
{{/platforms}}
import {ObjectSerializer} from '../models/ObjectSerializer';
import {ApiException} from './exception';
import {isCodeInRange} from '../util';

{{#imports}}
import { {{classname}} } from '..{{filename}}';
{{/imports}}
{{#operations}}

/**
 * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}
 */
export class {{classname}}RequestFactory extends BaseAPIRequestFactory {
	
	{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {
		let config = options || this.configuration;
		{{#allParams}}
		
		{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new RequiredError('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }

		{{/required}}
		{{/allParams}}
		
		// Path Params
    	const localVarPath = '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};

		// Make Request Context
    	const requestContext = config.baseServer.makeRequestContext(localVarPath, HttpMethod.{{httpMethod}});
        requestContext.setHeaderParam("Accept", "application/json")

        // Query Params
		{{#queryParams}}
        if ({{paramName}} !== undefined) {
        	requestContext.setQueryParam("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"));
        }
		{{/queryParams}}
	
		// Header Params
		{{#headerParams}}
		requestContext.setHeaderParam("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}", "{{dataFormat}}"));
		{{/headerParams}}
	
		// Form Params
	    {{#hasFormParams}}
		let localVarFormParams = new FormData();
		{{/hasFormParams}}	

		{{#formParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                localVarFormParams.append('{{baseName}}', element as any);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
        // TODO: replace .append with .set
                localVarFormParams.append('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined) {
        // TODO: replace .append with .set
             {{^isFile}}
             localVarFormParams.append('{{baseName}}', {{paramName}} as any);
             {{/isFile}}
             {{#isFile}}
             {{#platforms}}
             {{#node}}
             localVarFormParams.append('{{baseName}}', {{paramName}}.data, {{paramName}}.name);
             {{/node}}
             {{^node}}
             localVarFormParams.append('{{baseName}}', {{paramName}}, {{paramName}}.name);
             {{/node}}
             {{/platforms}}
             {{/isFile}}
        }
        {{/isListContainer}}
		{{/formParams}}		
	    {{#hasFormParams}}
		requestContext.setBody(localVarFormParams);
		{{/hasFormParams}}	

		// Body Params
	    {{#bodyParam}}
        {{^consumes}}
        requestContext.setHeaderParam("Content-Type", "application/json");
        {{/consumes}}
        {{#consumes.0}}
        requestContext.setHeaderParam("Content-Type", "{{{mediaType}}}");
        {{/consumes.0}}
		// TODO: Should this be handled by ObjectSerializer? imo yes => confidential information included in local object should not be sent
        const needsSerialization = (<any>"{{dataType}}" !== "string") || requestContext.getHeaders()['Content-Type'] === 'application/json';
        const serializedBody = needsSerialization ? JSON.stringify({{paramName}} || {}) : ({{paramName}}.toString() || ""); // TODO: `toString` call is unnecessary
        requestContext.setBody(serializedBody);
	    {{/bodyParam}}
		
		{{#hasAuthMethods}}    
		let authMethod = null;
		{{/hasAuthMethods}}
    	// Apply auth methods
    	{{#authMethods}}
    	authMethod = config.authMethods["{{name}}"]
    	if (authMethod) {
    		authMethod.applySecurityAuthentication(requestContext);
    	}
    	{{/authMethods}}
    	
    	return requestContext;
    }
			
	{{/operation}}
}
{{/operations}}


{{#operations}}

export class {{classname}}ResponseProcessor {
	
	{{#operation}}
	/**
	 * Unwraps the actual response sent by the server from the response context and deserializes the response content 
	 * to the expected objects
	 * 
	 * @params response Response returned by the server for a request to {{nicknam}} 
	 * @throws ApiException if the response code was not in [200, 299]
	 */
    public {{nickname}}(response: ResponseContext): {{#returnType}} {{{returnType}}}{{/returnType}} {{^returnType}} void {{/returnType}} {      
        {{#responses}}
        if (isCodeInRange("{{code}}", response.httpStatusCode)) {
            {{#dataType}}
            const jsonBody = JSON.parse(response.body);
            const body: {{{dataType}}} = ObjectSerializer.deserialize(jsonBody, "{{{dataType}}}", "{{returnFormat}}") as {{{dataType}}};            
            {{#isSuccessCode}}
            return body;
            {{/isSuccessCode}}
            {{^isSuccessCode}}
            throw new ApiException<{{{dataType}}}>({{code}}, body);
            {{/isSuccessCode}}
            {{/dataType}}
            {{^dataType}}
            {{#isSuccessCode}}
            return;
            {{/isSuccessCode}}
            {{^isSuccessCode}}
            throw new ApiException<string>(response.httpStatusCode, "{{message}}");
            {{/isSuccessCode}}
            {{/dataType}}                        
        }
        {{/responses}}
        
        // Work around for incorrect api specification in petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        	{{#returnType}}
            const jsonBody = JSON.parse(response.body);
            const body: {{{returnType}}} = ObjectSerializer.deserialize(jsonBody, "{{{returnType}}}", "{{returnFormat}}") as {{{returnType}}};            
			return body;        		
        	{{/returnType}}
        	{{^returnType}}
        	return;
        	{{/returnType}}
        }
        let body = response.body || "";
    	throw new ApiException<string>(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
    }
			
	{{/operation}}
}
{{/operations}}
