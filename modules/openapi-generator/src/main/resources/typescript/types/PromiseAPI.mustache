import { ResponseContext, RequestContext, HttpFile } from '../http/http{{importFileExtension}}';
import { Configuration} from '../configuration{{importFileExtension}}'
{{#useInversify}}
import { injectable, inject, optional } from "inversify";
import { AbstractConfiguration } from "../services/configuration";
{{/useInversify}}

{{#models}}
{{#model}}
import { {{{ classname }}} } from '{{{ importPath }}}{{importFileExtension}}';
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}
import { Observable{{classname}} } from './ObservableAPI{{importFileExtension}}';

{{#operations}}
import { {{classname}}RequestFactory, {{classname}}ResponseProcessor} from "../apis/{{classname}}{{importFileExtension}}";
{{#useInversify}}
import { Abstract{{classname}}RequestFactory, Abstract{{classname}}ResponseProcessor } from "../apis/{{classname}}.service";

@injectable()
{{/useInversify}}
export class Promise{{classname}} {
    private api: Observable{{classname}}

    public constructor(
        {{#useInversify}}
        @inject(AbstractConfiguration) configuration: Configuration,
        @inject(Abstract{{classname}}RequestFactory) @optional() requestFactory?: Abstract{{classname}}RequestFactory,
        @inject(Abstract{{classname}}ResponseProcessor) @optional() responseProcessor?: Abstract{{classname}}ResponseProcessor
        {{/useInversify}}
        {{^useInversify}}
        configuration: Configuration,
        requestFactory?: {{classname}}RequestFactory,
        responseProcessor?: {{classname}}ResponseProcessor
        {{/useInversify}}
    ) {
        this.api = new Observable{{classname}}(configuration, requestFactory, responseProcessor);
    }

{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}_options?: Configuration): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}> {
        const result = this.api.{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}_options);
        return result.toPromise();
    }

{{/operation}}

}

{{/operations}}


{{/apis}}
{{/apiInfo}}
