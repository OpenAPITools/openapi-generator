{{>partial_header}}
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using Microsoft.Extensions.Hosting;
using {{packageName}}.{{clientPackage}};{{#hasImport}}
using {{packageName}}.{{modelPackage}};{{/hasImport}}
using {{packageName}}.Extensions;


{{>testInstructions}}


namespace {{packageName}}.Test.{{apiPackage}}
{
    /// <summary>
    ///  Base class for API tests
    /// </summary>
    public class ApiTestsBase
    {
        protected readonly IHost _host;

        public ApiTestsBase(string[] args)
        {
            _host = CreateHostBuilder(args).Build();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args)
            .Configure{{apiName}}((context, services, options) =>
            {
                {{#hasApiKeyMethods}}ApiKeyToken apiKeyToken = new{{^net70OrLater}} ApiKeyToken{{/net70OrLater}}(context.Configuration["<token>"], timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken);
                {{/hasApiKeyMethods}}{{#hasHttpBearerMethods}}
                BearerToken bearerToken = new{{^net70OrLater}} BearerToken{{/net70OrLater}}(context.Configuration["<token>"], timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken);
                {{/hasHttpBearerMethods}}{{#hasHttpBasicMethods}}
                BasicToken basicToken = new{{^net70OrLater}} BasicToken{{/net70OrLater}}(context.Configuration["<username>"], context.Configuration["<password>"], timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(basicToken);
                {{/hasHttpBasicMethods}}{{#hasHttpSignatureMethods}}
                HttpSigningConfiguration config = new{{^net70OrLater}} HttpSigningConfiguration{{/net70OrLater}}("<keyId>", "<keyFilePath>", null, new List<string>(), HashAlgorithmName.SHA256, "<signingAlgorithm>", 0);
                HttpSignatureToken httpSignatureToken = new{{^net70OrLater}} HttpSignatureToken{{/net70OrLater}}(config, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(httpSignatureToken);
                {{/hasHttpSignatureMethods}}{{#hasOAuthMethods}}
                OAuthToken oauthToken = new{{^net70OrLater}} OAuthToken{{/net70OrLater}}(context.Configuration["<token>"], timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(oauthToken);{{/hasOAuthMethods}}
            });
    }
}
