// <auto-generated>
{{partial_header}}
{{#nullableReferenceTypes}}#nullable enable{{/nullableReferenceTypes}}

using System;

namespace {{packageName}}.Client
{
    /// <summary>
    /// The base for all tokens.
    /// </summary>
    public abstract class TokenBase
    {
        private readonly TimeSpan _tokenTimeOut;
        private DateTime _nextAvailable = DateTime.UtcNow;
        private object _nextAvailableLock = new();
        private readonly System.Timers.Timer _timer = new();

        internal delegate void TokenBecameAvailableEventHandler(object sender);
        internal event TokenBecameAvailableEventHandler{{#nullableReferenceTypes}}?{{/nullableReferenceTypes}} TokenBecameAvailable;


        /// <summary>
        /// Initialize a TokenBase object.
        /// </summary>
        /// <param name="tokenTimeOut"></param>
        internal TokenBase(TimeSpan tokenTimeOut)
        {
            if (tokenTimeOut == null || tokenTimeOut == TimeSpan.MinValue)
                throw new ArgumentException("Invalid token timeout value.", nameof(tokenTimeOut));
            
            _tokenTimeOut = tokenTimeOut;
            
            _timer.Interval = _tokenTimeOut.TotalMilliseconds;
            _timer.Elapsed += OnTimer;
            _timer.AutoReset = true;
            _timer.Start();
        }


        /// <summary>
        /// Returns true while the token is rate limited.
        /// </summary>
        public bool IsRateLimited => _nextAvailable > DateTime.UtcNow;

        /// <summary>
        /// Triggered when the server returns status code TooManyRequests\
        /// Once triggered the local timeout will be extended an arbitrary length of time.
        /// </summary>
        public void BeginRateLimit()
        {
            lock(_nextAvailableLock)            
                _nextAvailable = DateTime.UtcNow.AddSeconds(5);            
        }

        private void OnTimer(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (TokenBecameAvailable != null && !IsRateLimited)
                TokenBecameAvailable.Invoke(this);
        }
    }
}