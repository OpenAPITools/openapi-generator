// <auto-generated>
{{>partial_header}}
{{#nullableReferenceTypes}}#nullable enable{{/nullableReferenceTypes}}

using System;
using {{packageName}}.Client;

namespace {{packageName}}
{
    /// <summary>
    /// Provides a token to the api clients.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class TokenProvider<T> where T : TokenBase
    {
        internal System.Threading.Channels.Channel<TokenBase> AvailableTokens { get; }

        private T[] _tokens;
        private readonly object _lock = new object();

        /// <summary>
        /// Instantiates a TokenProvider
        /// </summary>
        /// <param name="container"></param>
        public TokenProvider(TokenContainer<T> container)
        {
            if (container.Tokens.Count == 0)
                throw new ArgumentException("You did not provide any tokens.");

            _tokens = new T[container.Tokens.Count];

            System.Threading.Channels.BoundedChannelOptions options = new(_tokens.Length) 
            { 
                FullMode = System.Threading.Channels.BoundedChannelFullMode.DropWrite 
            };

            AvailableTokens = System.Threading.Channels.Channel.CreateBounded<TokenBase>(options);

            for (int i = 0; i < container.Tokens.Count; i++)
            {
                _tokens[i] = container.Tokens[i];
                _tokens[i].TokenBecameAvailable += ((sender) => AvailableTokens.Writer.TryWrite((T) sender));
            }
        }

        internal async System.Threading.Tasks.ValueTask<TokenBase> GetAsync(System.Threading.CancellationToken? cancellation = null) 
            => await AvailableTokens.Reader.ReadAsync(cancellation.GetValueOrDefault()).ConfigureAwait(false);        
    }
}
