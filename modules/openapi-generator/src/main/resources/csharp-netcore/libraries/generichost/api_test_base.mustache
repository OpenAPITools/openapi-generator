{{>partial_header}}
using System;
using Microsoft.Extensions.Hosting;
using {{packageName}}.Client;{{#hasImport}}
using {{packageName}}.{{modelPackage}};{{/hasImport}}

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Base class for API tests
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApiTestsBase
    {
        protected readonly IHost _host;

        public ApiTestsBase(string[] args)
        {
            _host = CreateHostBuilder(args).Build();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args)
            .Configure{{#projectName}}{{.}}{{/projectName}}{{^projectName}}Api{{/projectName}}((context, options) =>
            {
                {{#hasApiKeyMethods}}ApiKeyToken apiKeyToken = new ApiKeyToken($"<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken);{{/hasApiKeyMethods}}{{#hasHttpBearerMethods}}
                BearerToken bearerToken = new BearerToken($"<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken);{{/hasHttpBearerMethods}}{{#hasHttpBasicMethods}}
                BasicToken basicToken = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(basicToken);{{/hasHttpBasicMethods}}{{#hasHttpSignatureMethods}}
                HttpSignatureConfiguration config = new HttpSignatureConfiguration(todo);
                HttpSignatureToken httpSignatureToken = new HttpSignatureToken(config, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(httpSignatureToken);{{/hasHttpSignatureMethods}}{{#hasOAuthMethods}}
                OAuthToken oauthToken = new OAuthToken("token", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(oauthToken);{{/hasOAuthMethods}}
            });
    }
}
