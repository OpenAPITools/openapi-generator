{{>partial_header}}
using System;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using {{packageName}}.{{apiPackage}};{{#hasImport}}
using {{packageName}}.{{modelPackage}};{{/hasImport}}

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Class for testing {{classname}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public sealed class {{classname}}Tests : ApiTestsBase
    {
        private readonly {{interfacePrefix}}{{classname}} _instance;

        public {{classname}}Tests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<{{interfacePrefix}}{{classname}}>();
        }

        {{#operations}}
        {{#operation}}

        /// <summary>
        /// Test {{operationId}}
        /// </summary>
        [Fact]
        public void {{operationId}}AsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            {{#allParams}}
            //{{{dataType}}} {{paramName}} = null;
            {{/allParams}}
            //{{#returnType}}var response = await {{/returnType}}_instance.{{operationId}}Async({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
            {{#returnType}}
            //Assert.IsType<{{{.}}}>(response);
            {{/returnType}}
        }
        {{/operation}}
        {{/operations}}
    }
}
