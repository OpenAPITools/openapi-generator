{{>partial_header}}
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
{{#useRestSharp}}
using RestSharp;
{{/useRestSharp}}
using Xunit;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Threading.Tasks;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#hasImport}}
using {{packageName}}.{{modelPackage}};
{{/hasImport}}

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Class for testing {{classname}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public sealed class {{classname}}Tests : IDisposable
    {
        private readonly {{interfacePrefix}}{{classname}} _instance;

        public {{classname}}Tests()
        {
            var host = CreateHostBuilder(Array.Empty<string>()).Build();
            _instance = host.Services.GetRequiredService<{{interfacePrefix}}{{classname}}>();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args)
            .Configure{{#projectName}}{{.}}{{/projectName}}{{^projectName}}Api{{/projectName}}((context, options) =>
            {
                {{#hasApiKeyMethods}}ApiKeyToken apiKeyToken = new(TimeSpan.FromSeconds(1), $"<token>");
                options.AddTokens(apiKeyToken);{{/hasApiKeyMethods}}{{#hasHttpBearerMethods}}
                BearerToken bearerToken = new(TimeSpan.FromSeconds(1), $"<token>");
                options.AddTokens(bearerToken);{{/hasHttpBearerMethods}}{{#hasHttpBasicMethods}}
                BasicToken basicToken = new(TimeSpan.FromSeconds(1), "<username>", "<password>");
                options.AddTokens(basicToken);{{/hasHttpBasicMethods}}{{#hasHttpSignatureMethods}}
                HttpSignatureConfiguration config = new(todo);
                HttpSignatureToken httpSignatureToken = new(TimeSpan.FromSeconds(1), config);
                options.AddTokens(httpSignatureToken);{{/hasHttpSignatureMethods}}{{#hasOAuthMethods}}
                OAuthToken oauthToken = new(TimeSpan.FromSeconds(1), "token");
                options.AddTokens(oauthToken);{{/hasOAuthMethods}}
            });

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of {{classname}}
        /// </summary>
        [Fact]
        public void {{operationId}}InstanceTest()
        {
            // TODO uncomment below to test 'IsType' {{classname}}
            //Assert.IsType<{{classname}}>(_instance);
        }
        {{#operations}}
        {{#operation}}

        /// <summary>
        /// Test {{operationId}}
        /// </summary>
        [Fact]
        public async Task {{operationId}}AsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            {{#allParams}}
            //{{{dataType}}} {{paramName}} = null;
            {{/allParams}}
            //{{#returnType}}var response = await {{/returnType}}_instance.{{operationId}}Async({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
            {{#returnType}}
            //Assert.IsType<{{{.}}}>(response);
            {{/returnType}}
        }
        {{/operation}}
        {{/operations}}
    }
}
