# coding: utf-8

from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional, Union, Literal  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator, Field, Extra  # noqa: F401
{{#models}}
{{#model}}
{{#imports}}
{{{.}}}
{{/imports}}


class {{classname}}(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    {{classname}} - a model defined in OpenAPI
    {{#requiredVars}}
        {{name}}: {{#description}}{{.}}{{/description}}{{^description}}The {{name}} of this {{classname}}{{/description}}. 
    {{/requiredVars}}
    {{#optionalVars}}
        {{name}}: {{#description}}{{.}}{{/description}}{{^description}}The {{name}} of this {{classname}}{{/description}} [Optional].
    {{/optionalVars}}
    """

{{#requiredVars}}
    {{name}}: {{>model_field_type}}
{{/requiredVars}}
{{#optionalVars}}
    {{name}}: Optional[{{>model_field_type}}] = None
{{/optionalVars}}
{{#vars}}
{{#maximum}}

    @validator("{{name}}")
    def {{name}}_max(cls, value):
        assert value <= {{maximum}}
        return value
{{/maximum}}
{{#minimum}}

    @validator("{{name}}")
    def {{name}}_min(cls, value):
        assert value >= {{minimum}}
        return value
{{/minimum}}
{{#minLength}}

    @validator("{{name}}")
    def {{name}}_min_length(cls, value):
        assert len(value) >= {{minLength}}
        return value
{{/minLength}}
{{#maxLength}}

    @validator("{{name}}")
    def {{name}}_max_length(cls, value):
        assert len(value) <= {{maxLength}}
        return value
{{/maxLength}}
{{#pattern}}

    @validator("{{name}}")
    def {{name}}_pattern(cls, value):
        assert value is not None and re.match(r"{{pattern}}", value)
        return value
{{/pattern}}
{{/vars}}
{{/model}}
{{/models}}