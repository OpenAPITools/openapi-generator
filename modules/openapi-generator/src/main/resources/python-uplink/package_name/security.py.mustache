# coding: utf-8

{{>partials/header.py}}
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

# noinspection PyUnresolvedReferences,PyProtectedMember
from uplink.auth import BasicAuth, ProxyAuth, BearerToken, get_auth

__all__ = [
    "ProxyAuth",
    "MultiAuth",
{{#authMethods}}
    "{{vendorExtensions.classname}}",
{{/authMethods}}
]


class ApiTokenParam(object):
    """
    Authorizes requests using a token or key in a query parameter.
    Users should subclass this class to define which parameter is the token parameter.
    """
    def __init__(self, param, token):
        self._param = param
        self._param_value = token

    def __call__(self, request_builder):
        request_builder.info["params"][self._param] = self._param_value


class ApiTokenHeader(object):
    """
    Authorizes requests using a token or key in a header.
    Users should subclass this class to define which header is the token header.
    The subclass may also, optionally, define a token prefix (such as in BearerToken)

    _header and/or _prefix may be defined as class attributes on subclasses,
    but should also override __init__() when they do so.
    """
    _header = None
    _prefix = None

    def __init__(self, header, token, prefix=None):
        self._header = header
        self._prefix = prefix
        self._token = token

    @property
    def _header_value(self):
        if self._prefix:
            return "%s %s" % (self._prefix, self._token)
        else:
            return self._token

    def __call__(self, request_builder):
        request_builder.info["headers"][self._header] = self._header_value


class ApiTokenCookie(object):
    """
    Authorizes requests using a token or key in a cookie.

    _cookie_name may be defined as class attributes on subclasses,
    but should also override __init__() when they do so.
    """
    _cookie_name = None

    def __init__(self, name, token):
        self._cookie_name = name
        self._token = token

    @property
    def _cookie(self):
        return "%s=%s" % (self._cookie_name, self._token)

    def __call__(self, request_builder):
        cookie_header = self._cookie

        headers = request_builder.info["headers"]
        cookie_keys = [header for header in headers.keys() if header.lower() == "cookie"]
        for key in cookie_keys:
            cookie_header += "; " + headers.pop(key)
        cookie_header = cookie_header.strip("; ")

        headers["Cookie"] = cookie_header


class MultiAuth(object):
    """
    Authorizes requests using multiple auth methods at the same time.
        api_auth = MultiAuth(
            BasicAuth(username, password),
            ProxyAuth(proxy_user, proxy_pass)
        )
        api_consumer = SomeApiConsumerClass(
            "https://my.base_url.com/",
            auth=api_auth
        )

    Mostly, this is useful for API users to supply intermediary credentials (such as for a proxy).
    """
    def __init__(self, *auth_methods):
        self._auth_methods = [get_auth(auth_method) for auth_method in auth_methods]

    def __call__(self, request_builder):
        for auth_method in self._auth_methods:
            auth_method(request_builder)

    def __getitem__(self, index):
        return self._auth_methods[index]

    def __len__(self):
        return len(self._auth_methods)

    def append(self, auth_method):
        self._auth_methods.append(get_auth(auth_method))

    def extend(self, auth_methods):
        self._auth_methods.extend(
			[get_auth(auth_method) for auth_method in auth_methods]
		)
{{#authMethods}}


{{#vendorExtensions}}
{{#isApiKey}}
{{#isKeyInHeader}}
class {{classname}}(ApiTokenHeader):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """

    _header = "{{keyParamName}}"
    {{#x-prefix}}_prefix = "{{{.}}}"  # defined by x-prefix extension in the spec{{/x-prefix}}

    # noinspection PyMissingConstructor
    def __init__(self, token{{^x-prefix}}, prefix=None{{/x-prefix}}):
        {{^x-prefix}}self._prefix = prefix{{/x-prefix}}
        self._token = token
{{/isKeyInHeader}}
{{#isKeyInQuery}}
class {{classname}}(ApiTokenParam):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """

    _param = "{{keyParamName}}"

    # noinspection PyMissingConstructor
    def __init__(self, token):
        self._token = token
{{/isKeyInQuery}}
{{#isKeyInCookie}}
class {{classname}}(ApiTokenCookie):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """

    _cookie_name = "{{keyParamName}}"

    # noinspection PyMissingConstructor
    def __init__(self, token):
        self._token = token
{{/isKeyInCookie}}
{{/isApiKey}}
{{#isBasic}}
{{#isBasicBasic}}
class {{classname}}(BasicAuth):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """
{{/isBasicBasic}}
{{^isBasicBasic}}
{{^isBasicBearer}}
class {{classname}}(BasicAuth):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """

    _scheme = {{scheme}}  # Not used. TODO: handle Digest and other auth types
{{/isBasicBearer}}
{{/isBasicBasic}}
{{#isBasicBearer}}
class {{classname}}(BearerToken):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """
{{#bearerFormat}}

    _format = "{{{.}}}"  # not used
{{/bearerFormat}}
{{/isBasicBearer}}
{{/isBasic}}
{{#isOAuth}}
#class AppApiKeySecurity(OAuth):
class {{classname}}(BearerToken):
    """
    {{name}} security definition ({{type}}){{#description}}

    {{.}}{{/description}}

    {{>partials/auto_generated_class_docblock}}
    """
    # TODO: Handle OAuth according to oauth flows in spec, not just as a BearerToken
    # implicit {{isImplicit}}
    # password {{isPassword}}
    # application(v2)|clientCredentials(v3) {{isApplication}}
    # accessCode(v2)|authorizationCode(v3) {{isCode}}
{{/isOAuth}}
{{/vendorExtensions}}
{{/authMethods}}

