// <auto-generated>
{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Collections.Generic;
using System.Linq;
{{^netStandard}}
using System.Threading.Channels;
{{/netStandard}}
{{#netStandard}}
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;
{{/netStandard}}

namespace {{packageName}}.{{clientPackage}} {{^netStandard}}
{
    /// <summary>
    /// Provides a token to the api clients. Tokens will be rate limited based on the provided TimeSpan.
    /// </summary>
    /// <typeparam name="TTokenBase"></typeparam>
    {{>visibility}} class RateLimitProvider<TTokenBase> : TokenProvider<TTokenBase> where TTokenBase : TokenBase
    {
        internal Dictionary<string, Channel<TTokenBase>> AvailableTokens { get; } = new{{^net70OrLater}} Dictionary<string, Channel<TTokenBase>>{{/net70OrLater}}();

        /// <summary>
        /// Instantiates a ThrottledTokenProvider. Your tokens will be rate limited based on the token's timeout.
        /// </summary>
        /// <param name="container"></param>
        public RateLimitProvider(TokenContainer<TTokenBase> container) : base(container.Tokens)
        {
            foreach(TTokenBase token in _tokens)
                token.StartTimer(token.Timeout ?? TimeSpan.FromMilliseconds(40));

            if (container is TokenContainer<ApiKeyToken> apiKeyTokenContainer)
            {
                string[] headers = apiKeyTokenContainer.Tokens.Select(t => t.Header).Distinct().ToArray();

                foreach (string header in headers)
                {
                    BoundedChannelOptions options = new BoundedChannelOptions(apiKeyTokenContainer.Tokens.Count(t => t.Header.Equals(header)))
                    {
                        FullMode = BoundedChannelFullMode.DropWrite
                    };

                    AvailableTokens.Add(header, Channel.CreateBounded<TTokenBase>(options));
                }
            }
            else
            {
                BoundedChannelOptions options = new BoundedChannelOptions(_tokens.Length)
                {
                    FullMode = BoundedChannelFullMode.DropWrite
                };

                AvailableTokens.Add(string.Empty, Channel.CreateBounded<TTokenBase>(options));
            }

            foreach(Channel<TTokenBase> tokens in AvailableTokens.Values)
                for (int i = 0; i < _tokens.Length; i++)
                    _tokens[i].TokenBecameAvailable += ((sender) => tokens.Writer.TryWrite((TTokenBase) sender));
        }

        internal override async System.Threading.Tasks.ValueTask<TTokenBase> GetAsync(string header = "", System.Threading.CancellationToken cancellation = default{{^netstandard20OrLater}}(System.Threading.CancellationToken){{/netstandard20OrLater}})
        {
            if (!AvailableTokens.TryGetValue(header, out Channel<TTokenBase>? tokens))
                throw new KeyNotFoundException($"Could not locate a token for header '{header}'.");

            return await tokens.Reader.ReadAsync(cancellation).ConfigureAwait(false);
        }
    }
}{{/netStandard}}{{#netStandard}}
{
    /// <summary>
    /// Provides a token to the api clients. Tokens will be rate limited based on the provided TimeSpan.
    /// </summary>
    /// <typeparam name="TTokenBase"></typeparam>
    public class RateLimitProvider<TTokenBase> : TokenProvider<TTokenBase> where TTokenBase : TokenBase
    {
        internal ConcurrentDictionary<TTokenBase, TTokenBase> AvailableTokens = new ConcurrentDictionary<TTokenBase, TTokenBase>();
        private SemaphoreSlim _semaphore;

        /// <summary>
        /// Instantiates a ThrottledTokenProvider. Your tokens will be rate limited based on the token's timeout.
        /// </summary>
        /// <param name="container"></param>
        public RateLimitProvider(TokenContainer<TTokenBase> container) : base(container.Tokens)
        {
            _semaphore = new SemaphoreSlim(1, 1);

            foreach(TTokenBase token in _tokens)
                token.StartTimer(token.Timeout ?? TimeSpan.FromMilliseconds(40));

            for (int i = 0; i < _tokens.Length; i++)
            {
                _tokens[i].TokenBecameAvailable += ((sender) =>
                {
                    TTokenBase token = (TTokenBase)sender;

                    AvailableTokens.TryAdd(token, token);
                });
            }
        }

        internal override async System.Threading.Tasks.ValueTask<TTokenBase> GetAsync(System.Threading.CancellationToken cancellation = default{{^netstandard20OrLater}}(System.Threading.CancellationToken){{/netstandard20OrLater}})
        {
            await _semaphore.WaitAsync().ConfigureAwait(false);

            try
            {
                TTokenBase result = null;
                
                while (result == null)
                {
                    TTokenBase tokenToRemove = AvailableTokens.FirstOrDefault().Value;

                    if (tokenToRemove != null && AvailableTokens.TryRemove(tokenToRemove, out result))
                        return result;

                    await Task.Delay(40).ConfigureAwait(false);

                    tokenToRemove = AvailableTokens.FirstOrDefault().Value;
                }

                return result;
            }
            finally
            {
                _semaphore.Release();
            }
        }
    }
}{{/netStandard}}
