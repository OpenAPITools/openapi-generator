{{>licenseInfo}}
defmodule {{moduleName}}.Deserializer do
  @moduledoc """
  Helper functions for deserializing responses into models
  """

  @doc """
  Update the provided model with a deserialization of a nested value
  """
  @spec deserialize(struct(), atom(), :date | :list | :map | :struct, module(), keyword() | map()) :: struct()
  def deserialize(model, field, :list, mod, options) do
    model
    |> Map.update!(field, &decode(&1, merge_options(options, as: [struct(mod)])))
  end

  def deserialize(model, field, :struct, mod, options) do
    model
    |> Map.update!(field, &decode(&1, merge_options(options, as: struct(mod))))
  end

  def deserialize(model, field, :map, mod, options) do
    maybe_transform_map = fn
      nil ->
        nil

      existing_value ->
        Map.new(existing_value, fn
          {key, val} ->
            {key, decode(val, merge_options(options, as: struct(mod)))}
        end)
    end

    Map.update!(model, field, maybe_transform_map)
  end

  def deserialize(model, field, :date, _, _options) do
    case Map.get(model, field) do
      value when is_binary(value) ->
        case DateTime.from_iso8601(value) do
          {:ok, datetime, _offset} -> Map.put(model, field, datetime)
          _ -> model
        end

      false ->
        model
    end
  end

  if function_exported?(Poison.Decode, :transform, 2) do
    @doc false
    # This is an internal function used within Poison.Decoder impls
    def normalize_options(options) when is_list(options), do: Map.new(options)
    def normalize_options(options) when is_map(options), do: options

    defp decode(value, options) do
      Poison.Decode.transform(value, normalize_options(options))
    end

    defp merge_options(options, extra) do
      Map.merge(normalize_options(options), normalize_options(extra))
    end
  else
    @doc false
    # This is an internal function used within Poison.Decoder impls
    def normalize_options(options) when is_list(options), do: options
    def normalize_options(options) when is_map(options), do: Keyword.new(options)

    defp decode(value, options) do
      Poison.Decode.decode(value, normalize_options(options))
    end

    defp merge_options(options, extra) do
      Keyword.merge(normalize_options(options), normalize_options(extra))
    end
  end
end
