package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{#useAbstractClass}}
import java.util.Optional;
import java.util.logging.Logger;

import io.helidon.common.GenericType;
{{#x-helidon-v3}}
import io.helidon.common.reactive.Single;
{{/x-helidon-v3}}
{{/useAbstractClass}}
{{#x-helidon-v3}}
import io.helidon.webserver.Routing;
{{/x-helidon-v3}}
{{^x-helidon-v3}}
import io.helidon.webserver.http.HttpRules;
{{/x-helidon-v3}}
import io.helidon.webserver.{{^x-helidon-v3}}http.{{/x-helidon-v3}}ServerRequest;
import io.helidon.webserver.{{^x-helidon-v3}}http.{{/x-helidon-v3}}ServerResponse;
import io.helidon.webserver.{{^x-helidon-v3}}http.Http{{/x-helidon-v3}}Service;

{{#operations}}
{{^useAbstractClass}}public interface {{classname}} extends {{^x-helidon-v3}}Http{{/x-helidon-v3}}Service { {{/useAbstractClass}}
{{#useAbstractClass}}public abstract class {{classname}} implements {{^x-helidon-v3}}Http{{/x-helidon-v3}}Service {

    protected static final Logger LOGGER = Logger.getLogger({{classname}}.class.getName());
{{#jackson}}
    protected static final ObjectMapper MAPPER = JsonProvider.objectMapper();{{/jackson}}
{{#jsonb}}
    protected static final Jsonb JSONB = JsonbBuilder.create();{{/jsonb}}
{{/useAbstractClass}}

    /**
     * A service registers itself by updating the routing rules.
     * @param rules the routing rules.
     */
    @Override
    {{#useAbstractClass}}public{{/useAbstractClass}}{{^useAbstractClass}}default{{/useAbstractClass}} void {{#x-helidon-v3}}update{{/x-helidon-v3}}{{^x-helidon-v3}}routing{{/x-helidon-v3}}({{#x-helidon-v3}}Routing.{{/x-helidon-v3}}{{^x-helidon-v3}}Http{{/x-helidon-v3}}Rules rules) {
{{#operation}}
        rules.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{{path}}}", {{!
        }}{{#bodyParam}}{{#x-helidon-v3}}{{#isModel}}Handler.create({{{dataType}}}.class, {{/isModel}}{{/x-helidon-v3}}this::{{{operationId}}}){{/bodyParam}}{{!
        }}{{^bodyParam}}this::{{{operationId}}}){{/bodyParam}};
{{/operation}}
    }
{{#useAbstractClass}}{{#isFormParamsFunctions}}

    {{!}}{{>formParamsFunctions}}
{{/isFormParamsFunctions}}{{/useAbstractClass}}
{{#operation}}

{{#x-helidon-v3}}
    /**
     * {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}.
     * @param request the server request
     * @param response the server response{{#allParams}}{{#isBodyParam}}{{#isModel}}
     * @param {{paramName}} {{{description}}}{{^description}}{{paramName}}{{/description}} {{/isModel}}{{/isBodyParam}}{{/allParams}}
     */
    void {{{operationId}}}(ServerRequest request, ServerResponse response{{#allParams}}{{#isBodyParam}}{{#isModel}}, {{{dataType}}} {{paramName}}{{/isModel}}{{/isBodyParam}}{{/allParams}}){{^useAbstractClass}};{{/useAbstractClass}}{{#useAbstractClass}} { {{#formParams}}{{#-first}}
        {{>formParamsInitial}}{{/-first}}{{/formParams}}
        Single.create({{^hasParams}}Single.empty(){{/hasParams}}{{#hasParams}}{{^bodyParam}}{{#formParams}}{{#-first}}formSingle{{/-first}}{{/formParams}}{{^formParams}}Single.empty(){{/formParams}}{{/bodyParam}}{{#bodyParam}}{{^isModel}}request.content().as(new GenericType<{{{dataType}}}>() { }){{/isModel}}{{#isModel}}Single.empty(){{/isModel}}{{/bodyParam}}{{/hasParams}})
            .thenAccept({{#bodyParam}}{{^isModel}}{{paramName}}{{/isModel}}{{#isModel}}val{{/isModel}}{{/bodyParam}}{{^bodyParam}}val{{/bodyParam}} -> {
{{#allParams}}
                {{> queryParams }}{{> pathParams }}{{> headerParams}}{{> bodyParams}}{{> formParams}}{{> cookieParams}}
{{/allParams}}
                handle{{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(request, response{{#allParams}}, {{paramName}}{{/allParams}});
            })
            .exceptionally(throwable -> handleError(request, response, throwable));
    }

    /**
     * Handle {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}.
     * @param request the server request
     * @param response the server response{{#allParams}}
     * @param {{paramName}} {{{description}}}{{^description}}{{paramName}}{{/description}} {{/allParams}}
     */
    abstract void handle{{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(ServerRequest request, ServerResponse response{{#allParams}}, {{>dataType}} {{paramName}}{{/allParams}});
{{/useAbstractClass}}
{{/x-helidon-v3}}
{{^x-helidon-v3}}
    /**
     * {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}.
     *
     * @param request the server request
     * @param response the server response
     */
    void {{{operationId}}}(ServerRequest request, ServerResponse response){{^useAbstractClass}};{{/useAbstractClass}}{{#useAbstractClass}} {
        {{#allParams}}
            {{#bodyParam}}{{^isModel}}request.content().as(new GenericType<{{{dataType}}}>() { }){{/isModel}}{{#isModel}}what here?{{/isModel}}{{/bodyParam}}
        {{> queryParams }}{{> pathParams }}{{> headerParams}}{{> bodyParams}}{{> formParams}}{{> cookieParams}}
        {{/allParams}}
    {{/useAbstractClass}}

{{/x-helidon-v3}}

{{/operation}}
{{#useAbstractClass}}    abstract Void handleError(ServerRequest request, ServerResponse response, Throwable throwable);{{!
}}{{/useAbstractClass}}
{{#useAbstractClass}}
{{^x-helidon-v3}}
    @Override
    public void afterStop() {
    System.out.println("Service {{classname}} is down. Goodbye!");
    }
{{/x-helidon-v3}}
{{/useAbstractClass}}
}
{{/operations}}
