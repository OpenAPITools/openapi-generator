{{!
    Declares an inner class for each operation which collects:
        * overridable methods for preparing each parameter from the request
        * an interface which defines the possible return groups (body or header results and status).
}}
    /**
     * Helpers for the {{operationId}} operation.
     */
    static protected class {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}} {
{{#allParams}}

        /**
         * Prepares the {{paramName}} parameter.
         *
         * @param request {@link io.helidon.webserver.http.ServerRequest} containing the parameter
{{#isFormParameter}}{{!
}}         * @param formParams {@link io.helidon.common.parameters.Parameters} containing all form parameters
{{/isFormParameter}}{{#isMultiPart}}{{!
}}         * @param parts {@code Map} of part names to {@link io.helidon.http.media.multipart.ReadablePart} for each part
{{/isMultiPart}}{{!
}}         * @param validator {@link {{apiPackage}}.ValidatorUtils.Validator} for validating all parameters to the operation
         * @return {{paramName}} parameter value
         */
        static protected {{> paramDeclType }} {{> paramMethodName }}(ServerRequest request, {{#isFormParam}}Parameters formParams, {{/isFormParam}}{{#isMultiPart}}PartsUtils parts,{{/isMultiPart}}ValidatorUtils.Validator validator) {
            return {{^isBodyParam}}{{> paramValueExpr}}{{/isBodyParam}}{{#isBodyParam}}{{> bodyParamValue }};{{/isBodyParam}}
        }

{{/allParams}}
        /**
         * Responses for operation {{=<% %>=}}{@code <%operationId%>}<%={{ }}=%> organized by response status.
         * <p>
         *     Once your code determines which (if any) response to send, it can use the static {@code create} method and pass
         *     the required elements of the response, then assign any optional response elements using the record fields.
         * <p>
         *     Finally, invoke the {@code apply} method, passing the original {@link ServerResponse}; the method sets any headers
         *     you have assigned, sets the correct status in the response, and sends the response including any appropriate
         *     entity.
         * </p>
         */
        interface Result {
{{#responses}}

            /**
             * {{#isDefault}}Default result{{/isDefault}}{{^isDefault}}Result for HTTP status code {{=<% %>=}}{@code <%code%>}<%={{ }}=%>{{/isDefault}}.{{!
}}{{#isDefault}}
             *
             * @param status (required) Status value to be sent with this default result{{/isDefault}}{{!
}}{{#vendorExtensions.x-helidon-hasResponseProps}}{{!
}}{{^isDefault}}
            *{{/isDefault}}{{!
}}{{#vendorExtensions.x-helidon-allResponseProps}}
             * @param {{name}} {{#required}}(required) {{/required}}{{description}}{{/vendorExtensions.x-helidon-allResponseProps}}{{/vendorExtensions.x-helidon-hasResponseProps}}
             */
            record {{> resultRecordTypeName }}({{#isDefault}}Status status{{#vendorExtensions.x-helidon-hasResponseProps}},{{/vendorExtensions.x-helidon-hasResponseProps}}{{!
}}{{/isDefault}}{{#vendorExtensions.x-helidon-allResponseProps}}{{^-first}},
                        {{/-first}}{{> opResultParamDecl}}{{/vendorExtensions.x-helidon-allResponseProps}}{{!
}})     {

                /**
                 * Creates a result for the {{#isDefault}}default{{/isDefault}}{{^isDefault}}status {{=<% %>=}}{@code <%code%>}<%={{ }}=%>{{/isDefault}} result
                 * for the {{operationId}} operation{{#x-helidon-hasRequiredResponseProps}}, accepting all the required result values{{/x-helidon-hasRequiredResponseProps}}{{^x-helidon-hasRequiredResponseProps}}; there are no required result values{{/x-helidon-hasRequiredResponseProps}} for this response.
                 *{{!
}}{{#vendorExtensions.x-helidon-requiredResponseProps}}
                 * @param {{name}} returned {{#isHeader}}header{{/isHeader}}{{^isHeader}}entity{{/isHeader}}{{/vendorExtensions.x-helidon-requiredResponseProps}}
                 * @return new result data for status {{code}}
                 */
                static {{> resultRecordTypeName }} create({{#isDefault}}Status status{{#vendorExtensions.x-helidon-hasRequiredResponseProps}},{{/vendorExtensions.x-helidon-hasRequiredResponseProps}}{{!
}}{{/isDefault}}{{#vendorExtensions.x-helidon-requiredResponseProps}}{{^-first}},
                           {{/-first}}{{> opResultParamDecl }}{{/vendorExtensions.x-helidon-requiredResponseProps}}) {
                    return new {{> resultRecordTypeName }}({{#isDefault}}status{{#vendorExtensions.x-helidon-hasRequiredResponseProps}},{{/vendorExtensions.x-helidon-hasRequiredResponseProps}}{{!
}}{{/isDefault}}{{#vendorExtensions.x-helidon-allResponseProps}}{{^-first}},
                            {{/-first}}{{#required}}{{name}}{{/required}}{{^required}}{{#isContainer}}{{containerTypeMapped}}.of(){{/isContainer}}{{^isContainer}}null{{/isContainer}}{{/required}}{{/vendorExtensions.x-helidon-allResponseProps}});
                }
{{#vendorExtensions.x-helidon-hasRequiredResponseProps}}
    {{> opResultRecordCtor }}{{!
}}{{/vendorExtensions.x-helidon-hasRequiredResponseProps}}{{!
}}{{^vendorExtensions.x-helidon-hasRequiredResponseProps}}{{#isDefault}}
    {{> opResultRecordCtor }}{{!
}}{{/isDefault}}{{/vendorExtensions.x-helidon-hasRequiredResponseProps}}
                /**
                 * Applies this result data to the specified {@link io.helidon.webserver.http.ServerResponse}, assigning the
                 * HTTP status, any response headers, and any response entity.
                 *
                 * @param serverResponse the server response to which to apply these result values
                 * @return the updated server response
                 */
                ServerResponse apply(ServerResponse serverResponse) {
                    serverResponse.status({{^isDefault}}Status.create({{code}}){{/isDefault}}{{#isDefault}}status{{/isDefault}});{{!
}}{{#headers}}{{!
}}                    if ({{name}} != null) {
                        serverResponse.header("{{baseName}}", {{name}}{{^isString}}.toString(){{/isString}});
                    }{{/headers}}{{!
}}{{#returnProperty}}{{!
}}{{^required}}
                    if ({{name}} != null) { {{!
}}{{/required}}{{!
}}{{^isFile}}
{{^required}}        {{/required}}{{!
}}                serverResponse.send({{name}});{{!
}}{{^required}}
                    } else {
                        serverResponse.send();
                    }{{!
}}{{/required}}{{!
}}{{/isFile}}{{!
}}{{#isFile}}
{{^required}}       {{/required}}{{!
}}                    serverResponse.contentLength({{name}}.transferTo(serverResponse.outputStream()));{{!
}}{{^required}}
                    }{{!
}}{{/required}}{{!
}}                    serverResponse.send();{{!
}}{{/isFile}}{{!
}}{{/returnProperty}}{{!
}}{{^dataType}}
                    serverResponse.send();{{!
}}{{/dataType}}{{!
}}
                    return serverResponse;
                }
            }
{{/responses}}
        }
    }
