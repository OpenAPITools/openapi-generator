import 'package:petstore_api/_internal.dart';
import 'package:test/test.dart';

{{#models}}
{{#model}}
void main() {
  group(r'{{{classname}}}', () {
    {{#isEnum}}
    test('values not empty', () {
      expect({{{classname}}}.values, isNotEmpty);
    });

    test('unsafe', () {
      final example = {{#isString}}'abc'{{/isString}}{{#isNumeric}}123{{/isNumeric}}{{^isNumeric}}{{^isString}}null{{/isString}}{{/isNumeric}};
      expect({{{classname}}}.$unsafe(example), example);
    });

    {{#allowableValues}}{{#enumVars}}
    test(r'{{name}}', () {
      expect({{{classname}}}.{{name}}().value, {{#isString}}r{{/isString}}{{{value}}});
    });
    {{/enumVars}}{{/allowableValues}}{{/isEnum}}
    {{^isEnum}}
    final reflection = {{{classname}}}.$reflection;

    late {{{classname}}} exampleInstance;
    setUp(() {
      exampleInstance = reflection.example();
    });

    Object? doSerialize() {
      final result = exampleInstance.serialize();
      return result;
    }
    test('serialize', () {
      expect(exampleInstance, isNotNull);
      final serialized = doSerialize();
      expect(serialized, isNotNull);
    });

    test('validate', () {
      expect(exampleInstance, isNotNull);
      expect(exampleInstance.validate(), isTrue);
    });
    test('deserialize', () {
      expect(exampleInstance, isNotNull);
      final serialized = doSerialize();
      final deserialized = {{{classname}}}.deserialize(serialized);
      expect(deserialized.validate(), isTrue);
      expect(deserialized.serialize(), serialized);
    });
    {{/isEnum}}
  });
}
{{/model}}
{{/models}}
