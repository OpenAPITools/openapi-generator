{{! this should evaluate to an expression that returns true if the variable (v) can be mapped. }}
v == null ? {{isNullable}} :
(
{{#isAnyType}}true{{/isAnyType}}
{{^isAnyType}}
    {{#isFreeFormObject}}v is Map<String, dynamic>{{/isFreeFormObject}}
    {{^isFreeFormObject}}
        {{#isContainer}}
            {{#isMap}}v is Map<String, dynamic> && {{#items}}v.values.every((v) => {{>types/can_deserialize_recursive}}){{/items}}{{/isMap}}
            {{#isArray}}v is List && {{#items}}v.every((v) => {{>types/can_deserialize_recursive}}){{/items}}{{/isArray}}
        {{/isContainer}}
        {{^isContainer}}
            {{#isModel}}{{dataType}}.canDeserialize(v){{/isModel}}
            {{! since enums are extension types and don't exist at runtime,
            we need to check datatype, not dataTypeWithEnum}}
            {{^isModel}}v is {{dataType}}{{/isModel}}
        {{/isContainer}}
    {{/isFreeFormObject}}
{{/isAnyType}}
)