//class serialization

Map<String, dynamic> _${{classname}}ToMap({{classname}} instance) {
  final _reflection = {{classname}}Reflection.instance;
  return <String, dynamic>{
    {{#allVars}}
    {{^required}}if (instance.{{name}}.isDefined){{/required}}
    _reflection.{{name}}Part.oasName: ({{>types/variable_recursive}} v) {
      return {{>types/serialize_recursive}};
    }(instance.{{name}}{{^required}}.valueRequired{{/required}}),
    {{/allVars}}
    {{#additionalProperties}}...instance.additionalProperties.map((key, v) => MapEntry(key, {{>types/serialize_recursive}})),{{/additionalProperties}}
    {{#composedSchemas}}{{#oneOf}}{{#isModel}}
    if (instance.{{name}}.isDefined) ...instance.{{name}}.valueRequired.toMap(),
    {{/isModel}}{{/oneOf}}{{#anyOf}}{{#isModel}}
    if (instance.{{name}}.isDefined) ...instance.{{name}}.valueRequired.toMap(),{{/isModel}}{{/anyOf}}{{/composedSchemas}}
  };
}

{{classname}} _${{classname}}FromMap(Map<String, dynamic> src) {
  const _reflection = {{classname}}Reflection.instance;
  {{#discriminator}}
  final discriminatorKey = _reflection.discriminatorKey;
  final discriminatorValue = src[discriminatorKey]?.toString();
  //when we have a discriminator, we pick one model
  final modelReflection = _reflection.tryGetDiscriminatorModel(discriminatorValue);
  {{/discriminator}}
  return {{classname}}.$all(
    {{#allVars}}{{name}}: {{>types/from_map}},
    {{/allVars}}
    {{#additionalProperties}}additionalProperties: AdditionalProperties(src.except(_reflection.knownKeys).map((key, v) => MapEntry(key, {{>types/deserialize_recursive}}))),{{/additionalProperties}}
    {{#composedSchemas}}{{#oneOf}}
    {{name}}: {{#discriminator}}modelReflection is ClassReflection<{{dataType}}> ? UndefinedWrapper(modelReflection.deserializeFunction(src)) : UndefinedWrapper.undefined(){{/discriminator}}{{^discriminator}}{{#isModel}}{{dataType}}.canDeserialize(src) ? UndefinedWrapper({{dataType}}.deserialize(src)) : {{/isModel}} UndefinedWrapper.undefined(){{/discriminator}},{{/oneOf}}{{#anyOf}}
    {{name}}: {{#discriminator}}modelReflection is ClassReflection<{{dataType}}> ? UndefinedWrapper(modelReflection.deserializeFunction(src)) : UndefinedWrapper.undefined(){{/discriminator}}{{^discriminator}}{{#isModel}}{{dataType}}.canDeserialize(src) ? UndefinedWrapper({{dataType}}.deserialize(src)) : {{/isModel}} UndefinedWrapper.undefined(){{/discriminator}},{{/anyOf}}{{/composedSchemas}}
  );
}

bool _${{classname}}CanFromMap(Map<String, dynamic> src) {
  final _reflection = {{classname}}Reflection.instance;

  {{#allVars}}if (!{{>types/can_from_map}}) {
    return false;
  }
  {{/allVars}}
  {{#additionalProperties}}
  if (!src.except(_reflection.knownKeys).values.every((v) => {{>types/can_deserialize_recursive}})) {
    return false;
  }
  {{/additionalProperties}}
  {{#composedSchemas}}


  {{#discriminator}}
  final discriminatorKey = _reflection.discriminatorKey;
  final discriminatorValue = src[discriminatorKey]?.toString();
  //when we have a discriminator, we pick one model
  final modelReflection = _reflection.tryGetDiscriminatorModel(discriminatorValue);
  if (modelReflection != null) {
    // a discriminator is defined AND it exists in the src.
    return modelReflection.canDeserializeFunction(src);
  }
  {{/discriminator}}
  {{#oneOf}}
  {{#-first}}
  final oneOfs = [
  {{/-first}}
  {{#isModel}}
    () => {{dataType}}.canDeserialize(src),
  {{/isModel}}
  {{#-last}}
  ];
  final validOneOfs = oneOfs.where((x) => x()).take(2).length;
  if (validOneOfs == 0 || validOneOfs > 1) {
    return false;
  }
  {{/-last}}
  {{/oneOf}}{{#anyOf}}
  {{#-first}}
  final anyOfs = [
  {{/-first}}
  {{#isModel}}
    () => {{dataType}}.canDeserialize(src),
  {{/isModel}}
  {{#-last}}
  ];
  final validAnyOfs = anyOfs.where((x) => x()).take(1).length;
  if (validAnyOfs == 0) {
    return false;
  }
  {{/-last}}
  {{/anyOf}}{{/composedSchemas}}
  return true;
}

/// Deserializes a primitive Object (num, String, List, Map).
{{classname}} _${{classname}}Deserialize(Object? src) {
  if (src is Map<String, dynamic>) {
    return _${{classname}}FromMap(src);
  } else {
    {{^allVars}}{{#vendorExtensions.hasAnyOfOrOneOf}}
    final v = src;
    return {{classname}}.$all(
      {{#composedSchemas}}
      {{#oneOf}}
      {{name}}: ({{>types/can_deserialize_recursive}}) ? UndefinedWrapper({{>types/deserialize_recursive}}) : UndefinedWrapper.undefined(),{{/oneOf}}{{#anyOf}}
      {{name}}: ({{>types/can_deserialize_recursive}}) ? UndefinedWrapper({{>types/deserialize_recursive}}) : UndefinedWrapper.undefined(),{{/anyOf}}
      {{/composedSchemas}}
      // Additional Properties only make sense if the src is a Map<String, dynamic>
      {{#additionalProperties}}additionalProperties: AdditionalProperties(),{{/additionalProperties}}
    );{{/vendorExtensions.hasAnyOfOrOneOf}}
    {{/allVars}}
    {{! If a model has vars, then src MUST be Map, otherwise it's not supported. }}
    {{#allVars}}{{#-first}}
    throw UnimplementedError();
    {{/-first}}{{/allVars}}
  }
}
/// Checks if a primitive Object (num, String, List, Map) can be deserialized.
bool _${{classname}}CanDeserialize(Object? src) {
  if (src is Map<String, dynamic>) {
    return _${{classname}}CanFromMap(src);
  } else {
    {{#composedSchemas}}
    final v = src;
    {{#oneOf}}
    {{#-first}}
    final oneOfs = [
    {{/-first}}
      () => {{>types/can_deserialize_recursive}},
    {{#-last}}
    ];
    final validOneOfs = oneOfs.where((x) => x()).take(2).length;
    if (validOneOfs == 1) {
      return true;
    }
    {{/-last}}
    {{/oneOf}}
    {{#anyOf}}
    {{#-first}}
    final anyOfs = [
    {{/-first}}
      () => {{>types/can_deserialize_recursive}},
    {{#-last}}
    ];
    final validAnyOfs = anyOfs.where((x) => x()).take(1).length;
    if (validAnyOfs > 0) {
      return true;
    }
    {{/-last}}
    {{/anyOf}}
    {{/composedSchemas}}
    return false;
  }
}

/// Serializes to a primitive Object (num, String, List, Map).
{{#allVars}}{{#-first}}Map<String, dynamic>{{/-first}}{{/allVars}}{{^allVars}}{{#discriminator}}Map<String, dynamic>{{/discriminator}}{{^discriminator}}Object?{{/discriminator}}{{/allVars}} _${{classname}}Serialize({{classname}} src) {
  {{#allVars}}{{#-first}}Map<String, dynamic>{{/-first}}{{/allVars}}{{^allVars}}{{#discriminator}}Map<String, dynamic>{{/discriminator}}{{^discriminator}}Object?{{/discriminator}}{{/allVars}} initialResult = () {
    {{#allVars}}{{#-first}}
      return _${{classname}}ToMap(src);
    {{/-first}}{{/allVars}}
    {{^allVars}}
      {{#discriminator}}
        return _${{classname}}ToMap(src);
      {{/discriminator}}
      {{^discriminator}}{{#vendorExtensions.hasAnyOfOrOneOf}}{{#composedSchemas}}{{#oneOf}}
        if (src.{{name}}.isDefined) {final v = src.{{name}}.valueRequired; return {{>types/serialize_recursive}}; }{{/oneOf}}{{#anyOf}}
        if (src.{{name}}.isDefined) {final v = src.{{name}}.valueRequired; return {{>types/serialize_recursive}}; }
        {{/anyOf}}{{/composedSchemas}}
        return null;{{/vendorExtensions.hasAnyOfOrOneOf}}
      {{/discriminator}}
    {{/allVars}}
  }();
  {{^allVars}}
  {{#additionalProperties}}
  if (initialResult is Map<String, Object?>) {
    return {
      ...src.additionalProperties,
      ...initialResult,
    };
  }
  {{/additionalProperties}}
  {{/allVars}}
  return initialResult;
}


/*
XmlElement _${{classname}}ToXml({{classname}} instance) {
  final reflection = {{classname}}XmlReflection.instance;
  final result = XmlElement(
    XmlName(reflection.oasName, reflection.oasNamespace),
    //attributes
    [

    ],
    //elements
    [
    ],
  );
  return result;
}

{{classname}} _${{classname}}FromXml(XmlElement src) {
  final reflection = {{classname}}XmlReflection.instance;
  return {{classname}}.$all(

  );
}
*/