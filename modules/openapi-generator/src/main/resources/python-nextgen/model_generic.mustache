from __future__ import annotations
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401

{{#vendorExtensions.x-py-import-models}}
from {{packageName}} import models
{{/vendorExtensions.x-py-import-models}}
{{#vendorExtensions.x-py-datetime-imports}}{{#-first}}from datetime import{{/-first}} {{{.}}}{{^-last}},{{/-last}}{{/vendorExtensions.x-py-datetime-imports}}
{{#vendorExtensions.x-py-typing-imports}}{{#-first}}from typing import{{/-first}} {{{.}}}{{^-last}},{{/-last}}{{/vendorExtensions.x-py-typing-imports}}
{{#vendorExtensions.x-py-pydantic-imports}}{{#-first}}from pydantic import{{/-first}} {{{.}}}{{^-last}},{{/-last}}{{/vendorExtensions.x-py-pydantic-imports}}

class {{classname}}({{#parent}}models.{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
{{#vars}}
    {{name}}: {{{vendorExtensions.x-py-typing}}}
{{/vars}}

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
{{#discriminator}}

    __discriminator_value_class_map = {
{{#children}}
        '{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},{{/-last}}
{{/children}}
    }
{{/discriminator}}

{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.__discriminator_value_class_map.get(discriminator_value)

{{/discriminator}}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> {{{classname}}}:
        """Create an instance of {{{classname}}} from a JSON string"""
        return {{{classname}}}.parse_raw(json_str)

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self.dict(by_alias=True, exclude_none=True)

    @classmethod
    def from_dict(cls, dict: dict) -> {{{classname}}}:
        """Create an instance of {{{classname}}} from a dict"""
        return {{{classname}}}.parse_obj(dict)
