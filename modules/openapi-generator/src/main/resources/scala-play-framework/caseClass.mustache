case class {{classname}}(
{{#vars}}
  {{&name}}: {{^required}}Option[{{/required}}{{#isEnum}}{{classname}}.{{enumName}}.Value{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}}{{^required}}]{{/required}}{{#hasMore}},{{/hasMore}}{{^hasMore}}{{#isMapModel}},{{/isMapModel}}{{/hasMore}}
{{/vars}}
{{#isMapModel}}
  {{parentPropName}}: {{parent}}
{{/isMapModel}}
)

object {{classname}} {
  implicit lazy val {{classVarName}}JsonFormat: Format[{{classname}}] = {{^isMapModel}}Json.format[{{classname}}]{{/isMapModel}}{{#isMapModel}}{
{{>extensibleObjectJsonFormat}}
  }{{/isMapModel}}
  {{#vars}}
  {{#isEnum}}

  // noinspection TypeAnnotation
  object {{enumName}} extends Enumeration {
    {{#allowableValues}}
    {{#enumVars}}
    val {{name}} = Value({{&value}})
    {{/enumVars}}
    {{/allowableValues}}

    type {{enumName}} = Value
    implicit lazy val {{enumName}}JsonFormat: Format[Value] = Format(Reads.enumNameReads(this), Writes.enumNameWrites[this.type])
  }
  {{/isEnum}}
  {{/vars}}
}
