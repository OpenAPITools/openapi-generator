{{>licenseInfo}}
#pragma once

#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Dom/JsonObject.h"
#include "HttpRetrySystem.h"
#include "Containers/Ticker.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

typedef TSharedRef<TJsonWriter<>> JsonWriter;
using namespace FHttpRetrySystem;

struct {{dllapi}} HttpRetryManager : public FManager, public FTickerObjectBase
{
	using FManager::FManager;

	bool Tick(float DeltaTime) final;
};

struct {{dllapi}} HttpRetryParams
{
	HttpRetryParams(
		const FRetryLimitCountSetting& InRetryLimitCountOverride = FRetryLimitCountSetting(),
		const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride = FRetryTimeoutRelativeSecondsSetting(),
		const FRetryResponseCodes& InRetryResponseCodes = FRetryResponseCodes(),
		const FRetryVerbs& InRetryVerbs = FRetryVerbs(),
		const FRetryDomainsPtr& InRetryDomains = FRetryDomainsPtr()
	);

	FRetryLimitCountSetting              RetryLimitCountOverride;
	FRetryTimeoutRelativeSecondsSetting  RetryTimeoutRelativeSecondsOverride;
	FRetryResponseCodes					 RetryResponseCodes;
	FRetryVerbs                          RetryVerbs;
	FRetryDomainsPtr					 RetryDomains;
};

class {{dllapi}} Model
{
public:
	virtual ~Model() {}
	virtual void WriteJson(JsonWriter& Writer) const = 0;
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;
};

class {{dllapi}} Request
{
public:
	virtual ~Request() {}
	virtual void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const = 0;
	virtual FString ComputePath() const = 0;

	/* Enables retry and optionally sets a retry policy for this request */
	void SetShouldRetry(const HttpRetryParams& Params = HttpRetryParams()) { RetryParams = Params; }
	const TOptional<HttpRetryParams>& GetRetryParams() const { return RetryParams; }

private:
	TOptional<HttpRetryParams> RetryParams;
};

class {{dllapi}} Response
{
public:
	virtual ~Response() {}
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;

	void SetHttpRequestSuccessful(bool InHttpRequestSuccessful) { HttpRequestSuccessful = InHttpRequestSuccessful; }
	bool IsHttpRequestSuccessful() const { return HttpRequestSuccessful; }

	void SetHttpClientConnectionError(bool InHttpClientConnectionError) { HttpClientConnectionError = InHttpClientConnectionError; }
	bool IsHttpClientConnectionError() const { return HttpClientConnectionError; }

	virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode);
	EHttpResponseCodes::Type GetHttpResponseCode() const { return HttpResponseCode; }

	void SetRestRequestSuccessful(bool InRestRequestSuccessful) { RestRequestSuccessful = InRestRequestSuccessful; }
	bool IsRestRequestSuccessful() const { return RestRequestSuccessful; }

	void SetRestResponseContent(const FString& InResponseContent) { RestResponseContent = InResponseContent; }
	const TOptional<FString>& GetRestResponseContent() const { return RestResponseContent; }

	void SetRestResponseDescription(const FString& InResponseDescription) { RestResponseDescription = InResponseDescription; }
	const TOptional<FString>& GetRestResponseDescription() const { return RestResponseDescription; }

	void SetHttpResponse(const FHttpResponsePtr& InHttpResponse) { HttpResponse = InHttpResponse; }
	const FHttpResponsePtr& GetHttpResponse() const { return HttpResponse; }

	void SetHttpRequest(const FHttpRequestPtr& InHttpRequest) { HttpRequest = InHttpRequest; }
	const FHttpRequestPtr& GetHttpRequest() const { return HttpRequest; }

	void SetRestContentFullyParsed(bool InRestContentFullyParsed) { RestContentFullyParsed = InRestContentFullyParsed; }
	bool IsRestContentFullyParsed() const { return RestContentFullyParsed; }

private:
	FHttpRequestPtr HttpRequest;
	bool HttpRequestSuccessful = false;
	bool HttpClientConnectionError = false;
	EHttpResponseCodes::Type HttpResponseCode = EHttpResponseCodes::Unknown;
	FHttpResponsePtr HttpResponse;
	bool RestRequestSuccessful = false;
	TOptional<FString> RestResponseContent;
	TOptional<FString> RestResponseDescription;
	bool RestContentFullyParsed = false;

};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
