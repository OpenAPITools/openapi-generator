{{>licenseInfo}}
#pragma once

#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Dom/JsonObject.h"
#include "HttpRetrySystem.h"
#include "Containers/Ticker.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

typedef TSharedRef<TJsonWriter<>> JsonWriter;
using namespace FHttpRetrySystem;

struct {{dllapi}} HttpRetryManager : public FManager, public FTickerObjectBase
{
	using FManager::FManager;

	bool Tick(float DeltaTime) final;
};

struct {{dllapi}} HttpRetryParams
{
	HttpRetryParams(
		const FRetryLimitCountSetting& InRetryLimitCountOverride = FRetryLimitCountSetting(),
		const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride = FRetryTimeoutRelativeSecondsSetting(),
		const FRetryResponseCodes& InRetryResponseCodes = FRetryResponseCodes(),
		const FRetryVerbs& InRetryVerbs = FRetryVerbs(),
		const FRetryDomainsPtr& InRetryDomains = FRetryDomainsPtr()
	);

	FRetryLimitCountSetting              RetryLimitCountOverride;
	FRetryTimeoutRelativeSecondsSetting  RetryTimeoutRelativeSecondsOverride;
	FRetryResponseCodes					 RetryResponseCodes;
	FRetryVerbs                          RetryVerbs;
	FRetryDomainsPtr					 RetryDomains;
};

class {{dllapi}} Model
{
public:
	virtual ~Model() {}
	virtual void WriteJson(JsonWriter& Writer) const = 0;
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;
};

class {{dllapi}} Request
{
public:
	virtual ~Request() {}
	virtual void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const = 0;
	virtual FString ComputePath() const = 0;

	/* Enables retry and optionally sets a retry policy for this request */
	void SetShouldRetry(const HttpRetryParams& Params = HttpRetryParams()) { RetryParams = Params; }
	const TOptional<HttpRetryParams>& GetRetryParams() const { return RetryParams; }

private:
	TOptional<HttpRetryParams> RetryParams;
};

class {{dllapi}} Response
{
public:
	virtual ~Response() {}
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;

	void SetHttpRequestSuccessful(bool InHttpRequestSuccessful) { HttpRequestSuccessful = InHttpRequestSuccessful; }
	bool IsHttpRequestSuccessful() const { return HttpRequestSuccessful; }

	void SetHttpClientConnectionError(bool InHttpClientConnectionError) { HttpClientConnectionError = InHttpClientConnectionError; }
	bool IsHttpClientConnectionError() const { return HttpClientConnectionError; }

	virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode);
	EHttpResponseCodes::Type GetHttpResponseCode() const { return HttpResponseCode; }

	void SetRestRequestSuccessful(bool InRestRequestSuccessful) { RestRequestSuccessful = InRestRequestSuccessful; }
	bool IsRestRequestSuccessful() const { return RestRequestSuccessful; }

	void SetRestResponseContent(const FString& InResponseContent) { RestResponseContent = InResponseContent; }
	const TOptional<FString>& GetRestResponseContent() const { return RestResponseContent; }

	void SetRestResponseDescription(const FString& InResponseDescription) { RestResponseDescription = InResponseDescription; }
	const TOptional<FString>& GetRestResponseDescription() const { return RestResponseDescription; }

	void SetHttpResponse(const FHttpResponsePtr& InHttpResponse) { HttpResponse = InHttpResponse; }
	const FHttpResponsePtr& GetHttpResponse() const { return HttpResponse; }

	void SetHttpRequest(const FHttpRequestPtr& InHttpRequest) { HttpRequest = InHttpRequest; }
	const FHttpRequestPtr& GetHttpRequest() const { return HttpRequest; }

	void SetRestContentFullyParsed(bool InRestContentFullyParsed) { RestContentFullyParsed = InRestContentFullyParsed; }
	bool IsRestContentFullyParsed() const { return RestContentFullyParsed; }

private:
    //Unreal's underlying HTTP request.
	FHttpRequestPtr HttpRequest;

    //Success or failure of HTTP request as reported by Unreal's HTTP layer.  Canceling the request will also
    //result in failure here.
	bool HttpRequestSuccessful = false;

    //Derived information as to whether this was a failure to connect entirely, or alternatively if any data was
    //sent down the line before the connection failed.
    //Applications take note here:  If data was sent down the line, it may not be safe to resend, depending on what your
    //request was asking of the application server.  We don't know if the server processed it or not.
	bool HttpClientConnectionError = false;

    //Unreal's underlying HTTP response. This is a TSharedPtr and can be checked for IsValid()
    //IsValid() may return false if there was no response.
    FHttpResponsePtr HttpResponse;

    //The HTTP response from the server, or EHttpResponseCodes::Unknown if there was no HTTP response.
	EHttpResponseCodes::Type HttpResponseCode = EHttpResponseCodes::Unknown;

    //The REST layer's assessment as to the success of the request.  Typically a response in the 2xx range results in true.
	bool RestRequestSuccessful = false;

    //The raw (string) content of the REST response.  Note this is TOptional.  If IsSet() == false, then there was no content.
    //In case of a parsing problem or unexpected result, this will still contain whatever the server sent back.
	TOptional<FString> RestResponseContent;

    //The REST layer's description of the response type that was received from the server.  This descriptive text comes
    //from the API Schema upon receiving specified HTTP response codes.
    //Note this is TOptional.  If IsSet() == false, then there likely was no description for the given response code in
    //the Schema.
	TOptional<FString> RestResponseDescription;

    //An assessment from the REST layer as to if the content was fully and properly parsed.
    //Note, this may need to be treated skeptically.  A partially successful parse will still
    //result in data being populated.  And a failure to 'fully' parse may be a pedantic failure from an overly
    //strict reading of the Schema, or a malformed Schema that works well enough.
	bool RestContentFullyParsed = false;

};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
