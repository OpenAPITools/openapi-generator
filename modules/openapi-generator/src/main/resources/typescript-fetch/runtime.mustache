// tslint:disable
{{>licenseInfo}}

export const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

/**
 * This is the base class for all generated API classes.
 */
export class BaseAPI {

    private middleware: Middleware[];

    constructor(protected configuration = new Configuration()) {
        this.middleware = configuration.middleware;
    }

    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {
        const next = this.clone<T>();
        next.middleware = next.middleware.concat(...middlewares);
        return next;
    }

    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {
        const middlewares = preMiddlewares.map((pre) => ({ pre }));
        return this.withMiddleware<T>(...middlewares);
    }

    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {
        const middlewares = postMiddlewares.map((post) => ({ post }));
        return this.withMiddleware<T>(...middlewares);
    }

    protected async request<T>(context: RequestOpts): Promise<T> {
        const { url, init } = this.createFetchParams(context);
        const response = await this.fetchApi(url, init);
        if (response.status >= 200 && response.status < 300) {
            switch(context.responseType) {
                case ResponseType.response:
                    return response as any as T;
                case ResponseType.text:
                    return await response.text() as any as T;
                case ResponseType.file:
                    return await response.blob() as any as T;
                case ResponseType.json:
                    const result = await response.json() as T;
                    return transformPropertyNames(result, context.modelPropertyNaming);
                default:
                    return response as any as T;
            }
        }
        throw response;
    }

    private createFetchParams(context: RequestOpts) {
        let url = this.configuration.basePath + context.path;
        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
            // only add the querystring to the URL if there are query parameters.
            // this is done to avoid urls ending with a "?" character which buggy webservers
            // do not handle correctly sometimes.
            url += '?' + querystring(context.query);
        }
        const body = context.body instanceof FormData ? context.body : JSON.stringify(context.body);
        const init = {
            method: context.method,
            headers: context.headers,
            body,
        };
        return { url, init };
    }

    private fetchApi = async (url: string, init: RequestInit) => {
        let fetchParams = { url, init };
        for (const middleware of this.middleware) {
            if (middleware.pre) {
                fetchParams = await middleware.pre(this.fetchApi, fetchParams.url, fetchParams.init) || fetchParams;
            }
        }
        let response = await this.configuration.fetchApi(fetchParams.url, fetchParams.init);
        for (const middleware of this.middleware) {
            if (middleware.post) {
                response = await middleware.post(this.fetchApi, url, init, response.clone()) || response;
            }
        }
        return response;
    }

    /**
     * https://swagger.io/docs/specification/2-0/describing-responses/
     *
     * If the response type for a given API is a 'string' we need to avoid
     * parsing the response as json because JSON.parse("some string") will
     * fail when the string isn't actually JSON.
     */
    protected getResponseType(returnType: string): ResponseType {
        switch (returnType) {
            case 'file':
                return ResponseType.blob;
            case 'string':
                return responseType.text;
            default:
                return responseType.json;
        }
    }

    /**
     * Create a shallow clone of `this` by constructing a new instance
     * and then shallow cloning data members.
     */
    private clone<T extends BaseAPI>(this: T): T {
        const constructor = this.constructor as any;
        const next = new constructor(this.configuration);
        next.middleware = this.middleware.slice();
        return next;
    }
};

export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

export type FetchAPI = GlobalFetch['fetch'];

export interface ConfigurationParameters {
    basePath?: string; // override base path
    fetchApi?: FetchAPI; // override for fetch implementation
    middleware?: Middleware[]; // middleware to apply before/after fetch requests
    username?: string; // parameter for basic security
    password?: string; // parameter for basic security
    apiKey?: string | ((name: string) => string); // parameter for apiKey security
    accessToken?: string | ((name: string, scopes?: string[]) => string); // parameter for oauth2 security
}

export class Configuration {

    basePath: string;
    fetchApi: FetchAPI;
    middleware: Middleware[];
    username?: string;
    password?: string;
    apiKey?: (name: string) => string;
    accessToken?: (name: string, scopes?: string[]) => string;

    constructor(conf: ConfigurationParameters = {}) {
        this.basePath = conf.basePath !== undefined ? conf.basePath : BASE_PATH;
        this.fetchApi = conf.fetchApi || window.fetch.bind(window);
        this.middleware = conf.middleware || [];
        this.username = conf.username;
        this.password = conf.password;
        const { apiKey, accessToken } = conf;
        if (apiKey) {
            this.apiKey = typeof apiKey === 'function' ? apiKey : () => apiKey;
        }
        if (accessToken) {
            this.accessToken = typeof accessToken === 'function' ? accessToken : () => accessToken;
        }
    }
}

export type Json = any;
export type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';
export type HTTPHeaders = { [key: string]: string };
export type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> };
export type HTTPBody = Json | FormData;
export type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';

export interface FetchParams {
    url: string;
    init: RequestInit;
}

export enum ResponseType {
    file = 'file',
    text = 'text',
    blob = 'blob',
    json = 'json',
    response = 'response',
}

export interface RequestOpts {
    path: string;
    method: HTTPMethod;
    headers: HTTPHeaders;
    query?: HTTPQuery;
    body?: HTTPBody;
    responseType?: ResponseType;
    modelPropertyNaming: ModelPropertyNaming;
}

function querystring(params: HTTPQuery) {
    return Object.keys(params)
        .map((key) => {
            const value = params[key];
            if (value instanceof Array) {
                const multiValue = value.join(`&${encodeURIComponent(key)}=`);
                return `${encodeURIComponent(key)}=${multiValue}`;
            }
            return `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`
        })
        .join('&');
}

export interface Middleware {
    pre?(fetch: FetchAPI, url: string, init: RequestInit): Promise<FetchParams | undefined | void>;
    post?(fetch: FetchAPI, url: string, init: RequestInit, response: Response): Promise<Response | undefined | void>;
}

function capitalize(word: string) {
    return word.charAt(0).toUpperCase() + word.slice(1);
}

function toPascalCase(name: string) {
    return name
        .split('_')
        .map(capitalize)
        .join('');
}

function toCamelCase(name: string) {
    const pascalCase = toPascalCase(name);
    return pascalCase.charAt(0).toLowerCase() + pascalCase.slice(1);
}

function applyPropertyNameConverter(json: any, converter: (name: string) => string) {
    if (json instanceof Array) {
        json.forEach((value) => {
            if (typeof value === 'object') {
                return applyPropertyNameConverter(value, converter);
            }
        });
    } else {
        Object.keys(json).forEach((origKey) => {
            if (json.hasOwnProperty(origKey)) {
                let value = json[origKey];
                if (value instanceof Array || (value !== null && value.constructor === Object)) {
                    value = applyPropertyNameConverter(value, converter);
                }
                const newKey = converter(origKey);
                json[newKey] = json[origKey];
                delete json[origKey];
                json[newKey] = value;
            }
        });
    }
    return json;
}

function transformPropertyNames(json: any, modelPropertyNaming: ModelPropertyNaming) {
    switch (modelPropertyNaming) {
        case 'camelCase':
            return applyPropertyNameConverter(json, toCamelCase);

        case 'original':
        default:
            return json;
    }
}
