{{#hasImports}}
{{#oneOfArrays}}
import type { {{{.}}} } from './{{.}}{{importFileExtension}}';
import {
    instanceOf{{{.}}},
    {{{.}}}FromJSON,
    {{{.}}}FromJSONTyped,
    {{{.}}}ToJSON,
} from './{{.}}{{importFileExtension}}';
{{/oneOfArrays}}
{{#oneOfModels}}
import type { {{{.}}} } from './{{.}}{{importFileExtension}}';
import {
    instanceOf{{{.}}},
    {{{.}}}FromJSON,
    {{{.}}}FromJSONTyped,
    {{{.}}}ToJSON,
} from './{{.}}{{importFileExtension}}';
{{/oneOfModels}}

{{/hasImports}}
{{>modelOneOfInterfaces}}


export function {{classname}}FromJSON(json: any): {{classname}} {
    return {{classname}}FromJSONTyped(json, false);
}

export function {{classname}}FromJSONTyped(json: any, ignoreDiscriminator: boolean): {{classname}} {
    if (json == null) {
        return json;
    }
{{#discriminator}}
    switch (json['{{discriminator.propertyBaseName}}']) {
{{#discriminator.mappedModels}}
        case '{{mappingName}}':
            return Object.assign({}, {{modelName}}FromJSONTyped(json, true), { {{discriminator.propertyName}}: '{{mappingName}}' } as const);
{{/discriminator.mappedModels}}
        default:
            return json;
    }
{{/discriminator}}
{{^discriminator}}
    {{#oneOfModels}}
    if (typeof json === 'object' && instanceOf{{{.}}}(json)) {
        return {{{.}}}FromJSONTyped(json, true);
    }
    {{/oneOfModels}}
    {{#oneOfArrays}}
    {{#-first}}
    if (Array.isArray(json)) {
        if (json.every(item => typeof item === 'object')) {
    {{/-first}}
            if (json.every(item => instanceOf{{{.}}}(item))) {
                return json.map(value => {{{.}}}FromJSONTyped(value, true));
            }
    {{#-last}}
        }
    }
    {{/-last}}
    {{/oneOfArrays}}
    {{#oneOfPrimitives}}
    {{#isArray}}
    {{#items}}
    {{#isDateType}}
    if (Array.isArray(json)) {
        if (json.every(item => !(isNaN(new Date(item).getTime())))) {
            return json.map(item => new Date(item));
        }
    }
    {{/isDateType}}
    {{#isDateTimeType}}
    if (Array.isArray(json)) {
        if (json.every(item => !(isNaN(new Date(item).getTime())))) {
            return json.map(item => new Date(item));
        }
    }
    {{/isDateTimeType}}
    {{/items}}
    {{/isArray}}
    {{^isArray}}
    {{#isDateType}}
    if (!(isNaN(new Date(json).getTime()))) {
        return new Date(json);
    }
    {{/isDateType}}
    {{^isDateType}}
    {{#isDateTimeType}}
    if (!(isNaN(new Date(json).getTime()))) {
        return new Date(json);
    }
    {{/isDateTimeType}}
    {{/isDateType}}
    {{/isArray}}
    {{/oneOfPrimitives}}
    return json;
{{/discriminator}}
}

export function {{classname}}ToJSON(json: any): any {
    return {{classname}}ToJSONTyped(json, false);
}

export function {{classname}}ToJSONTyped(value?: {{classname}} | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
{{#discriminator}}
    switch (value['{{discriminator.propertyName}}']) {
{{#discriminator.mappedModels}}
        case '{{mappingName}}':
            return Object.assign({}, {{modelName}}ToJSON(value), { {{discriminator.propertyName}}: '{{mappingName}}' } as const);
{{/discriminator.mappedModels}}
        default:
            return value;
    }
{{/discriminator}}
{{^discriminator}}
    {{#oneOfModels}}
    if (typeof value === 'object' && instanceOf{{{.}}}(value)) {
        return {{{.}}}ToJSON(value as {{{.}}});
    }
    {{/oneOfModels}}
    {{#oneOfArrays}}
    {{#-first}}
    if (Array.isArray(value)) {
        if (value.every(item => typeof item === 'object')) {
    {{/-first}}
            if (value.every(item => instanceOf{{{.}}}(item))) {
                return value.map(value => {{{.}}}ToJSON(value as {{{.}}}));
            }
    {{#-last}}
        }
    }
    {{/-last}}
    {{/oneOfArrays}}
    {{#oneOfPrimitives}}
    {{#isArray}}
    {{#items}}
    {{#isDateType}}
    if (Array.isArray(value)) {
        if (value.every(item => item instanceof Date)) {
            return value.map(value => value.toISOString().substring(0,10));
        }
    }
    {{/isDateType}}
    {{#isDateTimeType}}
    if (Array.isArray(value)) {
        if (value.every(item => item instanceof Date)) {
            return value.map(value => value.toISOString());
        }
    }
    {{/isDateTimeType}}
    {{/items}}
    {{/isArray}}
    {{^isArray}}
    {{#isDateType}}
    if (value instanceof Date) {
        return value.toISOString().substring(0,10);
    }
    {{/isDateType}}
    {{#isDateTimeType}}
    if (value instanceof Date) {
        return value.toISOString();
    }
    {{/isDateTimeType}}
    {{/isArray}}
    {{/oneOfPrimitives}}
    return value;
{{/discriminator}}
}
