{{#hasImports}}
{{#oneOf}}
{{#skipPrimitiveImports}}
import type { {{{.}}} } from './{{.}}{{importFileExtension}}';
import {
    instanceOf{{{.}}},
    {{{.}}}FromJSON,
    {{{.}}}FromJSONTyped,
    {{{.}}}ToJSON,
} from './{{.}}{{importFileExtension}}';
{{/skipPrimitiveImports}}
{{/oneOf}}
{{/hasImports}}
{{#oneOf}}
{{#importNonPrimitiveArrays}}
import type { {{{.}}} } from './{{{.}}}{{importFileExtension}}';
import {
    instanceOf{{{.}}},
    {{{.}}}FromJSON,
    {{{.}}}FromJSONTyped,
    {{{.}}}ToJSON,
} from './{{{.}}}{{importFileExtension}}';
{{/importNonPrimitiveArrays}}
{{/oneOf}}

{{>modelOneOfInterfaces}}

export function {{classname}}FromJSON(json: any): {{classname}} {
    return {{classname}}FromJSONTyped(json, false);
}

export function {{classname}}FromJSONTyped(json: any, ignoreDiscriminator: boolean): {{classname}} {
    if (json == null) {
        return json;
    }
{{#discriminator}}
    switch (json['{{discriminator.propertyBaseName}}']) {
{{#discriminator.mappedModels}}
        case '{{mappingName}}':
            return Object.assign({}, {{modelName}}FromJSONTyped(json, true), { {{discriminator.propertyName}}: '{{mappingName}}' });
{{/discriminator.mappedModels}}
        default:
            throw new Error(`No variant of {{classname}} exists with '{{discriminator.propertyName}}=${json['{{discriminator.propertyName}}']}'`);
    }
{{/discriminator}}
{{^discriminator}}
    return {{#oneOf}}{{#transformArrayTypeName}}{{{.}}}{{/transformArrayTypeName}}FromJSONTyped(json, true){{^-last}} || {{/-last}}{{/oneOf}};
{{/discriminator}}
}

export function {{classname}}ToJSON(value?: {{classname}} | null): any {
    if (value == null) {
        return value;
    }
{{#discriminator}}
    switch (value['{{discriminator.propertyName}}']) {
{{#discriminator.mappedModels}}
        case '{{mappingName}}':
            return {{modelName}}ToJSON(value);
{{/discriminator.mappedModels}}
        default:
            throw new Error(`No variant of {{classname}} exists with '{{discriminator.propertyName}}=${value['{{discriminator.propertyName}}']}'`);
    }
{{/discriminator}}

{{^discriminator}}
    {{#oneOf}}
    if ({{#addTypeGuardsForPrimitives}}instanceOf{{#transformArrayTypeName}}{{{.}}}{{/transformArrayTypeName}}{{/addTypeGuardsForPrimitives}}(value)) {
        return {{#transformArrayTypeName}}{{{.}}}{{/transformArrayTypeName}}ToJSON(value as {{{.}}});
    }
    {{/oneOf}}

    return {};
{{/discriminator}}
}

{{#oneOf}}
{{#generatePrimitiveFunctions}}
function {{{.}}}FromJSONTyped(json: any, ignoreDiscriminator: boolean): {{{.}}} | null {
    return typeof json === '{{{.}}}' ? json : null;
}

function instanceOf{{{.}}}(value: any): boolean {
    return typeof value === '{{{.}}}';
}

function {{{.}}}ToJSON(value: {{{.}}}): any {
    return value;
}

{{#-last}}
export function instanceOf{{classname}}(value: any): boolean {
    return {{#oneOf}}instanceOf{{#transformArrayTypeName}}{{{.}}}{{/transformArrayTypeName}}(value){{^-last}} || {{/-last}}{{#-last}};{{/-last}}{{/oneOf}}
}
{{/-last}}
{{/generatePrimitiveFunctions}}
{{/oneOf}}

{{#oneOf}}
{{#generateArrayFunctions}}
function instanceOf{{#extractArrayInnerType}}{{{.}}}{{/extractArrayInnerType}}Array(value: any): boolean {
    return Array.isArray(value) && value.every(element => {{#checkArrayInnerType}}{{{.}}}{{/checkArrayInnerType}});
}

function {{#extractArrayInnerType}}{{{.}}}{{/extractArrayInnerType}}ArrayFromJSONTyped(json: any, ignoreDiscriminator: boolean): {{{.}}} | null {
    if (!instanceOf{{#extractArrayInnerType}}{{{.}}}{{/extractArrayInnerType}}Array(json)) {
        return null;
    }
    return json;
}

function {{#extractArrayInnerType}}{{{.}}}{{/extractArrayInnerType}}ArrayToJSON(value: {{{.}}}): any {
    return value;
}

{{/generateArrayFunctions}}
{{/oneOf}}
