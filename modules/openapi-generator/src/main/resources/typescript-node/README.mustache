# Typescript API client  {{#packageName}}{{.}}{{/packageName}}

{{#appDescriptionWithNewLines}}
    {{{.}}}
{{/appDescriptionWithNewLines}}

## Overview
This API client was generated by the [OpenAPI Generator](https://openapi-generator.tech) project.  By using the [OpenAPI-spec](https://www.openapis.org/) from a remote server, you can easily generate an API client.

- API version: {{appVersion}}
{{#packageVersion}}- Package version: {{.}}{{/packageVersion}}
{{^hideGenerationTimestamp}}
    - Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
    For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

#### Building ####

To build and compile the typescript sources to javascript use:
```
npm install
npm run build
```

#### NPM ####
You may publish the module to NPM. In this case, you would be able to install the module as any other NPM module. It maybe useful to use [scoped packages](https://docs.npmjs.com/misc/scope).

You can also use `npm link` to link the module. However, this would not modify `package.json` of the installing project, as such you would need to relink every time you deploy that project.

You can also directly install the module using `npm install file_path`. If you do `npm install file_path --save`, NPM will save relative path to `package.json`. In this case, `npm install` and `npm shrinkwrap` may misbehave. You would need to manually edit `package.json` and replace it with absolute path.

Regardless of which method you deployed your NPM module, the ES6 module syntaxes are as follows:
```
import * as localName from 'npmName';
import {operationId} from 'npmName';
```
The CommonJS syntax is as follows:
```
import localName = require('npmName');
```

#### Direct copy/symlink ####
You may also simply copy or symlink the generated module into a directory under your project. The syntax of this is as follows:

With ES6 module syntax, the following syntaxes are supported:
```
import * as localName from './symlinkDir';
import {operationId} from './symlinkDir';
```
The CommonJS syntax is as follows:
```
import localName = require('./symlinkDir')';
```

## Code Example

The default url is our production url, you can change it to staging url via
``` typescript
const apisInSameTags = new apis.apisInSameTags(STAGING_URL)
```


``` typescript
import * as models from './model/models'
import * as apis from './api/apis';

const YOUR_TOKEN = "YOUR_TOKEN"
const STAGING_URL = "https://api.segmentapis.build"

const getWorkspace =  async()=>{
const workspace = new apis.WorkspacesApi(STAGING_URL)
workspace.accessToken = YOUR_TOKEN;
const result = await workspace.getWorkspaceV1({})
console.log(result.body)
}

const testEcho =  async()=>{
const echoApi = new apis.TestingApi()
echoApi.accessToken = YOUR_TOKEN;
const echoAlphaInput: EchoAlphaInput = { message: 'Hello, World!' }
const result = await echoApi.echoV1(echoAlphaInput)
console.log(result.body)
}

```

## Documentation For Authorization

{{^authMethods}} Endpoints do not require authorization.
{{/authMethods}}{{#authMethods}}{{#last}} Authentication schemes defined for the API:{{/last}}{{/authMethods}}
{{#authMethods}}

    ### {{{name}}}

    {{#isApiKey}}
        - **Type**: API key
        - **API key parameter name**: {{{keyParamName}}}
        - **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}

        Note, each API key must be added to a map of `map[string]APIKey` where the key is: {{keyParamName}} and passed in as the auth context for each request.

    {{/isApiKey}}
    {{#isBasic}}
        {{#isBasicBearer}}
            - **Type**: HTTP Bearer token authentication

            Example

            ```typescript

            const getWorkspace =  async()=>{
            const workspaceAPIs = new api.WorkspacesAPIs()
            workspace.accessToken = 'YOUR_TOKEN';
            const result = await workspaceAPIs.getWorkspace()
            console.log(result.body)
            }
            ```

        {{/isBasicBearer}}
        {{#isBasicBasic}}
            - **Type**: HTTP basic authentication

            Example

            ```typescript
            const getWorkspace =  async()=>{
            const workspaceAPIs = new api.WorkspacesAPIs('YOUR_USERNAME','YOUR_PASSWORD')
            const result = await workspaceAPIs.getWorkspace()
            console.log(result.body)
            }
            ```

        {{/isBasicBasic}}
    {{/isBasic}}

{{/authMethods}}


## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}





