package {{apiPackage}}

import com.fasterxml.jackson.databind.ObjectMapper
import com.github.tomakehurst.wiremock.client.MappingBuilder
import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder
import com.github.tomakehurst.wiremock.client.WireMock.*
import com.github.tomakehurst.wiremock.matching.StringValuePattern
import {{modelPackage}}.*

{{#operations}}
open class {{classname}}Stubs(protected val objectMapper: ObjectMapper) {
{{#operation}}

    fun {{operationId}}({{#pathParams}}{{paramName}}: StringValuePattern, {{/pathParams}}{{#queryParams}}{{paramName}}: StringValuePattern? = null, {{/queryParams}}configurer: MappingBuilder.() -> MappingBuilder = { this }): {{operationIdCamelCase}}StubBuilder =
        {{operationIdCamelCase}}StubBuilder({{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}")
            .configurer()
            {{#pathParams}}
            .withPathParam("{{paramName}}", {{paramName}})
            {{/pathParams}}
            {{#queryParams}}
            .apply {
                {{paramName}}?.let { withQueryParam("{{paramName}}", it) }
            }
            {{/queryParams}}
        )

    inner class {{operationIdCamelCase}}StubBuilder(private val stub: MappingBuilder) {
        {{#responses}}
        {{^wildcard}}

        fun respondWith{{code}}(
            {{#returnType}}
            body: {{{.}}},
            {{/returnType}}
            configurer: ResponseDefinitionBuilder.() -> ResponseDefinitionBuilder = { this },
        ): MappingBuilder =
            stub.willReturn(aResponse()
                .configurer()
                .withStatus({{code}})
                {{#returnType}}
                .withHeader("Content-Type", "application/json")
                .withBody(objectMapper.writeValueAsString(body))
                {{/returnType}}
            )
        {{/wildcard}}
        {{/responses}}

        fun respondWith(
            code: Int,
            body: Any? = null,
            configurer: ResponseDefinitionBuilder.() -> ResponseDefinitionBuilder = { this }
        ): MappingBuilder =
            stub.willReturn(aResponse()
                .configurer()
                .withStatus(code)
                .apply {
                    body?.let { withBody(objectMapper.writeValueAsString(it)) }
                }
        )
    }
{{/operation}}
}
{{/operations}}