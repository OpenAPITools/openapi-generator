class {{{classname}}} {
{{>dart_constructor}}
{{#each vars}}
  {{#with description}}
  /// {{{.}}}
  {{/with}}
  {{#unless isEnum}}
    {{#with minimum}}
      {{#with description}}
  ///
      {{/with}}
  /// Minimum value: {{{.}}}
    {{/with}}
    {{#with maximum}}
      {{#with description}}
        {{#unless minimum}}
  ///
        {{/unless}}
      {{/with}}
  /// Maximum value: {{{.}}}
    {{/with}}
    {{#unless isNullable}}
      {{#unless required}}
        {{#unless defaultValue}}
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
        {{/unless}}
      {{/unless}}
    {{/unless}}
  {{/unless}}
  {{{datatypeWithEnum}}}{{#if isNullable}}?{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}?{{/unless}}{{/unless}}{{/unless}} {{{name}}};

{{/each}}
  @override
  bool operator ==(Object other) => identical(this, other) || other is {{{classname}}} &&
  {{#each vars}}
     other.{{{name}}} == {{{name}}}{{#unless @last}} &&{{/unless}}{{#if @last}};{{/if}}
  {{/each}}

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
  {{#each vars}}
    ({{#if isNullable}}{{{name}}} == null ? 0 : {{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}{{{name}}} == null ? 0 : {{/unless}}{{/unless}}{{/unless}}{{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.hashCode){{#unless @last}} +{{/unless}}{{#if @last}};{{/if}}
  {{/each}}

  @override
  String toString() => '{{{classname}}}[{{#each vars}}{{{name}}}=${{{name}}}{{#unless @last}}, {{/unless}}{{/each}}]';

  Map<String, dynamic> toJson() {
    final _json = <String, dynamic>{};
  {{#each vars}}
    {{#if isNullable}}
    if ({{{name}}} != null) {
    {{/if}}
    {{#unless isNullable}}
      {{#unless required}}
        {{#unless defaultValue}}
    if ({{{name}}} != null) {
        {{/unless}}
      {{/unless}}
    {{/unless}}
    {{#if isDateTime}}
      {{#with pattern}}
      _json[r'{{{baseName}}}'] = _dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.millisecondsSinceEpoch
        : {{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.toUtc().toIso8601String();
      {{/with}}
      {{#unless pattern}}
      _json[r'{{{baseName}}}'] = {{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.toUtc().toIso8601String();
      {{/unless}}
    {{/if}}
    {{#if isDate}}
      {{#with pattern}}
      _json[r'{{{baseName}}}'] = _dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.millisecondsSinceEpoch
        : _dateFormatter.format({{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.toUtc());
      {{/with}}
      {{#unless pattern}}
      _json[r'{{{baseName}}}'] = _dateFormatter.format({{{name}}}{{#if isNullable}}!{{/if}}{{#unless isNullable}}{{#unless required}}{{#unless defaultValue}}!{{/unless}}{{/unless}}{{/unless}}.toUtc());
      {{/unless}}
    {{/if}}
    {{#unless isDateTime}}
      {{#unless isDate}}
      _json[r'{{{baseName}}}'] = {{{name}}};
      {{/unless}}
    {{/unless}}
    {{#if isNullable}}
    }
    {{/if}}
    {{#unless isNullable}}
      {{#unless required}}
        {{#unless defaultValue}}
    }
        {{/unless}}
      {{/unless}}
    {{/unless}}
  {{/each}}
    return _json;
  }

  /// Returns a new [{{{classname}}}] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static {{{classname}}}? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "{{{classname}}}[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "{{{classname}}}[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return {{{classname}}}(
  {{#each vars}}
    {{#if isDateTime}}
        {{{name}}}: mapDateTime(json, r'{{{baseName}}}', '{{{pattern}}}'){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
    {{/if}}
    {{#if isDate}}
        {{{name}}}: mapDateTime(json, r'{{{baseName}}}', '{{{pattern}}}'){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
    {{/if}}
    {{#unless isDateTime}}
      {{#unless isDate}}
        {{#with complexType}}
          {{#if isArray}}
            {{#with items.isArray}}
        {{{name}}}: json[r'{{{baseName}}}'] is List
          ? (json[r'{{{baseName}}}'] as List).map(
              {{#with items.complexType}}
              {{items.complexType}}.listFromJson(json[r'{{{baseName}}}'])
              {{/with}}
              {{#unless items.complexType}}
              (e) => e == null ? null : (e as List).cast<{{items.items.dataType}}>()
              {{/unless}}
            ).toList()
          : null,
            {{/with}}
            {{#unless items.isArray}}
        {{{name}}}: {{{complexType}}}.listFromJson(json[r'{{{baseName}}}']){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
            {{/unless}}
          {{/if}}
          {{#unless isArray}}
            {{#if isMap}}
              {{#with items.isArray}}
        {{{name}}}: json[r'{{{baseName}}}'] == null
          ? {{#with defaultValue}}{{{.}}}{{/with}}{{#unless defaultValue}}null{{/unless}}
                {{#with items.complexType}}
            : {{items.complexType}}.mapListFromJson(json[r'{{{baseName}}}']),
                {{/with}}
                {{#unless items.complexType}}
            : mapCastOfType<String, List>(json, r'{{{baseName}}}'),
                {{/unless}}
              {{/with}}
              {{#unless items.isArray}}
                {{#with items.isMap}}
                  {{#with items.complexType}}
        {{{name}}}: {{items.complexType}}.mapFromJson(json[r'{{{baseName}}}']{{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}}),
                  {{/with}}
                  {{#unless items.complexType}}
        {{{name}}}: mapCastOfType<String, dynamic>(json, r'{{{baseName}}}'){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
                  {{/unless}}
                {{/with}}
                {{#unless items.isMap}}
                  {{#with items.complexType}}
        {{{name}}}: {{{items.complexType}}}.mapFromJson(json[r'{{{baseName}}}']{{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}}),
                  {{/with}}
                  {{#unless items.complexType}}
        {{{name}}}: mapCastOfType<String, {{items.dataType}}>(json, r'{{{baseName}}}'){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
                  {{/unless}}
                {{/unless}}
              {{/unless}}
            {{/if}}
            {{#unless isMap}}
              {{#if isBinary}}
        {{{name}}}: null, // No support for decoding binary content from JSON
              {{/if}}
              {{#unless isBinary}}
        {{{name}}}: {{{complexType}}}.fromJson(json[r'{{{baseName}}}']){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
              {{/unless}}
            {{/unless}}
          {{/unless}}
        {{/with}}
        {{#unless complexType}}
          {{#if isArray}}
            {{#if isEnum}}
        {{{name}}}: {{{items.datatypeWithEnum}}}.listFromJson(json[r'{{{baseName}}}']){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
            {{/if}}
            {{#unless isEnum}}
        {{{name}}}: json[r'{{{baseName}}}'] is {{#each uniqueItems}}Set{{/each}}{{#unless uniqueItems}}List{{/unless}}
            ? (json[r'{{{baseName}}}'] as {{#each uniqueItems}}Set{{/each}}{{#unless uniqueItems}}List{{/unless}}).cast<{{{items.datatype}}}>()
            : {{#with defaultValue}}{{{.}}}{{/with}}{{#unless defaultValue}}null{{/unless}},
            {{/unless}}
          {{/if}}
          {{#unless isArray}}
            {{#if isMap}}
        {{{name}}}: mapCastOfType<String, {{{items.datatype}}}>(json, r'{{{baseName}}}'){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
            {{/if}}
            {{#unless isMap}}
              {{#if isNumber}}
        {{{name}}}: json[r'{{{baseName}}}'] == null
            ? {{#with defaultValue}}{{{.}}}{{/with}}{{#unless defaultValue}}null{{/unless}}
            : {{{datatypeWithEnum}}}.parse(json[r'{{{baseName}}}'].toString()),
              {{/if}}
              {{#unless isNumber}}
                {{#unless isEnum}}
        {{{name}}}: mapValueOfType<{{{datatypeWithEnum}}}>(json, r'{{{baseName}}}'){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
                {{/unless}}
                {{#if isEnum}}
        {{{name}}}: {{{enumName}}}.fromJson(json[r'{{{baseName}}}']){{#with required}}{{#unless isNullable}}!{{/unless}}{{/with}}{{#unless required}}{{#with defaultValue}} ?? {{{.}}}{{/with}}{{/unless}},
                {{/if}}
              {{/unless}}
            {{/unless}}
          {{/unless}}
        {{/unless}}
      {{/unless}}
    {{/unless}}
  {{/each}}
      );
    }
    return null;
  }

  static List<{{{classname}}}>? listFromJson(dynamic json, {bool growable = false,}) {
    final result = <{{{classname}}}>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = {{{classname}}}.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, {{{classname}}}> mapFromJson(dynamic json) {
    final map = <String, {{{classname}}}>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = {{{classname}}}.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of {{{classname}}}-objects as value to a dart map
  static Map<String, List<{{{classname}}}>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<{{{classname}}}>>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = {{{classname}}}.listFromJson(entry.value, growable: growable,);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
{{#each vars}}
  {{#with required}}
    '{{{baseName}}}',
  {{/with}}
{{/each}}
  };
}
{{#each vars}}
    {{#unless isModel}}
    {{#if isEnum}}
        {{#unless isContainer}}

{{>serialization/native/native_enum_inline}}
        {{/unless}}
        {{#if isContainer}}
            {{#each mostInnerItems}}

{{>serialization/native/native_enum_inline}}
            {{/each}}
        {{/if}}
    {{/if}}
    {{/unless}}
{{/each}}
