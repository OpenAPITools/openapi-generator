{{>licenseInfo}}

{{=< >=}}

const ApiClient = require("../ApiClient");
<#imports>const <&import> = require('../<#modelPackage><&modelPackage>/</modelPackage><import>');
</imports>

<#emitJSDoc>/**
* <baseName> service.
* @module <#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><classname>
* @version <&projectVersion>
*/</emitJSDoc>
class <&classname> extends ApiClient {

<#operations><#operation><#emitJSDoc>
    /**<#summary>
     * <&summary></summary><#notes>
     * <&notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <&paramName> <&description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<&paramName> <&description><#defaultValue> (default to <&.>)</defaultValue></required></allParams></hasOptionalParams>
     * @param {RequestInit} fetchOptions Options passed to fetch()
     <=| |=>* @return {Promise|#returnType|<|&vendorExtensions.x-jsdoc-type|>|/returnType|}|=< >=|
     */
</emitJSDoc>    async <operationId>(<vendorExtensions.x-codegen-arg-list>) {
      <#vendorExtensions.x-codegen-has-optional-params>
      opts = opts || {};
      </vendorExtensions.x-codegen-has-optional-params>
      let postBody = <#bodyParam><#required><paramName></required><^required>opts['<paramName>']</required></bodyParam><^bodyParam>null</bodyParam>;
<#allParams>
<#required>
      // verify the required parameter '<paramName>' is set
      if (<paramName> === undefined || <paramName> === null) {
        throw new Error("Missing the required parameter '<paramName>' when calling <operationId>");
      }
</required>
</allParams>

      let pathParams = {<#pathParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></pathParams>
      };
      let queryParams = this.compactObject({<#queryParams>
        '<baseName>': <#collectionFormat>this.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></queryParams>
      });
      let headerParams = {<#headerParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></headerParams>
      };
      <#hasFormParams><^multipartFormData>headerParams['Content-Type'] = 'application/x-www-form-urlencoded';</multipartFormData><#multipartFormData>headerParams['Content-Type'] = 'multipart/form-data';</multipartFormData></hasFormParams><#bodyParam>
      <^consumes>headerParams['Content-Type'] = 'application/json';</consumes><#consumes.0>headerParams['Content-Type'] = '<mediaType>';</consumes.0></bodyParam>

      let formParams = this.compactObject({<#formParams>
        '<baseName>': <#collectionFormat>this.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></formParams>
      });

      let authNames = [<#authMethods>'<name>'<#hasMore>, </hasMore></authMethods>];
      let returnType = <#vendorExtensions.x-return-type><&vendorExtensions.x-return-type></vendorExtensions.x-return-type><^vendorExtensions.x-return-type>null</vendorExtensions.x-return-type>;
      <#servers.0>

      </servers.0>

      return this.callApi(
        '<&path>', '<httpMethod>',
        pathParams, queryParams, headerParams, formParams, postBody,
        fetchOptions, returnType
      );
    }
</operation></operations>

}

module.exports = <&classname>
<={{ }}=>
