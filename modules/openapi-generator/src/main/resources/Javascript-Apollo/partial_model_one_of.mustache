{{#oneOf}}const {{{.}}} = require('./{{{.}}}');
{{/oneOf}}

{{#models}}{{#model}}/**
 * This class represents an optional (one-of) type. We don't try to assume 
 * we know what type is coming back, but we store the raw data and let you
 * decide how to parse it.
 * 
 * @module {{#invokerPackage}}{{invokerPackage}}/{{/invokerPackage}}{{#modelPackage}}{{modelPackage}}/{{/modelPackage}}{{classname}}
 * @version {{projectVersion}}
 */
class {{classname}} {
    {{#emitJSDoc}}/**
     * Simply copies a plain JavaScript response object.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {{=< >=}}{module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><classname>}<={{ }}=> obj Optional instance to populate.
     * @return {{=< >=}}{module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><classname>}<={{ }}=> The populated <code>{{classname}}</code> instance.
     */{{/emitJSDoc}}
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new {{classname}}();{{#parent}}{{^parentModel}}

            ApiClient.constructFromObject(data, obj, '{{vendorExtensions.x-item-type}}');
            {{/parentModel}}{{/parent}}{{#useInheritance}}{{#parentModel}}
            {{classname}}.constructFromObject(data, obj);{{/parentModel}}{{#interfaces}}
            {{.}}.constructFromObject(data, obj);{{/interfaces}}{{/useInheritance}}

            obj = Object.assign(obj, data)
        }
        return obj;
    }

    {{#oneOf}}
    {{#emitJSDoc}}/**
     * Converts this optional type into a {{{.}}}.
     * It's completely up to you to determine what the actual type of the data this object contains and call the
     * appropriate conversion method.
     * @return {{=< >=}}{<.>}<={{ }}=> The populated <code>{{{.}}}</code> instance.
     */{{/emitJSDoc}}
    to{{{.}}}() {
        const obj = {{{.}}}.constructFromObject(this);
        return obj;
    }
    {{/oneOf}}
}

module.exports = {{classname}}{{/model}}{{/models}}