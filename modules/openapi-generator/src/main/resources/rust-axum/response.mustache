{{#vendorExtensions}}{{#x-has-event-stream-content}}
// Manual Debug implementation needed due to Stream not implementing Debug
impl std::fmt::Debug for {{{operationId}}}Response {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
{{#responses}}
  {{#vendorExtensions}}
      {{#x-response-content-types}}
            {{{operationId}}}Response::{{{x-variant-name}}}{{^dataType}}{{#hasHeaders}} { .. }{{/hasHeaders}}{{/dataType}}{{#dataType}}{{^headers}}(..){{/headers}}{{#headers}} { body: _, .. }{{/headers}}{{/dataType}} => write!(f, "{{{x-variant-name}}}{{^dataType}}{{#hasHeaders}} {{ .. }} {{/hasHeaders}}{{/dataType}}{{#dataType}}{{^headers}}(..){{/headers}}{{#headers}} {{ body: _, .. }} {{/headers}}{{/dataType}}"),
        {{^-last}}
        {{/-last}}
        {{/x-response-content-types}}
  {{/vendorExtensions}}
{{/responses}}
        }
    }
}
{{/x-has-event-stream-content}}{{/vendorExtensions}}
{{#vendorExtensions}}{{^x-has-event-stream-content}}
#[derive(Debug)]
{{/x-has-event-stream-content}}{{/vendorExtensions}}
#[must_use]
#[allow(clippy::large_enum_variant)]
pub enum {{{operationId}}}Response {
{{#responses}}
  {{#vendorExtensions}}
      {{#x-response-content-types}}
  {{#message}}
    /// {{{.}}} ({{{mediaType}}})
  {{/message}}
    {{{x-variant-name}}}
    {{^dataType}}
      {{#hasHeaders}}
    {
      {{/hasHeaders}}
    {{/dataType}}
    {{#dataType}}
      {{^hasHeaders}}
    ({{{x-body-type}}})
      {{/hasHeaders}}
      {{#hasHeaders}}
    {
        body: {{{x-body-type}}},
      {{/hasHeaders}}
    {{/dataType}}
    {{#headers}}
        {{{name}}}:
      {{^required}}
        Option<
      {{/required}}
        {{{dataType}}}
      {{^required}}
        >
      {{/required}}
        {{^-last}}
        ,
        {{/-last}}
      {{#-last}}
    }
      {{/-last}}
    {{/headers}}
        {{^-last}}
    ,
        {{/-last}}
      {{/x-response-content-types}}
  {{/vendorExtensions}}
    {{^-last}}
    ,
    {{/-last}}
{{/responses}}
}
