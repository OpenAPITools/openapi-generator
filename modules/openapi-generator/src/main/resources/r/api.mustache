{{>partial_header}}
{{#operations}}
#' @docType class
#' @title {{baseName}} operations
#' @description {{importPath}}
#' @format An \code{R6Class} generator object
#' @field api_client Handles the client-server communication.
#'
#' @section Methods:
{{! Adding the below changes for generating documentation for the api methods. }}
#' \describe{
{{#operation}}
#' \strong{ {{operationId}} } \emph{ {{summary}} }
#' {{notes}}
#'
#' \itemize{
{{#allParams}}
{{#isEnum}}
#' \item \emph{ @param } {{paramName}} Enum < {{#allowableValues}}{{values}}{{/allowableValues}} >
{{/isEnum}}
{{^isEnum}}
{{#isContainer}}
{{#isArray}}
{{#items}}
{{#isPrimitiveType}}
#' \item \emph{ @param } {{paramName}} list( {{dataType}} )
{{/isPrimitiveType}}
{{^isPrimitiveType}}
#' \item \emph{ @param } {{paramName}} list( \link{{=<% %>=}}{<%dataType%>}<%={{ }}=%> )
{{/isPrimitiveType}}
{{/items}}
{{/isArray}}
{{#isMap}}
{{#isPrimitiveType}}
#' \item \emph{ @param } {{paramName}} named list( {{dataType}} )
{{/isPrimitiveType}}
{{^isPrimitiveType}}
#' \item \emph{ @param } {{paramName}} named list( \link{{=<% %>=}}{<%dataType%>}<%={{ }}=%> )
{{/isPrimitiveType}}
{{/isMap}}
{{/isContainer}}
{{^isContainer}}
{{#isPrimitiveType}}
#' \item \emph{ @param } {{paramName}} {{dataType}}
{{/isPrimitiveType}}
{{^isPrimitiveType}}
#' \item \emph{ @param } {{paramName}} \link{{=<% %>=}}{<%dataType%>}<%={{ }}=%>
{{/isPrimitiveType}}
{{/isContainer}}
{{/isEnum}}
{{/allParams}}
{{#returnType}}
{{^returnTypeIsPrimitive}}
#' \item \emph{ @returnType } {{#returnContainer}}{{#isArray}}list( {{/isArray}}{{#isMap}}named list( {{/isMap}}{{/returnContainer}}\link{{=<% %>=}}{<%#returnContainer%><%={{ }}=%>{{returnBaseType}}{{/returnContainer}}{{^returnContainer}}{{returnType}}{{=<% %>=}}<%/returnContainer%>}<%={{ }}=%>{{#returnContainer}}{{#isArray}} ){{/isArray}}{{#isMap}} ){{/isMap}}{{/returnContainer}} \cr
{{/returnTypeIsPrimitive}}
{{/returnType}}
#'
{{#useRlangExceptionHandling}}
#' \item On encountering errors, an error of subclass ApiException will be thrown.
{{/useRlangExceptionHandling}}
#'
{{#responses}}
#' \item status code : {{code}} | {{message}}
#'
#'{{#dataType}} \item return type : {{.}} {{/dataType}}
#' \item response headers :
#'
#' \tabular{ll}{
{{#headers}}
#' {{name}} \tab {{description}} \cr
{{/headers}}
#' }
{{/responses}}
#' }
#'
{{/operation}}
#' }
#'
#'
#' @examples
#' \dontrun{
{{#operation}}
#' ####################  {{operationId}}  ####################
#'
#' library({{{packageName}}})
{{#allParams}}
#' var.{{{paramName}}} <- {{{example}}} # {{{dataType}}} | {{{description}}}
{{/allParams}}
#'
{{#summary}}
#' #{{{.}}}
{{/summary}}
#' api.instance <- {{{classname}}}$new()
{{#hasAuthMethods}}
{{#authMethods}}
#'
{{#isBasic}}
#' #Configure HTTP basic authorization: {{{name}}}
#' # provide your username in the user-serial format
#' api.instance$api_client$username <- '<user-serial>';
#' # provide your api key generated using the developer portal
#' api.instance$api_client$password <- '<api_key>';
{{/isBasic}}
{{#isApiKey}}
#' #Configure API key authorization: {{{name}}}
#' api.instance$api_client$api_keys['{{{keyParamName}}}'] <- 'TODO_YOUR_API_KEY';
{{/isApiKey}}
{{#isOAuth}}
#' # Configure OAuth2 access token for authorization: {{{name}}}
#' api.instance$api_client$access_token <- 'TODO_YOUR_ACCESS_TOKEN';
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}
#'
{{#returnExceptionOnFailure}}
{{#useRlangExceptionHandling}}
#'result <- tryCatch(
#'             api.instance${{{operationId}}}({{#requiredParams}}var.{{{paramName}}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#optionalParams}}{{#-first}}{{#requiredParams.0}}, {{/requiredParams.0}}{{/-first}}{{{paramName}}}=var.{{{paramName}}}{{^-last}}, {{/-last}}{{/optionalParams}}),
#'             ApiException = function(ex) ex
#'          )
#' # In case of error, print the error object
#' if(!is.null(result$ApiException)) {
#'   cat(result$ApiException$toString())
#' } else {
{{#returnType}}
#' # deserialized response object
#' response.object <- result$content
{{/returnType}}
#' # response headers
#' response.headers <- result$response$headers
#' # response status code
#' response.status.code <- result$response$status_code
#' }
{{/useRlangExceptionHandling}}
{{/returnExceptionOnFailure}}
{{^useRlangExceptionHandling}}
#' result <- api.instance${{{operationId}}}({{#requiredParams}}var.{{{paramName}}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#optionalParams}}{{#-first}}{{#requiredParams.0}}, {{/requiredParams.0}}{{/-first}}{{{paramName}}}=var.{{{paramName}}}{{^-last}}, {{/-last}}{{/optionalParams}})
{{/useRlangExceptionHandling}}
#'
#'
{{/operation}}
#' }
#' @importFrom R6 R6Class
#' @importFrom base64enc base64encode
{{#useRlangExceptionHandling}}
#' @importFrom rlang abort
{{/useRlangExceptionHandling}}
#' @export
{{classname}} <- R6::R6Class(
  "{{classname}}",
  public = list(
    api_client = NULL,
    #' Initialize a new {{{classname}}}.
    #'
    #' @description
    #' Initialize a new {{{classname}}}.
    #'
    #' @param api_client An instance of API client.
    #' @export
    initialize = function(api_client) {
      if (!missing(api_client)) {
        self$api_client <- api_client
      }
      else {
        self$api_client <- ApiClient$new()
      }
    },
    {{#operation}}
    #' {{{summary}}}
    #'
    #' @description
    #' {{{description}}}{{^description}}{{{summary}}}{{/description}}
    #'
    {{#requiredParams}}
    #' @param {{{paramName}}} {{{description}}}
    {{/requiredParams}}
    {{#optionalParams}}
    #' @param {{{paramName}}} (optional) {{{description}}}{{#defaultValue}} (default value: {{{.}}}){{/defaultValue}}
    {{/optionalParams}}
    {{#returnType}}
    #' @param data_file (optional) name of the data file to save the result
    {{/returnType}}
    #' @param ... Other optional arguments
    #' @return {{{returnType}}}{{^returnType}}void{{/returnType}}
    #' @export
    {{{operationId}}} = function({{#requiredParams}}{{paramName}}, {{/requiredParams}}{{#optionalParams}}{{paramName}}={{^defaultValue}}NULL{{/defaultValue}}{{{defaultValue}}}, {{/optionalParams}}{{#returnType}}data_file=NULL, {{/returnType}}...) {
      api_response <- self${{{operationId}}}WithHttpInfo({{#allParams}}{{paramName}}, {{/allParams}}{{#returnType}}data_file = data_file, {{/returnType}}...)
      resp <- api_response$response
      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        api_response$content
      } else if (httr::status_code(resp) >= 300 && httr::status_code(resp) <= 399) {
        api_response
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        api_response
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
        api_response
      }
    },
    #' {{{summary}}}
    #'
    #' @description
    #' {{{description}}}{{^description}}{{{summary}}}{{/description}}
    #'
    {{#requiredParams}}
    #' @param {{{paramName}}} {{{description}}}
    {{/requiredParams}}
    {{#optionalParams}}
    #' @param {{{paramName}}} (optional) {{{description}}}{{#defaultValue}} (default value: {{{.}}}){{/defaultValue}}
    {{/optionalParams}}
    {{#returnType}}
    #' @param data_file (optional) name of the data file to save the result
    {{/returnType}}
    #' @param ... Other optional arguments
    #' @return API response ({{{returnType}}}{{^returnType}}void{{/returnType}}) with additional information such as HTTP status code, headers
    #' @export
    {{{operationId}}}WithHttpInfo = function({{#requiredParams}}{{paramName}}, {{/requiredParams}}{{#optionalParams}}{{paramName}}={{^defaultValue}}NULL{{/defaultValue}}{{{defaultValue}}}, {{/optionalParams}}{{#returnType}}data_file = NULL, {{/returnType}}...) {
      args <- list(...)
      query_params <- list()
      header_params <- c()

      {{#requiredParams}}
      if (missing(`{{paramName}}`)) {
      {{#useDefaultExceptionHandling}}
        stop("Missing required parameter `{{{paramName}}}`.")
      {{/useDefaultExceptionHandling}}
      {{#useRlangExceptionHandling}}
        rlang::abort(message = "Missing required parameter `{{{paramName}}}`.", .subclass = "ApiException", ApiException = ApiException$new(status = 0, reason = "Missing required parameter `{{{paramName}}}`."))
      {{/useRlangExceptionHandling}}
      }

      {{/requiredParams}}
      {{#header_params}}
      header_params["{{baseName}}"] <- `{{paramName}}`

      {{/header_params}}
      {{#query_params}}
      query_params["{{baseName}}"] <- {{paramName}}

      {{/query_params}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
        {{^isFile}}
        "{{baseName}}" = {{paramName}}{{^-last}},{{/-last}}
        {{/isFile}}
        {{#isFile}}
        "{{baseName}}" = httr::upload_file({{paramName}}){{^-last}},{{/-last}}
        {{/isFile}}
        {{/formParams}}
      )

      {{/hasFormParams}}
      {{#hasBodyParam}}
      {{#bodyParams}}
      if (!missing(`{{paramName}}`)) {
        {{#isArray}}
        body.items = paste(unlist(lapply({{paramName}}, function(param) {param$toJSONString()})), collapse = ",")
        body <- paste0("[", body.items, "]")
        {{/isArray}}
        {{^isArray}}
        body <- `{{paramName}}`$toJSONString()
        {{/isArray}}
      } else {
        body <- NULL
      }

      {{/bodyParams}}
      {{/hasBodyParam}}
      {{^hasBodyParam}}
      {{^hasFormParams}}
      body <- NULL
      {{/hasFormParams}}
      {{/hasBodyParam}}
      url_path <- "{{path}}"
      {{#hasPathParams}}
      {{#pathParams}}
      if (!missing(`{{paramName}}`)) {
        url_path <- gsub(paste0("\\{", "{{baseName}}", "\\}"), URLencode(as.character(`{{paramName}}`), reserved = TRUE), url_path)
      }

      {{/pathParams}}
      {{/hasPathParams}}
      {{#authMethods}}
      {{#isBasic}}
      {{#isBasicBasic}}
      # HTTP basic auth
      header_params["Authorization"] <- paste("Basic", base64enc::base64encode(charToRaw(paste(self$api_client$username, self$api_client$password, sep = ":"))))
      {{/isBasicBasic}}
      {{/isBasic}}
      {{#isApiKey}}
      # API key authentication
      {{#isKeyInHeader}}
      if ("{{{keyParamName}}}" %in% names(self$api_client$api_keys) && nchar(self$api_client$api_keys["{{{keyParamName}}}"]) > 0) {
        header_params["{{keyParamName}}"] <- paste(unlist(self$api_client$api_keys["{{keyParamName}}"]), collapse = "")
      }
      {{/isKeyInHeader}}
      {{#isKeyInQuery}}
      if ("{{{keyParamName}}}" %in% names(self$api_client$api_keys) && nchar(self$api_client$api_keys["{{{keyParamName}}}"]) > 0) {
        query_params["{{keyParamName}}"] <- paste(unlist(self$api_client$api_keys["{{keyParamName}}"]), collapse = "")
      }
      {{/isKeyInQuery}}
      {{/isApiKey}}
      {{#isOAuth}}
      # OAuth token
      header_params["Authorization"] <- paste("Bearer", self$api_client$access_token, sep = " ")
      {{/isOAuth}}
      {{/authMethods}}

      resp <- self$api_client$CallApi(url = paste0(self$api_client$base_path, url_path),
                                 method = "{{httpMethod}}",
                                 query_params = query_params,
                                 header_params = header_params,
                                 body = body,
                                 ...)

      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        {{#returnType}}
        {{#isPrimitiveType}}
        content <- httr::content(
            resp, "text", encoding = "UTF-8", simplifyVector = FALSE
        )
        # save response in a file
        if (!is.null(data_file)) {
            write(content, data_file)
        }

        ApiResponse$new(content,resp)
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        # save response in a file
        if (!is.null(data_file)) {
            write(httr::content(resp, "text", encoding = "UTF-8", simplifyVector = FALSE), data_file)
        }

        deserialized_resp_obj <- tryCatch(
          self$api_client$deserialize(resp, "{{returnType}}", loadNamespace("{{packageName}}")),
          error = function(e) {
           {{#useDefaultExceptionHandling}}
             stop("Failed to deserialize response")
           {{/useDefaultExceptionHandling}}
           {{#useRlangExceptionHandling}}
             rlang::abort(message = "Failed to deserialize response", .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
           {{/useRlangExceptionHandling}}
          }
        )
        ApiResponse$new(deserialized_resp_obj, resp)
        {{/isPrimitiveType}}
        {{/returnType}}
        {{^returnType}}
        {{! Returning the ApiResponse object with NULL object when the endpoint doesn't return anything}}
        ApiResponse$new(NULL, resp)
        {{/returnType}}
      } else if (httr::status_code(resp) >= 300 && httr::status_code(resp) <= 399) {
      {{#returnExceptionOnFailure}}
        error_msg <- toString(content(resp))
        if(error_msg == "") {
          error_msg <- paste("Server returned ", httr::status_code(resp), " response status code.")
        }
        {{#useDefaultExceptionHandling}}
        stop(error_msg)
        {{/useDefaultExceptionHandling}}
        {{#useRlangExceptionHandling}}
        rlang::abort(message = error_msg, .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
        {{/useRlangExceptionHandling}}
      {{/returnExceptionOnFailure}}
      {{^returnExceptionOnFailure}}
        ApiResponse$new(paste("Server returned ", httr::status_code(resp), " response status code."), resp)
      {{/returnExceptionOnFailure}}
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
      {{#returnExceptionOnFailure}}
        error_msg <- toString(content(resp))
        if(error_msg == "") {
          error_msg <- "Api client exception encountered."
        }
        {{#useDefaultExceptionHandling}}
        stop(error_msg)
        {{/useDefaultExceptionHandling}}
        {{#useRlangExceptionHandling}}
        rlang::abort(message = error_msg, .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
        {{/useRlangExceptionHandling}}
      {{/returnExceptionOnFailure}}
      {{^returnExceptionOnFailure}}
        ApiResponse$new("API client error", resp)
      {{/returnExceptionOnFailure}}
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
      {{#returnExceptionOnFailure}}
        error_msg <- toString(content(resp))
        if(error_msg == "") {
          error_msg <- "Api server exception encountered."
        }
        {{#useDefaultExceptionHandling}}
        stop(error_msg)
        {{/useDefaultExceptionHandling}}
        {{#useRlangExceptionHandling}}
        rlang::abort(message = error_msg, .subclass = "ApiException", ApiException = ApiException$new(http_response = resp))
        {{/useRlangExceptionHandling}}
      {{/returnExceptionOnFailure}}
      {{^returnExceptionOnFailure}}
        ApiResponse$new("API server error", resp)
      {{/returnExceptionOnFailure}}
      }
    }{{^-last}},{{/-last}}
    {{/operation}}
  )
)
{{/operations}}
