#' @docType class
#' @title {{classname}}
#'
#' @description {{classname}} Class
#'
#' @format An \code{R6Class} generator object
#'
#' @importFrom R6 R6Class
#' @importFrom jsonlite fromJSON toJSON
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    #' @field actual_instance the object stored in this instance.
    actual_instance = NULL,
    #' @field actual_type the type of the object stored in this instance.
    actual_type = NULL,
    #' @field any_of  a list of object types defined in the anyOf schema.
    any_of = list({{#anyOf}}"{{{.}}}"{{^-last}}, {{/-last}}{{/anyOf}}),
    #' Initialize a new {{{classname}}}.
    #'
    #' @description
    #' Initialize a new {{{classname}}}.
    #'
    #' @param instance an instance of the object defined in the anyOf schemas: {{#anyOf}}"{{{.}}}"{{^-last}}, {{/-last}}{{/anyOf}}
    #' @export
    initialize = function(instance = NULL) {
      if (is.null(instance)) {
        # do nothing
      } {{#anyOf}}else if (get(class(instance)[[1]], pos = -1)$classname ==  "{{{.}}}") {
        self$actual_instance = instance
        self$actual_type = "{{{.}}}"
      } {{/anyOf}}else {
        stop(paste("Failed to initialize {{{classname}}} with anyOf schemas {{#anyOf}}{{{.}}}{{^-last}}, {{/-last}}{{/anyOf}}. Provided class name: ", get(class(instance)[[1]], pos = -1)$classname))
      }
    },
    #' Deserialize JSON string into an instance of {{{classname}}}.
    #'
    #' @description
    #' Deserialize JSON string into an instance of {{{classname}}}.
    #'
    #' @param input The input JSON.
    #' @return An instance of {{{classname}}}.
    #' @export
    fromJSON = function(input) {
      error_messages <- list()

      {{#anyOf}}
      {{{.}}}_result <- tryCatch({
          {{{.}}}$public_methods$validateJSON(input)
          {{{.}}}_instance <- {{{.}}}$new()
          self$actual_instance <- {{{.}}}_instance$fromJSON(input)
          self$actual_type <- "{{{.}}}"
          return(self)
        },
        error = function(err) err
      )

      if (!is.null({{{.}}}_result['error'])) {
        error_messages <- append(error_messages, {{{.}}}_result['message'])
      }

      {{/anyOf}}
      # no match
      stop(paste("No match found when deserializing the payload into {{{classname}}} with anyOf schemas {{#anyOf}}{{{.}}}{{^-last}}, {{/-last}}{{/anyOf}}. Details: ", paste(error_messages, collapse = ', ')))
    },
    #' Serialize {{{classname}}} to JSON string.
    #'
    #' @description
    #' Serialize {{{classname}}} to JSON string.
    #'
    #' @return JSON string representation of the {{{classname}}}.
    #' @export
    toJSONString = function() {
      if (!is.null(self$actual_instance)) {
        as.character(jsonlite::minify((self$actual_instance$toJSONString())))
      } else {
        NULL
      }
    },
    #' Serialize {{{classname}}} to JSON.
    #'
    #' @description
    #' Serialize {{{classname}}} to JSON.
    #'
    #' @return JSON representation of the {{{classname}}}.
    #' @export
    toJSON = function() {
      if (!is.null(self$actual_instance)) {
        self$actual_instance$toJSON()
      } else {
        NULL
      }
    },
    #' Validate the input JSON with respect to {{{classname}}}.
    #'
    #' @description
    #' Validate the input JSON with respect to {{{classname}}} and
    #' throw exception if invalid.
    #'
    #' @param input The input JSON.
    #' @export
    validateJSON = function(input) {
      # backup current values
      actual_instance_bak <- self$actual_instance
      actual_type_bak <- self$actual_type

      # if it's not valid, an error will be thrown
      self$fromJSON(input)

      # no error thrown, restore old values
      self$actual_instance <- actual_instance_bak
      self$actual_type <- actual_type_bak
    },
    #' Returns the string representation of the instance.
    #'
    #' @description
    #' Returns the string representation of the instance.
    #'
    #' @return The string representation of the instance.
    #' @export
    toString = function() {
      jsoncontent <- c(
        sprintf('"actual_instance": %s', if (is.null(self$actual_instance)) {NULL} else {self$actual_instance$toJSONString()}),
        sprintf('"actual_type": "%s"', self$actual_type),
        sprintf('"any_of": "%s"',  paste( unlist(self$any_of), collapse=', '))
      )
      jsoncontent <- paste(jsoncontent, collapse = ",")
      as.character(jsonlite::prettify(paste('{', jsoncontent, '}', sep = "")))
     }
  )
)
