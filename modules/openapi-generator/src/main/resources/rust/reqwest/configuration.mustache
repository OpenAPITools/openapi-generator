{{>partial_header}}
use std;

use hyper;
use reqwest;
use reqwest::header::{Formatter, Header, Raw};

pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration {
            base_path: "{{{basePath}}}".to_owned(),
            user_agent: {{#httpUserAgent}}Some("{{{.}}}".to_owned()){{/httpUserAgent}}{{^httpUserAgent}}Some("Swagger-Codegen/{{version}}/rust".to_owned()){{/httpUserAgent}},
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            api_key: None,
        }
    }

    {{#headerKeys}}
    pub fn header_{{{.}}}(value: String) -> Header_{{{.}}} {
        Header_{{{.}}}(value)
    }
    {{/headerKeys}}
}

{{#headerKeys}}
#[derive(Debug, Clone)]
pub struct Header_{{{.}}}(String);

impl Header for Header_{{{.}}} {
    fn header_name() -> &'static str {
        "{{{.}}}"
    }

    fn parse_header(raw: &Raw) -> Result<Self, hyper::error::Error> {
        Ok(Header_{{{.}}}(std::str::from_utf8(raw.one().unwrap())?.to_string()))
    }

    fn fmt_header(&self, f: &mut Formatter) -> Result<(), std::fmt::Error> {
        f.fmt_line(&self.0)
    }
}
{{/headerKeys}}