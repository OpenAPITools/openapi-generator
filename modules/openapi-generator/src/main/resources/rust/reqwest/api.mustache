{{>partial_header}}
use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use serde_json;
use serde_json::Value;

use reqwest;

use super::{Error, configuration};

pub struct {{{classname}}}Client {
    configuration: Rc<configuration::Configuration>,
}

impl {{{classname}}}Client {
    pub fn new(configuration: Rc<configuration::Configuration>) -> {{{classname}}}Client {
        {{{classname}}}Client {
            configuration: configuration,
        }
    }
}

pub trait {{classname}} {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Result<{{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error>;
{{/operation}}
{{/operations}}
}


impl {{classname}} for {{classname}}Client {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Result<{{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

{{#hasAuthMethods}}{{#authMethods}}{{#isApiKey}}{{#isKeyInQuery}}
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };

            auth_query.insert("{{keyParamName}}".to_owned(), val);

        };
{{/isKeyInQuery}}{{/isApiKey}}{{/authMethods}}{{/hasAuthMethods}}

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
{{#queryParams}}
            query.append_pair("{{baseName}}", &{{paramName}}{{#isListContainer}}.join(","){{/isListContainer}}.to_string());
{{/queryParams}}
{{#hasAuthMethods}}{{#authMethods}}{{#isApiKey}}{{#isKeyInQuery}}
            for (key, val) in &auth_query {
                query.append_pair(key, val);
            }
{{/isKeyInQuery}}{{/isApiKey}}{{/authMethods}}{{/hasAuthMethods}}
            query.finish()
        };
        let uri_str = format!("{}{{{path}}}?{}", configuration.base_path, query_string{{#pathParams}}, {{baseName}}={{paramName}}{{#isListContainer}}.join(",").as_ref(){{/isListContainer}}{{/pathParams}});

        let mut req_builder = client.{{httpMethod}}(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder.header(reqwest::header::UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {{#hasHeaderParams}}
        {{#headerParams}}
        req_builder.header(configuration::Configuration::header_{{baseName}}({{paramName}}{{#isListContainer}}.join(","){{/isListContainer}}.to_string()));
        {{/headerParams}}
        {{/hasHeaderParams}}

        {{#hasAuthMethods}}
        {{#authMethods}}
        {{#isApiKey}}{{#isKeyInHeader}}
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };

            req_builder.header(configuration::Configuration::header_{{keyParamName}}(val));
        };
        {{/isKeyInHeader}}{{/isApiKey}}
        {{#isBasic}}
        if let Some(ref auth_conf) = configuration.basic_auth {
            let auth = reqwest::header::Authorization(
                reqwest::header::Basic {
                    username: auth_conf.0.to_owned(),
                    password: auth_conf.1.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };
        {{/isBasic}}
        {{#isOAuth}}
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = reqwest::header::Authorization(
                reqwest::header::Bearer {
                    token: token.to_owned(),
                }
            );
            req_builder.header(auth.to_owned());
        };
        {{/isOAuth}}
        {{/authMethods}}
        {{/hasAuthMethods}}

        {{#hasBodyParam}}
        {{#bodyParams}}
        req_builder.json(&{{paramName}});
        {{/bodyParams}}
        {{/hasBodyParam}}

        // send request
        let req = req_builder.build()?;

        {{^returnType}}
        client.execute(req)?.error_for_status()?;
        Ok(())
        {{/returnType}}
        {{#returnType}}
        Ok(client.execute(req)?.error_for_status()?.json()?)
        {{/returnType}}
    }

{{/operation}}
{{/operations}}
}
