{{>partial_header}}

use async_trait::async_trait;
{{#mockall}}
#[cfg(feature = "mockall")]
use mockall::automock;
{{/mockall}}
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

{{#mockall}}
#[cfg_attr(feature = "mockall", automock)]
{{/mockall}}
#[async_trait]
pub trait {{{classname}}}: Send + Sync {
{{#operations}}
{{#operation}}
{{#vendorExtensions.x-group-parameters}}
    async fn {{{operationId}}}(&self, {{#allParams}}{{#-first}} params: {{{operationIdCamelCase}}}Params {{/-first}}{{/allParams}}) -> Result<{{#supportMultipleResponses}}ResponseContent<{{{operationIdCamelCase}}}Success>{{/supportMultipleResponses}}{{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}, Error<{{{operationIdCamelCase}}}Error>>;
{{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
    async fn {{{operationId}}}<{{#allParams}}'{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}}>(&self, {{#allParams}}{{{paramName}}}: {{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{#isString}}{{#isArray}}Vec<{{/isArray}}{{^isUuid}}&'{{{paramName}}} str{{/isUuid}}{{#isArray}}>{{/isArray}}{{/isString}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}&str{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) -> Result<{{#supportMultipleResponses}}ResponseContent<{{{operationIdCamelCase}}}Success>{{/supportMultipleResponses}}{{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}, Error<{{{operationIdCamelCase}}}Error>>;
{{/vendorExtensions.x-group-parameters}}
{{/operation}}
{{/operations}}
}

pub struct {{{classname}}}Client {
    configuration: Arc<configuration::Configuration>
}

impl {{classname}}Client {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


{{#operations}}
{{#operation}}
{{#vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#-first}}
/// struct for passing parameters to the method [`{{operationId}}`]
#[derive(Clone, Debug)]
{{#useBonBuilder}}
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
{{/useBonBuilder}}
pub struct {{{operationIdCamelCase}}}Params {
{{/-first}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    pub {{{paramName}}}: {{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{^isUuid}}{{#isString}}{{#isArray}}Vec<{{/isArray}}String{{#isArray}}>{{/isArray}}{{/isString}}{{/isUuid}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}String{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}{{^-last}},{{/-last}}
{{#-last}}
}

{{/-last}}
{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{/operation}}
{{/operations}}

#[async_trait]
impl {{classname}} for {{classname}}Client {
    {{#operations}}
    {{#operation}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    {{#notes}}
    /// {{{.}}}
    {{/notes}}
    {{#vendorExtensions.x-group-parameters}}
    async fn {{{operationId}}}(&self, {{#allParams}}{{#-first}} params: {{{operationIdCamelCase}}}Params {{/-first}}{{/allParams}}) -> Result<{{#supportMultipleResponses}}ResponseContent<{{{operationIdCamelCase}}}Success>{{/supportMultipleResponses}}{{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}, Error<{{{operationIdCamelCase}}}Error>> {
        {{#allParams}}{{#-first}}
        let {{{operationIdCamelCase}}}Params {
            {{#allParams}}
            {{{paramName}}},
            {{/allParams}}
        } = params;
        {{/-first}}{{/allParams}}

    {{/vendorExtensions.x-group-parameters}}
    {{^vendorExtensions.x-group-parameters}}
    async fn {{{operationId}}}<{{#allParams}}'{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}}>(&self, {{#allParams}}{{{paramName}}}: {{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{#isString}}{{#isArray}}Vec<{{/isArray}}{{^isUuid}}&'{{{paramName}}} str{{/isUuid}}{{#isArray}}>{{/isArray}}{{/isString}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}&str{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) -> Result<{{#supportMultipleResponses}}ResponseContent<{{{operationIdCamelCase}}}Success>{{/supportMultipleResponses}}{{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}, Error<{{{operationIdCamelCase}}}Error>> {
    {{/vendorExtensions.x-group-parameters}}
        let {{{varPrefix}}}configuration = &self.configuration;

        let {{{varPrefix}}}client = &{{{varPrefix}}}configuration.client;

        let {{{varPrefix}}}uri_str = format!("{}{{{path}}}", {{{varPrefix}}}configuration.base_path{{#pathParams}}, {{{baseName}}}={{#isString}}crate::apis::urlencode({{/isString}}{{{paramName}}}{{^required}}.unwrap(){{/required}}{{#required}}{{#isNullable}}.unwrap(){{/isNullable}}{{/required}}{{#isArray}}.join(",").as_ref(){{/isArray}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}.to_string(){{/isContainer}}{{/isPrimitiveType}}{{/isUuid}}{{/isString}}{{#isString}}){{/isString}}{{/pathParams}});
        let mut {{{varPrefix}}}req_builder = {{{varPrefix}}}client.request(reqwest::Method::{{{httpMethod}}}, {{{varPrefix}}}uri_str.as_str());

        {{#queryParams}}
        {{#required}}
        {{#isArray}}
        {{{varPrefix}}}req_builder = match "{{collectionFormat}}" {
            "multi" => {{{varPrefix}}}req_builder.query(&{{{paramName}}}.into_iter().map(|p| ("{{{baseName}}}".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => {{{varPrefix}}}req_builder.query(&[("{{{baseName}}}", &{{{paramName}}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
        {{/isArray}}
        {{^isArray}}
        {{^isNullable}}
        {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.query(&[("{{{baseName}}}", &{{{paramName}}}.to_string())]);
        {{/isNullable}}
        {{#isNullable}}
        {{#isDeepObject}}
        if let Some(ref {{{varPrefix}}}str) = {{{paramName}}} {
            let params = crate::apis::parse_deep_object("{{{baseName}}}", {{{varPrefix}}}str);
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.query(&params);
        };
        {{/isDeepObject}}
        {{^isDeepObject}}
        if let Some(ref {{{varPrefix}}}str) = {{{paramName}}} {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.query(&[("{{{baseName}}}", &{{{varPrefix}}}str.to_string())]);
        };
        {{/isDeepObject}}
        {{/isNullable}}
        {{/isArray}}
        {{/required}}
        {{^required}}
        if let Some(ref {{{varPrefix}}}str) = {{{paramName}}} {
            {{#isArray}}
            {{{varPrefix}}}req_builder = match "{{collectionFormat}}" {
                "multi" => {{{varPrefix}}}req_builder.query(&{{{varPrefix}}}str.into_iter().map(|p| ("{{{baseName}}}".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
                _ => {{{varPrefix}}}req_builder.query(&[("{{{baseName}}}", &{{{varPrefix}}}str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
            };
            {{/isArray}}
            {{^isArray}}
            {{#isDeepObject}}
            let params = crate::apis::parse_deep_object("{{{baseName}}}", {{{varPrefix}}}str);
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.query(&params);
            {{/isDeepObject}}
            {{^isDeepObject}}
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.query(&[("{{{baseName}}}", &{{{varPrefix}}}str.to_string())]);
            {{/isDeepObject}}
            {{/isArray}}
        }
        {{/required}}
        {{/queryParams}}
        {{#hasAuthMethods}}
        {{#authMethods}}
        {{#isApiKey}}
        {{#isKeyInQuery}}
        if let Some(ref {{{varPrefix}}}apikey) = {{{varPrefix}}}configuration.api_key {
            let {{{varPrefix}}}key = {{{varPrefix}}}apikey.key.clone();
            let {{{varPrefix}}}value = match {{{varPrefix}}}apikey.prefix {
                Some(ref {{{varPrefix}}}prefix) => format!("{} {}", {{{varPrefix}}}prefix, {{{varPrefix}}}key),
                None => {{{varPrefix}}}key,
            };
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.query(&[("{{{keyParamName}}}", {{{varPrefix}}}value)]);
        }
        {{/isKeyInQuery}}
        {{/isApiKey}}
        {{/authMethods}}
        {{/hasAuthMethods}}
        {{#hasAuthMethods}}
        {{#withAWSV4Signature}}
        if let Some(ref {{{varPrefix}}}aws_v4_key) = {{{varPrefix}}}configuration.aws_v4_key {
            let {{{varPrefix}}}new_headers = match {{{varPrefix}}}aws_v4_key.sign(
            &{{{varPrefix}}}uri_str,
            "{{{httpMethod}}}",
            {{#hasBodyParam}}
            {{#bodyParams}}
            &serde_json::to_string(&{{{paramName}}}).expect("param should serialize to string"),
            {{/bodyParams}}
            {{/hasBodyParam}}
            {{^hasBodyParam}}
            "",
            {{/hasBodyParam}}
            ) {
            Ok(new_headers) => new_headers,
            Err(err) => return Err(Error::AWSV4SignatureError(err)),
            };
        for ({{{varPrefix}}}name, {{{varPrefix}}}value) in {{{varPrefix}}}new_headers.iter() {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header({{{varPrefix}}}name.as_str(), {{{varPrefix}}}value.as_str());
        }
        }
        {{/withAWSV4Signature}}
        {{/hasAuthMethods}}
        if let Some(ref {{{varPrefix}}}user_agent) = {{{varPrefix}}}configuration.user_agent {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header(reqwest::header::USER_AGENT, {{{varPrefix}}}user_agent.clone());
        }
        {{#hasHeaderParams}}
        {{#headerParams}}
        {{#required}}
        {{^isNullable}}
        {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header("{{{baseName}}}", {{{paramName}}}{{#isArray}}.join(","){{/isArray}}.to_string());
        {{/isNullable}}
        {{#isNullable}}
        match {{{paramName}}} {
            Some({{{varPrefix}}}param_value) => { {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header("{{{baseName}}}", {{{varPrefix}}}param_value{{#isArray}}.join(","){{/isArray}}.to_string()); },
            None => { {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header("{{{baseName}}}", ""); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some({{{varPrefix}}}param_value) = {{{paramName}}} {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header("{{{baseName}}}", {{{varPrefix}}}param_value{{#isArray}}.join(","){{/isArray}}.to_string());
        }
        {{/required}}
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#hasAuthMethods}}
        {{#authMethods}}
        {{#supportTokenSource}}
        // Obtain a token from source provider.
        // Tokens can be Id or access tokens depending on the provider type and configuration.
        let token = {{{varPrefix}}}configuration.token_source.token().await.map_err(Error::TokenSource)?;
        // The token format is the responsibility of the provider, thus we just set the authorization header with whatever is given.
        {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header(reqwest::header::AUTHORIZATION, token);
        {{/supportTokenSource}}
        {{^supportTokenSource}}
        {{#isApiKey}}
        {{#isKeyInHeader}}
        if let Some(ref {{{varPrefix}}}apikey) = {{{varPrefix}}}configuration.api_key {
            let {{{varPrefix}}}key = {{{varPrefix}}}apikey.key.clone();
            let {{{varPrefix}}}value = match {{{varPrefix}}}apikey.prefix {
                Some(ref {{{varPrefix}}}prefix) => format!("{} {}", {{{varPrefix}}}prefix, {{{varPrefix}}}key),
                None => {{{varPrefix}}}key,
            };
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.header("{{{keyParamName}}}", {{{varPrefix}}}value);
        };
        {{/isKeyInHeader}}
        {{/isApiKey}}
        {{#isBasic}}
        {{#isBasicBasic}}
        if let Some(ref {{{varPrefix}}}auth_conf) = {{{varPrefix}}}configuration.basic_auth {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.basic_auth({{{varPrefix}}}auth_conf.0.to_owned(), {{{varPrefix}}}auth_conf.1.to_owned());
        };
        {{/isBasicBasic}}
        {{#isBasicBearer}}
        if let Some(ref {{{varPrefix}}}token) = {{{varPrefix}}}configuration.bearer_access_token {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.bearer_auth({{{varPrefix}}}token.to_owned());
        };
        {{/isBasicBearer}}
        {{/isBasic}}
        {{#isOAuth}}
        if let Some(ref {{{varPrefix}}}token) = {{{varPrefix}}}configuration.oauth_access_token {
            {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.bearer_auth({{{varPrefix}}}token.to_owned());
        };
        {{/isOAuth}}
        {{/supportTokenSource}}
        {{/authMethods}}
        {{/hasAuthMethods}}
        {{#isMultipart}}
        {{#hasFormParams}}
        let mut {{{varPrefix}}}form = reqwest::multipart::Form::new();
        {{#formParams}}
        {{#isFile}}
        // TODO: support file upload for '{{{baseName}}}' parameter
        {{/isFile}}
        {{^isFile}}
        {{#required}}
        {{^isNullable}}
        {{{varPrefix}}}form = {{{varPrefix}}}form.text("{{{baseName}}}", {{{paramName}}}{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string());
        {{/isNullable}}
        {{#isNullable}}
        match {{{paramName}}} {
            Some({{{varPrefix}}}param_value) => { {{{varPrefix}}}form = {{{varPrefix}}}form.text("{{{baseName}}}", {{{varPrefix}}}param_value{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string()); },
            None => { {{{varPrefix}}}form = {{{varPrefix}}}form.text("{{{baseName}}}", ""); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some({{{varPrefix}}}param_value) = {{{paramName}}} {
            {{{varPrefix}}}form = {{{varPrefix}}}form.text("{{{baseName}}}", {{{varPrefix}}}param_value{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string());
        }
        {{/required}}
        {{/isFile}}
        {{/formParams}}
        {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.multipart({{{varPrefix}}}form);
        {{/hasFormParams}}
        {{/isMultipart}}
        {{^isMultipart}}
        {{#hasFormParams}}
        let mut {{{varPrefix}}}form_params = std::collections::HashMap::new();
        {{#formParams}}
        {{#isFile}}
        {{#required}}
        {{^isNullable}}
        {{{varPrefix}}}form_params.insert("{{{baseName}}}", unimplemented!("File form param not supported with x-www-form-urlencoded content"));
        {{/isNullable}}
        {{#isNullable}}
        match {{{paramName}}} {
            Some({{{varPrefix}}}param_value) => { {{{varPrefix}}}form_params.insert("{{{baseName}}}", unimplemented!("File form param not supported with x-www-form-urlencoded content")); },
            None => { unimplemented!("Required nullable file form param not supported with x-www-form-urlencoded content"); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some({{{varPrefix}}}param_value) = {{{paramName}}} {
            {{{varPrefix}}}form_params.insert("{{{baseName}}}", unimplemented!("File form param not supported with x-www-form-urlencoded content"));
        }
        {{/required}}
        {{/isFile}}
        {{^isFile}}
        {{#required}}
        {{^isNullable}}
        {{{varPrefix}}}form_params.insert("{{{baseName}}}", {{{paramName}}}{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string());
        {{/isNullable}}
        {{#isNullable}}
        match {{{paramName}}} {
            Some({{{varPrefix}}}param_value) => { {{{varPrefix}}}form_params.insert("{{{baseName}}}", {{{varPrefix}}}param_value{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string()); },
            None => { {{{varPrefix}}}form_params.insert("{{{baseName}}}", ""); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some({{{varPrefix}}}param_value) = {{{paramName}}} {
            {{{varPrefix}}}form_params.insert("{{{baseName}}}", {{{varPrefix}}}param_value{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string());
        }
        {{/required}}
        {{/isFile}}
        {{/formParams}}
        {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.form(&{{{varPrefix}}}form_params);
        {{/hasFormParams}}
        {{/isMultipart}}
        {{#hasBodyParam}}
        {{#bodyParams}}
        {{{varPrefix}}}req_builder = {{{varPrefix}}}req_builder.json(&{{{paramName}}});
        {{/bodyParams}}
        {{/hasBodyParam}}

        let {{{varPrefix}}}req = {{{varPrefix}}}req_builder.build()?;
        let {{{varPrefix}}}resp = {{{varPrefix}}}client.execute({{{varPrefix}}}req).await?;

        let {{{varPrefix}}}status = {{{varPrefix}}}resp.status();
        let {{{varPrefix}}}content = {{{varPrefix}}}resp.text().await?;

        if !{{{varPrefix}}}status.is_client_error() && !{{{varPrefix}}}status.is_server_error() {
            {{^supportMultipleResponses}}
            {{^returnType}}
            Ok(())
            {{/returnType}}
            {{#returnType}}
            serde_json::from_str(&{{{varPrefix}}}content).map_err(Error::from)
            {{/returnType}}
            {{/supportMultipleResponses}}
            {{#supportMultipleResponses}}
            let {{{varPrefix}}}entity: Option<{{{operationIdCamelCase}}}Success> = serde_json::from_str(&{{{varPrefix}}}content).ok();
            let {{{varPrefix}}}result = ResponseContent { status: {{{varPrefix}}}status, content: {{{varPrefix}}}content, entity: {{{varPrefix}}}entity };
            Ok({{{varPrefix}}}result)
            {{/supportMultipleResponses}}
        } else {
            let {{{varPrefix}}}entity: Option<{{{operationIdCamelCase}}}Error> = serde_json::from_str(&{{{varPrefix}}}content).ok();
            let {{{varPrefix}}}error = ResponseContent { status: {{{varPrefix}}}status, content: {{{varPrefix}}}content, entity: {{{varPrefix}}}entity };
            Err(Error::ResponseError({{{varPrefix}}}error))
        }
    }

    {{/operation}}
    {{/operations}}
}

{{#supportMultipleResponses}}
{{#operations}}
{{#operation}}
/// struct for typed successes of method [`{{operationId}}`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{{operationIdCamelCase}}}Success {
    {{#responses}}
    {{#is2xx}}
    Status{{code}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/is2xx}}
    {{#is3xx}}
    Status{{code}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/is3xx}}
    {{/responses}}
    UnknownValue(serde_json::Value),
}

{{/operation}}
{{/operations}}
{{/supportMultipleResponses}}
{{#operations}}
{{#operation}}
/// struct for typed errors of method [`{{operationId}}`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{{operationIdCamelCase}}}Error {
    {{#responses}}
    {{#is4xx}}
    Status{{code}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/is4xx}}
    {{#is5xx}}
    Status{{code}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/is5xx}}
    {{#isDefault}}
    DefaultResponse({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/isDefault}}
    {{/responses}}
    UnknownValue(serde_json::Value),
}

{{/operation}}
{{/operations}}
