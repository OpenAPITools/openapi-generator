{{>partial_header}}
use hyper;
use hyper_util::client::legacy::connect::Connect;
use hyper_util::client::legacy::Client;

pub struct Configuration<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: Client<C, String>,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl<C: Connect> Configuration<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(client: Client<C, String>) -> Configuration<C> {
        Configuration {
            base_path: "{{{basePath}}}".to_owned(),
            user_agent: {{#httpUserAgent}}Some("{{{.}}}".to_owned()){{/httpUserAgent}}{{^httpUserAgent}}Some("OpenAPI-Generator/{{{version}}}/rust".to_owned()){{/httpUserAgent}},
            client,
            basic_auth: None,
            oauth_access_token: None,
            api_key: None,
        }
    }
}
