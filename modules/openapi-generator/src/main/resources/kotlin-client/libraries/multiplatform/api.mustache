{{>licenseInfo}}
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import {{packageName}}.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.forms.FormPart
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.builtins.list
import kotlinx.serialization.builtins.serializer

{{#operations}}
{{#nonPublicApi}}internal {{/nonPublicApi}}class {{classname}} constructor(
    baseUrl: kotlin.String = "{{{basePath}}}",
    httpClientEngine: HttpClientEngine? = null,
    serializer: KotlinxSerializer
) : ApiClient(baseUrl, httpClientEngine, serializer) {

    constructor(
        baseUrl: String = "{{{basePath}}}",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Stable
    ) : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
    {{#allParams}} * @param {{{paramName}}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}} * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    {{#returnType}}
    @Suppress("UNCHECKED_CAST")
    {{/returnType}}
    suspend fun {{operationId}}(
        {{#allParams}}
        {{{paramName}}}: {{{dataType}}}{{^required}}? = null{{/required}}{{#hasMore}},{{/hasMore}}
        {{/allParams}}
    ): HttpResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}}> {
        {{! TODO: Optimize all the ?.let to only the places where it's needed }}
        val localVariableAuthNames = listOf<String>({{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}})

        val localVariableBody = {{#hasBodyParam}}{{#bodyParam}}{{#isListContainer}}{{{paramName}}}?.let { {{operationIdCamelCase}}Request(it{{^isList}}.asList(){{/isList}}) }{{/isListContainer}}{{^isListContainer}}{{#isMapContainer}}{{{paramName}}}?.let { {{operationIdCamelCase}}Request(it) }{{/isMapContainer}}{{^isMapContainer}}{{{paramName}}}{{/isMapContainer}}{{/isListContainer}}{{/bodyParam}}{{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            {{#isMultipart}}
            formData {
                {{#formParams}}
                {{{paramName}}}?.let { append(FormPart("{{{baseName}}}", it)) }
                {{/formParams}}
            }
            {{/isMultipart}}
            {{^isMultipart}}
            ParametersBuilder().also {
                {{#formParams}}
                {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                {{/formParams}}
            }.build()
            {{/isMultipart}}
            {{/hasFormParams}}
            {{^hasFormParams}}
            io.ktor.client.utils.EmptyContent
            {{/hasFormParams}}
            {{/hasBodyParam}}

        {{! TODO: Don't use all the listOf() }}
        val localVariableQuery = mutableMapOf<String, List<String>?>(
            {{#queryParams}}
            "{{baseName}}" to {{#isContainer}}{{{paramName}}}?.let { toMultiValue(it, "{{collectionFormat}}") }{{/isContainer}}{{^isContainer}}listOf("${{{paramName}}}"){{/isContainer}}{{#hasMore}},{{/hasMore}}
            {{/queryParams}}
        )

        val localVariableHeaders = mutableMapOf<String, String?>(
            {{#headerParams}}
            "{{baseName}}" to {{#isContainer}}{{{paramName}}}?.joinToString(separator = collectionDelimiter("{{collectionFormat}}")){{/isContainer}}{{^isContainer}}this?.toString(){{/isContainer}}{{#hasMore}},{{/hasMore}}
            {{/headerParams}}
        )

        val localVariableConfig = RequestConfig(
            RequestMethod.{{httpMethod}},
            "{{path}}"{{#pathParams}}.replace("{{curly true}}{{baseName}}{{curly}}", "${{{paramName}}}"){{/pathParams}},
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return {{#hasBodyParam}}jsonRequest{{/hasBodyParam}}{{^hasBodyParam}}{{#hasFormParams}}{{#isMultipart}}multipartFormRequest{{/isMultipart}}{{^isMultipart}}urlEncodedFormRequest{{/isMultipart}}{{/hasFormParams}}{{^hasFormParams}}request{{/hasFormParams}}{{/hasBodyParam}}(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).{{#isListContainer}}wrap<{{operationIdCamelCase}}Response>().map { value{{^isList}}.toTypedArray(){{/isList}} }{{/isListContainer}}{{^isListContainer}}{{#isMapContainer}}wrap<{{operationIdCamelCase}}Response>().map { value }{{/isMapContainer}}{{^isMapContainer}}wrap(){{/isMapContainer}}{{/isListContainer}}
    }
{{#hasBodyParam}}

{{#bodyParam}}
{{#isListContainer}}{{>serial_wrapper_request_list}}{{/isListContainer}}{{#isMapContainer}}{{>serial_wrapper_request_map}}{{/isMapContainer}}
{{/bodyParam}}
{{/hasBodyParam}}
{{#isListContainer}}
{{>serial_wrapper_response_list}}
{{/isListContainer}}
{{#isMapContainer}}
{{>serial_wrapper_response_map}}
{{/isMapContainer}}
{{/operation}}
}
{{/operations}}
