package {{packageName}}.infrastructure

import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.scalars.ScalarsConverterFactory
{{#useRxJava}}
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory
{{/useRxJava}}
{{#useRxJava2}}
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
{{/useRxJava2}}
{{#gson}}
import retrofit2.converter.gson.GsonConverterFactory
{{/gson}}
{{#moshi}}
import retrofit2.converter.moshi.MoshiConverterFactory
{{/moshi}}

{{#nonPublicApi}}internal {{/nonPublicApi}}class ApiClient(
    private var baseUrl: String = defaultBasePath,
    private var okHttpClient: OkHttpClient
) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("{{packageName}}.baseUrl", "{{{basePath}}}")
        }
    }

    init {
        normalizeBaseUrl()
    }

    val retrofitBuilder: Retrofit.Builder by lazy {

        Retrofit.Builder()
        .baseUrl(baseUrl)
        .addConverterFactory(ScalarsConverterFactory.create())
        {{#gson}}
        .addConverterFactory(GsonConverterFactory.create(Serializer.gson))
        {{/gson}}
        {{#useRxJava}}
        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
        {{/useRxJava}}
        {{#useRxJava2}}
        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
        {{/useRxJava2}}
        {{#moshi}}
        .addConverterFactory(MoshiConverterFactory.create(Serializer.moshi))
        {{/moshi}}
    }

    fun <S> createService(serviceClass: Class<S>): S {
        return retrofitBuilder.client(okHttpClient).build().create(serviceClass)
    }

    private fun normalizeBaseUrl() {
        if (!baseUrl.endsWith("/")) {
            baseUrl += "/"
        }
    }
}