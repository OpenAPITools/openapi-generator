package {{packageName}}.infrastructure

import {{packageName}}.request.GsonRequest
import {{packageName}}.auth.Authentication
import {{packageName}}.auth.HttpBasicAuth
import {{packageName}}.auth.ApiKeyAuth

import android.content.Context
import com.android.volley.RequestQueue
import com.android.volley.toolbox.BaseHttpStack
import com.android.volley.toolbox.Volley
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder
import javax.net.ssl.HttpsURLConnection

class ApiClient(val context: Context) {

    private var baseHttpStack: BaseHttpStack? = null

    constructor(context: Context, baseHttpStack: BaseHttpStack): this(context) {
        this.baseHttpStack = baseHttpStack
    }

    private val defaultHeaderMap: MutableMap<String, String> = HashMap()

    fun addDefaultHeader(key: String, value: String) {
        defaultHeaderMap[key] = value
    }

    /**
     * Get authentications (key: authentication name, value: authentication).
     */
    var authentications: Map<String, Authentication>? = null
        private set
    var connectionTimeout: Int = 0


    // TODO - Add auth method here

    /**
     * Get authentication for the given name.
     *
     * @param authName The authentication name
     * @return The authentication, null if not found
     */
    fun getAuthentication(authName: String): Authentication? {
        return authentications!![authName]
    }

    /**
     * Helper method to set username for the first HTTP basic authentication.
     */
    fun setUsername(username: String?) {
        for (auth in authentications!!.values) {
            if (auth is HttpBasicAuth) {
                auth.username = username
                return
            }
        }
        throw RuntimeException("No HTTP basic authentication configured!")
    }

    /**
     * Helper method to set password for the first HTTP basic authentication.
     */
    fun setPassword(password: String?) {
        for (auth in authentications!!.values) {
            if (auth is HttpBasicAuth) {
                auth.password = password
                return
            }
        }
        throw RuntimeException("No HTTP basic authentication configured!")
    }

    /**
     * Helper method to set API key value for the first API key authentication.
     */
    fun setApiKey(apiKey: String?) {
        for (auth in authentications!!.values) {
            if (auth is ApiKeyAuth) {
                auth.apiKey = apiKey
                return
            }
        }
        throw RuntimeException("No API key authentication configured!")
    }

    /**
     * Helper method to set API key prefix for the first API key authentication.
     */
    fun setApiKeyPrefix(apiKeyPrefix: String?) {
        for (auth in authentications!!.values) {
            if (auth is ApiKeyAuth) {
                auth.apiKeyPrefix = apiKeyPrefix
                return
            }
        }
        throw RuntimeException("No API key authentication configured!")
    }

    /**
     * Update query and header parameters based on authentication settings.
     *
     * @param authNames The authentications to apply
     */
    private fun updateParamsForAuth(
        authNames: Array<String>,
        queryParams: List<Pair<String, String>>?,
        headerParams: Map<String, String>
    ) {
        for (authName in authNames) {
            val auth = authentications!![authName] ?: throw RuntimeException("Authentication undefined: $authName")
            auth.applyToParams(queryParams?.toMutableList()!!, headerParams?.toMutableMap())
        }
    }


    fun <T> invokeApi(request: GsonRequest<T>) {
        requestQueue.add(request)
    }

    private val requestQueue: RequestQueue by lazy {
        when {
            baseHttpStack != null ->
                Volley.newRequestQueue(context.applicationContext, baseHttpStack)
            else ->
                Volley.newRequestQueue(context.applicationContext)
        }
    }

}