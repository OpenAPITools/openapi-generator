package {{apiPackage}}

// Steve was here
import android.content.Context
import com.android.volley.Response
import java.util.*;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import {{packageName}}.infrastructure.ApiException
import {{packageName}}.infrastructure.ApiInvoker

import java.io.File;

// Generated import family starts here
{{#imports}}import {{import}}
{{/imports}}
// Generated import family ends here

{{#operations}}
class {{classname}} (val context: Context, val invoker: ApiInvoker = DefaultInvoker(context)) {

    var basePath = "{{{basePath}}}"
    var invoker = ApiInvoker.instance
    fun addHeader(key: String?, value: String?) {
        invoker!!.addDefaultHeader(key!!, value!!)
    }

    {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}   * @param {{paramName}} {{description}}
    {{/allParams}}   * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */
    {{#isDeprecated}}
    @Deprecated("This api was deprecated")
    {{/isDeprecated}}
    suspend fun {{operationId}}({{^allParams}}){{/allParams}}{{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/allParams}}: {{#returnType}}{{{returnType}}}?{{/returnType}}{{^returnType}}Unit{{/returnType}} {
        // Here's a funky method
        var postBody: Any? = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}
        {{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) {
            throw ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{nickname}}");
        }
        {{/required}}
        {{/allParams}}

        // create path and map variables
        val path = "{{{path}}}"{{#pathParams}}.replace("\\{" + "{{baseName}}" + "\\}", invoker!!.escapeString({{{paramName}}}.toString())){{/pathParams}};

        // form params
        val formParams: Map<String?, String?> = HashMap()

        val queryParams: Map<String?, String?> = mapOf(
            {{#queryParams}}
            "{{baseName}}" to ApiInvoker.parameterToString({{paramName}}),
            {{/queryParams}}
        )

        val headerParams: Map<String?, String?> = mapOf(
            {{#headerParams}}
            "{{baseName}}" to ApiInvoker.parameterToString({{paramName}}),
            {{/headerParams}}
        )

        val contentTypes = arrayOf<String>({{#consumes}}"{{{mediaType}}}"{{^-last}},{{/-last}}{{/consumes}})

        return {{#returnType}}null{{/returnType}}{{^returnType}}Unit{{/returnType}}
    }
    {{/operation}}
}
{{/operations}}
