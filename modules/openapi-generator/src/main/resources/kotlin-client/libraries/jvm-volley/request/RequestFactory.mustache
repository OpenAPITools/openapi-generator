// Knowing the details of an operation it will produce a call to a Volley Request constructor
package {{packageName}}.request

import com.android.volley.Request
import com.android.volley.Response
{{#authMethods}}
import {{packageName}}.auth.Authentication
{{/authMethods}}
import {{packageName}}.request.IRequestFactory.Companion.escapeString
import java.lang.reflect.Type
import java.util.Locale
import java.util.UUID


class RequestFactory(vararg headerFactory : () -> Map<String, String>): IRequestFactory {

    companion object {
      // TODO Generate appropriate header factories based on settings
      // Where a header factory requires parameters a client will need to bind these
{{#authMethods}}
    /**
    * Update query and header parameters based on authentication settings.
    *
    * @param authNames The authentications to apply
    */

    {{#isApiKey}}
        "{{name}}", ApiKeyAuth({{#isKeyInHeader}}"header"{{/isKeyInHeader}}{{^isKeyInHeader}}"query"{{/isKeyInHeader}}, "{{keyParamName}}")
    {{/isApiKey}}
    {{#isBasic}}
        "{{name}}", HttpBasicAuth()
    {{/isBasic}}
    {{#isOAuth}}
        // TODO: comment out below as OAuth does not exist
        //"{{name}}", OAuth()
    {{/isOAuth}}
{{/authMethods}}

    }

    private val headerFactories : List<() -> Map<String, String>> = listOf(*headerFactory)

    /**
    * {@inheritDoc}
    */
    @Suppress("UNCHECKED_CAST")
    override fun <T> build(
        method: Int,
        url: String,
        body: Any?,
        headers: Map<String, String>?,
        params: Map<String, String>?,
        contentTypeForBody: String?,
        authNames: Array<String>?,
        type: Type,
        responseListener: Response.Listener<T>,
        errorListener: Response.ErrorListener
    ): Request<T> {
            val afterMarketHeaders = (headers?.toMutableMap() ?: mutableMapOf())
            // Factory built and aftermarket
            // Merge the after market headers on top of the base ones in case we are overriding per call auth
            val allHeaders = headerFactories.fold(afterMarketHeaders, {acc, factory -> (acc + factory.invoke()).toMutableMap() }   )
            val updatedUrl = if (!params.isNullOrEmpty()) {
              params.asSequence().fold("$url?") {acc, param ->
                "$acc${escapeString(param.key)}=${escapeString(param.value)}&"
              }.trimEnd('&')
            } else {
              url
            }

            return GsonRequest(
                method,
                updatedUrl,
                body,
                allHeaders,
                params?.toMutableMap(),
                contentTypeForBody,
                null,
                type,
                responseListener,
                errorListener)
    }
}
