# coding: utf-8

{{>partial_header}}

import unittest
from unittest.mock import patch

import urllib3

import {{packageName}}
from {{packageName}}.{{apiPackage}}.{{classFilename}} import {{classname}}  # noqa: E501
from {{packageName}} import configuration, schemas, api_client

from . import ApiTestMixin


class {{#with operations}}Test{{classname}}(ApiTestMixin, unittest.TestCase):
    """{{classname}} unit test stubs"""
    _configuration = configuration.Configuration()

    def setUp(self):
        used_api_client = api_client.ApiClient(configuration=self._configuration)
        self.api = {{classname}}(api_client=used_api_client)  # noqa: E501

    def tearDown(self):
        pass

{{#each operation}}
    def test_{{operationId}}(self):
        """Test case for {{{operationId}}}

{{#if summary}}
        {{{summary}}}  # noqa: E501
{{/if}}
        """
        from {{packageName}}.{{apiPackage}}.{{classFilename}}_endpoints import {{operationId}} as endpoint_module
{{#each responses}}
    {{#if @first}}
        response_status = {{code}}
{{#if content}}
{{#each content}}
        accept_content_type = '{{{@key}}}'

{{#if this.testCases}}

{{#each testCases}}
{{#with this }}
        # test_{{@key}}_{{#if valid}}passes{{else}}fails{{/if}}
        # {{description}}
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
{{#with data}}
                {{> model_templates/payload_renderer endChar='' }}
{{/with}}
            )
            mock_request.return_value = self.response(
                self.json_bytes(payload),
                status=response_status
            )
{{#if valid}}
            {{> api_test_partial }}

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, endpoint_module.{{schema.baseName}})
            deserialized_response_body = endpoint_module.{{schema.baseName}}._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            assert api_response.body == deserialized_response_body
{{else}}
            with self.assertRaises(({{packageName}}.ApiValueError, {{packageName}}.ApiTypeError)):
                self.api.{{operationId}}(
                    accept_content_types=(accept_content_type,)
                )
            self.assert_pool_manager_request_called_with(
                mock_request,
                self._configuration.host + '{{{path}}}',
                method='{{httpMethod}}',
                content_type=None,
                accept_content_type=accept_content_type,
            )
{{/if}}
{{/with}}

{{/each}}

{{/if}}
{{/each}}
{{else}}
        response_body = ''
{{/if}}
{{/if}}
{{/each}}
{{#if bodyParam}}
{{#with bodyParam}}
{{#if required}}
{{#each content}}
        content_type = '{{{@key}}}'
{{#if this.testCases}}

{{#each testCases}}
{{#with this }}
        # test_{{@key}}_{{#if valid}}passes{{else}}fails{{/if}}
        # {{description}}
        with patch.object(urllib3.PoolManager, 'request') as mock_request:
            payload = (
{{#with data}}
                {{> model_templates/payload_renderer endChar='' }}
{{/with}}
            )
{{#if valid}}
            body = endpoint_module.{{schema.baseName}}._from_openapi_data(
                payload,
                _configuration=self._configuration
            )
            mock_request.return_value = self.response(
                self.json_bytes(response_body),
                status=response_status
            )
            {{> api_test_partial }}

            assert isinstance(api_response.response, urllib3.HTTPResponse)
            assert isinstance(api_response.body, schemas.Unset)
{{else}}
            with self.assertRaises(({{packageName}}.ApiValueError, {{packageName}}.ApiTypeError)):
                body = endpoint_module.{{schema.baseName}}._from_openapi_data(
                    payload,
                    _configuration=self._configuration
                )
                self.api.{{operationId}}(body=body)
{{/if}}
{{/with}}

{{/each}}

{{/if}}
{{/each}}
{{/if}}
{{/with}}
{{else}}
        pass
    {{/if}}

{{/each}}
{{/with}}

if __name__ == '__main__':
    unittest.main()
