{{#or getRequiredVarsMap vars}}

{{/or}}
{{#if getRequiredVarsMap}}
{{#each getRequiredVarsMap}}
{{#with this}}
{{#unless nameInSnakeCase}}
{{#if complexType}}
{{baseName}}: '{{complexType}}'
{{else}}
{{#if schemaIsFromAdditionalProperties}}
{{baseName}}: MetaOapg.additional_properties
{{else}}
{{baseName}}: MetaOapg.properties.{{baseName}}
{{/if}}
{{/if}}
{{/unless}}
{{/with}}
{{/each}}
{{/if}}
{{#if vars}}
{{#each vars}}
{{#unless required}}
{{#unless nameInSnakeCase}}
{{#if complexType}}
{{baseName}}: '{{complexType}}'
{{else}}
{{baseName}}: MetaOapg.properties.{{baseName}}
{{/if}}
{{/unless}}
{{/unless}}
{{/each}}
{{/if}}
{{#if additionalProperties}}
{{#if getRequiredVarsMap}}
{{#each getRequiredVarsMap}}
{{#with this}}

@typing.overload
{{#if complexType}}
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> '{{complexType}}': ...
{{else}}
{{#if schemaIsFromAdditionalProperties}}
{{baseName}}: MetaOapg.additional_properties
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> MetaOapg.additional_properties: ...
{{else}}
{{#if nameInSnakeCase}}
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> MetaOapg.properties.{{name}}: ...
{{else}}
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> MetaOapg.properties.{{baseName}}: ...
{{/if}}
{{/if}}
{{/if}}
{{/with}}
{{/each}}
{{/if}}
{{#if vars}}
{{#each vars}}
{{#unless required}}

@typing.overload
{{#if complexType}}
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> '{{complexType}}': ...
{{else}}
{{#if nameInSnakeCase}}
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> MetaOapg.properties.{{name}}: ...
{{else}}
def __getitem__(self, name: typing.Literal["{{baseName}}"]) -> MetaOapg.properties.{{baseName}}: ...
{{/if}}
{{/if}}
{{/unless}}
{{/each}}
{{/if}}

def __getitem__(self, name: str) -> {{#with additionalProperties}}{{#if complexType}}'{{complexType}}'{{else}}MetaOapg.{{baseName}}{{/if}}{{/with}}:
    # dict_instance[name] accessor
    return super().__getitem__(name)
{{/if}}