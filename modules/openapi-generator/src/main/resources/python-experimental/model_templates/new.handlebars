def __new__(
    cls,
    *args: typing.Union[{{> model_templates/schema_python_types }}],
{{#unless isNull}}
{{#if getHasRequired}}
{{#each getRequiredVarsMap}}
{{#with this}}
{{#unless nameInSnakeCase}}
{{#if complexType}}
    {{baseName}}: '{{complexType}}',
{{else}}
    {{baseName}}: typing.Union[MetaOapg.properties.{{baseName}}, {{> model_templates/schema_python_types }}],
{{/if}}
{{/unless}}
{{/with}}
{{/each}}
{{/if}}
{{/unless}}
{{#each vars}}
{{#unless nameInSnakeCase}}
{{#unless getRequired}}
{{#if complexType}}
    {{baseName}}: typing.Union['{{complexType}}', schemas.Unset] = schemas.unset,
{{else}}
    {{baseName}}: typing.Union[MetaOapg.properties.{{baseName}}, {{> model_templates/schema_python_types }}schemas.Unset] = schemas.unset,
{{/if}}
{{/unless}}
{{/unless}}
{{/each}}
    _configuration: typing.Optional[schemas.Configuration] = None,
{{#with additionalProperties}}
{{#if complexType}}
    **kwargs: '{{complexType}}',
{{else}}
    **kwargs: typing.Union[MetaOapg.additional_properties, {{> model_templates/schema_python_types }}],
{{/if}}
{{/with}}
) -> '{{#if this.classname}}{{classname}}{{else}}{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}{{/if}}':
    return super().__new__(
        cls,
        *args,
{{#unless isNull}}
{{#if getHasRequired}}
{{#each getRequiredVarsMap}}
{{#with this}}
{{#unless nameInSnakeCase}}
        {{baseName}}={{baseName}},
{{/unless}}
{{/with}}
{{/each}}
{{/if}}
{{/unless}}
{{#each vars}}
{{#unless getRequired}}
{{#unless nameInSnakeCase}}
        {{baseName}}={{baseName}},
{{/unless}}
{{/unless}}
{{/each}}
        _configuration=_configuration,
{{#with additionalProperties}}
        **kwargs,
{{/with}}
    )
