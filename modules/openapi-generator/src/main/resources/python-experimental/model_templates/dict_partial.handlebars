{{#if getRequiredVarsMap}}
required = {
{{#each getRequiredVarsMap}}
    "{{{@key}}}",
{{/each}}
}
{{/if}}
{{#if getHasDiscriminatorWithNonEmptyMapping}}
{{#with discriminator}}
{{#each mappedModels}}
{{#if @first}}

@classmethod
@property
def discriminator(cls):
    return {
        '{{{propertyBaseName}}}': {
{{/if}}
            '{{mappingName}}': {{{modelName}}},
{{#if @last}}
        }
    }
{{/if}}
{{/each}}
{{/with}}
{{/if}}
{{#if vars}}
class properties:
{{#each vars}}
{{#if complexType}}

    @classmethod
    @property
    def {{baseName}}(cls) -> typing.Type['{{complexType}}']:
        return {{complexType}}
{{else}}
    {{> model_templates/schema }}
{{/if}}
{{/each}}
    __annotations__ = {
{{#each vars}}
{{#if nameInSnakeCase}}
        "{{{baseName}}}": {{name}},
{{else}}
        "{{{baseName}}}": {{baseName}},
{{/if}}
{{/each}}
    }
{{/if}}
{{#with additionalProperties}}
{{#if complexType}}

@classmethod
@property
def {{baseName}}(cls) -> typing.Type['{{complexType}}']:
    return {{complexType}}
{{else}}
{{> model_templates/schema }}
{{/if}}
{{/with}}
