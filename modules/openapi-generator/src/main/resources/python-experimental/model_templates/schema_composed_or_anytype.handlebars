

class {{#if this.classname}}{{classname}}{{else}}{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}{{/if}}(
{{#if hasValidation}}
    {{> model_templates/validations }}
{{/if}}
{{#if getIsAnyType}}
    {{#if composedSchemas}}
    ComposedSchema
    {{else}}
    AnyTypeSchema
    {{/if}}
{{else}}
    {{#if getHasMultipleTypes}}
    _SchemaTypeChecker(typing.Union[{{#if isArray}}tuple, {{/if}}{{#if isMap}}frozendict, {{/if}}{{#if isNull}}none_type, {{/if}}{{#if isString}}str, {{/if}}{{#if isByteArray}}str, {{/if}}{{#if isUnboundedInteger}}Decimal, {{/if}}{{#if isShort}}Decimal, {{/if}}{{#if isLong}}Decimal, {{/if}}{{#if isFloat}}Decimal, {{/if}}{{#if isDouble}}Decimal, {{/if}}{{#if isNumber}}Decimal, {{/if}}{{#if isDate}}str, {{/if}}{{#if isDateTime}}str, {{/if}}{{#if isBoolean}}bool, {{/if}}]),
    {{/if}}
    {{#if composedSchemas}}
    ComposedBase,
    {{/if}}
    {{#if isEnum}}
    {{> model_templates/enum_value_to_name }}
    {{/if}}
    {{> model_templates/xbase_schema }}
{{/if}}
):
{{#if this.classname}}
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
{{#if description}}

    {{{unescapedDescription}}}
{{/if}}

    Attributes:
{{#each vars}}
    {{baseName}} ({{#if isArray}}tuple,{{/if}}{{#if isBoolean}}bool,{{/if}}{{#if isDate}}date,{{/if}}{{#if isDateTime}}datetime,{{/if}}{{#if isMap}}dict,{{/if}}{{#if isFloat}}float,{{/if}}{{#if isNumber}}float,{{/if}}{{#if isUnboundedInteger}}int,{{/if}}{{#if isShort}}int,{{/if}}{{#if isLong}}int,{{/if}}{{#if isString}}str,{{/if}}{{#if isByteArray}}str,{{/if}}{{#if isNull}} none_type,{{/if}}): {{#if description}}{{description}}{{/if}}
{{/each}}
{{#if hasValidation}}
    _validations (dict): the validations which apply to the current Schema
        The value is a dict that stores validations for max_length, min_length, max_items,
        min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
        inclusive_minimum, and regex.
{{/if}}
{{#with additionalProperties}}
    _additional_properties (Schema): the definition used for additional properties
        that are not defined in _properties
{{/with}}
{{#if getHasDiscriminatorWithNonEmptyMapping}}
    _discriminator(cls) -> dict: the key is the required discriminator propertyName
        the value is a dict mapping from a string name to the corresponding Schema class
{{/if}}
    """
{{/if}}
{{#or isMap isAnyType}}
{{> model_templates/dict_partial }}
{{/or}}
{{#if composedSchemas}}

    {{> model_templates/composed_schemas }}
{{/if}}
{{#if isEnum}}
    {{> model_templates/enums }}
{{/if}}

    {{> model_templates/new }}
