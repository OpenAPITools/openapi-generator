

class {{#if this.classname}}{{classname}}{{else}}{{#if nameInSnakeCase}}{{name}}{{else}}{{baseName}}{{/if}}{{/if}}(
{{#if getIsAnyType}}
    {{#if composedSchemas}}
    schemas.ComposedSchema,
    {{else}}
    schemas.AnyTypeSchema,
    {{/if}}
{{else}}
    {{#if getHasMultipleTypes}}
    schemas.SchemaTypeCheckerClsFactory(typing.Union[{{#if isArray}}tuple, {{/if}}{{#if isMap}}frozendict.frozendict, {{/if}}{{#if isNull}}schemas.NoneClass, {{/if}}{{#or isUnboundedInteger isShort isLong isFloat isDouble isNumber}}decimal.Decimal, {{/or}}{{#or isString isByteArray isDate isDateTime isDecimal}}str, {{/or}}{{#if isBoolean}}schemas.BoolClass, {{/if}}]),
    {{/if}}
    {{#if composedSchemas}}
    schemas.ComposedBase,
    {{/if}}
    {{#if isEnum}}
    {{> model_templates/enum_value_to_name }}
    {{/if}}
    {{> model_templates/xbase_schema }}
{{/if}}
):
{{#if this.classname}}
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
{{#if description}}

    {{{unescapedDescription}}}
{{/if}}
    """
{{/if}}
{{#or hasValidation composedSchemas isMap isAnyType getItems}}


    class MetaOapg:
{{#with items}}
{{#if complexType}}

        @classmethod
        @property
        def {{baseName}}(cls) -> typing.Type['{{complexType}}']:
            return {{complexType}}
{{else}}
        {{> model_templates/schema }}
{{/if}}
{{/with}}
{{#or isMap isAnyType}}
        {{> model_templates/dict_partial }}
{{/or}}
{{#unless isStub}}
{{#if hasValidation}}
        {{> model_templates/validations }}
{{/if}}
{{/unless}}
{{#if composedSchemas}}
        {{> model_templates/composed_schemas }}
{{/if}}
{{/or}}
{{#if isEnum}}
    {{> model_templates/enums }}
{{/if}}

    {{> model_templates/property_type_hints }}

    {{> model_templates/new }}
