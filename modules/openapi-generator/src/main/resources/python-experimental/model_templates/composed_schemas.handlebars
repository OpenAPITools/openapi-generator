{{#with composedSchemas}}
{{#each allOf}}
{{#unless complexType}}
{{> model_templates/schema }}
{{/unless}}
{{/each}}
{{#each oneOf}}
{{#unless complexType}}
{{> model_templates/schema }}
{{/unless}}
{{/each}}
{{#each anyOf}}
{{#unless complexType}}
{{> model_templates/schema }}
{{/unless}}
{{/each}}
{{#with not}}
{{#unless complexType}}
{{> model_templates/schema }}
{{/unless}}
{{/with}}
{{/with}}
{{#with composedSchemas}}
{{#if allOf}}

@classmethod
@property
@functools.cache
def _all_of(cls):
    # we need this here to make our import statements work
    # we must store _composed_schemas in here so the code is only run
    # when we invoke this method. If we kept this at the class
    # level we would get an error because the class level
    # code would be run when this module is imported, and these composed
    # classes don't exist yet because their module has not finished
    # loading
    return [
{{#each allOf}}
{{#if complexType}}
        {{complexType}},
{{else}}
    {{#if nameInSnakeCase}}
        cls.{{name}},
    {{else}}
        cls.{{baseName}},
    {{/if}}
{{/if}}
{{/each}}
    ]
{{/if}}
{{#if oneOf}}

@classmethod
@property
@functools.cache
def _one_of(cls):
    # we need this here to make our import statements work
    # we must store _composed_schemas in here so the code is only run
    # when we invoke this method. If we kept this at the class
    # level we would get an error because the class level
    # code would be run when this module is imported, and these composed
    # classes don't exist yet because their module has not finished
    # loading
    return [
{{#each oneOf}}
{{#if complexType}}
        {{complexType}},
{{else}}
    {{#if nameInSnakeCase}}
        cls.{{name}},
    {{else}}
        cls.{{baseName}},
    {{/if}}
{{/if}}
{{/each}}
    ]
{{/if}}
{{#if anyOf}}

@classmethod
@property
@functools.cache
def _any_of(cls):
    # we need this here to make our import statements work
    # we must store _composed_schemas in here so the code is only run
    # when we invoke this method. If we kept this at the class
    # level we would get an error because the class level
    # code would be run when this module is imported, and these composed
    # classes don't exist yet because their module has not finished
    # loading
    return [
{{#each anyOf}}
{{#if complexType}}
        {{complexType}},
{{else}}
    {{#if nameInSnakeCase}}
        cls.{{name}},
    {{else}}
        cls.{{baseName}},
    {{/if}}
{{/if}}
{{/each}}
    ]
{{/if}}
{{#if not}}

@classmethod
@property
@functools.cache
def _not(cls):
    # we need this here to make our import statements work
    # we must store _composed_schemas in here so the code is only run
    # when we invoke this method. If we kept this at the class
    # level we would get an error because the class level
    # code would be run when this module is imported, and these composed
    # classes don't exist yet because their module has not finished
    # loading
    return (
{{#with not}}
{{#if complexType}}
        {{complexType}}
{{else}}
    {{#if nameInSnakeCase}}
        cls.{{name}}
    {{else}}
        cls.{{baseName}}
    {{/if}}
{{/if}}
{{else}}
        None
{{/with}}
    )
{{/if}}
{{/with}}
