{{#if vars}}
{{#each vars}}

{{#unless @last}}
@typing.overload
{{/unless}}
{{#if complexType}}
def __getitem__(self, name: typing.Literal["{{{baseName}}}"]) -> {{#unless required}}typing.Union[{{/unless}}'{{complexType}}'{{#unless required}}, schemas.Unset]{{/unless}}:{{#unless @last}} ...{{/unless}}
{{else}}
{{#if nameInSnakeCase}}
def __getitem__(self, name: typing.Literal["{{{baseName}}}"]) -> {{#unless required}}typing.Union[{{/unless}}MetaOapg.properties.{{name}}{{#unless required}}, schemas.Unset]{{/unless}}:{{#unless @last}} ...{{/unless}}
{{else}}
def __getitem__(self, name: typing.Literal["{{{baseName}}}"]) -> {{#unless required}}typing.Union[{{/unless}}MetaOapg.properties.{{baseName}}{{#unless required}}, schemas.Unset]{{/unless}}:{{#unless @last}} ...{{/unless}}
{{/if}}
{{/if}}
{{#if @last}}
    # dict_instance[name] accessor
    return super().__getitem__(name)
{{/if}}
{{/each}}

{{/if}}