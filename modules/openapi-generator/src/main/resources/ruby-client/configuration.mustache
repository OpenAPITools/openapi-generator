=begin
{{> api_info}}
=end

module {{moduleName}}
  class Configuration
    # Defines url scheme
    attr_accessor :scheme

    # Defines url host
    attr_accessor :host

    # Defines url base path
    attr_accessor :base_path

    # Define server configuration index
    attr_accessor :server_index

    # Define server operation configuration index
    attr_accessor :server_operation_index

    # Default server variables
    attr_accessor :server_variables

    # Default server operation variables
    attr_accessor :server_operation_variables

    # Defines API keys used with API Key authentications.
    #
    # @return [Hash] key: parameter name, value: parameter value (API key)
    #
    # @example parameter name is "api_key", API key is "xxx" (e.g. "api_key=xxx" in query string)
    #   config.api_key['api_key'] = 'xxx'
    attr_accessor :api_key

    # Defines API key prefixes used with API Key authentications.
    #
    # @return [Hash] key: parameter name, value: API key prefix
    #
    # @example parameter name is "Authorization", API key prefix is "Token" (e.g. "Authorization: Token xxx" in headers)
    #   config.api_key_prefix['api_key'] = 'Token'
    attr_accessor :api_key_prefix

    # Defines the username used with HTTP basic authentication.
    #
    # @return [String]
    attr_accessor :username

    # Defines the password used with HTTP basic authentication.
    #
    # @return [String]
    attr_accessor :password

    # Defines the access token (Bearer) used with OAuth2.
    attr_accessor :access_token

    # Set this to enable/disable debugging. When enabled (set to true), HTTP request/response
    # details will be logged with `logger.debug` (see the `logger` attribute).
    # Default to false.
    #
    # @return [true, false]
    attr_accessor :debugging

    # Defines the logger used for debugging.
    # Default to `Rails.logger` (when in Rails) or logging to STDOUT.
    #
    # @return [#debug]
    attr_accessor :logger

    # Defines the temporary folder to store downloaded files
    # (for API endpoints that have file response).
    # Default to use `Tempfile`.
    #
    # @return [String]
    attr_accessor :temp_folder_path

    # The time limit for HTTP request in seconds.
    # Default to 0 (never times out).
    attr_accessor :timeout

    # Set this to false to skip client side validation in the operation.
    # Default to true.
    # @return [true, false]
    attr_accessor :client_side_validation

{{^isFaraday}}
{{> configuration_tls_typhoeus_partial}}
{{/isFaraday}}
{{#isFaraday}}
{{> configuration_tls_faraday_partial}}
{{/isFaraday}}
    # Set this to customize parameters encoding of array parameter with multi collectionFormat.
    # Default to nil.
    #
    # @see The params_encoding option of Ethon. Related source code:
    # https://github.com/typhoeus/ethon/blob/master/lib/ethon/easy/queryable.rb#L96
    attr_accessor :params_encoding

    attr_accessor :inject_format

    attr_accessor :force_ending_format

    def initialize
      @scheme = '{{scheme}}'
      @host = '{{host}}{{#port}}:{{{.}}}{{/port}}'
      @base_path = '{{contextPath}}'
      @server_index = 0
      @server_operation_index = {}
      @server_variables = {}
      @server_operation_variables = {}
      @api_key = {}
      @api_key_prefix = {}
      @timeout = 0
      @client_side_validation = true
      {{#isFaraday}}
      @ssl_verify = true
      @ssl_verify_mode = nil
      @ssl_ca_file = nil
      @ssl_client_cert = nil
      @ssl_client_key = nil
      {{/isFaraday}}
      {{^isFaraday}}
      @verify_ssl = true
      @verify_ssl_host = true
      @params_encoding = nil
      @cert_file = nil
      @key_file = nil
      {{/isFaraday}}
      @debugging = false
      @inject_format = false
      @force_ending_format = false
      @logger = defined?(Rails) ? Rails.logger : Logger.new(STDOUT)

      yield(self) if block_given?
    end

    # The default Configuration object.
    def self.default
      @@default ||= Configuration.new
    end

    def configure
      yield(self) if block_given?
    end

    def scheme=(scheme)
      # remove :// from scheme
      @scheme = scheme.sub(/:\/\//, '')
    end

    def host=(host)
      # remove http(s):// and anything after a slash
      @host = host.sub(/https?:\/\//, '').split('/').first
    end

    def base_path=(base_path)
      # Add leading and trailing slashes to base_path
      @base_path = "/#{base_path}".gsub(/\/+/, '/')
      @base_path = '' if @base_path == '/'
    end

    # Returns base URL for specified operation based on server settings
    def base_url(operation = nil)
      index = server_operation_index.fetch(operation, server_index)
      return "#{scheme}://#{[host, base_path].join('/').gsub(/\/+/, '/')}".sub(/\/+\z/, '') if index == nil

      server_url(index, server_operation_variables.fetch(operation, server_variables), operation_server_settings[operation])
    end

    # Gets API key (with prefix if set).
    # @param [String] param_name the parameter name of API key auth
    def api_key_with_prefix(param_name)
      if @api_key_prefix[param_name]
        "#{@api_key_prefix[param_name]} #{@api_key[param_name]}"
      else
        @api_key[param_name]
      end
    end

    # Gets Basic Auth token string
    def basic_auth_token
      'Basic ' + ["#{username}:#{password}"].pack('m').delete("\r\n")
    end

    # Returns Auth Settings hash for api client.
    def auth_settings
      {
{{#authMethods}}
{{#isApiKey}}
        '{{name}}' =>
          {
            type: 'api_key',
            in: {{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{#isKeyInQuery}}'query'{{/isKeyInQuery}},
            key: '{{keyParamName}}',
            value: api_key_with_prefix('{{keyParamName}}')
          },
{{/isApiKey}}
{{#isBasic}}
{{#isBasicBasic}}
        '{{name}}' =>
          {
            type: 'basic',
            in: 'header',
            key: 'Authorization',
            value: basic_auth_token
          },
{{/isBasicBasic}}
{{#isBasicBearer}}
        '{{name}}' =>
          {
            type: 'bearer',
            in: 'header',
            {{#bearerFormat}}
            format: '{{{.}}}',
            {{/bearerFormat}}
            key: 'Authorization',
            value: "Bearer #{access_token}"
          },
{{/isBasicBearer}}
{{/isBasic}}
{{#isOAuth}}
        '{{name}}' =>
          {
            type: 'oauth2',
            in: 'header',
            key: 'Authorization',
            value: "Bearer #{access_token}"
          },
{{/isOAuth}}
{{/authMethods}}
      }
    end

    # Returns an array of Server setting
    def server_settings
      [
      {{#servers}}
        {
          url: "{{{url}}}",
          description: "{{{description}}}{{^description}}No description provided{{/description}}",
          {{#variables}}
          {{#-first}}
          variables: {
          {{/-first}}
            {{{name}}}: {
                description: "{{{description}}}{{^description}}No description provided{{/description}}",
                default_value: "{{{defaultValue}}}",
                {{#enumValues}}
                {{#-first}}
                enum_values: [
                {{/-first}}
                  "{{{.}}}"{{^-last}},{{/-last}}
                {{#-last}}
                ]
                {{/-last}}
                {{/enumValues}}
              }{{^-last}},{{/-last}}
            {{#-last}}
            }
            {{/-last}}
          {{/variables}}
        }{{^-last}},{{/-last}}
      {{/servers}}
      ]
    end

    def operation_server_settings
      {
        {{#apiInfo}}
        {{#apis}}
        {{#operations}}
        {{#operation}}
        {{#servers}}
        {{#-first}}
        "{{{classname}}}.{{{nickname}}}": [
        {{/-first}}
          {
          url: "{{{url}}}",
          description: "{{{description}}}{{^description}}No description provided{{/description}}",
          {{#variables}}
          {{#-first}}
          variables: {
          {{/-first}}
            {{{name}}}: {
                description: "{{{description}}}{{^description}}No description provided{{/description}}",
                default_value: "{{{defaultValue}}}",
                {{#enumValues}}
                {{#-first}}
                enum_values: [
                {{/-first}}
                  "{{{.}}}"{{^-last}},{{/-last}}
                {{#-last}}
                ]
                {{/-last}}
                {{/enumValues}}
              }{{^-last}},{{/-last}}
            {{#-last}}
            }
            {{/-last}}
          {{/variables}}
          }{{^-last}},{{/-last}}
        {{#-last}}
        ],
        {{/-last}}
        {{/servers}}
        {{/operation}}
        {{/operations}}
        {{/apis}}
        {{/apiInfo}}
      }
    end

    # Returns URL based on server settings
    #
    # @param index array index of the server settings
    # @param variables hash of variable and the corresponding value
    def server_url(index, variables = {}, servers = nil)
      servers = server_settings if servers == nil

      # check array index out of bound
      if (index < 0 || index >= servers.size)
        fail ArgumentError, "Invalid index #{index} when selecting the server. Must be less than #{servers.size}"
      end

      server = servers[index]
      url = server[:url]

      return url unless server.key? :variables

      # go through variable and assign a value
      server[:variables].each do |name, variable|
        if variables.key?(name)
          if (!server[:variables][name].key?(:enum_values) || server[:variables][name][:enum_values].include?(variables[name]))
            url.gsub! "{" + name.to_s + "}", variables[name]
          else
            fail ArgumentError, "The variable `#{name}` in the server URL has invalid value #{variables[name]}. Must be #{server[:variables][name][:enum_values]}."
          end
        else
          # use default value
          url.gsub! "{" + name.to_s + "}", server[:variables][name][:default_value]
        end
      end

      url
    end
  end
end
