## {{npmName}}@{{npmVersion}}

### Building

To install the required dependencies and to build the typescript sources run:
```
npm install
npm run build
```

### publishing

First build the package then run ```npm publish dist``` (don't forget to specify the `dist` folder!)

### consuming

Navigate to the folder of your consuming project and run one of next commands.

_published:_

```
npm install {{npmName}}@{{npmVersion}} --save
```

_without publishing (not recommended):_

```
npm install PATH_TO_GENERATED_PACKAGE/dist.tgz --save
```

_It's important to take the tgz file, otherwise you'll get trouble with links on windows_

_using `npm link`:_

In PATH_TO_GENERATED_PACKAGE/dist:
```
npm link
```

In your project:
```
npm link {{npmName}}
```

__Note for Windows users:__ The Angular CLI has troubles to use linked npm packages.
Please refer to this issue https://github.com/angular/angular-cli/issues/8284 for a solution / workaround.
Published packages are not effected by this issue.


#### General usage

In your Angular project:


```
// without configuring providers
import { {{apiModuleClassName}} } from '{{npmName}}';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
    imports: [
        {{apiModuleClassName}},
        // make sure to import the HttpClientModule in the AppModule only,
        // see https://github.com/angular/angular/issues/20575
        HttpClientModule
    ],
    declarations: [ AppComponent ],
    providers: [],
    bootstrap: [ AppComponent ]
})
export class AppModule {}
```

```
// configuring providers
import { {{apiModuleClassName}}, {{configurationClassName}}, {{configurationParametersInterfaceName}} } from '{{npmName}}';

export function apiConfigFactory (): {{configurationClassName}} {
  const params: {{configurationParametersInterfaceName}} = {
    // set configuration parameters here.
  }
  return new {{configurationClassName}}(params);
}

@NgModule({
    imports: [ {{apiModuleClassName}}.forRoot(apiConfigFactory) ],
    declarations: [ AppComponent ],
    providers: [],
    bootstrap: [ AppComponent ]
})
export class AppModule {}
```

```
// configuring providers with an authentication service that manages your access tokens
import { {{apiModuleClassName}}, {{configurationClassName}} } from '{{npmName}}';

@NgModule({
    imports: [ {{apiModuleClassName}} ],
    declarations: [ AppComponent ],
    providers: [
      {
        provide: {{configurationClassName}},
        useFactory: (authService: AuthService) => new {{configurationClassName}}(
          {
            basePath: environment.apiUrl,
            accessToken: authService.getAccessToken.bind(authService)
          }
        ),
        deps: [AuthService],
        multi: false
      }
    ],
    bootstrap: [ AppComponent ]
})
export class AppModule {}
```

```
import { DefaultApi } from '{{npmName}}';

export class AppComponent {
    constructor(private apiGateway: DefaultApi) { }
}
```

Note: The {{apiModuleClassName}} is restricted to being instantiated once app wide.
This is to ensure that all services are treated as singletons.

#### Using multiple OpenAPI files / APIs / {{apiModuleClassName}}s
In order to use multiple `{{apiModuleClassName}}s` generated from different OpenAPI files,
you can create an alias name when importing the modules
in order to avoid naming conflicts:
```
import { {{apiModuleClassName}} } from 'my-api-path';
import { {{apiModuleClassName}} as OtherApiModule } from 'my-other-api-path';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [
    {{apiModuleClassName}},
    OtherApiModule,
    // make sure to import the HttpClientModule in the AppModule only,
    // see https://github.com/angular/angular/issues/20575
    HttpClientModule
  ]
})
export class AppModule {

}
```


### Set service base path
If different than the generated base path, during app bootstrap, you can provide the base path to your service.

```
import { BASE_PATH } from '{{npmName}}';

bootstrap(AppComponent, [
    { provide: BASE_PATH, useValue: 'https://your-web-service.com' },
]);
```
or

```
import { BASE_PATH } from '{{npmName}}';

@NgModule({
    imports: [],
    declarations: [ AppComponent ],
    providers: [ provide: BASE_PATH, useValue: 'https://your-web-service.com' ],
    bootstrap: [ AppComponent ]
})
export class AppModule {}
```


#### Using @angular/cli
First extend your `src/environments/*.ts` files by adding the corresponding base path:

```
export const environment = {
  production: false,
  API_BASE_PATH: 'http://127.0.0.1:8080'
};
```

In the src/app/app.module.ts:
```
import { BASE_PATH } from '{{npmName}}';
import { environment } from '../environments/environment';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [ ],
  providers: [{ provide: BASE_PATH, useValue: environment.API_BASE_PATH }],
  bootstrap: [ AppComponent ]
})
export class AppModule { }
```

### Customizing parameter encoding
Multiple steps are required to enable this feature: enable it via cli parameter and customize the api.service.mustache template.

#### Enabling the feature
Set the generator parameter `paramExpansionStrategy` to `custom` to enable this feature.

Example CLI option: `-t paramExpansionStrategy=custom`.

### Customizing parameter encoding
Multiple steps are required to enable this feature: enable it via cli parameter and customize the api.service.mustache template.

#### Enabling the feature
Set the generator parameter `paramExpansionStrategy` to `custom` to enable this feature.

Example CLI option: `-t paramExpansionStrategy=custom`.

### Customizing parameter encoding
Multiple steps are required to enable this feature: enable it via cli parameter and customize the api.service.mustache template.

#### Enabling the feature
Set the generator parameter `paramExpansionStrategy` to `custom` to enable this feature.

Example CLI option: `-t paramExpansionStrategy=custom`.

### Customizing parameter encoding
Multiple steps are required to enable this feature: enable it via cli parameter and customize the api.service.mustache template.

#### Enabling the feature
Set the generator parameter `paramExpansionStrategy` to `custom` to enable this feature.

Example CLI option: `-t paramExpansionStrategy=custom`.

#### Customizing the mustache template
General information about customizing mustache templates is found in the
["Customization"](https://openapi-generator.tech/docs/customization) chapter of the docs.

First, extract templates using the `author template` options of openapi-generator cli.

Example:
```bash
openapi-generator-cli author template -g typescript-angular
```
This generates *all* mustache templates to the `out` directory.
For this customization, we only need `api.service.mustache`.

In `api.service.mustache` you will find the method `private encodePathParameter(parameter: Parameter): string`.

Customize this to your liking and re-generate your code with this modified template (see "Customization" link above).

There are ready-to-use libaries readily available in npm for parameter encoding (e.g.: [@honoluluhenk/http-param-expander](https://www.npmjs.com/package/@honoluluhenk/http-param-expander))

Example code modification:
```typescript
class MyGeneratedService {
    // all the other generated utility methods are here

    // @ts-ignore
    private encodePathParameter(parameter: Parameter): string {
      switch(parameter.style) {
        case 'matrix':
          return this.myMatrixParameterEncoder(parameter);
        default:
          return encodeURIComponent(String(parameter.value));
      }
    }

    // all generated service methods are here
}
```

Example generator command line:
```bash
openapi-generator-cli generate \
 -g typescript-angular \
 -t paramExpansionStrategy=custom \
 -t path/to/customized-templates \
 -i petstore.yaml
```
