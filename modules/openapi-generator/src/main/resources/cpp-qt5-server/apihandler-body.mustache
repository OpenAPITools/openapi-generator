{{>licenseInfo}}
#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "{{prefix}}Helpers.h"
#include "{{prefix}}ModelFactory.h"
#include "{{prefix}}QObjectWrapper.h"

#include "{{classname}}.h"

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

{{classname}}::{{classname}}(QObject *parent): QObject(parent){

}
{{classname}}::~{{classname}}(){

}

{{#operations}}{{#operation}}void {{classname}}::{{nickname}}(QString pathparam, QHttpEngine::Socket::QueryStringMap queries, QString path, QHttpEngine::Socket::Method method, QHttpEngine::Socket::HeaderMap headers, QHostAddress peer, QHttpEngine::Socket *socket){
    qDebug() << "{{{basePathWithoutHost}}}{{{path}}}";
    
    {{#queryParams}}{{queryParam}}{{^isContainer}}{{#isString}}
    QString {{paramName}};{{/isString}}{{^isString}}{{dataType}} {{paramName}};{{/isString}}   
    if(queries.keys().contains("{{paramName}}")){
        toValue(queries.value("{{paramName}}"), &{{paramName}});
    }
    {{/isContainer}}{{#isListContainer}}{{/isListContainer}}{{queryParam}}{{/queryParams}}
    {{#pathParams}}{{#isString}}
    QString {{paramName}};{{/isString}}{{^isString}}{{dataType}} {{paramName}};{{/isString}}   
    toValue(pathparam, &{{paramName}});
    {{/pathParams}}{{#bodyParams}} {{#bodyParam}}
    {{#isListContainer}}
    auto request = new {{baseType}}<{{items.baseType}}*>;
    QJsonDocument doc;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            {{items.baseType}}* o = new {{items.baseType}}();
            QJsonObject jv = obj.toObject();
            QJsonObject * ptr = (QJsonObject*)&jv;
            o->fromJsonObject(*ptr);
            auto wrapper = new {{prefix}}QObjectWrapper<{{items.baseType}}*> (o);
            wrapper->deleteLater();
            request->append(o);
        }
    }
    auto wrapper = new {{prefix}}QObjectWrapper<{{baseType}}<{{items.baseType}}*>*> (request);
    wrapper->deleteLater();
    {{/isListContainer}}
    {{^isListContainer}}
    {{^isMapContainer}}
    {{#isPrimitive}}
    {{{baseType}}} request;
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();  
    {{#isByteArray}}auto wrapper = new {{prefix}}QObjectWrapper<{{{baseType}}}> (request);
    wrapper->deleteLater();{{/isByteArray}}
    {{#isDateTime}}auto wrapper = new {{prefix}}QObjectWrapper<{{{baseType}}}> (request);
    wrapper->deleteLater();{{/isDateTime}}
    {{#isDate}}auto wrapper = new {{prefix}}QObjectWrapper<{{{baseType}}}> (request);
    wrapper->deleteLater();{{/isDate}}
    {{#isString}}auto wrapper = new {{prefix}}QObjectWrapper<{{{baseType}}}> (request);
    wrapper->deleteLater();{{/isString}}
    setValue(&request, obj, QString("{{{baseType}}}")), QString("{{{baseType}}}")))
    {{/isPrimitive}}
    {{/isMapContainer}}
    {{#isMapContainer}}
    {{{dataType}}}  request;
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    auto request = new {{baseType}}<QString, {{items.baseType}}*>();    
    foreach(QString key, obj.keys()) {
        {{baseType}} val;
        setValue(&val, obj[key], "{{baseType}}", QString());
        request->insert(key, val);
    }
    {{/isMapContainer}}
    {{^isMapContainer}}
    {{^isPrimitive}}
    QJsonDocument doc;
    socket->readJson(doc);
    {{{dataType}}} *request = static_cast<{{{dataType}}}*>(create(QString(doc.toJson(QJsonDocument::Compact)), QString("{{{baseType}}}")));
    auto wrapper = new {{prefix}}QObjectWrapper<{{{dataType}}}*> (request);
    wrapper->deleteLater();
    {{/isPrimitive}}
    {{/isMapContainer}}
    {{/isListContainer}}        
    {{/bodyParam}}{{/bodyParams}}

    // Do something

    foreach(QString key, this->defaultHeaders.keys()) {
        socket->setHeader(key.toUtf8(), this->defaultHeaders.value(key).toUtf8());
    }
}
{{/operation}}{{/operations}}  

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}