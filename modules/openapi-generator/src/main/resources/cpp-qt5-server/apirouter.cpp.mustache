{{>licenseInfo}}
#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QRegularExpression>

#include "{{prefix}}apirouter.h"
{{#apiInfo}}{{#apis}}{{#operations}}#include "{{classname}}.h"
{{/operations}}{{/apis}}{{/apiInfo}}

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

inline QHttpEngine::Socket::Method toQHttpEngineMethod(QString method){

    if( method == QString("OPTIONS"))
        return QHttpEngine::Socket::Method::OPTIONS;
    if( method == QString("GET"))
        return QHttpEngine::Socket::Method::GET;
    if( method == QString("HEAD"))
        return QHttpEngine::Socket::Method::HEAD;
    if( method == QString("POST"))
        return QHttpEngine::Socket::Method::POST;
    if( method == QString("PUT"))
        return QHttpEngine::Socket::Method::PUT;
    if( method == QString("DELETE"))
        return QHttpEngine::Socket::Method::DELETE;
    if( method == QString("TRACE"))
        return QHttpEngine::Socket::Method::TRACE;
    if( method == QString("CONNECT"))
        return QHttpEngine::Socket::Method::CONNECT;

     return static_cast<QHttpEngine::Socket::Method>(-1);
}

ApiRouter::ApiRouter(QObject *parent) : QObject(parent){

}
ApiRouter::~ApiRouter(){
    qDebug() << "~ApiRouter()";
}

void ApiRouter::onNewRequest(QHttpEngine::Socket *socket){
    auto queries = socket->queryString();
    auto rqpath  = socket->path();
    auto method =  socket->method();
    auto headers = socket->headers();
    auto peer = socket->peerAddress();
    qDebug() << rqpath;
    socket->setStatusCode(QHttpEngine::Socket::OK);
    do{ {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
        {            
            {{^pathParams}}if((toQHttpEngineMethod("{{httpMethod}}") == method) && (QString::compare("{{{basePathWithoutHost}}}{{{path}}}", rqpath, Qt::CaseInsensitive) == 0)){
                {{classname}} {{classname}}Obj;
                QString pathparam = QString("");
                {{classname}}Obj.{{nickname}}(pathparam, queries, rqpath, method, headers, peer, socket);
                break;
            } {{/pathParams}}{{#pathParams}}QString completePath("{{{basePathWithoutHost}}}{{{path}}}");
            QString {{paramName}}PathParam("{"); 
            {{paramName}}PathParam.append("{{baseName}}").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace({{paramName}}PathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(rqpath);
            if ((toQHttpEngineMethod("{{httpMethod}}") == method) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                {{classname}} {{classname}}Obj;
                {{classname}}Obj.{{nickname}}(pathparam, queries, rqpath, method, headers, peer, socket);
                break; 
            }{{/pathParams}}
        }{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
        socket->setStatusCode(QHttpEngine::Socket::NotFound);
        if(socket->isOpen()){
            socket->writeHeaders();
            socket->close();
        }
        return;   
    } while(false);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
    return;
}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
