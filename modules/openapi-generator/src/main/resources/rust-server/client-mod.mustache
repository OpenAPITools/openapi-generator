use crate::{models, headers::*};
use async_trait::async_trait;
use bytes::Buf;
use headers::HeaderMapExt;
use hyper;
use hyper::Uri;
use hyper::service::Service;
use percent_encoding::{utf8_percent_encode, AsciiSet, CONTROLS};
use futures::{Stream, StreamExt, TryFutureExt, TryStreamExt};
use std::borrow::Cow;
use std::io::{BufReader, Read, Error, ErrorKind};
use std::error;
use std::fmt;
use std::fs::File;
use std::future::Future;
use std::path::Path;
use std::sync::Arc;
use std::str;
use std::str::FromStr;
use std::string::ToString;

{{#apiUsesMultipart}}
use mime::Mime;
use std::io::Cursor; 
use multipart::client::lazy::Multipart;
{{/apiUsesMultipart}}
use crate::mimetypes;
use serde_json;
{{#usesXml}}
use serde_xml_rs;
{{/usesXml}}

#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};

use openapi_context::{ApiError, XSpanId, Has, AuthData};

use crate::{
    Api
    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}},
    {{{operationId}}}Response{{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}
 };

const ID_ENCODE_SET: &AsciiSet = &CONTROLS.add(b'|');
//define_encode_set! {
//    /// This encode set is used for object IDs
//    ///
//    /// Aside from the special characters defined in the `PATH_SEGMENT_ENCODE_SET`,
//    /// the vertical bar (|) is encoded.
//    pub ID_ENCODE_SET = [PATH_SEGMENT_ENCODE_SET] | {'|'}
//}

/// Convert input into a base path, e.g. "http://example:123". Also checks the scheme as it goes.
fn into_base_path(input: &str, correct_scheme: Option<&'static str>) -> Result<String, ClientInitError> {
    // First convert to Uri, since a base path is a subset of Uri.
    let uri = Uri::from_str(input).map_err(ClientInitError::InvalidUri)?;

    let scheme = uri.scheme_str().ok_or(ClientInitError::InvalidScheme)?;

    // Check the scheme if necessary
    if let Some(correct_scheme) = correct_scheme {
        if scheme != correct_scheme {
            return Err(ClientInitError::InvalidScheme);
        }
    }

    let host = uri.host().ok_or_else(|| ClientInitError::MissingHost)?;
    let port = uri.port_u16().map(|x| format!(":{}", x)).unwrap_or_default();
    Ok(format!("{}://{}{}", scheme, host, port))
}

/// A client that implements the API by making HTTP calls out to a server.
pub struct Client<C> {
    client_service: hyper::Client<C, hyper::Body>,
    base_path: String,
}

impl<C> fmt::Debug for Client<C> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Client {{ base_path: {} }}", self.base_path)
    }
}

impl<C> Clone for Client<C> where C: Clone {
    fn clone(&self) -> Self {
        Client {
            client_service: self.client_service.clone(),
            base_path: self.base_path.clone()
        }
    }
}

fn as_reader<CA: AsRef<Path> + fmt::Display>(path: &CA) -> Result<BufReader<File>, ClientInitError> {
    let f = File::open(path.as_ref())
        .map_err(|e| ClientInitError::InvalidFile(format!("failed to open {}: {}", path, e)))?;
    Ok(BufReader::new(f))
}

impl<C> Client<C> where C: hyper::client::connect::Connect + Clone + Send + Sync + 'static {
    /// Create an HTTP client.
    ///
    /// # Arguments
    /// * `base_path` - base path of the client API, i.e. "www.my-api-implementation.com"
    pub fn try_new_http(base_path: &str) -> Result<Client<hyper::client::HttpConnector>, ClientInitError> {
        let http_connector = hyper::client::HttpConnector::new();
        try_new_with_connector(
            base_path,
            Some("http"),
            http_connector,
        )
    }

    /// Create a client with a TLS connection to the server.
    ///
    /// # Arguments
    /// * `base_path` - base path of the client API, i.e. "www.my-api-implementation.com"
    /// * `ca_certificate_path` - Path to CA certificate used to authenticate the server
    pub fn try_new_https<CA: AsRef<Path> + fmt::Display>(
        base_path: &str,
        ca_certificate_path: CA,
    ) -> Result<Client<hyper_rustls::HttpsConnector<hyper::client::HttpConnector>>, ClientInitError> {
        // Build an HTTP connector which supports HTTPS too.
        let mut http = hyper::client::HttpConnector::new();
        http.enforce_http(false);
        // Build a TLS client, using the custom CA store for lookups.
        let mut tls = rustls::ClientConfig::new();
        let mut rd = as_reader(&ca_certificate_path)?;
        tls.root_store
            .add_pem_file(&mut rd)
            .map_err(|_| ClientInitError::InvalidFile(format!("failed to load custom CA store {}", ca_certificate_path)))?;
        // Join the above part into an HTTPS connector.
        let connector = hyper_rustls::HttpsConnector::from((http, tls));

        try_new_with_connector(
            base_path,
            Some("https"),
            connector,
        )
    }

    /// Create a client with a mutually authenticated TLS connection to the server.
    ///
    /// # Arguments
    /// * `base_path` - base path of the client API, i.e. "www.my-api-implementation.com"
    /// * `ca_certificate_path` - Path to CA certificate used to authenticate the server
    /// * `client_key_path` - Path to the client private key
    /// * `client_certificate_path` - Path to the client's public certificate associated with the private key
    pub fn try_new_https_mutual<CA: AsRef<Path> + fmt::Display>(
        base_path: &str,
        ca_certificate_path: CA,
        client_key_path: CA,
        client_certificate_path: CA,
    ) -> Result<Client<hyper_rustls::HttpsConnector<hyper::client::HttpConnector>>, ClientInitError> {
        // Build an HTTP connector which supports HTTPS too.
        let mut http = hyper::client::HttpConnector::new();
        http.enforce_http(false);

        // Build TLS config
        let mut tls = rustls::ClientConfig::new();

        // Use custom CA
        let mut rd = as_reader(&ca_certificate_path)?;
        tls.root_store
            .add_pem_file(&mut rd)
            .map_err(|_| ClientInitError::InvalidFile(format!("failed to load custom CA store {}", ca_certificate_path)))?;

        // Use custom key and cert
        let mut key_rd = as_reader(&client_key_path)?;
        let mut keys = rustls::internal::pemfile::rsa_private_keys(&mut key_rd)
            .map_err(|_| ClientInitError::InvalidFile(format!("failed to load private key {}", client_key_path)))?;
        let key = keys.pop().ok_or(ClientInitError::InvalidFile(format!("multiple private keys {}", client_key_path)))?;
        let mut cert_rd = as_reader(&client_certificate_path)?;
        let certs = rustls::internal::pemfile::certs(&mut cert_rd)
            .map_err(|_| ClientInitError::InvalidFile(format!("failed to load client cert {}", client_certificate_path)))?;
        tls.set_single_client_cert(certs, key);

        // Join the above part into an HTTPS connector.
        let connector = hyper_rustls::HttpsConnector::from((http, tls));

        try_new_with_connector(
            base_path,
            Some("https"),
            connector,
        )
    }

    /// Create a client with a custom implementation of hyper::client::connect::Connect.
    ///
    /// Intended for use with custom implementations of connect for e.g. protocol logging
    /// or similar functionality which requires wrapping the transport layer. When wrapping a TCP connection,
    /// this function should be used in conjunction with
    /// `hyper::{http_connector, https_connector, https_mutual_connector}`.
    ///
    /// For ordinary tcp connections, prefer the use of `try_new_http`, `try_new_https`
    /// and `try_new_https_mutual`, to avoid introducing a dependency on the underlying transport layer.
    ///
    /// # Arguments
    ///
    /// * `handle` - tokio reactor handle to use for execution
    /// * `base_path` - base path of the client API, i.e. "www.my-api-implementation.com"
    /// * `protocol` - Which protocol to use when constructing the request url, e.g. `Some("http")`
    /// * `connector` - Implementation of `hyper::client::connect::Connect`
    pub fn try_new_with_connector(
        base_path: &str,
        protocol: Option<&'static str>,
        connector: C,
    ) -> Result<Client<C>, ClientInitError> {
        try_new_with_connector(base_path, protocol, connector)
    }

    /// Constructor for creating a `Client` by passing in a pre-made `hyper` client Service.
    ///
    /// This allows adding custom wrappers around the underlying transport, for example for logging.
    pub fn try_new_with_client_service(
        client_service: hyper::Client<C, hyper::Body>,
        base_path: &str
    ) -> Result<Client<C>, ClientInitError> {
        try_new_with_client_service(client_service, base_path)
    }
}

pub fn try_new_with_connector<C>(
    base_path: &str,
    protocol: Option<&'static str>,
    connector: C,
) -> Result<Client<C>, ClientInitError>
     where C: hyper::client::connect::Connect + Clone + Send + Sync + 'static
{
    let client_service = hyper::Client::builder().build(connector);

    try_new_with_client_service(client_service, base_path)
}

fn try_new_with_client_service<C>(
    client_service: hyper::Client<C, hyper::Body>,
    base_path: &str
) -> Result<Client<C>, ClientInitError>
     where C: hyper::client::connect::Connect + Clone + Send + Sync + 'static
{
    Ok(Client {
        client_service: client_service,
        base_path: into_base_path(base_path, None)?,
    })
}

#[async_trait]
impl<Ctx, Conn> Api<Ctx> for Client<Conn> where
    Ctx: Has<XSpanId> {{#hasAuthMethods}}+ Has<Option<AuthData>>{{/hasAuthMethods}} + Send + Sync + 'static,
    Conn: hyper::client::connect::Connect + Clone + Send + Sync + 'static,
{
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    async fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(&mut self{{#allParams}}, param_{{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}}{{/allParams}}, context: &Ctx) -> Result<{{{operationId}}}Response, ApiError> {
        let mut uri = format!(
            "{}{{{basePathWithoutHost}}}{{{vendorExtensions.x-path-format-string}}}",
            self.base_path{{#pathParams}}, {{{paramName}}}=utf8_percent_encode(&param_{{{paramName}}}.to_string(), ID_ENCODE_SET){{/pathParams}}
        );

        {
            let mut query_string = url::form_urlencoded::Serializer::new("".to_owned());
{{#queryParams}}{{#required}}        query_string.append_pair("{{{baseName}}}", &param_{{{paramName}}}{{#isListContainer}}.join(","){{/isListContainer}}{{^isListContainer}}.to_string(){{/isListContainer}});{{/required}}
{{^required}}           if let Some({{{paramName}}}) = param_{{{paramName}}} {
                query_string.append_pair("{{{baseName}}}", &{{{paramName}}}{{#isListContainer}}.join(","){{/isListContainer}}{{^isListContainer}}.to_string(){{/isListContainer}});
            }{{/required}}{{/queryParams}}
{{#authMethods}}{{#isApiKey}}{{#isKeyInQuery}}        if let Some(auth_data) = (context as &dyn Has<Option<AuthData>>).get().as_ref() {
            if let AuthData::ApiKey(ref api_key) = *auth_data {
                query_string.append_pair("{{keyParamName}}", api_key);
            }
        }{{/isKeyInQuery}}{{/isApiKey}}{{/authMethods}}
            let query_string = query_string.finish();
            if !query_string.is_empty() {
                uri += "?";
                uri += &query_string;
            }
        }

        let uri = match Uri::from_str(&uri) {
            Ok(uri) => uri,
            Err(err) => return Err(ApiError(format!("Unable to build URI: {}", err))),
        };

        let mut request = hyper::Request::builder();
        request.headers_mut().unwrap().typed_insert(XSpanId( (context as &dyn Has<XSpanId>).get().0.to_string() ));
        request = request.method(hyper::Method::{{#vendorExtensions}}{{{HttpMethod}}}{{/vendorExtensions}});
        request = request.uri(uri);

    {{#vendorExtensions.hasHeaderAuthMethods}}

        if let Some(auth_data) = (context as &dyn Has<Option<AuthData>>).get().as_ref() {
            // Currently only authentication with Basic, API Key, and Bearer are supported
            match auth_data {
        {{#authMethods}}
            {{#isApiKey}}
                {{#isKeyInHeader}}
                &AuthData::ApiKey(ref api_key) => {
                    request.headers_mut().unwrap().typed_insert(
                        {{#vendorExtensions}}{{x-apiKeyName}}{{operationId}}{{-index}}{{/vendorExtensions}}(api_key.to_string())
                    )
                },
                {{/isKeyInHeader}}
            {{/isApiKey}}
            {{#isBasicBasic}}
                &AuthData::Basic(ref basic_header) => {
                    request.headers_mut().unwrap().typed_insert(headers::Authorization::basic(
                        basic_header.clone(),
                    ).map_err(|e| ApiError(format!("Failed to build request: {}", e)))?)
                },
            {{/isBasicBasic}}
            {{#isBasicBearer}}
                &AuthData::Bearer(ref bearer_header) => {
                    request.headers_mut().unwrap().typed_insert(headers::Authorization::bearer(
                        bearer_header.0.token(),
                    ).map_err(|e| ApiError(format!("Failed to build request: {}", e)))?)
                },
            {{/isBasicBearer}}
            {{#isOAuth}}
                {{^isBasicBearer}}
                &AuthData::Bearer(ref bearer_header) => {
                    request.headers_mut().unwrap().typed_insert(headers::Authorization::bearer(
                        bearer_header.0.token(),
                    ).map_err(|e| ApiError(format!("Failed to build request: {}", e)))?)
                },
                {{/isBasicBearer}}
            {{/isOAuth}}
        {{/authMethods}}
                _ => {}
            }
        }
    {{/vendorExtensions.hasHeaderAuthMethods}}

    {{#headerParams}}
        {{#-first}}

            // Header parameters
        {{/-first}}{{^isMapContainer}}
        {{#required}}        request.headers_mut().unwrap().typed_insert(Request{{vendorExtensions.typeName}}(param_{{{paramName}}}{{#isListContainer}}.clone(){{/isListContainer}}));
        {{/required}}{{^required}}        param_{{{paramName}}}.as_ref().map(|header| request.headers_mut().unwrap().typed_insert(Request{{vendorExtensions.typeName}}(header.clone())));
        {{/required}}{{/isMapContainer}}{{#isMapContainer}}                let param_{{{paramName}}}: Option<{{{dataType}}}> = None;
    {{/isMapContainer}}
    {{/headerParams}}

{{#vendorExtensions}}
    {{#consumesMultipart}}
        let mut body_string = String::new();
        let multipart_header = {
            let mut multipart = Multipart::new();

        {{#vendorExtensions}}
            {{#formParams}}
                {{#-first}}
        // For each parameter, encode as appropriate and add to the multipart body as a stream.
                {{/-first}}
                {{^isByteArray}}
                    {{#jsonSchema}}

            let {{{paramName}}}_str = match serde_json::to_string(&param_{{{paramName}}}) {
                Ok(str) => str,
                Err(e) => return Err(ApiError(format!("Unable to parse {{{paramName}}} to string: {}", e))),
            };

            let {{{paramName}}}_vec = {{{paramName}}}_str.as_bytes().to_vec();

            let {{{paramName}}}_mime = mime_02::Mime::from_str("application/json").expect("impossible to fail to parse");

            let {{{paramName}}}_cursor = Cursor::new({{{paramName}}}_vec);

            multipart.add_stream("{{{paramName}}}",  {{{paramName}}}_cursor,  None as Option<&str>, Some({{{paramName}}}_mime));

                        {{/jsonSchema}}
                    {{/isByteArray}}
                    {{#isByteArray}}

            let {{{paramName}}}_vec = param_{{{paramName}}}.to_vec();

            let {{{paramName}}}_mime = mime_02::Mime::from_str("application/octet-stream") {
                Ok(mime) => mime,
                Err(err) => return Err(ApiError(format!("Unable to get mime type: {:?}", err))),
            };

            let {{{paramName}}}_cursor = Cursor::new({{{paramName}}}_vec);

            let filename = None as Option<&str> ;
            multipart.add_stream("{{{paramName}}}",  {{{paramName}}}_cursor,  filename, Some({{{paramName}}}_mime));

                    {{/isByteArray}}
                    {{#-last}}
                    {{/-last}}
                {{/formParams}}
            {{/vendorExtensions}}

            let mut fields = match multipart.prepare() {
                Ok(fields) => fields,
                Err(err) => return Err(ApiError(format!("Unable to build request: {}", err))),
            };

            fields.to_body().read_to_string(&mut body_string).unwrap();
            let boundary = fields.boundary();

            match Mime::from_str(&format!("multipart/form-data;boundary={}", boundary)) {
                Ok(multipart_header) => multipart_header,
                Err(err) => return Err(ApiError(format!("Unable to build multipart header: {:?}", err))),
            }
        };

        request.headers_mut().unwrap().typed_insert(headers::ContentType::from(multipart_header));
        let body = hyper::Body::from(body_string);

    {{/consumesMultipart}}
    {{^consumesMultipart}}
        let body = hyper::Body::empty();
    {{/consumesMultipart}}
{{/vendorExtensions}}
{{#vendorExtensions}}
  {{^consumesMultipart}}
    {{#vendorExtensions}}
      {{#formParams}}
        {{#-first}}
        let params = &[
        {{/-first}}
            ("{{{baseName}}}", {{#vendorExtensions}}{{#required}}Some({{#isString}}param_{{{paramName}}}{{/isString}}{{^isString}}format!("{:?}", param_{{{paramName}}}){{/isString}}){{/required}}{{^required}}{{#isString}}param_{{{paramName}}}{{/isString}}{{^isString}}param_{{{paramName}}}.map(|param| format!("{:?}", param)){{/isString}}{{/required}}),{{/vendorExtensions}}
        {{#-last}}
        ];
        let body = serde_urlencoded::to_string(params).expect("impossible to fail to serialize");

        request.headers_mut().unwrap().typed_insert(headers::ContentType::from(mimetypes::requests::{{#vendorExtensions}}{{{uppercase_operation_id}}}{{/vendorExtensions}}.clone()));
        let body = hyper::Body::from(body);
        {{/-last}}
      {{/formParams}}
    {{/vendorExtensions}}
    {{#bodyParam}}
      {{#-first}}
        // Body parameter
      {{/-first}}
        {{#vendorExtensions}}
        {{#consumesPlainText}}
        {{#isByteArray}}
        let body = param_{{{paramName}}}.0;
        {{/isByteArray}}
        {{^isByteArray}}
        let body = param_{{{paramName}}};
        {{/isByteArray}}
        {{/consumesPlainText}}
        {{#required}}
        {{#consumesXml}}
        let body = param_{{{paramName}}}.to_xml();
        {{/consumesXml}}
        {{#consumesJson}}
        let body = serde_json::to_string(&param_{{{paramName}}}).expect("impossible to fail to serialize");
        {{/consumesJson}}
        {{/required}}
        {{^required}}
        let body = param_{{{paramName}}}.map(|ref body| {
            {{#consumesXml}}
            body.to_xml()
            {{/consumesXml}}
            {{#consumesJson}}
            serde_json::to_string(body).expect("impossible to fail to serialize")
            {{/consumesJson}}
        });
        {{/required}}
        {{/vendorExtensions}}
        {{^required}}

        request.header(ContentType::from(mimetypes::requests::{{#vendorExtensions}}{{{uppercase_operation_id}}}{{/vendorExtensions}}.clone()));
        let body = if let Some(body) = body {
{{/required}}
        let body = hyper::Body::from(body);
{{^required}}
        } else {
            hyper::Body::empty()
        };
{{/required}}
    {{/bodyParam}}
    {{^bodyParam}}
        let body = hyper::Body::empty();
    {{/bodyParam}}
  {{/consumesMultipart}}
{{/vendorExtensions}}

        request.headers_mut().unwrap().typed_insert(XSpanId( (context as &dyn Has<XSpanId>).get().0.clone() ));
{{#vendorExtensions.x-has-header-auth-methods}}

        (context as &dyn Has<Option<AuthData>>).get().as_ref().map(|auth_data| {
            // Currently only authentication with Basic, API Key, and Bearer are supported
            match auth_data {
            {{#authMethods}}
                {{#isApiKey}}
                    {{#isKeyInHeader}}
                &AuthData::ApiKey(ref api_key) => {
                    request.headers_mut().unwrap().typed_insert(
                        {{#vendorExtensions}}{{x-apiKeyName}}{{-index}}{{/vendorExtensions}}(api_key.to_string())
                    )
                },
                    {{/isKeyInHeader}}
                {{/isApiKey}}
                {{#isBasicBasic}}
                &AuthData::Basic(ref basic_header) => {
                    request.headers_mut().unwrap().typed_insert(headers::Authorization(
                        basic_header.0.clone(),
                    ))
                },
                {{/isBasicBasic}}
                {{#isBasicBearer}}
                &AuthData::Bearer(ref bearer_header) => {
                    request.headers_mut().unwrap().typed_insert(headers::Authorization(
                        bearer_header.0.clone(),
                    ))
                },
                {{/isBasicBearer}}
                {{#isOAuth}}
                {{^isBasicBearer}}
                &AuthData::Bearer(ref bearer_header) => {
                    request.headers_mut().unwrap().typed_insert(headers::Authorization(
                        bearer_header.0.clone(),
                    ))
                },
                {{/isBasicBearer}}
                {{/isOAuth}}
            {{/authMethods}}
                _ => {}
            }
        });
{{/vendorExtensions.x-has-header-auth-methods}}
{{#headerParams}}
{{#-first}}

        // Header parameters
{{/-first}}
{{^isMapContainer}}
{{#required}}        
	    request.headers_mut().unwrap().typed_insert(Request{{vendorExtensions.x-type-name}}(param_{{{paramName}}}{{#isListContainer}}.clone(){{/isListContainer}}));
{{/required}}{{^required}}        param_{{{paramName}}}.as_ref().map(|header| request.headers_mut().unwrap().typed_insert(Request{{vendorExtensions.x-type-name}}(header.clone())));
{{/required}}{{/isMapContainer}}{{#isMapContainer}}                let param_{{{paramName}}}: Option<{{{dataType}}}> = None;
{{/isMapContainer}}
{{/headerParams}}
        let request = request.body(body).map_err(|e| ApiError(format!("Failed to build request: {}", e)))?;
        let mut response = self.client_service.call(request)
                             .map_err(|e| ApiError(format!("No response received: {}", e))).await?;
        match response.status().as_u16() {
{{#responses}}
            {{{code}}} => {
{{#headers}}
                let response_{{{name}}} = match response.headers().typed_get::<Response{{{nameInCamelCase}}}>() {
                    Some(response_{{{name}}}) => response_{{{name}}}.0.clone(),
                    None => return Err(ApiError(String::from("Required response header {{{baseName}}} for response {{{code}}} was not found."))),
                };
{{/headers}}
                let body = hyper::body::aggregate(response.into_body()).await.map_err(|e| ApiError(format!("Error getting response: {}", e)))?;
{{#dataType}}
{{#vendorExtensions}}
{{#producesBytes}}
                Ok(openapi_context::ByteArray(body.to_vec()))
{{/producesBytes}}
{{^producesBytes}}
                let body = str::from_utf8(body.bytes())
                    .map_err(|e| ApiError(format!("Response was not valid UTF8: {}", e)))?;
{{#producesXml}}
                // ToDo: this will move to swagger-rs and become a standard From conversion trait
                // once https://github.com/RReverser/serde-xml-rs/pull/45 is accepted upstream
                let body = serde_xml_rs::from_str::<{{{dataType}}}>(body)
                    .map_err(|e| ApiError(format!("Response body did not match the schema: {}", e)))?;
{{/producesXml}}
{{#producesJson}}
                let body = serde_json::from_str::<{{{dataType}}}>(body)
                    .map_err(ApiError::from)?;
{{/producesJson}}
{{/producesBytes}}{{/vendorExtensions}}
                        Ok({{{operationId}}}Response::{{#vendorExtensions}}{{x-responseId}}{{/vendorExtensions}}{{^headers}}(body){{/headers}}{{#headers}}{{#-first}}{ body: body, {{/-first}}{{{name}}}: response_{{{name}}}{{^-last}}, {{/-last}}{{#-last}} }{{/-last}}{{/headers}})
{{/dataType}}{{^dataType}}
                Ok(
                    {{{operationId}}}Response::{{#vendorExtensions}}{{x-responseId}}{{/vendorExtensions}}
{{#headers}}
  {{#-first}}
                    {
  {{/-first}}
                        {{{name}}}: response_{{{name}}},
  {{#-last}}
                    }
  {{/-last}}
{{/headers}}
                )
{{/dataType}}
            },
{{/responses}}
            code => {
                let headers = response.headers().clone();
                let body = hyper::body::aggregate(response.into_body()).await.map_err(|e| ApiError(format!("Error getting response: {}", e)));
                Err(ApiError(format!("Unexpected response code {}:\n{:?}\n\n{}",
                    code,
                    headers,
                    match body {
                        Ok(body) => {
                            match str::from_utf8(body.bytes()) {
                                Ok(body) => body.to_owned(),
                                Err(e) => format!("<Body was not UTF8: {:?}>", e),
                            }
                        },
                        Err(e) => format!("<Failed to read body: {}>", e),
                    })))
            }
        }
    }
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

#[derive(Debug)]
pub enum ClientInitError {
    InvalidScheme,
    InvalidUri(http::uri::InvalidUri),
    MissingHost,
    InvalidCertificate(String),
    InvalidFile(String),
}

impl From<http::uri::InvalidUri> for ClientInitError {
    fn from(err: http::uri::InvalidUri) -> ClientInitError {
        ClientInitError::InvalidUri(err)
    }
}

impl fmt::Display for ClientInitError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        (self as &dyn fmt::Debug).fmt(f)
    }
}

impl error::Error for ClientInitError {
    fn description(&self) -> &str {
        "Failed to produce a hyper client."
    }
}
