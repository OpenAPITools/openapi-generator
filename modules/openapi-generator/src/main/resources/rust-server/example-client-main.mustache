#![allow(missing_docs, unused_variables, trivial_casts)]
extern crate {{{externCrateName}}};
extern crate clap;
extern crate env_logger;
extern crate futures;
#[macro_use]
extern crate log;
#[macro_use]
extern crate swagger;
extern crate tokio;
{{#hasCallbacks}}
extern crate chrono;
#[macro_use]
extern crate error_chain;
extern crate hyper;
{{#apiUsesUuid}}
extern crate uuid;
{{/apiUsesUuid}}

#[cfg(not(any(target_os = "macos", target_os = "windows", target_os = "ios")))]
extern crate openssl;
#[cfg(not(any(target_os = "macos", target_os = "windows", target_os = "ios")))]
extern crate tokio_openssl;

mod server;
{{/hasCallbacks}}

#[allow(unused_imports)]
use futures::{Future, future, Stream, stream};
#[allow(unused_imports)]
use {{{externCrateName}}}::{Api, ApiNoContext, Client, ContextWrapperExt,
                      ApiError{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}},
                      {{{operationId}}}Response{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
                     };
use clap::{App, Arg};
use swagger::{ContextBuilder, EmptyContext, XSpanIdString, Has, Push, AuthData};

fn main() {
    env_logger::init();

    let matches = App::new("client")
        .arg(Arg::with_name("operation")
            .help("Sets the operation to run")
            .possible_values(&[
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{#vendorExtensions}}
          {{^noClientExample}}
                "{{{operationId}}}",
          {{/noClientExample}}
        {{/vendorExtensions}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
            ])
            .required(true)
            .index(1))
        .arg(Arg::with_name("https")
            .long("https")
            .help("Whether to use HTTPS or not"))
        .arg(Arg::with_name("host")
            .long("host")
            .takes_value(true)
            .default_value("{{{serverHost}}}")
            .help("Hostname to contact"))
        .arg(Arg::with_name("port")
            .long("port")
            .takes_value(true)
            .default_value("{{{serverPort}}}")
            .help("Port to contact"))
        .get_matches();

    let is_https = matches.is_present("https");
    let base_url = format!("{}://{}:{}",
                           if is_https { "https" } else { "http" },
                           matches.value_of("host").unwrap(),
                           matches.value_of("port").unwrap());

    let client = if matches.is_present("https") {
        // Using Simple HTTPS
        Client::try_new_https(&base_url)
            .expect("Failed to create HTTPS client")
    } else {
        // Using HTTP
        Client::try_new_http(
            &base_url)
            .expect("Failed to create HTTP client")
    };

    let context: make_context_ty!(ContextBuilder, EmptyContext, Option<AuthData>, XSpanIdString) =
        make_context!(ContextBuilder, EmptyContext, None as Option<AuthData>, XSpanIdString::default());

    let client = client.with_context(context);

    let mut rt = tokio::runtime::Runtime::new().unwrap();
{{#hasCallbacks}}

    // We could do HTTPS here, but for simplicity we don't
    rt.spawn(server::create("127.0.0.1:8081", false));
{{/hasCallbacks}}

    match matches.value_of("operation") {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{#vendorExtensions}}
          {{#noClientExample}}
        /* Disabled because there's no example.
          {{/noClientExample}}
        {{/vendorExtensions}}
        Some("{{{operationId}}}") => {
            let result = rt.block_on(client.{{{vendorExtensions.operation_id}}}(
                {{#allParams}}
                  {{{vendorExtensions.example}}}{{^-last}},{{/-last}}
                {{/allParams}}
            ));
            info!("{:?} (X-Span-ID: {:?})", result, (client.context() as &Has<XSpanIdString>).get().clone());
        },
        {{#vendorExtensions}}
          {{#noClientExample}}
        */
          {{/noClientExample}}
        {{/vendorExtensions}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
        _ => {
            panic!("Invalid operation provided")
        }
    }
}
