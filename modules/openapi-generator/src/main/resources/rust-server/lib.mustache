#![allow(missing_docs, trivial_casts, unused_variables, unused_mut, unused_imports, unused_extern_crates, non_camel_case_types)]

use futures::Stream;
use std::io::Error;

#[deprecated(note = "Import swagger-rs directly")]
pub use swagger::{ApiError, ContextWrapper};
#[deprecated(note = "Import futures directly")]
pub use futures::Future;

pub const BASE_PATH: &'static str = "{{{basePathWithoutHost}}}";
{{#appVersion}}
pub const API_VERSION: &'static str = "{{{appVersion}}}";
{{/appVersion}}

{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
{{>response}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
/// API
pub trait Api<C> {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
{{#summary}}
    /// {{{summary}}}
{{/summary}}
    fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
        &self,
{{#allParams}}
        {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}},
{{/allParams}}
        context: &C) -> Box<dyn Future<Item={{{operationId}}}Response, Error=ApiError> + Send>;

      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}

/// API without a `Context`
pub trait ApiNoContext {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
{{#summary}}
    /// {{{summary}}}
{{/summary}}
    fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
        &self,
{{#allParams}}
        {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}},
{{/allParams}}
        ) -> Box<dyn Future<Item={{{operationId}}}Response, Error=ApiError> + Send>;

      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}

/// Trait to extend an API to make it easy to bind it to a context.
pub trait ContextWrapperExt<'a, C> where Self: Sized {
    /// Binds this API to a context.
    fn with_context(self: &'a Self, context: C) -> ContextWrapper<'a, Self, C>;
}

impl<'a, T: Api<C> + Sized, C> ContextWrapperExt<'a, C> for T {
    fn with_context(self: &'a T, context: C) -> ContextWrapper<'a, T, C> {
         ContextWrapper::<T, C>::new(self, context)
    }
}

impl<'a, T: Api<C>, C> ApiNoContext for ContextWrapper<'a, T, C> {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
{{#summary}}
    /// {{{summary}}}
{{/summary}}
    fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
        &self,
{{#allParams}}
        {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}},
{{/allParams}}
        ) -> Box<dyn Future<Item={{{operationId}}}Response, Error=ApiError> + Send>
    {
        self.api().{{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}({{#allParams}}{{{paramName}}}, {{/allParams}}&self.context())
    }

      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}
{{#hasCallbacks}}

{{#apiInfo}}
    {{#apis}}
      {{#operations}}
        {{#operation}}
          {{#callbacks}}
            {{#urls}}
              {{#requests}}
{{>response}}
            {{/requests}}
          {{/urls}}
        {{/callbacks}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}

/// Callback API
pub trait CallbackApi<C> {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{#callbacks}}
          {{#urls}}
            {{#requests}}
{{#summary}}
    /// {{{summary}}}
{{/summary}}
    fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
        &self,
{{#vendorExtensions}}
  {{#callbackParams}}
        callback_{{.}}: String,
  {{/callbackParams}}
{{/vendorExtensions}}
{{#allParams}}
        {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}},
{{/allParams}}
        context: &C) -> Box<dyn Future<Item={{{operationId}}}Response, Error=ApiError> + Send>;

            {{/requests}}
          {{/urls}}
        {{/callbacks}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}

/// Callback API without a `Context`
pub trait CallbackApiNoContext {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{#callbacks}}
          {{#urls}}
            {{#requests}}
{{#summary}}
    /// {{{summary}}}
{{/summary}}
    fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
        &self,
{{#vendorExtensions}}
  {{#callbackParams}}
        callback_{{.}}: String,
  {{/callbackParams}}
{{/vendorExtensions}}
{{#allParams}}
        {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}},
{{/allParams}}
        ) -> Box<dyn Future<Item={{{operationId}}}Response, Error=ApiError> + Send>;

            {{/requests}}
          {{/urls}}
        {{/callbacks}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}

/// Trait to extend an API to make it easy to bind it to a context.
pub trait CallbackContextWrapperExt<'a, C> where Self: Sized {
    /// Binds this API to a context.
    fn with_context(self: &'a Self, context: C) -> ContextWrapper<'a, Self, C>;
}

impl<'a, T: CallbackApi<C> + Sized, C> CallbackContextWrapperExt<'a, C> for T {
    fn with_context(self: &'a T, context: C) -> ContextWrapper<'a, T, C> {
         ContextWrapper::<T, C>::new(self, context)
    }
}

impl<'a, T: CallbackApi<C>, C> CallbackApiNoContext for ContextWrapper<'a, T, C> {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{#callbacks}}
          {{#urls}}
            {{#requests}}
              {{#summary}}
    /// {{{summary}}}
              {{/summary}}
    fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
        &self,
{{#vendorExtensions}}
  {{#callbackParams}}
        callback_{{.}}: String,
  {{/callbackParams}}
{{/vendorExtensions}}
{{#allParams}}
        {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}},
{{/allParams}}
        ) -> Box<dyn Future<Item={{{operationId}}}Response, Error=ApiError> + Send>
    {
        self.api().{{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(
{{#vendorExtensions}}
  {{#callbackParams}}
            callback_{{.}},
  {{/callbackParams}}
{{/vendorExtensions}}
{{#allParams}}
            {{{paramName}}},
{{/allParams}}
            &self.context())
    }

            {{/requests}}
          {{/urls}}
        {{/callbacks}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}

{{/hasCallbacks}}

#[cfg(feature = "client")]
pub mod client;

// Re-export Client as a top-level name
#[cfg(feature = "client")]
pub use client::Client;

#[cfg(feature = "server")]
pub mod server;

// Re-export router() as a top-level name
#[cfg(feature = "server")]
pub use self::server::Service;

{{#hasCallbacks}}
#[cfg(any(feature = "client", feature = "server"))]
{{/hasCallbacks}}
{{^hasCallbacks}}
#[cfg(feature = "server")]
{{/hasCallbacks}}
pub mod context;

pub mod models;

#[cfg(any(feature = "client", feature = "server"))]
pub(crate) mod header;
