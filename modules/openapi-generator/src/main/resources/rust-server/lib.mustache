#![allow(missing_docs, trivial_casts, unused_variables, unused_mut, unused_imports, unused_extern_crates, non_camel_case_types)]
use async_trait::async_trait;
use futures::{FutureExt, Stream, StreamExt, TryStreamExt};
use openapi_context::ContextWrapper;
use std::io::Error;

#[allow(unused_imports)]
use std::collections::HashMap;

#[cfg(any(feature = "client", feature = "server"))]
mod mimetypes;

pub use openapi_context::ApiError;
pub const BASE_PATH: &'static str = "{{{basePathWithoutHost}}}";
pub const API_VERSION: &'static str = "{{{appVersion}}}";

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
#[derive(Debug, PartialEq)]
pub enum {{{operationId}}}Response {
{{#responses}}
  {{#message}}
    /// {{{message}}}{{/message}}
    {{#vendorExtensions}}
    {{{x-responseId}}}
    {{/vendorExtensions}}
    {{^dataType}}
      {{#hasHeaders}}
    {
      {{/hasHeaders}}
    {{/dataType}}
    {{#dataType}}
      {{^hasHeaders}}
    ({{{dataType}}})
      {{/hasHeaders}}
      {{#hasHeaders}}
    {
        body: {{{dataType}}},
      {{/hasHeaders}}
    {{/dataType}}
    {{#headers}}
        {{{name}}}: {{{datatype}}},
      {{#-last}}
    }
      {{/-last}}
    {{/headers}}
    {{^-last}}
    ,
    {{/-last}}
{{/responses}}
}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

/// API
#[async_trait]
pub trait Api<C> {
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
{{#summary}}    /// {{{summary}}}{{/summary}}
    async fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(&mut self{{#allParams}}, {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}}{{/allParams}}, context: &C) -> Result<{{{operationId}}}Response, ApiError>;
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

/// API without a `Context`
#[async_trait]
pub trait ApiNoContext {
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
{{#summary}}    /// {{{summary}}}{{/summary}}
    async fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(&mut self{{#allParams}}, {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}}{{/allParams}}) -> Result<{{{operationId}}}Response, ApiError>;
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

/// Trait to extend an API to make it easy to bind it to a context.
pub trait ContextWrapperExt<C> where Self: Sized {
    /// Binds this API to a context.
    fn with_context(self, context: C) -> ContextWrapper<Self, C>;
}

impl<T: Api<C> + Sized, C> ContextWrapperExt<C> for T {
    fn with_context(self, context: C) -> ContextWrapper<T, C> {
         ContextWrapper::<T, C>::new(self, context)
    }
}

#[async_trait]
impl<T: Api<C>, C> ApiNoContext for ContextWrapper<T, C>
    where C: Clone + Send + Sync,
          T: Send + Sync,
{
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
{{#summary}}    /// {{{summary}}}{{/summary}}
    async fn {{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}(&mut self{{#allParams}}, {{{paramName}}}: {{^required}}Option<{{/required}}{{#isListContainer}}&{{/isListContainer}}{{{dataType}}}{{^required}}>{{/required}}{{/allParams}}) -> Result<{{{operationId}}}Response, ApiError> {
        let ctx: C = self.context().clone();
        self.api_mut().{{#vendorExtensions}}{{{operation_id}}}{{/vendorExtensions}}({{#allParams}}{{{paramName}}}, {{/allParams}}&ctx).await
    }
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

#[cfg(feature = "client")]
pub mod client;

// Re-export Client as a top-level name
#[cfg(feature = "client")]
pub use self::client::Client;

#[cfg(feature = "server")]
pub mod server;

// Re-export router() as a top-level name
#[cfg(feature = "server")]
pub use self::server::Service;

pub mod models;
#[allow(non_upper_case_globals)]
pub mod headers;
