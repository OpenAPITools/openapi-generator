{{>php_file_header}}

namespace {{controllerPackage}};

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use {{apiPackage}}\{{classname}};

{{#operations}}
class {{controllerName}} extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly {{classname}} $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    {{#operation}}
    /**
     * Operation {{{operationId}}}
     *
     * {{{summary}}}.
     *
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    public function {{operationId}}(Request $request): JsonResponse
    {
        {{>api_validation}}

        {{#allParams}}
        {{#isFile}}
        ${{paramName}} = $request->file('{{paramName}}');
        {{/isFile}}
        {{#isBoolean}}
        ${{paramName}} = $request->bool('{{paramName}}');
        {{/isBoolean}}
        {{#isInteger}}
        ${{paramName}} = $request->integer('{{paramName}}');
        {{/isInteger}}
        {{#isLong}}
        ${{paramName}} = $request->integer('{{paramName}}');
        {{/isLong}}
        {{#isNumber}}
        ${{paramName}} = $request->float('{{paramName}}');
        {{/isNumber}}
        {{#isFloat}}
        ${{paramName}} = $request->float('{{paramName}}');
        {{/isFloat}}
        {{#isDouble}}
        ${{paramName}} = $request->float('{{paramName}}');
        {{/isDouble}}
        {{#isString}}
        ${{paramName}} = $request->string('{{paramName}}')->value();
        {{/isString}}
        {{#isByteArray}}
        ${{paramName}} = $request->string('{{paramName}}')->value();
        {{/isByteArray}}
        {{#isDateTime}}
        ${{paramName}} = $request->date('{{paramName}}');
        {{/isDateTime}}
        {{#isDate}}
        ${{paramName}} = $request->date('{{paramName}}');
        {{/isDate}}
        {{#isArray}}
        ${{paramName}} = $request->get('{{paramName}}');
        {{/isArray}}
        {{#isMap}}
        ${{paramName}} = $request->get('{{paramName}}');
        {{/isMap}}
        {{#isModel}}
        ${{paramName}} = $this->serde->deserialize($request->get('{{paramName}}'), from: 'array', to: {{dataType}}::class);

        if (${{paramName}} === null) {
            return response()->json(['error' => 'Invalid input'], 400);
        }
        {{/isModel}}

        {{/allParams}}
        try {
            $apiResult = $this->api->{{operationId}}({{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        {{#responses}}
        {{#isArray}}
        if (is_array($apiResult)) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort({{code}});
            }

            return response()->json($responseBody, {{code}});
        }

        {{/isArray}}
        {{#isMap}}
        if (is_array($apiResult)) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort({{code}});
            }

            return response()->json($responseBody, {{code}});
        }

        {{/isMap}}
        {{^isArray}}
        {{^isMap}}
        if ($apiResult instanceof {{dataType}}) {
            $responseBody = $this->serde->serialize($apiResult, format: 'array');

            if ($responseBody === null) {
                return response()->json(['error' => 'Failed to parse api output'], 500);
            }

            if ($responseBody === []) {
                abort({{code}});
            }

            return response()->json($responseBody, {{code}});
        }

        {{/isMap}}
        {{/isArray}}
        {{/responses}}

        // This shouldn't happen
        return response()->abort(500);
    }
    {{/operation}}
}
{{/operations}}
