/* eslint-disable no-unused-vars */
const Service = require('./Service');

{{#operations}}
{{#operation}}
/**
{{#summary}}
* {{{.}}}
{{/summary}}
{{#notes}}
* {{{.}}}
{{/notes}}
*
{{#allParams}}
* @param {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} { {{{dataType}}} } {{{description}}}
{{/allParams}}
{{^returnType}}
* no response value expected for this operation
{{/returnType}}
{{#returnType}}
* @returns { {{{.}}} }
{{/returnType}}
* */
const {{{operationId}}} = ({{#allParams}}{{#-first}}{ {{/-first}}{{paramName}}{{^-last}}, {{/-last}}{{#-last}} }{{/-last}}{{/allParams}}) => new Promise(
  (resolve, reject) => {
    try {
      {{#returnType}}
      var examples = {};
      {{#examples}}
      examples['{{contentType}}'] = {{{example}}};
      {{/examples}}
      if (Object.keys(examples).length > 0) {
        resolve(Service.successResponse(examples[Object.keys(examples)[0]]));
      } else {
        resolve(Service.successResponse({
        {{#allParams}}
          {{paramName}},
        {{/allParams}}
        }));
      }
      {{/returnType}}
      {{^returnType}}
      resolve(Service.successResponse({
      {{#allParams}}
        {{paramName}},
      {{/allParams}}
      }));
      {{/returnType}}
    } catch (e) {
      reject(Service.rejectResponse(
        e.message || 'Invalid input',
        e.status || 405,
      ));
    }
  },
);
{{/operation}}
{{/operations}}

module.exports = {
  {{#operations}}
  {{#operation}}
  {{operationId}},
  {{/operation}}
  {{/operations}}
};
