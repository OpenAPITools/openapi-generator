package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import {{rootPackage}}.ParameterCast;

import com.fasterxml.jackson.core.type.TypeReference;
import io.vertx.core.json.Json;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.ext.web.RoutingContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;
import java.util.Map;

public class {{classname}}Handler {

    private {{classname}} apiImpl = new {{classname}}Impl();

    public {{classname}}Handler(Map<String, Handler<RoutingContext>> operationHandlers) {
{{#operations}}
{{#operation}}
        operationHandlers.put("{{operationId}}", this::{{operationId}});
{{/operation}}
{{/operations}}
    }
{{#operations}}
{{#operation}}

    private void {{operationId}}(RoutingContext routingContext) {
        HttpServerResponse response = routingContext.response();

        {{#returnType}}Single{{/returnType}}{{^returnType}}Completable{{/returnType}}.defer( () -> {
{{#allParams}}
{{^isBodyParam}}
{{^isListContainer}}
{{#isHeaderParam}}
            {{{dataType}}} {{paramName}} = ParameterCast.to{{dataType}}(routingContext.request().getHeader("{{baseName}}"));
{{/isHeaderParam}}
{{#isPathParam}}
            {{{dataType}}} {{paramName}} = ParameterCast.to{{dataType}}(routingContext.pathParams().get("{{baseName}}"));
{{/isPathParam}}
{{#isQueryParam}}
            {{{dataType}}} {{paramName}} = ParameterCast.to{{dataType}}(routingContext.queryParams().get("{{baseName}}"));
{{/isQueryParam}}
{{#isFormParam}}
{{^isFile}}
            {{{dataType}}} {{paramName}} = ParameterCast.to{{dataType}}(routingContext.request().getFormAttribute("{{baseName}}"));
{{/isFile}}
{{#isFile}}
            {{{dataType}}} {{paramName}} = routingContext.fileUploads().iterator().next();
{{/isFile}}
{{/isFormParam}}
{{/isListContainer}}
{{#isListContainer}}
            {{{dataType}}} {{paramName}} = routingContext.request().params().getAll("{{baseName}}");
{{/isListContainer}}
{{/isBodyParam}}
{{/allParams}}
{{#allParams}}
{{#isBodyParam}}
            String jsonString = routingContext.getBodyAsString();
            {{{dataType}}} {{paramName}} = jsonString == null ? null : Json.decodeValue(jsonString, new TypeReference<{{{dataType}}}>(){});
{{/isBodyParam}}
{{/allParams}}
            return apiImpl.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        })
        .subscribe(
            {{#returnType}}output -> { {{/returnType}}{{^returnType}}() -> { {{/returnType}}
                response.setStatusCode(204).end();
            }, error -> {
                response.setStatusCode(500).end(error.getMessage());
            }).dispose();
    }

{{/operation}}
{{/operations}}
}
