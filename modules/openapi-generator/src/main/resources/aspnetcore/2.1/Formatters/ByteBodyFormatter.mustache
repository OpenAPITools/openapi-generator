using Microsoft.AspNetCore.Mvc.Formatters;
using System;
using System.IO;
using System.Threading.Tasks;

namespace {{packageName}}.Formatters
{
    /// <summary>
    /// An input formatter that transforms the incoming request body
    /// to an array of bytes. Supports content types of application/octet-stream
    /// and text/plain.
    /// </summary>
    public class ByteBodyFormatter: InputFormatter
    {
        /// <summary>
        /// Create a new ByteBodyFormatter instance.
        /// </summary>
        public ByteBodyFormatter()
        {
            SupportedMediaTypes.Add("application/octet-stream");
            SupportedMediaTypes.Add("text/plain");
        }

        /// <summary>
        /// Determine if the formatter supports reading to the given type.
        /// <param name="type">Type to test.</param>
        /// <returns>True if the type is assignable from byte [].</returns>
        /// </summary>
        protected override bool CanReadType(Type type)
        {
            return type.IsAssignableFrom(typeof(byte[])) && base.CanReadType(type);
        }

        /// <summary>
        /// Read the body to a byte array. Uses memory stream with a fixed
        /// 2048 buffer.
        /// <param name="context">The filter context.</param>
        /// <returns>A task wrapping reading of the stream to a byte array.</returns>
        /// </summary>
        public override async Task<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context)
        {
            using (var ms = new MemoryStream(2048))
            {
                await context.HttpContext.Request.Body.CopyToAsync(ms);
                var content = ms.ToArray();
                return await InputFormatterResult.SuccessAsync(content);
            }
        }
    }
}