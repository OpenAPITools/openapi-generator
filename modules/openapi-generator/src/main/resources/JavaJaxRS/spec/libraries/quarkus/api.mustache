package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import {{javaxPackage}}.ws.rs.*;
import {{javaxPackage}}.ws.rs.core.Response;

{{#useMicroProfileOpenAPIAnnotations}}
import org.eclipse.microprofile.openapi.annotations.*;
import org.eclipse.microprofile.openapi.annotations.info.*;
import org.eclipse.microprofile.openapi.annotations.security.*;
import org.eclipse.microprofile.openapi.annotations.tags.*;
import org.eclipse.microprofile.openapi.annotations.responses.*;
import org.eclipse.microprofile.openapi.annotations.media.*;
import org.eclipse.microprofile.openapi.annotations.enums.*;
import org.eclipse.microprofile.openapi.annotations.headers.*;
import org.eclipse.microprofile.openapi.annotations.parameters.*;
{{/useMicroProfileOpenAPIAnnotations}}

{{#useGzipFeature}}
import org.jboss.resteasy.annotations.GZIP;
{{/useGzipFeature}}

{{#useSwaggerAnnotations}}
import io.swagger.annotations.*;
{{/useSwaggerAnnotations}}

{{#supportAsync}}
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletableFuture;
{{/supportAsync}}

import java.io.InputStream;
import java.util.Map;
import java.util.List;
{{#useBeanValidation}}import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;{{/useBeanValidation}}

{{#useMicroProfileOpenAPIAnnotations}}@OpenAPIDefinition(
   info = @Info(
        title = "{{{operationTagName}}}", version="{{{version}}}", description="{{{operationTagDescription}}}"{{#license}},
        license = @License(name = "{{{name}}}", url = "{{{url}}}"){{/license}}{{#contact}},
        contact = @Contact(name = "{{{name}}}", email = "{{{email}}}"){{/contact}}
   ),
   tags = @Tag(name="{{{operationTagName}}}", description="{{{operationTagDescription}}}")
){{#hasAuthMethods}}
@SecuritySchemes(value = {
    {{#authMethods}}{{#isOAuth}}@SecurityScheme(securitySchemeName = "{{name}}", type = SecuritySchemeType.OAUTH2,
         description = "{{description}}",{{#isImplicit}}
         flows = @OAuthFlows(implicit = @OAuthFlow(authorizationUrl = "{{authorizationUrl}}",
            tokenUrl = "{{tokenUrl}}",
            refreshUrl = "{{refreshUrl}}",
            scopes = {
                {{#scopes}}@OAuthScope(name = "{{scope}}", description = "{{description}}"){{^-last}},{{/-last}}
                {{/scopes}} })) {{/isImplicit}}{{#isCode}}
         flows = @OAuthFlows(authorizationCode = @OAuthFlow(authorizationUrl = "{{authorizationUrl}}",
            tokenUrl = "{{tokenUrl}}",
            refreshUrl = "{{refreshUrl}}",
            scopes = {
                {{#scopes}}@OAuthScope(name = "{{scope}}", description = "{{description}}"){{^-last}},{{/-last}}
                {{/scopes}} })) {{/isCode}}{{#isPassword}}
         flows = @OAuthFlows(password = @OAuthFlow(authorizationUrl = "{{authorizationUrl}}",
            tokenUrl = "{{tokenUrl}}",
            refreshUrl = "{{refreshUrl}}",
            scopes = {
                {{#scopes}}@OAuthScope(name = "{{scope}}", description = "{{description}}"){{^-last}},{{/-last}}
                {{/scopes}} })) {{/isPassword}}{{#isApplication}}
         flows = @OAuthFlows(clientCredentials = @OAuthFlow(authorizationUrl = "{{authorizationUrl}}",
            tokenUrl = "{{tokenUrl}}",
            refreshUrl = "{{refreshUrl}}",
            scopes = {
                {{#scopes}}@OAuthScope(name = "{{scope}}", description = "{{description}}"){{^-last}},{{/-last}}
                {{/scopes}} })){{/isApplication}}
    ){{^-last}}, {{/-last}}{{/isOAuth}}{{#isApiKey}}@SecurityScheme(securitySchemeName = "{{name}}", type = SecuritySchemeType.APIKEY,
         description = "{{description}}",
         apiKeyName = "{{keyParamName}}",
         {{#isKeyInHeader}}in = SecuritySchemeIn.HEADER{{/isKeyInHeader}}{{#isKeyInQuery}}in = SecuritySchemeIn.QUERY{{/isKeyInQuery}}{{#isKeyInCookie}}in = SecuritySchemeIn.COOKIE{{/isKeyInCookie}}
    ){{^-last}}, {{/-last}}{{/isApiKey}}{{#isBasicBasic}}@SecurityScheme(securitySchemeName = "{{name}}", type = SecuritySchemeType.HTTP,
         description = "{{description}}",
         scheme = "basic"
    ){{^-last}}, {{/-last}}{{/isBasicBasic}}{{#isBasicBearer}}@SecurityScheme(securitySchemeName = "{{name}}", type = SecuritySchemeType.HTTP,
        description = "{{description}}",
        scheme = "bearer", bearerFormat = "{{bearerFormat}}"
    ){{^-last}}, {{/-last}}{{/isBasicBearer}}{{#isOpenId}}@SecurityScheme(securitySchemeName = "{{name}}", type = SecuritySchemeType.OPENIDCONNECT,
        description = "{{description}}",
        openIdConnectUrl = "{{openIdConnectUrl}}"
    ){{^-last}}, {{/-last}}{{/isOpenId}}{{/authMethods}}
}){{/hasAuthMethods}}{{/useMicroProfileOpenAPIAnnotations}}{{#useSwaggerAnnotations}}
@Api(description = "the {{{baseName}}} API"){{/useSwaggerAnnotations}}
@Path("{{commonPath}}"){{#hasConsumes}}
@Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
@Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}
{{>generatedAnnotation}}
public {{#interfaceOnly}}interface{{/interfaceOnly}}{{^interfaceOnly}}class{{/interfaceOnly}} {{classname}} {
{{#operations}}
{{#operation}}

{{#interfaceOnly}}{{>apiInterface}}{{/interfaceOnly}}{{^interfaceOnly}}{{>apiMethod}}{{/interfaceOnly}}
{{/operation}}
}
{{/operations}}