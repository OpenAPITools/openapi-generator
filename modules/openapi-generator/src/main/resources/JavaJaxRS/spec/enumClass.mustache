public enum {{datatypeWithEnum}} {

    {{#allowableValues}}
    {{#enumVars}}{{name}}({{dataType}}.valueOf({{{value}}})){{^-last}}, {{/-last}}{{#-last}};{{/-last}}{{/enumVars}}
    {{/allowableValues}}


    private {{dataType}} value;

    {{datatypeWithEnum}} ({{dataType}} v) {
        value = v;
    }

    public {{dataType}} value() {
        return value;
    }

    @Override
    @JsonValue
    public String toString() {
        return String.valueOf(value);
    }

    @JsonCreator
    public static {{datatypeWithEnum}} fromValue({{dataType}} value) {
        for ({{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} b : {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.values()) {
            if (b.value.equals(value)) {
                return b;
            }
        }
        {{#isNullable}}return null;{{/isNullable}}{{^isNullable}}throw new IllegalArgumentException("Unexpected value '" + value + "'");{{/isNullable}}
    }
}
