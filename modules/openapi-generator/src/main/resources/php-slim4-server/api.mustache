<?php

{{>licenseInfo}}

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace {{apiPackage}};

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * {{classname}} Class Doc Comment
 *
 * @package {{apiPackage}}
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class {{classname}}
{
    {{#isPhpDiContainer}}
    /**
     * @var ContainerInterface Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface $container Slim app container instance
     */
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }
    {{/isPhpDiContainer}}
    {{#operations}}
    {{#operation}}

    /**
     * {{httpMethod}} {{operationId}}
     {{#summary}}
     * Summary: {{summary}}
     {{/summary}}
     {{#notes}}
     * Notes: {{notes}}
     {{/notes}}
     {{#hasProduces}}
     * Output-Formats: [{{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}]
     {{/hasProduces}}
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
    {{#isPhpDiContainer}}
    {{#pathParams}}
     * @param {{dataType}} ${{paramName}} {{description}}
    {{/pathParams}}
    {{/isPhpDiContainer}}
    {{#isNoneContainer}}
    {{#hasPathParams}}
     * @param array                  $args     Path arguments
    {{/hasPathParams}}
    {{/isNoneContainer}}
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function {{operationId}}(
        ServerRequestInterface $request,
        ResponseInterface $response{{#isPhpDiContainer}}{{#hasPathParams}},{{#pathParams}}
        ${{paramName}}{{^-last}},{{/-last}}{{/pathParams}}{{/hasPathParams}}{{/isPhpDiContainer}}{{#isNoneContainer}}{{#hasPathParams}},
        array $args{{/hasPathParams}}{{/isNoneContainer}}
    ) {
        {{#hasHeaderParams}}
        $headers = $request->getHeaders();
        {{#headerParams}}
        ${{paramName}} = $request->hasHeader('{{baseName}}') ? $headers['{{baseName}}'] : null;
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#isNoneContainer}}
        {{#hasPathParams}}
        {{#pathParams}}
        ${{paramName}} = $args['{{baseName}}'];
        {{/pathParams}}
        {{/hasPathParams}}
        {{/isNoneContainer}}
        {{#hasQueryParams}}
        $queryParams = $request->getQueryParams();
        {{#queryParams}}
        ${{paramName}} = (key_exists('{{baseName}}', $queryParams)) ? $queryParams['{{baseName}}'] : null;
        {{/queryParams}}
        {{/hasQueryParams}}
        {{#hasFormParams}}
        $body = $request->getParsedBody();
        {{#formParams}}
        {{^isFile}}
        ${{paramName}} = (isset($body['{{baseName}}'])) ? $body['{{baseName}}'] : null;
        {{/isFile}}
        {{#isFile}}
        {{#isMultipart}}
        ${{paramName}} = (key_exists('{{baseName}}', $request->getUploadedFiles())) ? $request->getUploadedFiles()['{{baseName}}'] : null;
        {{/isMultipart}}
        {{^isMultipart}}
        ${{paramName}} = (isset($body['{{baseName}}'])) ? $body['{{baseName}}'] : null;
        {{/isMultipart}}
        {{/isFile}}
        {{/formParams}}
        {{/hasFormParams}}
        {{#hasBodyParam}}
        $body = $request->getParsedBody();
        {{/hasBodyParam}}
        $message = "How about implementing {{nickname}} as a {{httpMethod}} method in {{apiPackage}}\{{userClassname}} class?";
        throw new HttpNotImplementedException($request, $message);
    }
    {{/operation}}
    {{/operations}}
}
