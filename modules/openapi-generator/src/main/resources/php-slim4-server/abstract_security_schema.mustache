<?php

{{>licenseInfo}}

declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */{{#apiInfo}}
namespace {{authPackage}};

use Fig\Http\Message\StatusCodeInterface;
use Dyorg\AuthenticatorInterface;
use Dyorg\ErrorHandlerInterface;
use Dyorg\TokenAuthentication\Exceptions\UnauthorizedExceptionInterface;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

/**
 * {{abstractNamePrefix}}SecuritySchema{{abstractNameSuffix}} Class Doc Comment
 *
 * @package {{authPackage}}
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class {{abstractNamePrefix}}SecuritySchema{{abstractNameSuffix}} implements AuthenticatorInterface, ErrorHandlerInterface, StatusCodeInterface
{
    /**
     * @var string[]|null List of required scopes
     */
    protected $requiredScope;

    /**
     * Verify if token is valid on database
     * If token isn't valid, expired or has insufficient scope must throw an UnauthorizedExceptionInterface
     *
     * @param string $token Api Key
     *
     * @return array User object or associative array
     * @throws UnauthorizedExceptionInterface on invalid token
     */
    abstract protected function getUserByToken(string $token);

    /**
     * Set required scopes.
     * Related to OAuth security type only.
     *
     * @param string[]|null $requiredScope List of required scopes
     */
    public function setRequiredScope(?array $requiredScope = null)
    {
        $this->requiredScope = $requiredScope;
        return $this;
    }

    /**
     * Makes the api key validation of your application
     *
     * Just an example of implementation. Override this method to fit your needs
     *
     * @param ServerRequestInterface $request     HTTP request
     * @param TokenSearch            $tokenSearch Middleware instance which contains api key in token
     *
     * @return bool Must return either true or false
     * @throws UnauthorizedExceptionInterface when cannot parse token
     */
    public function authenticate(
        ServerRequestInterface &$request,
        TokenSearch $tokenSearch
    ): bool {
       /**
        * Try find authorization token via header, parameters, cookie or attribute
        * If token not found, return response with status 401 (unauthorized)
        */
        $token = $tokenSearch->getToken($request);

        /**
         * Verify if token is valid on database
         * If token isn't valid, expired or has insufficient scope must throw an UnauthorizedExceptionInterface
         */
        $user = $this->getUserByToken($token);

        /**
         * Set authenticated user at attributes
         */
        $request = $request->withAttribute('authenticated_user', $user);

        return true;
    }

    /**
     * Process unauthorized exception.
     * Returns modified response instance.
     *
     * @param ServerRequestInterface         $request
     * @param ResponseInterface              $response
     * @param UnauthorizedExceptionInterface $exception
     *
     * @return ResponseInterface
     */
    public function handle(
        ServerRequestInterface $request,
        ResponseInterface $response,
        UnauthorizedExceptionInterface $exception
    ): ResponseInterface {
        $response->getBody()->write(\json_encode([
            'error_description' => $exception->getMessage(),
        ]));

        return $response
            ->withHeader('Content-Type', 'application/json')
            ->withStatus(self::STATUS_UNAUTHORIZED);
    }
}
{{/apiInfo}}
