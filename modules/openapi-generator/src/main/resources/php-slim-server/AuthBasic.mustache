<?php
/**
 * Basic authentication middleware for Slim3 Framework
 * PHP version 5
 *
 * HTTP Basic authentication (BA) implementation is the simplest technique for
 * enforcing access controls to web resources because it does not require
 * cookies, session identifiers, or login pages; rather, HTTP Basic
 * authentication uses standard fields in the HTTP header, removing the need
 * for handshakes.
 * @ref [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication)
 * @ref [RFC7617](https://tools.ietf.org/html/rfc7617)
 *
 * @category Class
 * @package  {{middlewarePackage}}
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 {{#appName}}
 * {{{appName}}}
 *
 {{/appName}}
 {{#appDescription}}
 * {{{appDescription}}}
 {{/appDescription}}
 {{#version}}
 * OpenAPI spec version: {{{version}}}
 {{/version}}
 {{#infoEmail}}
 * Contact: {{{infoEmail}}}
 {{/infoEmail}}
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace {{middlewarePackage}};
use Slim\Container;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * Basic authentication middleware class
 *
 * @category Class
 * @package  {{middlewarePackage}}
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class AuthBasic {

    /**
     * @var int Response HTTP status code when request is unauthorized
     */
    const UNAUTHORIZED_STATUS_CODE = 401;
    /**
     * @var int Response HTTP status code when request is forbidden
     */
    const FORBIDDEN_STATUS_CODE = 403;

    /**
     * @var Container Container instance of Slim app
     */
    protected $container;

    /**
     * Class constructor.
     * Container instance might be handy when you store database connection in it.
     * Read "Add A Database Connection" guide at @ref https://www.slimframework.com/docs/v3/tutorial/first-app.html#add-a-database-connection
     *
     * @param Container $container Container instance of Slim app
     */
    public function __construct($container = null){
        $this->container = $container;
    }

    /**
     * Executes middleware logic
     *
     * @param ServerRequestInterface $req  PSR7 request
     * @param ResponseInterface      $res  PSR7 response
     * @param callable               $next Next middleware
     *
     * @return ResponseInterface
     */
    public function __invoke($req, $res, $next) {
        $token = null;
        $tokenType = null;
        if ($req->hasHeader('authorization') && count($parts = explode(" ", $req->getHeader('authorization')[0])) >= 2) {
            $token = $parts[1];
            $tokenType = $parts[0];
        }

        if ( !is_string($tokenType) || strtolower($tokenType) !== 'basic' || empty($token) ) return $this->getUnauthorizedResponse($res);

        $credentials = $this->decodeCredentials($token);
        if ( !is_array($credentials) ) return $this->getUnauthorizedResponse($res);

        list($username, $password) = $credentials;
        if ( !$this->verifyCredentials($username, $password) ) return $this->getUnauthorizedResponse($res);

        return $next($req->withAttribute('username', $username), $res);
    }

    /**
     * Decodes credentials from Basic token
     *
     * @param string $token Basic token
     *
     * @return array|null
     */
    protected function decodeCredentials($token) {
        $base64 = base64_decode($token, true);
        if (!$base64) return null;

        $credentials = explode(":", $base64);
        if (count($credentials) !== 2) return null;

        return $credentials;
    }

    /**
     * Verifies username and password with database or any storage
     *
     * @param $username Username
     * @param $password Password
     *
     * @return bool
     */
    protected function verifyCredentials($username, $password) {
        // This method needs to be overwrite by user, don't use example below blindly
        //
        // $mysqli = new \mysqli('localhost', 'my_user', 'my_password', 'my_db');
        // $stmt = $mysqli->prepare('SELECT `password_hash` FROM `users` WHERE `username`=? LIMIT 1');
        // $stmt->bind_param('s', $username);
        // $stmt->execute();
        // $stmt->bind_result($hash);
        // $stmt->fetch();
        // return password_verify($password, $hash);
        return false;
    }

    /**
     * Sets Unauthorized status code to response and writes related reason phrase to body
     *
     * @param ResponseInterface $res PSR7 response
     *
     * @return ResponseInterface
     */
    protected function getUnauthorizedResponse($res) {
        $res = $res->withStatus(AuthBasic::UNAUTHORIZED_STATUS_CODE);
        return $res->write($res->getReasonPhrase());
    }

    /**
     * Sets Forbidden status code to response and writes related reason phrase to body
     *
     * @param ResponseInterface $res PSR7 response
     *
     * @return ResponseInterface
     */
    protected function getForbiddenResponse($res) {
        $res = $res->withStatus(AuthBasic::FORBIDDEN_STATUS_CODE);
        return $res->write($res->getReasonPhrase());
    }
}
