<?php
/**
 * {{classname}}
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{apiPackage}}
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 {{#appName}}
 * {{{appName}}}
 *
 {{/appName}}
 {{#appDescription}}
 * {{{appDescription}}}
 {{/appDescription}}
 {{#version}}
 * OpenAPI spec version: {{{version}}}
 {{/version}}
 {{#infoEmail}}
 * Contact: {{{infoEmail}}}
 {{/infoEmail}}
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace {{apiPackage}};

use {{invokerPackage}}\AbstractApiController;

/**
 * {{classname}} Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{apiPackage}}
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class {{classname}} extends AbstractApiController {

    {{#operations}}
    {{#operation}}
    /**
     * {{httpMethod}} {{operationId}}
     * Summary: {{summary}}
     * Notes: {{notes}}
     {{#hasProduces}}
     * Output-Formats: [{{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}]
     {{/hasProduces}}
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function {{operationId}}($request, $response, $args) {
        {{#hasHeaderParams}}
        $headers = $request->getHeaders();
        {{#headerParams}}
        ${{paramName}} = $request->hasHeader('{{baseName}}') ? $headers['{{baseName}}'] : null;
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#hasPathParams}}
        {{#pathParams}}
        ${{paramName}} = $args['{{baseName}}'];
        {{/pathParams}}
        {{/hasPathParams}}
        {{#hasQueryParams}}
        $queryParams = $request->getQueryParams();
        {{#queryParams}}
        ${{paramName}} = $request->getQueryParam('{{baseName}}');
        {{/queryParams}}
        {{/hasQueryParams}}
        {{#hasFormParams}}
        {{#formParams}}
        {{^isFile}}
        ${{paramName}} = $request->getParsedBodyParam('{{baseName}}');
        {{/isFile}}
        {{#isFile}}
        ${{paramName}} = (key_exists('{{baseName}}', $request->getUploadedFiles())) ? $request->getUploadedFiles()['{{baseName}}'] : null;
        {{/isFile}}
        {{/formParams}}
        {{/hasFormParams}}
        {{#hasBodyParam}}
        $body = $request->getParsedBody();
        {{/hasBodyParam}}
        $response->write('How about implementing {{nickname}} as a {{httpMethod}} method ?');
        return $response;
    }
    {{#hasMore}}{{/hasMore}}
    {{/operation}}
    {{/operations}}
}
