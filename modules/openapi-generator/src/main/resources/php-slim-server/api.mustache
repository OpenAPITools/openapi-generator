<?php
/**
 * {{classname}}
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{apiPackage}}
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 {{#appName}}
 * {{{appName}}}
 *
 {{/appName}}
 {{#appDescription}}
 * {{{appDescription}}}
 {{/appDescription}}
 {{#version}}
 * OpenAPI spec version: {{{version}}}
 {{/version}}
 {{#infoEmail}}
 * Contact: {{{infoEmail}}}
 {{/infoEmail}}
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace {{apiPackage}};

/**
 * {{classname}} Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{apiPackage}}
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
abstract class {{classname}}
{

    /**
     * @var \Interop\Container\ContainerInterface Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param \Interop\Container\ContainerInterface $container Slim app container instance
     */
    public function __construct($container)
    {
        $this->container = $container;
    }

    {{#operations}}
    {{#operation}}

    /**
     * {{httpMethod}} {{operationId}}
     {{#summary}}
     * Summary: {{summary}}
     {{/summary}}
     {{#notes}}
     * Notes: {{notes}}
     {{/notes}}
     {{#hasProduces}}
     * Output-Formats: [{{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}]
     {{/hasProduces}}
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function {{operationId}}($request, $response, $args)
    {
        {{#hasHeaderParams}}
        $headers = $request->getHeaders();
        {{#headerParams}}
        ${{paramName}} = $request->hasHeader('{{baseName}}') ? $headers['{{baseName}}'] : null;
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#hasPathParams}}
        {{#pathParams}}
        ${{paramName}} = $args['{{baseName}}'];
        {{/pathParams}}
        {{/hasPathParams}}
        {{#hasQueryParams}}
        $queryParams = $request->getQueryParams();
        {{#queryParams}}
        ${{paramName}} = $request->getQueryParam('{{baseName}}');
        {{/queryParams}}
        {{/hasQueryParams}}
        {{#hasFormParams}}
        {{#formParams}}
        {{^isFile}}
        ${{paramName}} = $request->getParsedBodyParam('{{baseName}}');
        {{/isFile}}
        {{#isFile}}
        ${{paramName}} = (key_exists('{{baseName}}', $request->getUploadedFiles())) ? $request->getUploadedFiles()['{{baseName}}'] : null;
        {{/isFile}}
        {{/formParams}}
        {{/hasFormParams}}
        {{#hasBodyParam}}
        $body = $request->getParsedBody();
        {{/hasBodyParam}}
        $message = "How about implementing {{nickname}} as a {{httpMethod}} method in {{apiPackage}}\{{userClassname}} class?";
        throw new \Exception($message);

        return $response->write($message)->withStatus(501);
    }
    {{/operation}}
    {{/operations}}
}
