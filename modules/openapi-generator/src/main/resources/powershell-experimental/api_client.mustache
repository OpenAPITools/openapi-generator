{{> partial_header}}
function Invoke-OpenAPIAPIClient {
  
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory)]
        [string]$Uri,
        [Parameter(Mandatory)]
        [hashtable]$Accept,
        [Parameter(Mandatory)]
        [hashtable]$ContentType,
        [Parameter(Mandatory)]
        [hashtable]$HeaderParameters,
        [Parameter(Mandatory)]
        [hashtable]$FormParameters,
        [Parameter(Mandatory)]
        [hashtable]$QueryParameters,
        [Parameter(Mandatory)]
        [hashtable]$CookieParameters,
        [Parameter(Mandatory)]
        [string]$Body,
        [Parameter(Mandatory)]
        [string]$Method
    )

    $PSBoundParameters | Out-DebugParameter | Write-Host

    $RestMethodParameters = @{}
    $Configuraiton = Get-OpenAPIConfiguration

    #$RestMethodParameters['Uri'] = Write-Host "$($Configuration["BaseUrl"])$($Uri)"
    #Write-Host $RestMethodParameters['Uri']
    $RestMethodParameters['Uri'] = $Uri
    $RestMethodParameters['Method'] = $Method

    # cookie parameters
    foreach ($Parameter in $CookieParameters) {
        $HeaderParameters["Cookie"] = $CookieParameters[$Parameter]
    }
    if (!$CookieParametters -and $CookieParameters.Count -gt 1) {
        Write-Warning "Multipe cookie parameters found. Curently only the first one is supported/used"
    }

    if (!$HeaderParameters -and $HeaderParameters.Count -ne 0) {
        $RestMethodParameters['Headers'] = $HeaderParameters
    }
    if (!$Accept -and $Accept.Count -ne 0) {
        $RestMethodParameters['Accept'] = $Accept
    }
    if (!$ContentType -and $ContenType.Count -ne 0) {
        $RestMethodParameters['Accept'] = $ContentType
    }
    if (!$Body) {
        $RestMethodParameters['Body'] = $Body
    }

    Invoke-RestMethod @RestMethodParameters
    #Invoke-RestMethod -Uri $Uri -ContentType 'multipart/form-data' -Method $Method -Headers $Headers -Body $Fields;
}

function SelectAcceptHeaders {
    Param(
        [Parameter(Mandatory)]
        [hashtable]$Accepts
    )
}

function SelectContentTypeHeaders {
    Param(
        [Parameter(Mandatory)]
        [hashtable]$ContentTypes
    )

}
