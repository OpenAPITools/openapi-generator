{{> partial_header}}
function Invoke-{{{packageName}}}APIClient {
  
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory)]
        [string]$Uri,
        [Parameter(Mandatory)]
        [AllowEmptyCollection()]
        [string[]]$Accepts,
        [Parameter(Mandatory)]
        [AllowEmptyCollection()]
        [string[]]$ContentTypes,
        [Parameter(Mandatory)]
        [hashtable]$HeaderParameters,
        [Parameter(Mandatory)]
        [hashtable]$FormParameters,
        [Parameter(Mandatory)]
        [hashtable]$QueryParameters,
        [Parameter(Mandatory)]
        [hashtable]$CookieParameters,
        [Parameter(Mandatory)]
        [AllowEmptyString()]
        [string]$Body,
        [Parameter(Mandatory)]
        [string]$Method,
        [Parameter(Mandatory)]
        [AllowEmptyString()]
        [string]$ReturnType
    )

    $PSBoundParameters | Out-DebugParameter | Write-Host

    $Configuraiton = Get-{{{packageName}}}Configuration
    $RequestUri = $Configuration["BaseUrl"] + $Uri
    $RestMethodParameters = [System.UriBuilder]($RequestUri)

    #Write-Host $RestMethodParameters['Uri']
    #$RestMethodParameters['Uri'] = $Uri
    #$RestMethodParameters.Method = $Method

    # cookie parameters
    foreach ($Parameter in $CookieParameters) {
        if ($CookieParameters[$Parameter]) {
            $HeaderParameters["Cookie"] = $CookieParameters[$Parameter]
        }
    }
    if ($CookieParametters -and $CookieParameters.Count -gt 1) {
        Write-Warning "Multipe cookie parameters found. Curently only the first one is supported/used"
    }

    # accept, content-type headers
    $Accept = SelectAcceptHeaders -Accepts $Accepts
    if ($Accept) {
        $HeaderParameters['Accept'] = $Accept
    }

    $ContentType= SelectContentTypeHeaders -ContentTypes $ContentTypes
    if ($ContentType) {
        $HeaderParameters['Content-Type'] = $ContentType
    }

    # TODO revise code block
    # URL query string
    $HttpValues = [System.Web.HttpUtility]::ParseQueryString([String]::Empty)
    foreach ($Item in $QueryParameters.GetEnumerator()) {
        if ($Item.Value.Count -gt 1) {
            # It is an array, so treat that as a special case.
            foreach ($Value in $Item.Value) {
                # Add each item in the array, optionally mark the name of the parameter
                # to indicate it is an array parameter.
                $ParameterName = $Item.Key
                $ParameterName += '[]' # array
                $HttpValues.Add($ParameterName, $Value)
            }
        } else {
            # Add the scalar value.
            $HttpValues.Add($Item.Key,$Item.Value)
        }
    }
    # Build the request and load it with the query string.
    #$Request  = [System.UriBuilder]($Uri)
    $RestMethodParameters.Query = $HttpValues.ToString()

    # process parameters
    #if (!$HeaderParameters -and $HeaderParameters.Count -gt 0) {
    #    $RestMethodParameters['Headers'] = $HeaderParameters
    #}
    #if (!$Accept -and $Accept.Count -gt 0) {
    #    $HeaderParameters['Accept'] = $Accept
    #}
    #if (!$ContentType -and $ContenType.Count -gt 0) {
    #    $HeaderParameters['Accept'] = $ContentType
    #}

    # include form parameters in the request body
    if ($FormParameters -and $FormParameters.Count -gt 0) {
        $RequestBody = $FormParameters
    }

    if ($Body) {
        $RequestBody = $Body
    }

    #Write-Host $HeaderParameters

    $Response = Invoke-WebRequest -Uri $RequestUri `
                                  -Method $Method `
                                  -Headers $HeaderParameters `
                                  -Body $RequestBody

    return @{
        Response = DeserializeResponse -Response $Response -ReturnType $ReturnType
        StatusCode = $Response.StatusCode
        Headers = $Response.ResponseHeaders
    }
}

function SelectAcceptHeaders {
    Param(
        [Parameter(Mandatory)]
        [AllowEmptyCollection()]
        [String[]]$Accepts
    )

    foreach ($Accept in $Accepts) {
        if (IsJsonMIME -MIME $Accept) {
            return $Accept
        }
    }

    if (!($Accepts) -or $Accepts.Count -eq 0) {
        return $null
    } else {
        return $Accepts[0] # return the first one
    }
}

function SelectContentTypeHeaders {
    Param(
        [Parameter(Mandatory)]
        [AllowEmptyCollection()]
        [String[]]$ContentTypes
    )

    foreach ($ContentType in $ContentTypes) {
        if (IsJsonMIME -MIME $ContentType) {
            return $ContentType
        }
    }

    if (!($ContentTypes) -or $ContentTypes.Count -eq 0) {
        return $null
    } else {
        return $ContentTypes[0] # return the first one
    }
}

function IsJsonMIME {
    Param(
        [Parameter(Mandatory)]
        [string]$MIME
    )

    if ($MIME -match "(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$") {
        return $true
    } else {
        return $false
    }
}

function DeserializeResponse {
    Param(
        [Parameter(Mandatory)]
        [AllowEmptyString()]
        [string]$ReturnType,
        [Parameter(Mandatory)]
        [AllowEmptyString()]
        [string]$Response
    )

    If ([string]::IsNullOrEmpty($ReturnType)) { # void response
        return $Response
    } Elseif ($ReturnType -match '\[\]$') { # array
        return ConvertFrom-Json $Response
    } Elseif (@("String", "Boolean", "System.DateTime") -contains $ReturnType) { # string, boolean ,datetime
        return $Response
    } Else { # model
        return ConvertFrom-Json $Response
    }
}
