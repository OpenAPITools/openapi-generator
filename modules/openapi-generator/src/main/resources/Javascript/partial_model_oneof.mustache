
{{#emitJSDoc}}
/**
 * The {{classname}} model module.
 * @module {{#invokerPackage}}{{.}}/{{/invokerPackage}}{{#modelPackage}}{{.}}/{{/modelPackage}}{{classname}}
 * @version {{projectVersion}}
 */
{{/emitJSDoc}}
class {{classname}} {
    {{#emitJSDoc}}/**
     * Constructs a new <code>{{classname}}</code>.{{#description}}
     * {{.}}{{/description}}
     * @alias module:{{#invokerPackage}}{{.}}/{{/invokerPackage}}{{#modelPackage}}{{.}}/{{/modelPackage}}{{classname}}
     * @param {{=< >=}}{(<#oneOf>module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><&.><^-last>|</-last></oneOf>)}<={{ }}=> The actual instance to initialize {{classname}}.
     */
    {{/emitJSDoc}}
    constructor(obj = null) {
        this.setActualInstance(obj);
    }

    {{#emitJSDoc}}
    /**
     * Constructs a <code>{{classname}}</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {{=< >=}}{module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><classname>}<={{ }}=> obj Optional instance to populate.
     * @return {{=< >=}}{module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><classname>}<={{ }}=> The populated <code>{{classname}}</code> instance.
     */
    {{/emitJSDoc}}
    static constructFromObject(data, obj) {
        if (data){{! TODO: support polymorphism: discriminator property on data determines class to instantiate.}} {
            var match = 0;
            var errorMessages = [];
            //obj = obj || new {{classname}}();
            {{#oneOf}}
            try {
                obj = new {{classname}}({{{.}}}.contructFromObject(data, obj));
                match++;
            }
            catch(err) {
                // json data failed to deserialize into {{{.}}}
                errorMessages.push("Failed to desserialize into JOSN data into {{{.}}}: " + err)
            }

            {{/oneOf}}
            if (match > 1) {
                throw new Error("Multiple matches found when deserializing the payload into {{{classname}}} with oneOf schemas {{#oneOf}}{{{.}}}{{^-last}}, {{/-last}}{{/oneOf}}. JSON data: " + data);
            } else if (match === 0) {
                throw new Error("No match found when deserializing the payload into {{{classname}}} with oneOf schemas {{#oneOf}}{{{.}}}{{^-last}}, {{/-last}}{{/oneOf}}. Details: " +
                                errorMessages.join(", "));
            } else { // only 1 match
                return obj;
            }
        }
        return obj;
    }

    {{#emitJSDoc}}
    /**
     * Gets the actaul instance, which can be {{#oneOf}}<code>{{{.}}}</code>{{^-last}}, {{/-last}}{{/oneOf}}.
     * @return {{=< >=}}{(<#oneOf>module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><&.><^-last>|</-last></oneOf>)}<={{ }}=> The actual instance.
     */
    {{/emitJSDoc}}
    getActualInstance() {
        return this.actualInstance;
    }

    {{#emitJSDoc}}
    /**
     * Sets the actaul instance, which can be {{#oneOf}}<code>{{{.}}}</code>{{^-last}}, {{/-last}}{{/oneOf}}.
     * @param {{=< >=}}{(<#oneOf>module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><&.><^-last>|</-last></oneOf>)}<={{ }}=> The actual instance.
     */
    {{/emitJSDoc}}
    setActualInstance(obj) {
        {{#oneOf}}
        if (obj instanceof {{{.}}}) {
            this.actualInstance = obj;
            return;
        }
        {{/oneOf}}
        {{#isNullable}}
        if (obj === null) {
           this.actualInstance = null;
           return;
        }
        {{/isNullable}}

        throw new Error('Failed to set actual instance, which must be {{oneOf}}: ' + obj);

    }

    {{#emitJSDoc}}
    /**
     * Returns the JSON representation of the actual intance.
     * @return {string}
     */
    {{/emitJSDoc}}
    toJSON = function(){
        {{#isNullable}}
        if (getActualInstance() === null) {
            return null;
        }
        {{/isNullable}}
        return JSON.stringify(getActualInstance());
    }

}

{{#vars}}{{#emitJSDoc}}/**{{#description}}
 * {{{.}}}{{/description}}
 * @member {{=< >=}}{<&vendorExtensions.x-jsdoc-type>}<={{ }}=> {{baseName}}{{#defaultValue}}
 * @default {{{.}}}{{/defaultValue}}
 */{{/emitJSDoc}}
{{classname}}.prototype['{{baseName}}'] = {{{defaultValue}}}{{^defaultValue}}undefined{{/defaultValue}};

{{/vars}}



{{classname}}.OneOf = [{{#oneOf}}"{{{.}}}"{{^-last}}, {{/-last}}{{/oneOf}}];

export default {{classname}};
