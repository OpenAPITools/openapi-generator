{{>partial_header}}
package {{packageName}}

import (
	"net/http"
{{#routers}}
    {{#stdmux}}
    "fmt"
    {{/stdmux}}
	{{#mux}}
	"github.com/gorilla/mux"
	{{#featureCORS}}
	"github.com/gorilla/handlers"
	{{/featureCORS}}
	{{/mux}}
	{{#chi}}
	"github.com/go-chi/chi/v5"
	{{#featureCORS}}
	"github.com/go-chi/cors"
	{{/featureCORS}}
	{{/chi}}
{{/routers}}
)

// A Route defines the parameters for an api endpoint
type Route struct {
	Method	  string
	Pattern	 string
	HandlerFunc http.HandlerFunc
}

// Routes is a map of defined api endpoints
type Routes map[string]Route

// Router defines the required methods for retrieving api routes
type Router interface {
	Routes() Routes
}
{{#routers}}
{{#stdmux}}
{{#featureCORS}}
func CORS(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Access-Control-Allow-Origin", "*")
        w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
        w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

        if r.Method == http.MethodOptions {
            w.WriteHeader(http.StatusNoContent)
            return
        }

        next.ServeHTTP(w, r)
    })
}
{{/featureCORS}}
{{/stdmux}}
{{/routers}}
// NewRouter creates a new router for any number of api routers
func NewRouter(routers ...Router) {{#routers}}{{#stdmux}}*http.ServeMux{{/stdmux}}{{#mux}}*mux.Router{{/mux}}{{#chi}}chi.Router{{/chi}}{{/routers}} {
{{#routers}}
    {{#stdmux}}
    router := http.NewServeMux()
    {{/stdmux}}
	{{#mux}}
	router := mux.NewRouter().StrictSlash(true)
	{{/mux}}
	{{#chi}}
	router := chi.NewRouter()
	router.Use(Logger)
	{{#featureCORS}}
	router.Use(cors.Handler(cors.Options{}))
	{{/featureCORS}}
	{{/chi}}
{{/routers}}
	for _, api := range routers {
		for {{#routers}}{{#stdmux}}name{{/stdmux}}{{#mux}}name{{/mux}}{{#chi}}_{{/chi}}{{/routers}}, route := range api.Routes() {
			var handler http.Handler = route.HandlerFunc
{{#routers}}
    {{#stdmux}}
            handler = Logger(handler, name)
            {{#featureCORS}}
            handler = CORS(handler)
            {{/featureCORS}}
            router.HandleFunc(fmt.Sprintf("%s %s", route.Method, route.Pattern), handler.ServeHTTP)
    {{/stdmux}}
	{{#mux}}
			handler = Logger(handler, name)
			{{#featureCORS}}
			handler = handlers.CORS()(handler)
			{{/featureCORS}}

			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(name).
				Handler(handler)
	{{/mux}}
	{{#chi}}
			router.Method(route.Method, route.Pattern, handler)
	{{/chi}}
{{/routers}}
		}
	}

	return router
}
