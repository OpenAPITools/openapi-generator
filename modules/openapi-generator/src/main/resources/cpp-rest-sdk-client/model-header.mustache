{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{modelHeaderGuardPrefix}}_{{classname}}_H_
#define {{modelHeaderGuardPrefix}}_{{classname}}_H_

{{^parent}}
{{{defaultInclude}}}
#include "../ModelBase.h"
{{/parent}}

{{#imports}}{{{this}}}
{{/imports}}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{#isEnum}}
class {{declspec}} {{classname}}
    : public {{#parent}}{{{parent}}}{{/parent}}{{^parent}}ModelBase{{/parent}}
{
public:
    {{classname}}();
    virtual ~{{classname}}();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class e{{classname}}
    {
        {{#allowableValues}}
        {{#enumVars}}
        {{#enumDescription}}
        /// <summary>
        /// {{enumDescription}}
        /// </summary>
        {{/enumDescription}}
        {{classname}}_{{{name}}}{{^last}},{{/last}}
        {{/enumVars}}
        {{/allowableValues}}
    };

    e{{classname}} getValue() const;
    void setValue(e{{classname}} const value);

    protected:
        e{{classname}} m_value;
};
{{/isEnum}}
{{^isEnum}}

/// <summary>
/// {{description}}
/// </summary>
class {{declspec}} {{classname}}
    : public {{#parent}}{{{parent}}}{{/parent}}{{^parent}}ModelBase{{/parent}}
{
public:
    {{classname}}();
    virtual ~{{classname}}();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// {{classname}} members

    {{#vars}}
    {{^isInherited}}
    /// <summary>
    /// {{description}}
    /// </summary>
    {{#isContainer}}{{{dataType}}}& {{getter}}();
    {{/isContainer}}{{^isContainer}}{{{dataType}}} {{getter}}() const;
    {{/isContainer}}bool {{nameInCamelCase}}IsSet() const;
    void unset{{name}}();

    {{#isPrimitiveType}}
    void {{setter}}({{{dataType}}} value);
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    void {{setter}}(const {{{dataType}}}& value);
    {{/isPrimitiveType}}

    {{/isInherited}}
    {{/vars}}

protected:
    {{#vars}}
    {{^isInherited}}
    {{{dataType}}} m_{{name}};
    bool m_{{name}}IsSet;
    {{/isInherited}}
    {{/vars}}
};

{{/isEnum}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

#endif /* {{modelHeaderGuardPrefix}}_{{classname}}_H_ */
{{/model}}
{{/models}}
