import 'dart:async';
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:built_value/serializer.dart';

{{#operations}}
{{#modelImports}}import 'package:{{pubName}}/model/{{.}}.dart';
{{/modelImports}}
{{#fullImports}}import '{{.}}';
{{/fullImports}}

class {{classname}} {
    final Dio _dio;
    Serializers _serializers;

    {{classname}}(this._dio, this._serializers);

    {{#operation}}
    /// {{{summary}}}
    ///
    /// {{{notes}}}
    Future<Response{{#returnType}}<{{{returnType}}}>{{/returnType}}>{{nickname}}({{^hasRequiredParams}}{ {{/hasRequiredParams}}{{#requiredParams}}
        {{{dataType}}} {{paramName}},{{#-last}} { {{/-last}}{{/requiredParams}}{{#optionalParams}}
        {{{dataType}}} {{paramName}},{{/optionalParams}}
        CancelToken cancelToken,
        Map<String, String> headers,
        ProgressCallback onSendProgress,
        ProgressCallback onReceiveProgress,
    }) async {
        final String _path = '{{{path}}}'{{#pathParams}}.replaceAll('{' r'{{baseName}}' '}', {{{paramName}}}.toString()){{/pathParams}};

        final Map<String, dynamic> queryParams = {};
        final Map<String, String> headerParams = Map.from(headers ?? {});
        dynamic bodyData;

        {{#headerParams}}
        headerParams[r'{{baseName}}'] = {{paramName}};
        {{/headerParams}}
        {{#queryParams}}
        queryParams[r'{{baseName}}'] = {{paramName}};
        {{/queryParams}}
        queryParams.removeWhere((key, value) => value == null);
        headerParams.removeWhere((key, value) => value == null);

        final List<String> contentTypes = [{{^hasConsumes}}];{{/hasConsumes}}{{#hasConsumes}}{{#consumes}}
            '{{{mediaType}}}',{{/consumes}}
        ];{{/hasConsumes}}
        {{#hasFormParams}}

        final Map<String, dynamic> formData = {};
        {{#isMultipart}}
        {{#formParams}}
        {{^isFile}}
        if ({{paramName}} != null) {
            formData[r'{{baseName}}'] = parameterToString(_serializers, {{paramName}});
        }
        {{/isFile}}
        {{#isFile}}
        if ({{paramName}} != null) {
            formData[r'{{baseName}}'] = MultipartFile.fromBytes({{paramName}}, filename: r'{{baseName}}');
        }
        {{/isFile}}
        {{/formParams}}
        bodyData = FormData.fromMap(formData);
        {{/isMultipart}}
        {{^isMultipart}}
        {{#formParams}}
        formData['{{baseName}}'] = parameterToString(_serializers, {{paramName}});
        {{/formParams}}
        bodyData = formData;
        {{/isMultipart}}
        {{/hasFormParams}}
        {{#bodyParam}}

            {{#isArray}}
        const type = FullType(BuiltList, [FullType({{baseType}})]);
        final serializedBody = _serializers.serialize({{paramName}}, specifiedType: type);
            {{/isArray}}
            {{^isArray}}
        final serializedBody = _serializers.serialize({{paramName}});
            {{/isArray}}
        final json{{paramName}} = json.encode(serializedBody);
        bodyData = json{{paramName}};
        {{/bodyParam}}

        return _dio.request(
            _path,
            queryParameters: queryParams,
            data: bodyData,
            options: Options(
                method: '{{httpMethod}}'.toUpperCase(),
                {{#isResponseFile}}
                responseType: ResponseType.bytes,
                {{/isResponseFile}}
                headers: headerParams,
                extra: {
                    'secure': [{{^hasAuthMethods}}],{{/hasAuthMethods}}{{#hasAuthMethods}}
                        {{#authMethods}}{
                            'type': '{{type}}',
                            'name': '{{name}}',{{#isApiKey}}
                            'keyName': '{{keyParamName}}',
                            'where': '{{#isKeyInQuery}}query{{/isKeyInQuery}}{{#isKeyInHeader}}header{{/isKeyInHeader}}',{{/isApiKey}}
                        },{{/authMethods}}
                    ],{{/hasAuthMethods}}
                },
                contentType: contentTypes.isNotEmpty ? contentTypes[0] : 'application/json',
            ),
            cancelToken: cancelToken,
            onSendProgress: onSendProgress,
            onReceiveProgress: onReceiveProgress,
        ){{#returnType}}.then((response) {
        {{#isResponseFile}}
            final data = response.data;
        {{/isResponseFile}}
        {{^isResponseFile}}
        {{#returnSimpleType}}
        {{#returnTypeIsPrimitive}}
            final data = response.data as {{{returnType}}};
        {{/returnTypeIsPrimitive}}
        {{^returnTypeIsPrimitive}}
            final serializer = _serializers.serializerForType({{{returnType}}});
            final data = _serializers.deserializeWith<{{{returnType}}}>(serializer, response.data is String ? jsonDecode(response.data) : response.data);
        {{/returnTypeIsPrimitive}}
        {{/returnSimpleType}}
        {{^returnSimpleType}}
            const collectionType = {{#isMap}}BuiltMap{{/isMap}}{{^isMap}}BuiltList{{/isMap}};
            const type = FullType(collectionType, [{{#isMap}}FullType(String), {{/isMap}}FullType({{{returnBaseType}}})]);
            final {{{returnType}}} data = _serializers.deserialize(response.data is String ? jsonDecode(response.data) : response.data, specifiedType: type);
        {{/returnSimpleType}}
        {{/isResponseFile}}

            return Response<{{{returnType}}}>(
                data: data,
                headers: response.headers,
                request: response.request,
                redirects: response.redirects,
                statusCode: response.statusCode,
                statusMessage: response.statusMessage,
                extra: response.extra,
            );
        }){{/returnType}};
    }

    {{/operation}}
}
{{/operations}}
