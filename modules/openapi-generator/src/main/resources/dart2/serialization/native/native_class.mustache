class {{{classname}}} {
{{>dart_constructor}}

  {{#vars}}
  {{#description}}
  /// {{{.}}}
  {{/description}}
  {{^isEnum}}
    {{#minimum}}
  // minimum: {{{.}}}
    {{/minimum}}
    {{#maximum}}
  // maximum: {{{.}}}
    {{/maximum}}
  {{/isEnum}}
  {{{datatypeWithEnum}}}{{^required}}?{{/required}} {{{name}}};

  {{/vars}}
  @override
  bool operator ==(Object other) => identical(this, other) || other is {{{classname}}} &&
  {{#vars}}
     other.{{{name}}} == {{{name}}}{{^-last}} &&{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  int get hashCode =>
  {{#vars}}
    {{{name}}}.hashCode{{^-last}} +{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  String toString() => '{{{classname}}}[{{#vars}}{{{name}}}=${{{name}}}{{^-last}}, {{/-last}}{{/vars}}]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
  {{#vars}}
    {{^required}}
    if ({{{name}}} != null) {
    {{/required}}
    {{#isDateTime}}
      {{#pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}.millisecondsSinceEpoch
        : {{{name}}}.toUtc().toIso8601String();
      {{/pattern}}
      {{^pattern}}
      json[r'{{{baseName}}}'] = {{{name}}}{{^required}}!{{/required}}.toUtc().toIso8601String();
      {{/pattern}}
    {{/isDateTime}}
    {{#isDate}}
      {{#pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}.millisecondsSinceEpoch
        : _dateFormatter.format({{{name}}}{{^required}}!{{/required}}.toUtc());
      {{/pattern}}
      {{^pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateFormatter.format({{{name}}}{{^required}}!{{/required}}.toUtc());
      {{/pattern}}
    {{/isDate}}
    {{^isDateTime}}
      {{^isDate}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}{{{name}}};
      {{/isDate}}
    {{/isDateTime}}
    {{^required}}
    }
    {{/required}}
  {{/vars}}
    return json;
  }

  /// Returns a new [{{{classname}}}] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static {{{classname}}} fromJson(Map<String, dynamic> json) => {{{classname}}}(
  {{#vars}}
    {{#isDateTime}}
        {{{name}}}: mapDateTime(json, r'{{{baseName}}}', '{{{pattern}}}'){{^isNullable}}!{{/isNullable}},
    {{/isDateTime}}
    {{#isDate}}
        {{{name}}}: mapDateTime(json, r'{{{baseName}}}', '{{{pattern}}}'){{^isNullable}}!{{/isNullable}},
    {{/isDate}}
    {{^isDateTime}}
      {{^isDate}}
        {{#complexType}}
          {{#isArray}}
            {{#items.isArray}}
        {{{name}}}: json[r'{{{baseName}}}'] is List
          ? (json[r'{{{baseName}}}'] as List).map{{#items.complexType}}<List<{{items.complexType}}>>{{/items.complexType}}(
              {{#items.complexType}}
              (final j) => {{items.complexType}}.listFromJson(j)
              {{/items.complexType}}
              {{^items.complexType}}
              (e) => e == null ? <{{items.items.dataType}}>[] : (e as List).cast<{{items.items.dataType}}>()
              {{/items.complexType}}
            ).toList(growable: false)
          : [],
            {{/items.isArray}}
            {{^items.isArray}}
            {{#isPrimitiveType}}
        {{{name}}}: (json[r'{{{baseName}}}'] as List).cast<{{{complexType}}}>(),
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
        {{{name}}}: {{{complexType}}}.listFromJson(json[r'{{{baseName}}}']),
            {{/isPrimitiveType}}
            {{/items.isArray}}
          {{/isArray}}
          {{^isArray}}
            {{#isMap}}
              {{#items.isArray}}
        {{{name}}}: json[r'{{{baseName}}}'] == null
          ? null
                {{#items.complexType}}
          : {{items.complexType}}.mapListFromJson(json[r'{{{baseName}}}']),
                {{/items.complexType}}
                {{^items.complexType}}
          : json[r'{{{baseName}}}'] as Map<String, List>,
                {{/items.complexType}}
              {{/items.isArray}}
              {{^items.isArray}}
                {{#items.isMap}}
                  {{#items.complexType}}
        {{{name}}}: {{items.complexType}}.mapFromJson(json[r'{{{baseName}}}']),
                  {{/items.complexType}}
                  {{^items.complexType}}
        {{{name}}}: json[r'{{{baseName}}}'] as Map<String, {{{items.datatypeWithEnum}}}>,
                  {{/items.complexType}}
                {{/items.isMap}}
                {{^items.isMap}}
        {{{name}}}: json[r'{{{baseName}}}'] as {{{datatypeWithEnum}}},
                {{/items.isMap}}
              {{/items.isArray}}
            {{/isMap}}
            {{^isMap}}
              {{#isBinary}}
        {{{name}}}: null, // No support for decoding binary content from JSON
              {{/isBinary}}
              {{^isBinary}}
        {{{name}}}: {{{complexType}}}.fromJson(json[r'{{{baseName}}}']),
              {{/isBinary}}
            {{/isMap}}
          {{/isArray}}
        {{/complexType}}
        {{^complexType}}
          {{#isArray}}
            {{#isEnum}}
        {{{name}}}: {{{items.datatypeWithEnum}}}.listFromJson(json[r'{{{baseName}}}']),
            {{/isEnum}}
            {{^isEnum}}
        {{{name}}}: json[r'{{{baseName}}}'] is {{#uniqueItems}}Set{{/uniqueItems}}{{^uniqueItems}}List{{/uniqueItems}}
          ? (json[r'{{{baseName}}}'] as {{#uniqueItems}}Set{{/uniqueItems}}{{^uniqueItems}}List{{/uniqueItems}}).cast<{{{items.datatype}}}>()
          : {{#uniqueItems}}{}{{/uniqueItems}}{{^uniqueItems}}[]{{/uniqueItems}},
            {{/isEnum}}
          {{/isArray}}
          {{^isArray}}
            {{#isMap}}
        {{{name}}}: json[r'{{{baseName}}}'] as Map<String, {{{items.datatypeWithEnum}}}>,
            {{/isMap}}
            {{^isMap}}
                {{^isEnum}}
        {{{name}}}: json[r'{{{baseName}}}'] as {{{datatypeWithEnum}}},
                {{/isEnum}}
                {{#isEnum}}
        {{{name}}}: {{{enumName}}}.fromJson(json[r'{{{baseName}}}']),
                {{/isEnum}}
            {{/isMap}}
          {{/isArray}}
        {{/complexType}}
      {{/isDate}}
    {{/isDateTime}}
  {{/vars}}
    );

  static List<{{{classname}}}> listFromJson(List json, {bool? growable,}) =>
    json.isNotEmpty
      ? json.map<{{{classname}}}>((i) => {{{classname}}}.fromJson(i as Map<String, dynamic>)).toList(growable: true == growable)
      : <{{{classname}}}>[];

  static Map<String, {{{classname}}}> mapFromJson(dynamic json) {
    final map = <String, {{{classname}}}>{};
    if (json is Map && json.isNotEmpty) {
      json
        .cast<String, dynamic>()
        .forEach((key, dynamic value) => map[key] = {{{classname}}}.fromJson(value));
    }
    return map;
  }

  // maps a json object with a list of {{{classname}}}-objects as value to a dart map
  static Map<String, List<{{{classname}}}>> mapListFromJson(dynamic json, {bool? growable,}) {
    final map = <String, List<{{{classname}}}>>{};
    if (json is Map && json.isNotEmpty) {
      json
        .cast<String, dynamic>()
        .forEach((key, dynamic value) {
          map[key] = {{{classname}}}.listFromJson(
            value,
            growable: growable,
          );
        });
    }
    return map;
  }
}
{{#vars}}
    {{#isEnum}}
        {{^isContainer}}

{{>serialization/native/native_enum_inline}}
        {{/isContainer}}
        {{#isContainer}}
            {{#mostInnerItems}}

{{>serialization/native/native_enum_inline}}
            {{/mostInnerItems}}
        {{/isContainer}}
    {{/isEnum}}
{{/vars}}
