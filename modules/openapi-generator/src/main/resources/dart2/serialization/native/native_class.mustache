class {{{classname}}} {
{{>dart_constructor}}
{{#vars}}
  {{#description}}
  /// {{{.}}}
  {{/description}}
  {{^isEnum}}
    {{#minimum}}
  ///
  /// Minimum value: {{{.}}}
    {{/minimum}}
    {{#maximum}}
    {{^minimum}}
  ///
    {{/minimum}}
  /// Maximum value: {{{.}}}
    {{/maximum}}
  {{/isEnum}}
  {{{datatypeWithEnum}}}{{#isNullable}}?{{/isNullable}} {{{name}}};

{{/vars}}
  @override
  bool operator ==(Object other) => identical(this, other) || other is {{{classname}}} &&
  {{#vars}}
     other.{{{name}}} == {{{name}}}{{^-last}} &&{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  int get hashCode =>
  // ignore: unnecessary_parenthesis
  {{#vars}}
    ({{#isNullable}}{{{name}}} == null ? 0 : {{/isNullable}}{{{name}}}.hashCode){{^-last}} +{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  String toString() => '{{{classname}}}[{{#vars}}{{{name}}}=${{{name}}}{{^-last}}, {{/-last}}{{/vars}}]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
  {{#vars}}
    {{#isNullable}}
    if ({{{name}}} != null) {
    {{/isNullable}}
    {{#isDateTime}}
      {{#pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}{{#isNullable}}!{{/isNullable}}.millisecondsSinceEpoch
        : {{{name}}}{{#isNullable}}!{{/isNullable}}.toUtc().toIso8601String();
      {{/pattern}}
      {{^pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}{{{name}}}.toUtc().toIso8601String();
      {{/pattern}}
    {{/isDateTime}}
    {{#isDate}}
      {{#pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}{{#isNullable}}!{{/isNullable}}.millisecondsSinceEpoch
        : _dateFormatter.format({{{name}}}{{#isNullable}}!{{/isNullable}}.toUtc());
      {{/pattern}}
      {{^pattern}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateFormatter.format({{{name}}}.toUtc());
      {{/pattern}}
    {{/isDate}}
    {{^isDateTime}}
      {{^isDate}}
      json[r'{{{baseName}}}'] = {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}{{{name}}};
      {{/isDate}}
    {{/isDateTime}}
    {{#isNullable}}
    }
    {{/isNullable}}
  {{/vars}}
    return json;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    {{#vars}}{{#required}}'{{{baseName}}}',
{{/required}}{{/vars}}
  };

  /// Returns a new [{{{classname}}}] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static {{{classname}}}? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(
        false,
        () {
          for (final key in requiredKeys) {
            if (!json.containsKey(key)) {
              throw FormatException('Required key "{{{classname}}}.$key" is missing from JSON.', json);
            }
            final value = json[key];
            if (null == value) {
              throw FormatException('Required key "{{{classname}}}.$key" cannot be null.', json);
            }
          }
        },
      );

      return {{{classname}}}(
  {{#vars}}
    {{#isDateTime}}
        {{{name}}}: mapDateTime(json, r'{{{baseName}}}', '{{{pattern}}}'){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
    {{/isDateTime}}
    {{#isDate}}
        {{{name}}}: mapDateTime(json, r'{{{baseName}}}', '{{{pattern}}}'){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
    {{/isDate}}
    {{^isDateTime}}
      {{^isDate}}
        {{#complexType}}
          {{#isArray}}
            {{#items.isArray}}
        {{{name}}}: json[r'{{{baseName}}}'] is List
          ? (json[r'{{{baseName}}}'] as List).map(
              {{#items.complexType}}
              {{items.complexType}}.listFromJson(json[r'{{{baseName}}}'])
              {{/items.complexType}}
              {{^items.complexType}}
              (e) => e == null ? null : (e as List).cast<{{items.items.dataType}}>()
              {{/items.complexType}}
            ).toList()
          : null,
            {{/items.isArray}}
            {{^items.isArray}}
        {{{name}}}: {{{complexType}}}.listFromJson(json[r'{{{baseName}}}']){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
            {{/items.isArray}}
          {{/isArray}}
          {{^isArray}}
            {{#isMap}}
              {{#items.isArray}}
        {{{name}}}: json[r'{{{baseName}}}'] == null
          ? {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}
                {{#items.complexType}}
            : {{items.complexType}}.mapListFromJson(json[r'{{{baseName}}}']),
                {{/items.complexType}}
                {{^items.complexType}}
            : mapCastOfType<String, List>(json, r'{{{baseName}}}'),
                {{/items.complexType}}
              {{/items.isArray}}
              {{^items.isArray}}
                {{#items.isMap}}
                  {{#items.complexType}}
        {{{name}}}: {{items.complexType}}.mapFromJson(json[r'{{{baseName}}}']){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
                  {{/items.complexType}}
                  {{^items.complexType}}
        {{{name}}}: mapCastOfType<String, dynamic>(json, r'{{{baseName}}}'){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
                  {{/items.complexType}}
                {{/items.isMap}}
                {{^items.isMap}}
        {{{name}}}: mapValueOfType<{{{datatypeWithEnum}}}>(json, r'{{{baseName}}}'){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
                {{/items.isMap}}
              {{/items.isArray}}
            {{/isMap}}
            {{^isMap}}
              {{#isBinary}}
        {{{name}}}: null, // No support for decoding binary content from JSON
              {{/isBinary}}
              {{^isBinary}}
        {{{name}}}: {{{complexType}}}.fromJson(json[r'{{{baseName}}}']){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
              {{/isBinary}}
            {{/isMap}}
          {{/isArray}}
        {{/complexType}}
        {{^complexType}}
          {{#isArray}}
            {{#isEnum}}
        {{{name}}}: {{{items.datatypeWithEnum}}}.listFromJson(json[r'{{{baseName}}}']){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
            {{/isEnum}}
            {{^isEnum}}
        {{{name}}}: json[r'{{{baseName}}}'] is {{#uniqueItems}}Set{{/uniqueItems}}{{^uniqueItems}}List{{/uniqueItems}}
            ? (json[r'{{{baseName}}}'] as {{#uniqueItems}}Set{{/uniqueItems}}{{^uniqueItems}}List{{/uniqueItems}}).cast<{{{items.datatype}}}>()
            : {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}},
            {{/isEnum}}
          {{/isArray}}
          {{^isArray}}
            {{#isMap}}
        {{{name}}}: mapCastOfType<String, {{{items.datatype}}}>(json, r'{{{baseName}}}'){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
            {{/isMap}}
            {{^isMap}}
              {{#isNumber}}
        {{{name}}}: json[r'{{{baseName}}}'] == null
            ? {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}
            : {{{datatypeWithEnum}}}.parse(json[r'{{{baseName}}}'].toString()),
              {{/isNumber}}
              {{^isNumber}}
                {{^isEnum}}
        {{{name}}}: mapValueOfType<{{{datatypeWithEnum}}}>(json, r'{{{baseName}}}'){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
                {{/isEnum}}
                {{#isEnum}}
        {{{name}}}: {{{enumName}}}.fromJson(json[r'{{{baseName}}}']){{#required}}!{{/required}}{{^required}}{{#defaultValue}} ?? {{{.}}}{{/defaultValue}}{{/required}},
                {{/isEnum}}
              {{/isNumber}}
            {{/isMap}}
          {{/isArray}}
        {{/complexType}}
      {{/isDate}}
    {{/isDateTime}}
  {{/vars}}
      );
    }
    return null;
  }

  static List<{{{classname}}}>? listFromJson(dynamic json, {bool emptyIsNull = false, bool growable = false,}) {
    final result = <{{{classname}}}>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = {{{classname}}}.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return emptyIsNull ? null : result.toList(growable: growable);
  }

  static Map<String, {{{classname}}}> mapFromJson(dynamic json) {
    final map = <String, {{{classname}}}>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = {{{classname}}}.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of {{{classname}}}-objects as value to a dart map
  static Map<String, List<{{{classname}}}>> mapListFromJson(dynamic json, {bool emptyIsNull = false, bool growable = false,}) {
    final map = <String, List<{{{classname}}}>>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = {{{classname}}}.listFromJson(entry.value, emptyIsNull: emptyIsNull, growable: growable,);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }
}
{{#vars}}
    {{#isEnum}}
        {{^isContainer}}

{{>serialization/native/native_enum_inline}}
        {{/isContainer}}
        {{#isContainer}}
            {{#mostInnerItems}}

{{>serialization/native/native_enum_inline}}
            {{/mostInnerItems}}
        {{/isContainer}}
    {{/isEnum}}
{{/vars}}
