{{#description}}/// {{{.}}}{{/description}}
class {{{enumName}}} {
  /// Instantiate a new enum with the provided [value].
  const {{{enumName}}}._(this.value);

  /// The underlying value of this enum member.
  final {{{dataType}}}? value;

  @override
  String toString() => {{#isString}}value ?? ''{{/isString}}{{^isString}}value == null ? '' : value.toString(){{/isString}};

  {{{dataType}}}? toJson() => value;

  {{#allowableValues}}
    {{#enumVars}}
  static const {{{name}}} = {{{enumName}}}._({{#isString}}r{{/isString}}{{{value}}});
    {{/enumVars}}
  {{/allowableValues}}

  /// List of all possible values in this [enum][{{{enumName}}}].
  static const values = <{{{enumName}}}>[
  {{#allowableValues}}
    {{#enumVars}}
    {{{name}}},
    {{/enumVars}}
  {{/allowableValues}}
  ];

  static {{{enumName}}} fromJson(dynamic value) =>
    {{{enumName}}}TypeTransformer().decode(value);

  static List<{{{enumName}}}> listFromJson(List json, {bool? growable,}) =>
    json.isNotEmpty
      ? json.map<{{{enumName}}}>((i) => {{{enumName}}}.fromJson(i as Map<String, dynamic>)).toList(growable: true == growable)
      : <{{{enumName}}}>[];
}

/// Transformation class that can [encode] an instance of [{{{enumName}}}] to {{{dataType}}},
/// and [decode] dynamic data back to [{{{enumName}}}].
class {{{enumName}}}TypeTransformer {
  factory {{{enumName}}}TypeTransformer() => _instance ??= const {{{enumName}}}TypeTransformer._();

  const {{{enumName}}}TypeTransformer._();

  {{{dataType}}}? encode({{{enumName}}} data) => data.value;

  /// Decodes a [dynamic value][data] to a {{{enumName}}}.
  ///
  /// If the [dynamic value][data] cannot be decoded successfully, then an [UnimplementedError] is thrown.
  {{{enumName}}} decode(dynamic data) {
    {{#allowableValues}}
    {{#enumVars}}
    if (data == {{#isString}}r{{/isString}}{{{value}}}) {
      return {{{enumName}}}.{{{name}}};
    }
    {{/enumVars}}
    {{/allowableValues}}
    throw ArgumentError('Unknown enum value to decode: $data');
  }

  /// Singleton [{{{enumName}}}TypeTransformer] instance.
  static {{{enumName}}}TypeTransformer? _instance;
}
