class {{{classname}}} {
  {{{classname}}}({
  {{#vars}}
    {{#isNullable}}{{#required}}@required {{/required}}this.{{{name}}},{{/isNullable}}{{^isNullable}}{{#defaultValue}}this.{{{name}}} = {{#isContainer}}const {{/isContainer}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}{{#required}}@required {{/required}}this.{{{name}}}{{/defaultValue}},{{/isNullable}}
  {{/vars}}
  });

  {{#vars}}
  {{#description}}/// {{{description}}}{{/description}}
  {{^isEnum}}
  {{{dataType}}} {{{name}}};
  {{/isEnum}}
  {{#isEnum}}
  {{#allowableValues}}
  {{#min}} // range from {{{min}}} to {{{max}}}{{/min}}{{{classname}}}{{{enumName}}} {{{name}}}{{#required}} = {{{defaultValue}}}{{/required}}{{^required}}{{/required}};
  {{/allowableValues}}
  {{/isEnum}}

  {{/vars}}
  @override
  bool operator ==(Object other) => identical(this, other) || other is {{{classname}}} &&
  {{#vars}}
     other.{{{name}}} == {{{name}}}{{^-last}} &&{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  int get hashCode => 0 +
  {{#vars}}
    {{#isNullable}}({{{name}}}?.hashCode ?? 0){{/isNullable}}{{^isNullable}}{{{name}}}.hashCode{{/isNullable}}{{^-last}} +{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  String toString() => '{{{classname}}}[{{#vars}}{{{name}}}=${{{name}}}, {{/vars}}]';

  {{{classname}}}.fromJson(Map<String, dynamic> json) {
    if (json == null) return;
  {{#vars}}
  {{#isDateTime}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      DateTime.parse(json['{{{baseName}}}']);
  {{/isDateTime}}
  {{#isDate}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      DateTime.parse(json['{{{baseName}}}']);
  {{/isDate}}
  {{^isDateTime}}
  {{^isDate}}
    {{#complexType}}
      {{#isListContainer}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
    {{#items.isListContainer}}
      (json['{{{baseName}}}'] as List).map(
        (e) => e == null ? null :
      {{#items.complexType}}
          {{items.complexType}}.listFromJson(json['{{{baseName}}}'])
      {{/items.complexType}}
      {{^items.complexType}}
          (e as List).cast<{{items.items.dataType}}>()
      {{/items.complexType}}
      ).toList();
    {{/items.isListContainer}}
    {{^items.isListContainer}}
      {{{complexType}}}.listFromJson(json['{{{baseName}}}']);
    {{/items.isListContainer}}
      {{/isListContainer}}
      {{^isListContainer}}
      {{#isMapContainer}}
      {{#items.isListContainer}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      {{items.complexType}}.mapListFromJson(json['{{{baseName}}}']);
      {{/items.isListContainer}}
      {{^items.isListContainer}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      {{{complexType}}}.mapFromJson(json['{{{baseName}}}']);
      {{/items.isListContainer}}
      {{/isMapContainer}}
      {{^isMapContainer}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      {{{complexType}}}.fromJson(json['{{{baseName}}}']);
      {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}
    {{^complexType}}
      {{#isListContainer}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      (json['{{{baseName}}}'] as List).cast<{{{items.datatype}}}>();
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      (json['{{{baseName}}}'] as Map).cast<String, {{{items.datatype}}}>();
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{#isNumber}}
    {{{name}}} = (json['{{{baseName}}}'] == null) ?
      null :
      json['{{{baseName}}}'].toDouble();
          {{/isNumber}}
          {{^isNumber}}
    {{^isEnum}}
    {{{name}}} = json['{{{baseName}}}'];
    {{/isEnum}}
    {{#isEnum}}
    {{{name}}} = {{{classname}}}{{{enumName}}}.fromJson(json['{{{baseName}}}']);
    {{/isEnum}}
          {{/isNumber}}
        {{/isMapContainer}}
      {{/isListContainer}}
    {{/complexType}}
  {{/isDate}}
  {{/isDateTime}}
  {{/vars}}
  }

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};

{{#vars}}
  {{#required}}
    {{>to_json}}
  {{/required}}
  {{^required}}
    {{#isNullable}}
    if ({{{name}}} != null) {
      {{>to_json}}
    }

    {{/isNullable}}
    {{^isNullable}}
    {{>to_json}}
    {{/isNullable}}
  {{/required}}
{{/vars}}
    return json;
  }

  static List<{{{classname}}}> listFromJson(List<dynamic> json, {bool growable}) =>
    json == null
      ? <{{{classname}}}>[]
      : json.map((v) => {{{classname}}}.fromJson(v)).toList(growable: true == growable);

  static Map<String, {{{classname}}}> mapFromJson(Map<String, dynamic> json) {
    final map = <String, {{{classname}}}>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic v) => map[key] = {{{classname}}}.fromJson(v));
    }
    return map;
  }

  // maps a json object with a list of {{{classname}}}-objects as value to a dart map
  static Map<String, List<{{{classname}}}>> mapListFromJson(Map<String, dynamic> json, {bool growable}) {
    final map = <String, List<{{{classname}}}>>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic v) {
        map[key] = {{{classname}}}.listFromJson(v, growable: growable);
      });
    }
    return map;
  }
}
{{#vars}}
{{#isEnum}}

{{>enum_inline}}
{{/isEnum}}
{{/vars}}
