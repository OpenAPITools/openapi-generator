class {{{classname}}} {
  /// Returns a new [{{{classname}}}] instance.
  {{{classname}}}({
  {{#vars}}
    {{#isNullable}}{{#required}}@required {{/required}}this.{{{name}}},{{/isNullable}}{{^isNullable}}{{#defaultValue}}this.{{{name}}} = {{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}{{#required}}@required {{/required}}this.{{{name}}}{{/defaultValue}},{{/isNullable}}
  {{/vars}}
  });

  {{#vars}}
  {{#description}}/// {{{description}}}{{/description}}
  {{^isEnum}}
    {{#minimum}}
  // minimum: {{{minimum}}}
    {{/minimum}}
    {{#maximum}}
  // maximum: {{{maximum}}}
    {{/maximum}}
  {{{dataType}}} {{{name}}};
  {{/isEnum}}
  {{#isEnum}}
    {{#isContainer}}
      {{#isArray}}
  List<{{{classname}}}{{{enumName}}}> {{{name}}};
      {{/isArray}}
      {{#isMap}}
  Map<String, dynamic> {{{name}}};
      {{/isMap}}
    {{/isContainer}}
    {{^isContainer}}
      {{#allowableValues}}
  {{{classname}}}{{{enumName}}} {{{name}}}{{#required}}{{#defaultValue}} = {{{classname}}}{{{enumName}}}._({{{defaultValue}}}){{/defaultValue}}{{/required}};
      {{/allowableValues}}
    {{/isContainer}}
  {{/isEnum}}

  {{/vars}}
  @override
  bool operator ==(Object other) => identical(this, other) || other is {{{classname}}} &&
  {{#vars}}
     other.{{{name}}} == {{{name}}}{{^-last}} &&{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  int get hashCode =>
  {{#vars}}
    ({{{name}}} == null ? 0 : {{{name}}}.hashCode){{^-last}} +{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  @override
  String toString() => '{{{classname}}}[{{#vars}}{{{name}}}=${{{name}}}{{^-last}}, {{/-last}}{{/vars}}]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
  {{#vars}}
    if ({{{name}}} != null) {
    {{#isDateTime}}
      {{#pattern}}
      json['{{{baseName}}}'] = _dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}.millisecondsSinceEpoch
        : {{{name}}}.toUtc().toIso8601String();
      {{/pattern}}
      {{^pattern}}
      json['{{{baseName}}}'] = {{{name}}}.toUtc().toIso8601String();
      {{/pattern}}
    {{/isDateTime}}
    {{#isDate}}
      {{#pattern}}
      json['{{{baseName}}}'] = _dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}.millisecondsSinceEpoch
        : _dateFormatter.format({{{name}}}.toUtc());
      {{/pattern}}
      {{^pattern}}
      json['{{{baseName}}}'] = _dateFormatter.format({{{name}}}.toUtc());
      {{/pattern}}
    {{/isDate}}
    {{^isDateTime}}
      {{^isDate}}
      json['{{{baseName}}}'] = {{{name}}};
      {{/isDate}}
    {{/isDateTime}}
    }
  {{/vars}}
    return json;
  }

  /// Returns a new [{{{classname}}}] instance and imports its values from
  /// [json] if it's non-null, null if [json] is null.
  static {{{classname}}} fromJson(Map<String, dynamic> json) => json == null
    ? null
    : {{{classname}}}(
  {{#vars}}
  {{#isDateTime}}
        {{{name}}}: json['{{{baseName}}}'] == null
          ? null
    {{#pattern}}
          : _dateEpochMarker == '{{{pattern}}}'
            ? DateTime.fromMillisecondsSinceEpoch(json['{{{baseName}}}'] as int, isUtc: true)
            : DateTime.parse(json['{{{baseName}}}']),
	{{/pattern}}
    {{^pattern}}
          : DateTime.parse(json['{{{baseName}}}']),
	{{/pattern}}
  {{/isDateTime}}
  {{#isDate}}
        {{{name}}}: json['{{{baseName}}}'] == null
          ? null
    {{#pattern}}
          : _dateEpochMarker == '{{{pattern}}}'
            ? DateTime.fromMillisecondsSinceEpoch(json['{{{baseName}}}'] as int, isUtc: true)
            : DateTime.parse(json['{{{baseName}}}']),
	{{/pattern}}
    {{^pattern}}
          : DateTime.parse(json['{{{baseName}}}']),
	{{/pattern}}
  {{/isDate}}
  {{^isDateTime}}
  {{^isDate}}
    {{#complexType}}
      {{#isArray}}
        {{#items.isArray}}
        {{{name}}}: json['{{{baseName}}}'] == null
          ? null
          : (json['{{{baseName}}}'] as List).map(
      {{#items.complexType}}
              {{items.complexType}}.listFromJson(json['{{{baseName}}}'])
      {{/items.complexType}}
      {{^items.complexType}}
              (e) => e == null ? null : (e as List).cast<{{items.items.dataType}}>()
      {{/items.complexType}}
            ).toList(growable: false),
        {{/items.isArray}}
        {{^items.isArray}}
        {{{name}}}: {{{complexType}}}.listFromJson(json['{{{baseName}}}']),
        {{/items.isArray}}
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
          {{#items.isArray}}
        {{{name}}}: json['{{{baseName}}}'] == null
          ? null
              {{#items.complexType}}
          : {{items.complexType}}.mapListFromJson(json['{{{baseName}}}']),
              {{/items.complexType}}
              {{^items.complexType}}
          : (json['{{{baseName}}}'] as Map).cast<String, List>(),
  	          {{/items.complexType}}
          {{/items.isArray}}
          {{^items.isArray}}
        {{{name}}}: json['{{{baseName}}}'] == null
          ? null
          : {{{complexType}}}.mapFromJson(json['{{{baseName}}}']),
          {{/items.isArray}}
        {{/isMap}}
        {{^isMap}}
        {{{name}}}: {{{complexType}}}.fromJson(json['{{{baseName}}}']),
        {{/isMap}}
      {{/isArray}}
    {{/complexType}}
    {{^complexType}}
      {{#isArray}}
        {{#isEnum}}
        {{{name}}}: {{{classname}}}{{{items.datatypeWithEnum}}}.listFromJson(json['{{{baseName}}}']),
        {{/isEnum}}
        {{^isEnum}}
        {{{name}}}: json['{{{baseName}}}'] == null
          ? null
          : (json['{{{baseName}}}'] as List).cast<{{{items.datatype}}}>(),
        {{/isEnum}}
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
        {{{name}}}: json['{{{baseName}}}'] == null ?
          null :
          (json['{{{baseName}}}'] as Map).cast<String, {{{items.datatype}}}>(),
        {{/isMap}}
        {{^isMap}}
          {{#isNumber}}
        {{{name}}}: json['{{{baseName}}}'] == null ?
          null :
          json['{{{baseName}}}'].toDouble(),
          {{/isNumber}}
          {{^isNumber}}
    {{^isEnum}}
        {{{name}}}: json['{{{baseName}}}'],
    {{/isEnum}}
    {{#isEnum}}
        {{{name}}}: {{{classname}}}{{{enumName}}}.fromJson(json['{{{baseName}}}']),
    {{/isEnum}}
          {{/isNumber}}
        {{/isMap}}
      {{/isArray}}
    {{/complexType}}
  {{/isDate}}
  {{/isDateTime}}
  {{/vars}}
    );

  static List<{{{classname}}}> listFromJson(List<dynamic> json, {bool emptyIsNull, bool growable,}) =>
    json == null || json.isEmpty
      ? true == emptyIsNull ? null : <{{{classname}}}>[]
      : json.map((v) => {{{classname}}}.fromJson(v)).toList(growable: true == growable);

  static Map<String, {{{classname}}}> mapFromJson(Map<String, dynamic> json) {
    final map = <String, {{{classname}}}>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic v) => map[key] = {{{classname}}}.fromJson(v));
    }
    return map;
  }

  // maps a json object with a list of {{{classname}}}-objects as value to a dart map
  static Map<String, List<{{{classname}}}>> mapListFromJson(Map<String, dynamic> json, {bool emptyIsNull, bool growable,}) {
    final map = <String, List<{{{classname}}}>>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic v) {
        map[key] = {{{classname}}}.listFromJson(v, emptyIsNull: emptyIsNull, growable: growable);
      });
    }
    return map;
  }
}
{{#vars}}
{{#isEnum}}

{{>enum_inline}}
{{/isEnum}}
{{/vars}}
