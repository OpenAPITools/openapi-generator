{{>header}}
{{#pubLibrary}}library {{{pubLibrary}}};{{/pubLibrary}}{{^pubLibrary}}library {{{pubName}}}.api;{{/pubLibrary}}

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:http/http.dart';
import 'package:intl/intl.dart';
import 'package:meta/meta.dart';

part 'api_client.dart';
part 'api_helper.dart';
part 'api_exception.dart';
part 'auth/authentication.dart';
part 'auth/api_key_auth.dart';
part 'auth/oauth.dart';
part 'auth/http_basic_auth.dart';
part 'auth/http_bearer_auth.dart';

{{#apiInfo}}{{#apis}}part 'api/{{{classFilename}}}.dart';
{{/apis}}{{/apiInfo}}
{{#models}}{{#model}}part 'model/{{{classFilename}}}.dart';
{{/model}}{{/models}}
const _delimiters = {'csv': ',', 'ssv': ' ', 'tsv': '\t', 'pipes': '|'};
const _dateEpochMarker = 'epoch';
final _dateFormatter = DateFormat('yyyy-MM-dd');
final _regList = RegExp(r'^List<(.*)>$');
final _regMap = RegExp(r'^Map<String,(.*)>$');

ApiClient defaultApiClient = ApiClient();

dynamic _$enumDecode<T>(Map<T, dynamic> enumValues, dynamic source, {
        T unknownValue, bool allowsNull}) {
    if (allowsNull == false && source == null) {
        throw ArgumentError('A value must be provided. Supported values: ' '${enumValues.values.join(', ')}');
    }

    final value = enumValues.entries
        .singleWhere((e) => e.value == source, orElse: () => null)
        ?.key;

    if (value == null && unknownValue == null) {
        throw ArgumentError('`$source` is not one of the supported values: ${enumValues.values.join(', ')}');
    }
    return value ?? unknownValue;
}

Iterable<dynamic> _$enumsDecode<T>(Map<T, dynamic> enumValues, Iterable<dynamic> listOfEnums, {bool allowsNull}) {
    if (allowsNull == false && listOfEnums == null) {
        throw ArgumentError('A value must be provided. Supported values: ' '${enumValues.values.join(', ')}');
    }

    final values = enumValues.entries
        .where((e) => listOfEnums.contains(e.value))
        .takeWhile((e) => e != null)
        .map((e) => e.key);

    return values;
}

