{{>header}}
{{>part_of}}
{{#operations}}

class {{{classname}}} {
  {{{classname}}}([ApiClient apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;
  {{#operation}}

  {{#summary}}
  /// {{{summary}}}
  {{/summary}}
  {{#notes}}
    {{#summary}}
  ///
    {{/summary}}
  /// {{{notes}}}
  ///
  /// Note: This method returns the HTTP [Response].
  {{/notes}}
  {{^notes}}
    {{#summary}}
  ///
  /// Note: This method returns the HTTP [Response].
    {{/summary}}
    {{^summary}}
  /// Performs an HTTP '{{{httpMethod}}} {{{path}}}' operation and returns the [Response].
    {{/summary}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{description}}}
    {{/description}}
    {{#hasMore}}
  ///
    {{/hasMore}}
  {{/allParams}}
  {{#returnType}}Future<Response> {{/returnType}}{{^returnType}}Future {{/returnType}}{{{nickname}}}WithHttpInfo({{#allParams}}{{#required}}{{{dataType}}} {{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{ {{#allParams}}{{^required}}{{{dataType}}} {{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}) async {
    // Verify required params are set.
    {{#allParams}}
      {{#required}}
    if ({{{paramName}}} == null) {
     throw ApiException(400, 'Missing required param: {{{paramName}}}');
    }
      {{/required}}
    {{/allParams}}

    final path = '{{{path}}}'.replaceAll('{format}', 'json'){{#pathParams}}.replaceAll('{' + '{{{baseName}}}' + '}', {{{paramName}}}.toString()){{/pathParams}};

    Object postBody{{#bodyParam}} = {{{paramName}}}{{/bodyParam}};

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    {{#queryParams}}
      {{^required}}
    if ({{{paramName}}} != null) {
      {{/required}}
      queryParams.addAll(_convertParametersForCollectionFormat('{{{collectionFormat}}}', '{{{baseName}}}', {{{paramName}}}));
      {{^required}}
    }
      {{/required}}
    {{/queryParams}}
    {{#headerParams}}
    headerParams['{{{baseName}}}'] = {{{paramName}}};
    {{/headerParams}}

    final contentTypes = <String>[{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}];
    final nullableContentType = contentTypes.isNotEmpty ? contentTypes[0] : null;
    final authNames = <String>[{{#authMethods}}'{{{name}}}'{{#hasMore}}, {{/hasMore}}{{/authMethods}}];

    if (
      nullableContentType != null &&
      nullableContentType.toLowerCase().startsWith('multipart/form-data')
    ) {
      bool hasFields = false;
      final mp = MultipartRequest(null, null);
      {{#formParams}}
      {{^isFile}}
      if ({{{paramName}}} != null) {
        hasFields = true;
        mp.fields['{{{baseName}}}'] = parameterToString({{{paramName}}});
      }
      {{/isFile}}
      {{#isFile}}
      if ({{{paramName}}} != null) {
        hasFields = true;
        mp.fields['{{{baseName}}}'] = {{{paramName}}}.field;
        mp.files.add({{{paramName}}});
      }
      {{/isFile}}
      {{/formParams}}
      if (hasFields) {
        postBody = mp;
      }
    } else {
      {{#formParams}}
      {{^isFile}}
      if ({{{paramName}}} != null) {
        formParams['{{{baseName}}}'] = parameterToString({{{paramName}}});
      }
      {{/isFile}}
      {{/formParams}}
    }

    return await apiClient.invokeAPI(
      path,
      '{{{httpMethod}}}',
      queryParams,
      postBody,
      headerParams,
      formParams,
      nullableContentType,
      authNames,
    );
  }

  {{#summary}}
  /// {{{summary}}}
  {{/summary}}
  {{#notes}}
  {{#summary}}
  ///
  {{/summary}}
  /// {{{notes}}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{description}}}
    {{/description}}
    {{#hasMore}}
  ///
    {{/hasMore}}
  {{/allParams}}
  {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future {{/returnType}}{{{nickname}}}({{#allParams}}{{#required}}{{{dataType}}} {{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{ {{#allParams}}{{^required}}{{{dataType}}} {{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}) async {
    final response = await {{{nickname}}}WithHttpInfo({{#allParams}}{{#required}}{{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}} {{#allParams}}{{^required}}{{{paramName}}}: {{{paramName}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}} {{/hasOptionalParams}});
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, _decodeBodyBytes(response));
    }
    if (response.body != null) {
      {{#isListContainer}}
        {{#returnType}}
      return (apiClient.deserialize(_decodeBodyBytes(response), '{{{returnType}}}') as List)
        .map((item) => item as {{{returnBaseType}}})
        .toList(growable: false);
        {{/returnType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMap}}
          {{#returnType}}
      return {{{returnType}}}.from(apiClient.deserialize(_decodeBodyBytes(response), '{{{returnType}}}'));
          {{/returnType}}
        {{/isMap}}
        {{^isMap}}
          {{#returnType}}
      return apiClient.deserialize(_decodeBodyBytes(response), '{{{returnType}}}') as {{{returnType}}};
          {{/returnType}}
        {{/isMap}}
      {{/isListContainer}}
    }
    return{{#returnType}} null{{/returnType}};
  }
  {{/operation}}
}
{{/operations}}
