{{>header}}
{{>part_of}}
{{#operations}}

class {{{classname}}} {
  {{{classname}}}([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;
  {{#operation}}

  {{#summary}}
  /// {{{.}}}
  {{/summary}}
  {{#notes}}
    {{#summary}}
  ///
    {{/summary}}
  /// {{{notes}}}
  ///
  /// Note: This method returns the HTTP [Response].
  {{/notes}}
  {{^notes}}
    {{#summary}}
  ///
  /// Note: This method returns the HTTP [Response].
    {{/summary}}
    {{^summary}}
  /// Performs an HTTP '{{{httpMethod}}} {{{path}}}' operation and returns the [Response].
    {{/summary}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{.}}}
    {{/description}}
    {{^-last}}
  ///
    {{/-last}}
  {{/allParams}}
  Future<Response> {{{nickname}}}WithHttpInfo({{#allParams}}{{#required}}{{{dataType}}} {{{paramName}}},{{^-last}} {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{ {{#allParams}}{{^required}}{{{dataType}}}? {{{paramName}}},{{^-last}} {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}) async {
    // ignore: prefer_const_declarations
    final _path = r'{{{path}}}'{{#pathParams}}
      .replaceAll({{=<% %>=}}'{<% baseName %>}'<%={{ }}=%>, {{{paramName}}}{{^isString}}.toString(){{/isString}}){{/pathParams}};

    // ignore: prefer_final_locals
    Object? _postBody{{#bodyParam}} = {{{paramName}}}{{/bodyParam}};

    final __queryParams = <QueryParam>[];
    final _headerParams = <String, String>{};
    final _formParams = <String, String>{};
    {{#hasQueryParams}}

      {{#queryParams}}
        {{^required}}
    if ({{{paramName}}} != null) {
          {{/required}}
      __queryParams.addAll(_queryParams('{{{collectionFormat}}}', '{{{baseName}}}', {{{paramName}}}));
          {{^required}}
    }
        {{/required}}
      {{/queryParams}}
    {{/hasQueryParams}}
    {{#hasHeaderParams}}

      {{#headerParams}}
        {{#required}}
    _headerParams[r'{{{baseName}}}'] = parameterToString({{{paramName}}});
        {{/required}}
        {{^required}}
    if ({{{paramName}}} != null) {
      _headerParams[r'{{{baseName}}}'] = parameterToString({{{paramName}}});
    }
        {{/required}}
      {{/headerParams}}
    {{/hasHeaderParams}}

    const _contentTypes = <String>[{{#prioritizedContentTypes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/prioritizedContentTypes}}];

    {{#isMultipart}}
    bool _hasFields = false;
    final _mp = MultipartRequest('{{{httpMethod}}}', Uri.parse(_path));
    {{#formParams}}
    {{^isFile}}
    if ({{{paramName}}} != null) {
      _hasFields = true;
      _mp.fields[r'{{{baseName}}}'] = parameterToString({{{paramName}}});
    }
    {{/isFile}}
    {{#isFile}}
    if ({{{paramName}}} != null) {
      _hasFields = true;
      _mp.fields[r'{{{baseName}}}'] = {{{paramName}}}.field;
      _mp.files.add({{{paramName}}});
    }
    {{/isFile}}
    {{/formParams}}
    if (_hasFields) {
      _postBody = _mp;
    }
    {{/isMultipart}}
    {{^isMultipart}}
    {{#formParams}}
    {{^isFile}}
    if ({{{paramName}}} != null) {
      _formParams[r'{{{baseName}}}'] = parameterToString({{{paramName}}});
    }
    {{/isFile}}
    {{/formParams}}
    {{/isMultipart}}

    return apiClient.invokeAPI(
      _path,
      '{{{httpMethod}}}',
      __queryParams,
      _postBody,
      _headerParams,
      _formParams,
      _contentTypes.isEmpty ? null : _contentTypes.first,
    );
  }

  {{#summary}}
  /// {{{.}}}
  {{/summary}}
  {{#notes}}
  {{#summary}}
  ///
  {{/summary}}
  /// {{{notes}}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{.}}}
    {{/description}}
    {{^-last}}
  ///
    {{/-last}}
  {{/allParams}}
  Future<{{#returnType}}{{{.}}}?{{/returnType}}{{^returnType}}void{{/returnType}}> {{{nickname}}}({{#allParams}}{{#required}}{{{dataType}}} {{{paramName}}},{{^-last}} {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{ {{#allParams}}{{^required}}{{{dataType}}}? {{{paramName}}},{{^-last}} {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}) async {
    final _response = await {{{nickname}}}WithHttpInfo({{#allParams}}{{#required}}{{{paramName}}},{{^-last}} {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}} {{#allParams}}{{^required}}{{{paramName}}}: {{{paramName}}},{{^-last}} {{/-last}}{{/required}}{{/allParams}} {{/hasOptionalParams}});
    if (_response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(_response.statusCode, await _decodeBodyBytes(_response));
    }
    {{#returnType}}
    // When a remote server returns no body with a status of 204, we shall not decode it.
    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
    // FormatException when trying to decode an empty string.
    if (_response.bodyBytes.isNotEmpty && _response.statusCode != HttpStatus.noContent) {
    {{#native_serialization}}
    {{#isArray}}
      final _responseBody = await _decodeBodyBytes(_response);
      return (await apiClient.deserializeAsync(_responseBody, '{{{returnType}}}') as List)
        .cast<{{{returnBaseType}}}>()
        .{{#uniqueItems}}toSet(){{/uniqueItems}}{{^uniqueItems}}toList(growable: false){{/uniqueItems}};
    {{/isArray}}
    {{^isArray}}
    {{#isMap}}
      return {{{returnType}}}.from(await apiClient.deserializeAsync(await _decodeBodyBytes(_response), '{{{returnType}}}'),);
    {{/isMap}}
    {{^isMap}}
      return await apiClient.deserializeAsync(await _decodeBodyBytes(_response), '{{{returnType}}}',) as {{{returnType}}};
    {{/isMap}}{{/isArray}}{{/native_serialization}}
    }
    return null;
    {{/returnType}}
  }
  {{/operation}}
}
{{/operations}}
