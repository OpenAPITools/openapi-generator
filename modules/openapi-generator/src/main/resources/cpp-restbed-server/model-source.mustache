{{>licenseInfo}}
{{#models}}{{#model}}

#include "{{classname}}.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}::{{classname}}()
{
    {{#vars}}{{^isContainer}}{{#isPrimitiveType}}m_{{name}} = {{{defaultValue}}};
    {{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}m_{{name}} = {{{defaultValue}}};
    {{/isString}}{{#isDateTime}}m_{{name}} = {{{defaultValue}}};
    {{/isDateTime}}{{/isPrimitiveType}}{{/isContainer}}{{/vars}}
}

{{classname}}::~{{classname}}()
{
}

std::string {{classname}}::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	{{#vars}}
	{{^isContainer}}
	{{#isPrimitiveType}}
	pt.put("{{name}}", m_{{name}});
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	{{#isString}}
	pt.put("{{name}}", m_{{name}});
	{{/isString}}
	{{#isDateTime}}
	pt.put("{{name}}", m_{{name}});
	{{/isDateTime}}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{/vars}}
	write_json(ss, pt, false);
	return ss.str();
}

void {{classname}}::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	{{#vars}}
	{{^isContainer}}
	{{#isPrimitiveType}}
	m_{{name}} = pt.get("{{name}}", {{{defaultValue}}});
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	{{#isString}}
	m_{{name}} = pt.get("{{name}}", {{{defaultValue}}});
	{{/isString}}
	{{#isDateTime}}
	m_{{name}} = pt.get("{{name}}", {{{defaultValue}}});
	{{/isDateTime}}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{/vars}}
}

{{#vars}}
{{{dataType}}} {{classname}}::{{getter}}() const
{
    return m_{{name}};
}
void {{classname}}::{{setter}}({{{dataType}}} value)
{
    m_{{name}} = value;
}
{{/vars}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
