package {{packageName}}

import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.GlobalScope
import kotlinx.serialization.json.Json
import {{packageName}}.apis.*
import {{packageName}}.infrastructure.ApiClientBase

{{! TODO: Remove when backticks problems are resolved }}
@Suppress("RemoveRedundantBackticks", "MemberVisibilityCanBePrivate", "unused")
public open class ApiClientAsync(
    baseUrl: String = "{{{basePath}}}",
    client: HttpClient,
    coroutineScope: CoroutineScope = GlobalScope,
) {
    public constructor(baseUrl: String, httpClientEngine: HttpClientEngine? = null, json: Json = Json {}, coroutineScope: CoroutineScope = GlobalScope) :
        this(baseUrl, createHttpClient(httpClientEngine, KotlinxSerializer(json)), coroutineScope)

    {{! TODO: Remove backticks when conflicts are resolved }}
    {{#apiInfo}}
    {{#apis}}
    public val `{{{classVarName}}}`: {{{classFilename}}}Async by lazy {
        {{{classFilename}}}Async(baseUrl, client, coroutineScope)
    }
    {{/apis}}
    {{/apiInfo}}

    public val allClients: Set<ApiClientBase> by lazy {
        setOf(
            {{#apiInfo}}
            {{#apis}}
            `{{{classVarName}}}`,
            {{/apis}}
            {{/apiInfo}}
        )
    }
}
