import kotlinx.serialization.*

/**
 * {{{description}}}
 *
 * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
 */
@Serializable
{{#nonPublicApi}}internal {{/nonPublicApi}}enum class {{classname}}(val value: {{{dataType}}}) {

{{#allowableValues}}{{#enumVars}}
    @SerialName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}})
    {{#isListContainer}}
    {{#isList}}
    {{&name}}(listOf({{{value}}})){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/isList}}
    {{^isList}}
    {{&name}}(arrayOf({{{value}}})){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/isList}}
    {{/isListContainer}}
    {{^isListContainer}}
    {{&name}}({{{value}}}){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/isListContainer}}

{{/enumVars}}{{/allowableValues}}

    /**
     * This override toString avoids using the enum var name and uses the actual api value instead.
     * In cases the var name and value are different, the client would send incorrect enums to the server.
     */
    override fun toString(): String {
        return value{{^isString}}.toString(){{/isString}}
    }
}
