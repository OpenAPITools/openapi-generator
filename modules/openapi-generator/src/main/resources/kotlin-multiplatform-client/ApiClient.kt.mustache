package {{packageName}}

import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import {{apiPackage}}.*
import {{packageName}}.infrastructure.ApiClientBase

{{! TODO: Remove when backticks problems are resolved }}
@Suppress("RemoveRedundantBackticks", "MemberVisibilityCanBePrivate", "unused")
public open class {{apiClientName}}(
    baseUrl: String = "{{{basePath}}}",
    client: HttpClient
) {
    public constructor(baseUrl: String, httpClientEngine: HttpClientEngine? = null, json: Json = Json {}) :
        this(baseUrl, createHttpClient(httpClientEngine, KotlinxSerializer(json)))

    {{! TODO: Remove backticks when conflicts are resolved }}
    {{#apiInfo}}
    {{#apis}}
    public val `{{{classVarName}}}`: {{{classFilename}}} by lazy { {{{classFilename}}}(baseUrl, client) }
    {{/apis}}
    {{/apiInfo}}

    public val allClients: Set<ApiClientBase> by lazy {
        setOf(
            {{#apiInfo}}
            {{#apis}}
            `{{{classVarName}}}`,
            {{/apis}}
            {{/apiInfo}}
        )
    }
}

internal fun createHttpClient(httpClientEngine: HttpClientEngine? = null, serializer: KotlinxSerializer): HttpClient {
    val jsonConfig: JsonFeature.Config.() -> Unit = { this.serializer = serializer }
    val clientConfig: (HttpClientConfig<*>) -> Unit = { it.install(JsonFeature, jsonConfig) }
    return if (httpClientEngine == null) {
        HttpClient(clientConfig)
    } else {
        HttpClient(httpClientEngine, clientConfig)
    }
}
