package {{packageName}}.infrastructure

import {{packageName}}.infrastructure.authentication.Base64Encoder
import {{packageName}}.infrastructure.authentication.decodeBase64
import io.ktor.utils.io.core.String
import kotlinx.serialization.KSerializer
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

internal object ByteArrayBase64Serializer: KSerializer<ByteArray> {
    override val descriptor = PrimitiveSerialDescriptor("ByteArrayBase64Serializer", PrimitiveKind.STRING)

    override fun serialize(encoder: Encoder, value: ByteArray) {
        val base64String = String(Base64Encoder.encode(value))
        encoder.encodeString(base64String)
    }

    override fun deserialize(decoder: Decoder): ByteArray {
        val base64String = decoder.decodeString()
        return base64String.decodeBase64()
    }
}