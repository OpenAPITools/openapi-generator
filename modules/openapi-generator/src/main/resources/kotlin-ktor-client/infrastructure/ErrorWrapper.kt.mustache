package {{packageName}}.infrastructure

import io.ktor.client.call.*
import io.ktor.client.plugins.*
import io.ktor.utils.io.errors.*

{{#nonPublicApi}}internal {{/nonPublicApi}}class ErrorWrapper(
    val statusCode: Int,
    val originalException: ResponseException,
    val error: Any
) : Exception()

internal suspend inline fun <reified E: Any>ResponseException.toErrorWrapper(): ErrorWrapper {
    val error = try {
        response.body<E>()
    } catch (e: Throwable) {
        e
    }
    return ErrorWrapper(statusCode = this.response.status.value, originalException = this, error = error)
}

{{#nonPublicApi}}internal {{/nonPublicApi}}class TimeoutErrorWrapper(
    val originalException: IOException
): Exception()