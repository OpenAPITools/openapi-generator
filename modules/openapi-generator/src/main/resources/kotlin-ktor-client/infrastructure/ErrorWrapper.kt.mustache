package {{packageName}}.infrastructure

import io.ktor.client.call.receive
import io.ktor.client.features.ResponseException
import io.ktor.utils.io.CancellationException

{{#nonPublicApi}}internal {{/nonPublicApi}}class ErrorWrapper(
    val originalException: ResponseException,
    val error: Any
) : Exception()

internal suspend inline fun <reified E: Any>ResponseException.toErrorWrapper(): ErrorWrapper {
    val error = try {
        response.receive<E>()
    } catch (e: Throwable) {
        e
    }
    return ErrorWrapper(originalException = this, error = error)
}

{{#nonPublicApi}}internal {{/nonPublicApi}}class TimeoutErrorWrapper(
    val originalException: CancellationException
): Exception()