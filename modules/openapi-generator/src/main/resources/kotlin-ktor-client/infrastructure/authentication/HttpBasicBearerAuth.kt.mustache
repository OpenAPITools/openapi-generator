package {{packageName}}.infrastructure.authentication

{{#nonPublicApi}}internal {{/nonPublicApi}}class HttpBasicBearerAuth(
    private val bearerToken: String,
    private val scheme: String? = null
): AuthProvider {

    data class Config(
        val token: String
    )

    constructor(scheme: String? = null, config: Config)
            : this(scheme = scheme, bearerToken = config.token)

    override fun applyToParams(
        queryParameters: MutableList<Pair<String, Any?>>,
        headerParameters: MutableList<Pair<String, Any?>>
    ) {
        val value = if (scheme.isNullOrBlank()) {
            bearerToken
        } else {
            "${upperCaseBearer(scheme)} $bearerToken"
        }

        headerParameters += "Authorization" to value
    }

    fun upperCaseBearer(scheme: String): String {
        return if ("bearer" == scheme.lowercase()) {
            "Bearer"
        } else {
            scheme
        }
    }
}