{{>licenseInfo}}
package {{apiPackage}}

import kotlinx.io.core.use
import io.ktor.client.HttpClient
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.features.BadResponseStatusException
import io.ktor.client.features.logging.LogLevel
import io.ktor.client.features.logging.Logger
import io.ktor.client.features.logging.Logging
import io.ktor.client.features.logging.SIMPLE

import {{packageName}}.infrastructure.*

{{#imports}}
import {{import}}
{{/imports}}

{{#operations}}
class {{classname}}(
    val basePath: kotlin.String = "{{{basePath}}}",
    private val logger: Logger = Logger.SIMPLE,
    private val logLevel: LogLevel = LogLevel.NONE
) {
    {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}
    * @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}}
    * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */
    suspend fun {{operationId}}({{#allParams}}{{#required}}{{>api_req_param}}{{/required}}{{^required}}{{>api_opt_param}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}} {
        val queryParameters = mutableListOf<Pair<String, Any?>>()
        {{#queryParams}}
        {{#required}}
        queryParameters += "{{{baseName}}}" to {{paramName}}
        {{/required}}
        {{^required}}
        if({{paramName}} != null) queryParameters += "{{{baseName}}}" to {{paramName}}
        {{/required}}
        {{/queryParams}}

        val headerParameters = listOf<Pair<String, Any?>>({{#hasHeaderParams}}
            {{#headerParams}}
            "{{{baseName}}}" to {{paramName}}{{#hasMore}}, {{/hasMore}}
            {{/headerParams}}
        {{/hasHeaderParams}})

        val formParameters = listOf<Pair<String, String?>>({{#hasFormParams}}
            {{#formParams}}
            "{{{baseName}}}" to {{paramName}}{{#hasMore}}, {{/hasMore}}
            {{/formParams}}
        {{/hasFormParams}})

        val mySerializer = KotlinxSerializer().apply {
            {{#allResponseDataTypes}}
            register({{{dataType}}}.serializer())
            {{/allResponseDataTypes}}
            {{#hasBodyParam}}
            {{#bodyParam}}
            register({{{dataType}}}.serializer())
            {{/bodyParam}}
            {{/hasBodyParam}}
        }
        val httpClient = HttpClient {
            install(JsonFeature) {
                serializer = mySerializer
            }
            install(Logging) {
                logger = this@{{classname}}.logger
                level = this@{{classname}}.logLevel
            }
        }

        try {
            return httpClient.use {
                it.request(
                    url = "$basePath{{path}}"{{#pathParams}}.replace("{"+"{{baseName}}"+"}", "${{paramName}}"){{/pathParams}},
                    methodString =  "{{httpMethod}}",
                    queryParameters = queryParameters,
                    headerParameters = headerParameters,
                    formParameters = formParameters{{#hasBodyParam}}{{#bodyParam}},
                    body = {{paramName}}{{/bodyParam}}{{/hasBodyParam}}
                )
            }
        } catch (exception: BadResponseStatusException) {
            when(exception.statusCode.value) {
                {{#responses}}{{#dataType}}{{^isDefault}}{{{code}}} -> throw mySerializer.parseAndWrapErrorResponse<{{{baseType}}}>(exception){{^-last}}
                {{/-last}}{{/isDefault}}{{/dataType}}{{/responses}}
                else -> throw exception
            }
        }
    }
    {{^-last}}

    {{/-last}}
    {{/operation}}
}
{{/operations}}
