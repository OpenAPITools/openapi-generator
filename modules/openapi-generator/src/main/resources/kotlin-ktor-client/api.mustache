{{>licenseInfo}}
package {{apiPackage}}

import io.ktor.http.HttpMethod
import io.ktor.client.HttpClient
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.*
import io.ktor.client.features.BadResponseStatusException
import io.ktor.client.call.typeInfo
import io.ktor.client.features.logging.LogLevel
import io.ktor.client.features.logging.Logger
import io.ktor.client.features.logging.Logging
import io.ktor.client.features.logging.SIMPLE

import {{packageName}}.infrastructure.*

{{#imports}}
import {{import}}
{{/imports}}

{{#operations}}
class {{classname}}(val basePath: kotlin.String = "{{{basePath}}}", private val logger: Logger = Logger.SIMPLE, private val logLevel: LogLevel = LogLevel.NONE) {

    private val mySerializer = KotlinxSerializer()

    private val httpClient: HttpClient = HttpClient {
        install(JsonFeature) {
            serializer = mySerializer
        }
        install(Logging) {
            logger = this@{{classname}}.logger
            level = this@{{classname}}.logLevel
        }
    }

    private suspend inline fun <reified E>wrapErrorObject(exception: BadResponseStatusException): ErrorWrapper {
        val error = mySerializer.read(typeInfo<E>(), exception.response)
        return ErrorWrapper(exception, error)
    }

    {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}
    * @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}}
    * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */
    suspend fun {{operationId}}({{#allParams}}{{#required}}{{>api_req_param}}{{/required}}{{^required}}{{>api_opt_param}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}} {
        {{#hasQueryParams}}
        val queryParameters = Parameters.build {
            {{#queryParams}}
            {{#required}}
            append("{{{baseName}}}", {{paramName}})
            {{/required}}
            {{^required}}
            if({{paramName}} != null) append("{{{baseName}}}", {{paramName}})
            {{/required}}
            {{/queryParams}}
        }.formUrlEncode()
        {{/hasQueryParams}}

        val url = "$basePath{{path}}"{{#pathParams}}.replace("{"+"{{baseName}}"+"}", "${{paramName}}"){{/pathParams}}{{#hasQueryParams}} + "?$queryParameters"{{/hasQueryParams}}
        val httpMethod = HttpMethod.parse("{{httpMethod}}")


        mySerializer.apply {
            {{#allResponseDataTypes}}
            register({{{dataType}}}.serializer())
            {{/allResponseDataTypes}}
        }
        try {
            return httpClient.request(url) {
                method = httpMethod
                {{#headerParams}}
                header("{{baseName}}", {{paramName}})
                {{/headerParams}}
                {{#hasFormParams}}
                body = FormDataContent(Parameters.build {
                    {{#formParams}}
                    {{#required}}
                    append("{{{baseName}}}", {{paramName}})
                    {{/required}}
                    {{^required}}
                    if({{paramName}} != null) append("{{{baseName}}}", {{paramName}})
                    {{/required}}
                    {{/formParams}}
                })
                {{/hasFormParams}}

                //TODO: Handle other body types
            }
        } catch (exception: BadResponseStatusException) {
            when(exception.statusCode.value) {
                {{#responses}}{{#dataType}}{{^isDefault}}{{{code}}} -> throw wrapErrorObject<{{{baseType}}}>(exception){{^-last}}
                {{/-last}}{{/isDefault}}{{/dataType}}{{/responses}}
                else -> throw exception
            }
        } catch (exception: Exception) {
            throw exception
        }
    }
    {{^-last}}

    {{/-last}}
    {{/operation}}
}
{{/operations}}
