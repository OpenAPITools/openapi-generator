{{>licenseInfo}}
package {{apiPackage}}

import io.ktor.http.HttpMethod
import io.ktor.client.HttpClient
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import io.ktor.client.request.*
import io.ktor.client.features.BadResponseStatusException
import io.ktor.client.call.typeInfo

import {{packageName}}.infrastructure.*

{{#imports}}import {{import}}
{{/imports}}

{{#operations}}
class {{classname}}(val basePath: kotlin.String = "{{{basePath}}}") {

    private val mySerializer = KotlinxSerializer()

    private val httpClient: HttpClient = HttpClient {
        install(JsonFeature) {
            serializer = mySerializer
        }
    }

    private suspend inline fun <reified E>wrapErrorObject(exception: BadResponseStatusException): ErrorWrapper {
        val error = mySerializer.read(typeInfo<E>(), exception.response)
        return ErrorWrapper(exception, error)
    }

    {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}* @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}}* @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */
    suspend fun {{operationId}}({{#allParams}}{{paramName}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}} {
        {{#hasQueryParams}}
        var queryParameters = Parameters.build {
            {{#queryParams}}
            append("{{{baseName}}}", {{paramName}})
            {{/queryParams}}
        }.formUrlEncode()
        {{/hasQueryParams}}

        val url = "$basePath{{path}}"{{#pathParams}}.replace("{"+"{{baseName}}"+"}", "${{paramName}}"){{/pathParams}}{{#hasQueryParams}} + "?$queryParameters"{{/hasQueryParams}}
        val httpMethod = HttpMethod.parse("{{httpMethod}}")

        mySerializer.apply {
            {{#responses}}{{#dataType}}register({{{baseType}}}.serializer()){{^-last}}
            {{/-last}}{{/dataType}}{{/responses}}
        }
        try {
            return httpClient.request(url) {
                method = httpMethod
                {{#headerParams}}header("{{baseName}}", {{paramName}}){{#hasMore}}
                {{/hasMore}}{{/headerParams}}
                {{#hasFormParams}}body = FormDataContent(Parameters.build {
                    {{#formParams}}append("{{{baseName}}}", {{paramName}}){{#hasMore}}
                    {{/hasMore}}{{/formParams}}
                }){{/hasFormParams}}

                //TODO: Handle other body types
            }
        } catch (exception: BadResponseStatusException) {
            when(exception.statusCode.value) {
                {{#responses}}{{#dataType}}{{^isDefault}}{{{code}}} -> throw wrapErrorObject<{{{baseType}}}>(exception){{^-last}}
                {{/-last}}{{/isDefault}}{{/dataType}}{{/responses}}
                else -> throw exception
            }
        } catch (exception: Exception) {
            throw exception
        }
    }
    {{^-last}}

    {{/-last}}
    {{/operation}}
}
{{/operations}}
