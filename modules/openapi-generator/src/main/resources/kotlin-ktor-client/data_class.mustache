import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

import {{packageName}}.infrastructure.ByteArrayBase64Serializer
{{#vendorExtensions.x-additionalProperties}}import kotlinx.serialization.*
import kotlinx.serialization.Serializer
import kotlinx.serialization.KSerializer
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.descriptors.element
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.encoding.encodeStructure{{/vendorExtensions.x-additionalProperties}}
import kotlin.reflect.KClass
import kotlin.reflect.typeOf

/**
 * {{{description}}}
{{#allVars}}
 * @param {{name}} {{{description}}}
{{/allVars}}
 */
@Serializable{{#vendorExtensions.x-additionalProperties}}(with = {{{classname}}}.{{{classname}}}Serializer::class){{/vendorExtensions.x-additionalProperties}}
{{#nonPublicApi}}internal {{/nonPublicApi}}data class {{classname}} (
{{#requiredVars}}
{{>data_class_req_var}}{{^-last}},
{{/-last}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}},
{{/hasOptional}}{{/hasRequired}}{{#optionalVars}}{{>data_class_opt_var}}{{^-last}},
{{/-last}}{{/optionalVars}}{{#vendorExtensions.x-additionalProperties}},
    private val additionalProperties: Map<String, String>? = null{{/vendorExtensions.x-additionalProperties}}
){
{{#hasEnums}}{{#allVars}}{{#isEnum}}
    /**
    * {{{description}}}
    * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
    */
    enum class {{nameInCamelCase}} {
        {{#allowableValues}}{{#enumVars}}@SerialName({{{value}}}) {{&name}}{{^-last}},
        {{/-last}}{{/enumVars}}{{/allowableValues}}
    }
    {{/isEnum}}{{/allVars}}{{/hasEnums}}
{{#vendorExtensions.x-additionalProperties}}    @OptIn(ExperimentalSerializationApi::class, InternalSerializationApi::class)
    @Serializer(forClass = {{{classname}}}::class)
    internal object {{{classname}}}Serializer : KSerializer<{{{classname}}}> {
        private fun createDescriptor(body: {{{classname}}}): SerialDescriptor {
            return buildClassSerialDescriptor("{{{classname}}}") {
                {{#allVars}}
                    element<{{{dataType}}}>("{{{name}}}")
                {{/allVars}}
                body.additionalProperties?.onEach { property ->
                    element<String>(property.key)
                }
            }
        }

        override fun serialize(encoder: Encoder, value: {{{classname}}}) {
            val descriptor = createDescriptor(value)
            var index = 0
            encoder.encodeStructure(descriptor) {
                {{#allVars}}
                encodeSerializableElement(descriptor, index++, ListSerializer(getSerializer()), value.{{{name}}} ?: throw(Exception("")))
                {{/allVars}}
                value.additionalProperties?.onEach() { property ->
                    encodeStringElement(descriptor, index++, property.value)
                }
            }
        }

        private inline fun <reified T : Any> getSerializer(): KSerializer<T> {
            val listType = typeOf<T>()
            val classifier = listType.classifier as KClass<*>
            val serializer: KSerializer<*> = classifier.serializerOrNull() as KSerializer<*>
            return serializer as KSerializer<T>
        }
    }{{/vendorExtensions.x-additionalProperties}}
}