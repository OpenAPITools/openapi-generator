import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

import {{packageName}}.infrastructure.ByteArrayBase64Serializer
{{#vendorExtensions.x-additionalProperties}}import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.Serializer
import kotlinx.serialization.KSerializer
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.descriptors.element
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.encoding.encodeStructure{{/vendorExtensions.x-additionalProperties}}

/**
 * {{{description}}}
{{#allVars}}
 * @param {{name}} {{{description}}}
{{/allVars}}
 */
@Serializable{{#vendorExtensions.x-additionalProperties}}(with = {{{classname}}}Serializer::class){{/vendorExtensions.x-additionalProperties}}
{{#nonPublicApi}}internal {{/nonPublicApi}}data class {{classname}} (
//asdfasdf end
{{#requiredVars}}
{{>data_class_req_var}}{{^-last}},
{{/-last}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}},
{{/hasOptional}}{{/hasRequired}}{{#optionalVars}}{{>data_class_opt_var}}{{^-last}},
{{/-last}}{{/optionalVars}}{{#vendorExtensions.x-additionalProperties}},
    val additionalProperties: Map<String, String>? = null,{{/vendorExtensions.x-additionalProperties}}
){{#hasEnums}} {
    {{#allVars}}{{#isEnum}}
    /**
    * {{{description}}}
    * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
    */
    enum class {{nameInCamelCase}} {
        {{#allowableValues}}{{#enumVars}}@SerialName({{{value}}}) {{&name}}{{^-last}},
        {{/-last}}{{/enumVars}}{{/allowableValues}}
    }
    {{/isEnum}}{{/allVars}}
}{{/hasEnums}}



{{#vendorExtensions.x-additionalProperties}}
@OptIn(ExperimentalSerializationApi::class)
@Serializer(forClass = {{{classname}}}::class)
internal object {{{classname}}}Serializer : KSerializer<{{{classname}}}> {
    private fun createDescriptor(body: {{{classname}}}): SerialDescriptor =
        buildClassSerialDescriptor("{{{classname}}}") {
            {{#allVars}}
                element<{{{dataType}}}>("{{{name}}}")
            {{/allVars}}
            body.additionalProperties?.onEach { property ->
                element<String>(property.key)
            }
        }

    override fun serialize(encoder: Encoder, value: {{{classname}}}) {
        val descriptor = createDescriptor(value)
        var index = 0
        encoder.encodeStructure(descriptor) {
            {{#allVars}}
                encodeSerializableElement(descriptor, index++, {{{dataType}}}.serializer(), value.{{{name}}})
            {{/allVars}}
            value.additionalProperties?.onEach() { property ->
                encodeStringElement(descriptor, index++,  property.value)
            }
        }
    }
}
{{/vendorExtensions.x-additionalProperties}}