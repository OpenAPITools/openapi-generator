{{>licenseInfo}}

package {{invokerPackage}};

{{>generatedAnnotation}}
public class DependencyUtil {

  public static boolean OrDependency(boolean... assertions){
    boolean result = false;
    for (int i=0;i<assertions.length;i++){
      result = result || assertions[i];

      if (result)
        return true;
    }
    return false;
  }

  public static boolean ZeroOrOneDependency(boolean... assertions){
    boolean result = true;
    for (int i=0;i<assertions.length;i++){
      result = result && ZeroOrOneAllOrNoneElement(i,assertions,false,true);
      if (!result)
        break;
    }
    return result;
  }

  public static boolean OnlyOneDependency(boolean... assertions){
    boolean result = true;
    for (int i=0;i<assertions.length;i++){
      result = result && ZeroOrOneAllOrNoneElement(i,assertions,false,true);
      if (!result)
        return false;
    }

    result = result && OrDependency(assertions);
    return result;
  }

  public static boolean AllOrNoneDependency(boolean... assertions){
    boolean result = true;
    for (int i=0;i<assertions.length;i++){
      result = result && ZeroOrOneAllOrNoneElement(i,assertions,false,false)
        && ZeroOrOneAllOrNoneElement(i,assertions,true,true);

      if (!result)
        return false;
    }

    return true;
  }

  private static boolean ZeroOrOneAllOrNoneElement(int i,boolean[] allElements, boolean negateElement, boolean negateRemainingElements){
    boolean element = negateElement ? allElements[i]:!allElements[i];
    if (element)
      return true;

    boolean result = true;
    for (int j=0;j<allElements.length;j++){
      if (i!=j){
        boolean otherElement = negateRemainingElements ? !allElements[j]:allElements[j];
      result = result && otherElement;
      if (!result)
        return false;
      }
    }
    return true;
  }

}