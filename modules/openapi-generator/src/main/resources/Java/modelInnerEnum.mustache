  /**
   * {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{description}}{{/description}}
   */
{{#gson}}
  @JsonAdapter({{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}.Adapter.class)
{{/gson}}
  public enum {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} {
    {{#allowableValues}}
      {{#enumVars}}
    {{#enumDescription}}
    /**
     * {{enumDescription}}
     */
    {{/enumDescription}}
    {{{name}}}({{{value}}}){{^-last}},
    {{/-last}}{{#-last}};{{/-last}}
      {{/enumVars}}
    {{/allowableValues}}

    private {{{dataType}}} value;

    {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}({{{dataType}}} value) {
      this.value = value;
    }

{{#jackson}}
    @JsonValue
{{/jackson}}
    public {{{dataType}}} getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

{{#jackson}}
    @JsonCreator
{{/jackson}}
    public static {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} fromValue(String text) {
      for ({{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} b : {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      {{#useNullForUnknownEnumValue}}return null;{{/useNullForUnknownEnumValue}}{{^useNullForUnknownEnumValue}}throw new IllegalArgumentException("Unexpected value '" + text + "'");{{/useNullForUnknownEnumValue}}
    }
{{#gson}}

    public static class Adapter extends TypeAdapter<{{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}> {
      @Override
      public void write(final JsonWriter jsonWriter, final {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} enumeration) throws IOException {
        {{#isInteger}}
        Integer value = enumeration.getValue();
        {{/isInteger}}
        {{#isLong}}
        Long value = enumeration.getValue();
        {{/isLong}}
        {{#isFloat}}
        Double value = Double.valueOf(enumeration.getValue().toString());
        {{/isFloat}}
        {{#isDouble}}
        Double value = enumeration.getValue();
        {{/isDouble}}
        {{#isBoolean}}
        Boolean value = enumeration.getValue();
        {{/isBoolean}}
        {{#isString}}
        String value = enumeration.getValue();
        {{/isString}}
        {{#isDate}}
        String value = enumeration.getValue().toString();
        {{/isDate}}
        {{#isDateTime}}
        String value = enumeration.getValue().toString();
        {{/isDateTime}}
        jsonWriter.value(value);
      }

      @Override
      public {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} read(final JsonReader jsonReader) throws IOException {
        {{#isInteger}}
        Integer value = jsonReader.nextInt();
        {{/isInteger}}
        {{#isLong}}
        Long value = jsonReader.nextLong();
        {{/isLong}}
        {{#isFloat}}
        Double value = jsonReader.nextDouble();
        {{/isFloat}}
        {{#isDouble}}
        Double value = jsonReader.nextDouble();
        {{/isDouble}}
        {{#isBoolean}}
        Boolean value = jsonReader.nextBoolean();
        {{/isBoolean}}
        {{#isString}}
        String value = jsonReader.nextString();
        {{/isString}}
        {{#isDate}}
        String value = jsonReader.nextString();
        {{/isDate}}
        {{#isDateTime}}
        String value = jsonReader.nextString();
        {{/isDateTime}}
        return {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}.fromValue(String.valueOf(value));
      }
    }
{{/gson}}
  }
