{{>licenseInfo}}
package {{package}};

import com.sun.jersey.api.client.GenericType;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{invokerPackage}}.Pair;

{{#imports}}import {{import}};
{{/imports}}


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{#hasHttpBasicMethods}}
import java.util.Base64;
{{/hasHttpBasicMethods}}

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
  private ApiClient apiClient;
  {{#hasHttpBearerMethods}}
  private String bearerToken;
  {{/hasHttpBearerMethods}}
  {{#hasHttpBasicMethods}}
  private String username;
  private String password;
  {{/hasHttpBasicMethods}}
  {{#hasApiKeyMethods}}
  private String apiKey;
  private String apiKeyPrefix;
  {{/hasApiKeyMethods}}
  {{#hasOAuthMethods}}
  private String accessToken;
  {{/hasOAuthMethods}}

  public {{classname}}() {
    this(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  {{#hasHttpBearerMethods}}
  /**
   * Helper method to set access token for Bearer authentication.
   * @param bearerToken Bearer token
   * @return {{classname}}
   */
  public {{classname}} setBearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
    return this;
  }
  {{/hasHttpBearerMethods}}

  {{#hasHttpBasicMethods}}
  /**
   * Helper method to set username for HTTP basic authentication.
   * @param username Username
   * @return {{classname}}
   */
  public {{classname}} setUsername(String username) {
    this.username = username;
    return this;
  }

  /**
   * Helper method to set password for HTTP basic authentication.
   * @param password Password
   * @return {{classname}}
   */
  public {{classname}} setPassword(String password) {
    this.password = password;
    return this;
  }
  {{/hasHttpBasicMethods}}

  {{#hasApiKeyMethods}}
  /**
   * Helper method to set API key value for API key authentication.
   * @param apiKey API key
   * @return {{classname}}
   */
  public {{classname}} setApiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Helper method to set API key prefix for API key authentication.
   * @param apiKeyPrefix API key prefix
   * @return {{classname}}
   */
  public {{classname}} setApiKeyPrefix(String apiKeyPrefix) {
    this.apiKeyPrefix = apiKeyPrefix;
    return this;
  }
  {{/hasApiKeyMethods}}

  {{#hasOAuthMethods}}
  /**
   * Helper method to set access token for OAuth2 authentication.
   * @param accessToken Access token
   * @return {{classname}}
   */
  public {{classname}} setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }
  {{/hasOAuthMethods}}

  /**
   * Apply authentication settings directly to request headers.
   * This avoids modifying the shared ApiClient's authentication state.
   */
  private void applyAuthToHeaders(Map<String, String> headerParams) {
    {{#hasHttpBearerMethods}}
    if (bearerToken != null) {
      headerParams.put("Authorization", "Bearer " + bearerToken);
    }
    {{/hasHttpBearerMethods}}
    {{#hasHttpBasicMethods}}
    if (username != null && password != null) {
      String credentials = java.util.Base64.getEncoder().encodeToString((username + ":" + password).getBytes());
      headerParams.put("Authorization", "Basic " + credentials);
    }
    {{/hasHttpBasicMethods}}
    {{#hasApiKeyMethods}}
    if (apiKey != null) {
      {{#authMethods}}{{#isApiKey}}{{#isKeyInHeader}}
      String keyValue = apiKeyPrefix != null ? apiKeyPrefix + " " + apiKey : apiKey;
      headerParams.put("{{keyParamName}}", keyValue);
      {{/isKeyInHeader}}{{/isApiKey}}{{/authMethods}}
    }
    {{/hasApiKeyMethods}}
    {{#hasOAuthMethods}}
    if (accessToken != null) {
      headerParams.put("Authorization", "Bearer " + accessToken);
    }
    {{/hasOAuthMethods}}
  }

  /**
   * Apply authentication settings directly to query parameters.
   * This avoids modifying the shared ApiClient's authentication state.
   */
  private void applyAuthToQueryParams(List<Pair> queryParams) {
    {{#hasApiKeyMethods}}
    if (apiKey != null) {
      {{#authMethods}}{{#isApiKey}}{{#isKeyInQuery}}
      String keyValue = apiKeyPrefix != null ? apiKeyPrefix + " " + apiKey : apiKey;
      queryParams.add(new Pair("{{keyParamName}}", keyValue));
      {{/isKeyInQuery}}{{/isApiKey}}{{/authMethods}}
    }
    {{/hasApiKeyMethods}}
  }

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}
   {{/allParams}}
   {{#returnType}}
   * @return {{.}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{>nullable_var_annotations}} {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
    Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}{{/allParams}}
    // create path and map variables
    String localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    {{#queryParams}}
    {{#collectionFormat}}localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("{{{.}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll(apiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
    {{/queryParams}}

    {{#headerParams}}if ({{paramName}} != null)
      localVarHeaderParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    {{#cookieParams}}if ({{paramName}} != null)
      localVarCookieParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/cookieParams}}

    {{#formParams}}if ({{paramName}} != null)
      localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    // Apply authentication directly to request parameters (no shared state modification)
    applyAuthToHeaders(localVarHeaderParams);
    applyAuthToQueryParams(localVarQueryParams);

    final String[] localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    // No authentication names needed - auth is applied directly above
    String[] localVarAuthNames = new String[] {};
    
    {{#returnType}}
    GenericType<{{{returnType}}}> localVarReturnType = new GenericType<{{{returnType}}}>() {};
    return apiClient.invokeAPI(localVarPath, "{{httpMethod}}", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    {{/returnType}}{{^returnType}}
    apiClient.invokeAPI(localVarPath, "{{httpMethod}}", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
    {{/returnType}}
  }
  {{/operation}}
}
{{/operations}}
