{{>licenseInfo}}
package {{package}};

import com.sun.jersey.api.client.GenericType;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{invokerPackage}}.Pair;
import {{invokerPackage}}.auth.Authentication;
{{#hasHttpBearerMethods}}
import {{invokerPackage}}.auth.HttpBearerAuth;
{{/hasHttpBearerMethods}}
{{#hasHttpBasicMethods}}
import {{invokerPackage}}.auth.HttpBasicAuth;
{{/hasHttpBasicMethods}}
{{#hasApiKeyMethods}}
import {{invokerPackage}}.auth.ApiKeyAuth;
{{/hasApiKeyMethods}}
{{#hasOAuthMethods}}
import {{invokerPackage}}.auth.OAuth;
{{/hasOAuthMethods}}

{{#imports}}import {{import}};
{{/imports}}


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
  private ApiClient apiClient;
  {{#hasHttpBearerMethods}}
  private String bearerToken;
  {{/hasHttpBearerMethods}}
  {{#hasHttpBasicMethods}}
  private String username;
  private String password;
  {{/hasHttpBasicMethods}}
  {{#hasApiKeyMethods}}
  private String apiKey;
  private String apiKeyPrefix;
  {{/hasApiKeyMethods}}
  {{#hasOAuthMethods}}
  private String accessToken;
  {{/hasOAuthMethods}}

  public {{classname}}() {
    this(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  {{#hasHttpBearerMethods}}
  /**
   * Helper method to set access token for Bearer authentication.
   * @param bearerToken Bearer token
   * @return {{classname}}
   */
  public {{classname}} setBearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
    return this;
  }
  {{/hasHttpBearerMethods}}

  {{#hasHttpBasicMethods}}
  /**
   * Helper method to set username for HTTP basic authentication.
   * @param username Username
   * @return {{classname}}
   */
  public {{classname}} setUsername(String username) {
    this.username = username;
    return this;
  }

  /**
   * Helper method to set password for HTTP basic authentication.
   * @param password Password
   * @return {{classname}}
   */
  public {{classname}} setPassword(String password) {
    this.password = password;
    return this;
  }
  {{/hasHttpBasicMethods}}

  {{#hasApiKeyMethods}}
  /**
   * Helper method to set API key value for API key authentication.
   * @param apiKey API key
   * @return {{classname}}
   */
  public {{classname}} setApiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Helper method to set API key prefix for API key authentication.
   * @param apiKeyPrefix API key prefix
   * @return {{classname}}
   */
  public {{classname}} setApiKeyPrefix(String apiKeyPrefix) {
    this.apiKeyPrefix = apiKeyPrefix;
    return this;
  }
  {{/hasApiKeyMethods}}

  {{#hasOAuthMethods}}
  /**
   * Helper method to set access token for OAuth2 authentication.
   * @param accessToken Access token
   * @return {{classname}}
   */
  public {{classname}} setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }
  {{/hasOAuthMethods}}

  /**
   * Apply authentication settings to the API client for this request only.
   * This does not modify the shared ApiClient's authentication state.
   */
  private void applyAuthToApiClient() {
    {{#hasHttpBearerMethods}}
    if (bearerToken != null) {
      for (Authentication auth : apiClient.getAuthentications().values()) {
        if (auth instanceof HttpBearerAuth) {
          ((HttpBearerAuth) auth).setBearerToken(bearerToken);
          break;
        }
      }
    }
    {{/hasHttpBearerMethods}}
    {{#hasHttpBasicMethods}}
    if (username != null || password != null) {
      for (Authentication auth : apiClient.getAuthentications().values()) {
        if (auth instanceof HttpBasicAuth) {
          if (username != null) ((HttpBasicAuth) auth).setUsername(username);
          if (password != null) ((HttpBasicAuth) auth).setPassword(password);
          break;
        }
      }
    }
    {{/hasHttpBasicMethods}}
    {{#hasApiKeyMethods}}
    if (apiKey != null || apiKeyPrefix != null) {
      for (Authentication auth : apiClient.getAuthentications().values()) {
        if (auth instanceof ApiKeyAuth) {
          if (apiKey != null) ((ApiKeyAuth) auth).setApiKey(apiKey);
          if (apiKeyPrefix != null) ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);
          break;
        }
      }
    }
    {{/hasApiKeyMethods}}
    {{#hasOAuthMethods}}
    if (accessToken != null) {
      for (Authentication auth : apiClient.getAuthentications().values()) {
        if (auth instanceof OAuth) {
          ((OAuth) auth).setAccessToken(accessToken);
          break;
        }
      }
    }
    {{/hasOAuthMethods}}
  }

  /**
   * Clear authentication settings from the API client after the request.
   * This ensures no authentication state persists in the shared ApiClient.
   */
  private void clearAuthFromApiClient() {
    {{#hasHttpBearerMethods}}
    for (Authentication auth : apiClient.getAuthentications().values()) {
      if (auth instanceof HttpBearerAuth) {
        ((HttpBearerAuth) auth).setBearerToken((String) null);
        break;
      }
    }
    {{/hasHttpBearerMethods}}
    {{#hasHttpBasicMethods}}
    for (Authentication auth : apiClient.getAuthentications().values()) {
      if (auth instanceof HttpBasicAuth) {
        ((HttpBasicAuth) auth).setUsername(null);
        ((HttpBasicAuth) auth).setPassword(null);
        break;
      }
    }
    {{/hasHttpBasicMethods}}
    {{#hasApiKeyMethods}}
    for (Authentication auth : apiClient.getAuthentications().values()) {
      if (auth instanceof ApiKeyAuth) {
        ((ApiKeyAuth) auth).setApiKey(null);
        ((ApiKeyAuth) auth).setApiKeyPrefix(null);
        break;
      }
    }
    {{/hasApiKeyMethods}}
    {{#hasOAuthMethods}}
    for (Authentication auth : apiClient.getAuthentications().values()) {
      if (auth instanceof OAuth) {
        ((OAuth) auth).setAccessToken(null);
        break;
      }
    }
    {{/hasOAuthMethods}}
  }

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}
   {{/allParams}}
   {{#returnType}}
   * @return {{.}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{>nullable_var_annotations}} {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
    Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}{{/allParams}}
    // create path and map variables
    String localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    {{#queryParams}}
    {{#collectionFormat}}localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("{{{.}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll(apiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
    {{/queryParams}}

    {{#headerParams}}if ({{paramName}} != null)
      localVarHeaderParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    {{#cookieParams}}if ({{paramName}} != null)
      localVarCookieParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/cookieParams}}

    {{#formParams}}if ({{paramName}} != null)
      localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    final String[] localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };

    // Apply authentication for this request only
    applyAuthToApiClient();
    
    try {
      {{#returnType}}
      GenericType<{{{returnType}}}> localVarReturnType = new GenericType<{{{returnType}}}>() {};
      return apiClient.invokeAPI(localVarPath, "{{httpMethod}}", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      {{/returnType}}{{^returnType}}
      apiClient.invokeAPI(localVarPath, "{{httpMethod}}", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
      {{/returnType}}
    } finally {
      // Clear authentication to prevent it from persisting in the shared ApiClient
      clearAuthFromApiClient();
    }
  }
  {{/operation}}
}
{{/operations}}
