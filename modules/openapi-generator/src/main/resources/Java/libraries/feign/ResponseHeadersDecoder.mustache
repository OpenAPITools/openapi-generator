package {{invokerPackage}};

import com.fasterxml.jackson.databind.ObjectMapper;
import feign.Response;
import feign.jackson.JacksonDecoder;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;

import {{modelPackage}}.HeaderAwareResponse;

public class ResponseHeadersDecoder extends JacksonDecoder {

    public ResponseHeadersDecoder(ObjectMapper mapper) {
        super(mapper);
    }

    @Override
    public Object decode(Response response, Type type) throws IOException {
        Map<String, Collection<String>> responseHeaders = Collections.unmodifiableMap(response.headers());

        //To correctly use this type the type must be a parameterized HeaderAwareResponse
        Type responseBodyType;
        if (HeaderAwareResponse.class.getName().equals(((ParameterizedTypeImpl) type).getRawType().getName())) {
            responseBodyType = ((ParameterizedTypeImpl) type).getActualTypeArguments()[0];
        } else {
            responseBodyType = type;
        }

        Object body = super.decode(response, responseBodyType);
        return new HeaderAwareResponse(responseHeaders, body);
    }
}
