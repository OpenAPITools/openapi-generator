package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

import {{invokerPackage}}.query.QueryFormattedValue;
import {{invokerPackage}}.query.QueryFormat;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.http.annotation.*;
import io.reactivex.Single;

{{>generatedAnnotation}}
@Client("${base-path}")
public interface {{classname}} {

{{#operations}}{{#operation}}
  /**
   * {{summary}}
   * Async version
   * {{notes}}
{{#allParams}}
    * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}
{{#returnType}}
   * @return {{returnType}}
{{/returnType}}
{{#externalDocs}}
  * {{description}}
  * @see <a href="{{url}}">{{summary}} Documentation</a>
{{/externalDocs}}
   */
  @CustomHttpMethod(method="{{httpMethod}}", uri="{{{path}}}")
  {{#vendorExtensions.x-contentType}}@Produces(value={"{{vendorExtensions.x-contentType}}"})
  {{/vendorExtensions.x-contentType}}@Consumes(value={"{{vendorExtensions.x-accepts}}"})
  {{#returnType}}Single<{{{returnType}}}>{{/returnType}}{{^returnType}}Single<Void>{{/returnType}} {{nickname}}({{^allParams}});{{/allParams}}{{#allParams}}
        {{>libraries/micronaut/params/queryParams}}{{>libraries/micronaut/params/pathParams}}{{>libraries/micronaut/params/headerParams}}{{>libraries/micronaut/params/bodyParams}}{{>libraries/micronaut/params/formParams}}{{>libraries/micronaut/params/cookieParams}}{{^-last}}, {{/-last}}{{#-last}}
  );{{/-last}}{{/allParams}}

  /**
  * {{summary}}
  * Blocking version
  * {{notes}}
  {{#allParams}}
      * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
  {{/allParams}}
  {{#returnType}}
      * @return {{returnType}}
  {{/returnType}}
  {{#externalDocs}}
      * {{description}}
      * @see <a href="{{url}}">{{summary}} Documentation</a>
  {{/externalDocs}}
  */
  @CustomHttpMethod(method="{{httpMethod}}", uri="{{{path}}}{{#hasQueryParams}}{?{{/hasQueryParams}}{{#queryParams}}{{baseName}}{{^-last}},{{/-last}}{{/queryParams}}{{#hasQueryParams}}{{=< >=}}}<={{ }}=>{{/hasQueryParams}}")
  {{#vendorExtensions.x-contentType}}@Produces(value={"{{vendorExtensions.x-contentType}}"})
  {{/vendorExtensions.x-contentType}}@Consumes(value={"{{vendorExtensions.x-accepts}}"})
  {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}}Blocking({{^allParams}});{{/allParams}}{{#allParams}}
      {{>libraries/micronaut/queryParams}}{{>libraries/micronaut/pathParams}}{{>libraries/micronaut/headerParams}}{{>libraries/micronaut/bodyParams}}{{>libraries/micronaut/formParams}}{{^-last}}, {{/-last}}{{#-last}}
  );{{/-last}}{{/allParams}}

  {{/operation}}
{{/operations}}
}
