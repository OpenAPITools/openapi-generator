package {{invokerPackage}}.auth;

import io.micronaut.context.annotation.Requires;
import io.micronaut.context.annotation.Value;
import io.micronaut.context.exceptions.ConfigurationException;
import io.micronaut.http.HttpResponse;
import io.micronaut.http.MutableHttpRequest;
import io.micronaut.http.annotation.Filter;
import io.micronaut.http.filter.ClientFilterChain;
import io.micronaut.http.filter.HttpClientFilter;
import org.reactivestreams.Publisher;


@Requires(property="basic-auth.path")
@Filter("${context-path}${basic-auth.path}")
public class HttpBasicAuth implements HttpClientFilter {
    private final String username;
    private final String password;

    public HttpBasicAuth(
            @Value("${basic-auth.username}") String username,
            @Value("${basic-auth.password}") String password)
    {
        if (username == null) {
            throw new ConfigurationException("basic-auth.username needs to be specified " +
                    "when basic-auth.enabled is true");
        }
        if (password == null) {
            throw new ConfigurationException("basic-auth.password needs to be specified " +
                    "when basic-auth.enabled is true");
        }

        this.username = username;
        this.password = password;
    }

    @Override
    public Publisher<? extends HttpResponse<?>> doFilter(MutableHttpRequest<?> request, ClientFilterChain chain) {
        request.basicAuth(username, password);

        return chain.proceed(request);
    }
}
