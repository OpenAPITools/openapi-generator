import { DynamicModule, Module, Global } from '@nestjs/common';
import { HttpService, HttpModule, HttpModuleOptions } from '@nestjs/axios';
import { Configuration } from './configuration';
import { Agent } from "https";
import * as fs from 'fs';
import {REQUEST} from "@nestjs/core";


{{#apiInfo}}
{{#apis}}
import { {{classname}} } from './{{importPath}}';
{{/apis}}
{{/apiInfo}}

let cachedOptions: HttpModuleOptions = undefined;
let cachedOptionsRefresh: Date;

@Global()
@Module({
  imports:      [ ],
  exports:      [
    {{#apiInfo}}{{#apis}}{{classname}}{{^-last}},
    {{/-last}}{{/apis}}{{/apiInfo}}
  ],
  providers: [
    {{#apiInfo}}{{#apis}}{{classname}}{{^-last}},
    {{/-last}}{{/apis}}{{/apiInfo}}
  ]
})
export class ApiModule {
    public static forRoot(configurationFactory: () => Configuration): DynamicModule {
        return {
            module: ApiModule,
            providers: [ { provide: Configuration, useFactory: configurationFactory } ],
            imports: [
              HttpModule.registerAsync({
              useFactory: (request) => {
                if(cachedOptions === undefined || cachedOptionsRefresh < new Date()){                  
                  //Refresh certs every 5 minutes or on next request.  Should work with AutoCert since they renew well before 5 minutes are left on the 60 minute cert
                  cachedOptionsRefresh = new Date(new Date().getTime() + 5 * 60000);
                  cachedOptions = createHttpOptions(
                      configurationFactory().certPath,
                      configurationFactory().certKeyPath,
                      configurationFactory().caPath
                  )}
                return cachedOptions;
              },
              inject: [REQUEST]
            }),
      ],
      exports: [HttpModule]
        };
    }

    constructor( httpService: HttpService) { }
}

const createHttpOptions = (
  certPath?: string,
  certKeyPath?: string,
  caPath?: string
): HttpModuleOptions => {
  return {
    timeout: 5001,
    httpsAgent: certKeyPath && certPath && caPath ? getAgent(certPath, certKeyPath, caPath) : undefined,
  };
};

const getAgent = (
  certPath: string,
  certKeyPath: string,
  caPath: string
): Agent | undefined => {
  return new Agent({
    cert: fs.readFileSync(certPath),
    key: fs.readFileSync(certKeyPath),
    ca: fs.readFileSync(caPath),
  });
};