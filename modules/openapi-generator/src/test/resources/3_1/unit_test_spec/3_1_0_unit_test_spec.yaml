openapi: 3.1.0
servers:
- url: https://someserver.com/v1
info:
  title: openapi 3.1.0 sample spec
  version: 0.0.1
  description: sample spec for testing openapi functionality, built from json schema
    tests for draft2020-12
tags:
- name: operation.requestBody
- name: path.post
- name: contentType_json
- name: response.content.contentType.schema
- name: additionalProperties
- name: allOf
- name: anyOf
- name: default
- name: enum
- name: format
- name: items
- name: maximum
- name: maxItems
- name: maxLength
- name: maxProperties
- name: minimum
- name: minItems
- name: minLength
- name: minProperties
- name: multipleOf
- name: not
- name: oneOf
- name: pattern
- name: properties
- name: $ref
- name: $ref
- name: required
- name: type
- name: uniqueItems
paths:
  /requestBody/postAdditionalpropertiesWithSchemaRequestBody:
    post:
      operationId: postAdditionalpropertiesWithSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesWithSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesWithSchemaResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesWithSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesWithSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesCanExistByItselfRequestBody:
    post:
      operationId: postAdditionalpropertiesCanExistByItselfRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesCanExistByItself'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesCanExistByItself'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesCanExistByItself'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesCanExistByItself'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesAreAllowedByDefaultRequestBody:
    post:
      operationId: postAdditionalpropertiesAreAllowedByDefaultRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesAreAllowedByDefault'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAreAllowedByDefault'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesAreAllowedByDefault'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAreAllowedByDefault'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesDoesNotLookInApplicatorsRequestBody:
    post:
      operationId: postAdditionalpropertiesDoesNotLookInApplicatorsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesDoesNotLookInApplicators'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesDoesNotLookInApplicators'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesDoesNotLookInApplicatorsResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesDoesNotLookInApplicatorsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesDoesNotLookInApplicators'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesDoesNotLookInApplicators'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesWithNullValuedInstancePropertiesRequestBody:
    post:
      operationId: postAdditionalpropertiesWithNullValuedInstancePropertiesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesWithNullValuedInstanceProperties'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithNullValuedInstanceProperties'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesWithNullValuedInstancePropertiesResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesWithNullValuedInstancePropertiesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesWithNullValuedInstanceProperties'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesWithNullValuedInstanceProperties'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAdditionalpropertiesShouldNotLookInApplicatorsRequestBody:
    post:
      operationId: postAdditionalpropertiesShouldNotLookInApplicatorsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalpropertiesShouldNotLookInApplicators'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesShouldNotLookInApplicators'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - additionalProperties
  /responseBody/postAdditionalpropertiesShouldNotLookInApplicatorsResponseBodyForContentTypes:
    post:
      operationId: postAdditionalpropertiesShouldNotLookInApplicatorsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalpropertiesShouldNotLookInApplicators'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesShouldNotLookInApplicators'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - additionalProperties
  /requestBody/postAllofRequestBody:
    post:
      operationId: postAllofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Allof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Allof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofResponseBodyForContentTypes:
    post:
      operationId: postAllofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Allof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithBaseSchemaRequestBody:
    post:
      operationId: postAllofWithBaseSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithBaseSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithBaseSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithBaseSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithBaseSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithBaseSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofSimpleTypesRequestBody:
    post:
      operationId: postAllofSimpleTypesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofSimpleTypes'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofSimpleTypes'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofSimpleTypesResponseBodyForContentTypes:
    post:
      operationId: postAllofSimpleTypesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofSimpleTypes'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofSimpleTypes'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithOneEmptySchemaRequestBody:
    post:
      operationId: postAllofWithOneEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithOneEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithOneEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithOneEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithOneEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithOneEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithOneEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithTwoEmptySchemasRequestBody:
    post:
      operationId: postAllofWithTwoEmptySchemasRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithTwoEmptySchemas'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithTwoEmptySchemas'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithTwoEmptySchemasResponseBodyForContentTypes:
    post:
      operationId: postAllofWithTwoEmptySchemasResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithTwoEmptySchemas'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithTwoEmptySchemas'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithTheFirstEmptySchemaRequestBody:
    post:
      operationId: postAllofWithTheFirstEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithTheFirstEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithTheFirstEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithTheFirstEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithTheFirstEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofWithTheLastEmptySchemaRequestBody:
    post:
      operationId: postAllofWithTheLastEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofWithTheLastEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofWithTheLastEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofWithTheLastEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAllofWithTheLastEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofWithTheLastEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofWithTheLastEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postNestedAllofToCheckValidationSemanticsRequestBody:
    post:
      operationId: postNestedAllofToCheckValidationSemanticsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedAllofToCheckValidationSemantics'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedAllofToCheckValidationSemantics'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes:
    post:
      operationId: postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedAllofToCheckValidationSemantics'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedAllofToCheckValidationSemantics'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAllofCombinedWithAnyofOneofRequestBody:
    post:
      operationId: postAllofCombinedWithAnyofOneofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllofCombinedWithAnyofOneof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AllofCombinedWithAnyofOneof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - allOf
  /responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes:
    post:
      operationId: postAllofCombinedWithAnyofOneofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllofCombinedWithAnyofOneof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AllofCombinedWithAnyofOneof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - allOf
  /requestBody/postAnyofRequestBody:
    post:
      operationId: postAnyofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Anyof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Anyof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofResponseBodyForContentTypes:
    post:
      operationId: postAnyofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Anyof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Anyof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postAnyofWithBaseSchemaRequestBody:
    post:
      operationId: postAnyofWithBaseSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyofWithBaseSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AnyofWithBaseSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofWithBaseSchemaResponseBodyForContentTypes:
    post:
      operationId: postAnyofWithBaseSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyofWithBaseSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AnyofWithBaseSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postAnyofComplexTypesRequestBody:
    post:
      operationId: postAnyofComplexTypesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyofComplexTypes'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AnyofComplexTypes'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofComplexTypesResponseBodyForContentTypes:
    post:
      operationId: postAnyofComplexTypesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyofComplexTypes'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AnyofComplexTypes'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postAnyofWithOneEmptySchemaRequestBody:
    post:
      operationId: postAnyofWithOneEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyofWithOneEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/AnyofWithOneEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postAnyofWithOneEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postAnyofWithOneEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyofWithOneEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/AnyofWithOneEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postNestedAnyofToCheckValidationSemanticsRequestBody:
    post:
      operationId: postNestedAnyofToCheckValidationSemanticsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedAnyofToCheckValidationSemantics'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedAnyofToCheckValidationSemantics'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - anyOf
  /responseBody/postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes:
    post:
      operationId: postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedAnyofToCheckValidationSemantics'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedAnyofToCheckValidationSemantics'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - anyOf
  /requestBody/postInvalidStringValueForDefaultRequestBody:
    post:
      operationId: postInvalidStringValueForDefaultRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvalidStringValueForDefault'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/InvalidStringValueForDefault'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - default
  /responseBody/postInvalidStringValueForDefaultResponseBodyForContentTypes:
    post:
      operationId: postInvalidStringValueForDefaultResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidStringValueForDefault'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/InvalidStringValueForDefault'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - default
  /requestBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingRequestBody:
    post:
      operationId: postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - default
  /responseBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes:
    post:
      operationId: postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - default
  /requestBody/postSimpleEnumValidationRequestBody:
    post:
      operationId: postSimpleEnumValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleEnumValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/SimpleEnumValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postSimpleEnumValidationResponseBodyForContentTypes:
    post:
      operationId: postSimpleEnumValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleEnumValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/SimpleEnumValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumsInPropertiesRequestBody:
    post:
      operationId: postEnumsInPropertiesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumsInProperties'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumsInProperties'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumsInPropertiesResponseBodyForContentTypes:
    post:
      operationId: postEnumsInPropertiesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumsInProperties'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumsInProperties'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWithEscapedCharactersRequestBody:
    post:
      operationId: postEnumWithEscapedCharactersRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWithEscapedCharacters'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWithEscapedCharacters'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWithEscapedCharactersResponseBodyForContentTypes:
    post:
      operationId: postEnumWithEscapedCharactersResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWithEscapedCharacters'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWithEscapedCharacters'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWithFalseDoesNotMatch0RequestBody:
    post:
      operationId: postEnumWithFalseDoesNotMatch0RequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWithFalseDoesNotMatch0'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWithFalseDoesNotMatch0'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes:
    post:
      operationId: postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWithFalseDoesNotMatch0'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWithFalseDoesNotMatch0'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWithTrueDoesNotMatch1RequestBody:
    post:
      operationId: postEnumWithTrueDoesNotMatch1RequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWithTrueDoesNotMatch1'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWithTrueDoesNotMatch1'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes:
    post:
      operationId: postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWithTrueDoesNotMatch1'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWithTrueDoesNotMatch1'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWith0DoesNotMatchFalseRequestBody:
    post:
      operationId: postEnumWith0DoesNotMatchFalseRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWith0DoesNotMatchFalse'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWith0DoesNotMatchFalse'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes:
    post:
      operationId: postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWith0DoesNotMatchFalse'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWith0DoesNotMatchFalse'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEnumWith1DoesNotMatchTrueRequestBody:
    post:
      operationId: postEnumWith1DoesNotMatchTrueRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumWith1DoesNotMatchTrue'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EnumWith1DoesNotMatchTrue'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes:
    post:
      operationId: postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumWith1DoesNotMatchTrue'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EnumWith1DoesNotMatchTrue'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postNulCharactersInStringsRequestBody:
    post:
      operationId: postNulCharactersInStringsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NulCharactersInStrings'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NulCharactersInStrings'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - enum
  /responseBody/postNulCharactersInStringsResponseBodyForContentTypes:
    post:
      operationId: postNulCharactersInStringsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NulCharactersInStrings'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NulCharactersInStrings'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - enum
  /requestBody/postEmailFormatRequestBody:
    post:
      operationId: postEmailFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/EmailFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postEmailFormatResponseBodyForContentTypes:
    post:
      operationId: postEmailFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/EmailFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIdnEmailFormatRequestBody:
    post:
      operationId: postIdnEmailFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdnEmailFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IdnEmailFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIdnEmailFormatResponseBodyForContentTypes:
    post:
      operationId: postIdnEmailFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdnEmailFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IdnEmailFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postRegexFormatRequestBody:
    post:
      operationId: postRegexFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegexFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RegexFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postRegexFormatResponseBodyForContentTypes:
    post:
      operationId: postRegexFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegexFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RegexFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIpv4FormatRequestBody:
    post:
      operationId: postIpv4FormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ipv4Format'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Ipv4Format'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIpv4FormatResponseBodyForContentTypes:
    post:
      operationId: postIpv4FormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv4Format'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Ipv4Format'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIpv6FormatRequestBody:
    post:
      operationId: postIpv6FormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ipv6Format'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Ipv6Format'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIpv6FormatResponseBodyForContentTypes:
    post:
      operationId: postIpv6FormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ipv6Format'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Ipv6Format'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIdnHostnameFormatRequestBody:
    post:
      operationId: postIdnHostnameFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdnHostnameFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IdnHostnameFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIdnHostnameFormatResponseBodyForContentTypes:
    post:
      operationId: postIdnHostnameFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdnHostnameFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IdnHostnameFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postHostnameFormatRequestBody:
    post:
      operationId: postHostnameFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostnameFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/HostnameFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postHostnameFormatResponseBodyForContentTypes:
    post:
      operationId: postHostnameFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostnameFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/HostnameFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postDateFormatRequestBody:
    post:
      operationId: postDateFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/DateFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postDateFormatResponseBodyForContentTypes:
    post:
      operationId: postDateFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/DateFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postDateTimeFormatRequestBody:
    post:
      operationId: postDateTimeFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateTimeFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/DateTimeFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postDateTimeFormatResponseBodyForContentTypes:
    post:
      operationId: postDateTimeFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/DateTimeFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postTimeFormatRequestBody:
    post:
      operationId: postTimeFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/TimeFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postTimeFormatResponseBodyForContentTypes:
    post:
      operationId: postTimeFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/TimeFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postJsonPointerFormatRequestBody:
    post:
      operationId: postJsonPointerFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPointerFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/JsonPointerFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postJsonPointerFormatResponseBodyForContentTypes:
    post:
      operationId: postJsonPointerFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonPointerFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/JsonPointerFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postRelativeJsonPointerFormatRequestBody:
    post:
      operationId: postRelativeJsonPointerFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelativeJsonPointerFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RelativeJsonPointerFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postRelativeJsonPointerFormatResponseBodyForContentTypes:
    post:
      operationId: postRelativeJsonPointerFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelativeJsonPointerFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RelativeJsonPointerFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIriFormatRequestBody:
    post:
      operationId: postIriFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IriFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IriFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIriFormatResponseBodyForContentTypes:
    post:
      operationId: postIriFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IriFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IriFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postIriReferenceFormatRequestBody:
    post:
      operationId: postIriReferenceFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IriReferenceFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IriReferenceFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postIriReferenceFormatResponseBodyForContentTypes:
    post:
      operationId: postIriReferenceFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IriReferenceFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IriReferenceFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUriFormatRequestBody:
    post:
      operationId: postUriFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UriFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UriFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUriFormatResponseBodyForContentTypes:
    post:
      operationId: postUriFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UriFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UriFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUriReferenceFormatRequestBody:
    post:
      operationId: postUriReferenceFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UriReferenceFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UriReferenceFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUriReferenceFormatResponseBodyForContentTypes:
    post:
      operationId: postUriReferenceFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UriReferenceFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UriReferenceFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUriTemplateFormatRequestBody:
    post:
      operationId: postUriTemplateFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UriTemplateFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UriTemplateFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUriTemplateFormatResponseBodyForContentTypes:
    post:
      operationId: postUriTemplateFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UriTemplateFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UriTemplateFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postUuidFormatRequestBody:
    post:
      operationId: postUuidFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UuidFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UuidFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postUuidFormatResponseBodyForContentTypes:
    post:
      operationId: postUuidFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UuidFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postDurationFormatRequestBody:
    post:
      operationId: postDurationFormatRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DurationFormat'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/DurationFormat'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - format
  /responseBody/postDurationFormatResponseBodyForContentTypes:
    post:
      operationId: postDurationFormatResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DurationFormat'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/DurationFormat'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - format
  /requestBody/postNestedItemsRequestBody:
    post:
      operationId: postNestedItemsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedItems'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedItems'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postNestedItemsResponseBodyForContentTypes:
    post:
      operationId: postNestedItemsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedItems'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedItems'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postPrefixitemsWithNoAdditionalItemsAllowedRequestBody:
    post:
      operationId: postPrefixitemsWithNoAdditionalItemsAllowedRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrefixitemsWithNoAdditionalItemsAllowed'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PrefixitemsWithNoAdditionalItemsAllowed'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postPrefixitemsWithNoAdditionalItemsAllowedResponseBodyForContentTypes:
    post:
      operationId: postPrefixitemsWithNoAdditionalItemsAllowedResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrefixitemsWithNoAdditionalItemsAllowed'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PrefixitemsWithNoAdditionalItemsAllowed'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postItemsDoesNotLookInApplicatorsValidCaseRequestBody:
    post:
      operationId: postItemsDoesNotLookInApplicatorsValidCaseRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemsDoesNotLookInApplicatorsValidCase'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ItemsDoesNotLookInApplicatorsValidCase'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postItemsDoesNotLookInApplicatorsValidCaseResponseBodyForContentTypes:
    post:
      operationId: postItemsDoesNotLookInApplicatorsValidCaseResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsDoesNotLookInApplicatorsValidCase'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ItemsDoesNotLookInApplicatorsValidCase'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postPrefixitemsValidationAdjustsTheStartingIndexForItemsRequestBody:
    post:
      operationId: postPrefixitemsValidationAdjustsTheStartingIndexForItemsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrefixitemsValidationAdjustsTheStartingIndexForItems'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PrefixitemsValidationAdjustsTheStartingIndexForItems'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postPrefixitemsValidationAdjustsTheStartingIndexForItemsResponseBodyForContentTypes:
    post:
      operationId: postPrefixitemsValidationAdjustsTheStartingIndexForItemsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrefixitemsValidationAdjustsTheStartingIndexForItems'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PrefixitemsValidationAdjustsTheStartingIndexForItems'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postItemsWithNullInstanceElementsRequestBody:
    post:
      operationId: postItemsWithNullInstanceElementsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemsWithNullInstanceElements'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ItemsWithNullInstanceElements'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - items
  /responseBody/postItemsWithNullInstanceElementsResponseBodyForContentTypes:
    post:
      operationId: postItemsWithNullInstanceElementsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsWithNullInstanceElements'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ItemsWithNullInstanceElements'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - items
  /requestBody/postMaximumValidationRequestBody:
    post:
      operationId: postMaximumValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaximumValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaximumValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maximum
  /responseBody/postMaximumValidationResponseBodyForContentTypes:
    post:
      operationId: postMaximumValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaximumValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maximum
  /requestBody/postMaximumValidationWithUnsignedIntegerRequestBody:
    post:
      operationId: postMaximumValidationWithUnsignedIntegerRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaximumValidationWithUnsignedInteger'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaximumValidationWithUnsignedInteger'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maximum
  /responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes:
    post:
      operationId: postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaximumValidationWithUnsignedInteger'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaximumValidationWithUnsignedInteger'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maximum
  /requestBody/postMaxitemsValidationRequestBody:
    post:
      operationId: postMaxitemsValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxitemsValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxitemsValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxItems
  /responseBody/postMaxitemsValidationResponseBodyForContentTypes:
    post:
      operationId: postMaxitemsValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxitemsValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxitemsValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxItems
  /requestBody/postMaxitemsValidationWithADecimalRequestBody:
    post:
      operationId: postMaxitemsValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxitemsValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxitemsValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxItems
  /responseBody/postMaxitemsValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMaxitemsValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxitemsValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxitemsValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxItems
  /requestBody/postMaxlengthValidationRequestBody:
    post:
      operationId: postMaxlengthValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxlengthValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxlengthValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxLength
  /responseBody/postMaxlengthValidationResponseBodyForContentTypes:
    post:
      operationId: postMaxlengthValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxlengthValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxlengthValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxLength
  /requestBody/postMaxlengthValidationWithADecimalRequestBody:
    post:
      operationId: postMaxlengthValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxlengthValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxlengthValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxLength
  /responseBody/postMaxlengthValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMaxlengthValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxlengthValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxlengthValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxLength
  /requestBody/postMaxpropertiesValidationRequestBody:
    post:
      operationId: postMaxpropertiesValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxpropertiesValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxpropertiesValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxProperties
  /responseBody/postMaxpropertiesValidationResponseBodyForContentTypes:
    post:
      operationId: postMaxpropertiesValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxpropertiesValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxpropertiesValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxProperties
  /requestBody/postMaxpropertiesValidationWithADecimalRequestBody:
    post:
      operationId: postMaxpropertiesValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxpropertiesValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MaxpropertiesValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxProperties
  /responseBody/postMaxpropertiesValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMaxpropertiesValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxpropertiesValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MaxpropertiesValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxProperties
  /requestBody/postMaxproperties0MeansTheObjectIsEmptyRequestBody:
    post:
      operationId: postMaxproperties0MeansTheObjectIsEmptyRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Maxproperties0MeansTheObjectIsEmpty'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Maxproperties0MeansTheObjectIsEmpty'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - maxProperties
  /responseBody/postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes:
    post:
      operationId: postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Maxproperties0MeansTheObjectIsEmpty'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Maxproperties0MeansTheObjectIsEmpty'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - maxProperties
  /requestBody/postMinimumValidationRequestBody:
    post:
      operationId: postMinimumValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinimumValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinimumValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minimum
  /responseBody/postMinimumValidationResponseBodyForContentTypes:
    post:
      operationId: postMinimumValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimumValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinimumValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minimum
  /requestBody/postMinimumValidationWithSignedIntegerRequestBody:
    post:
      operationId: postMinimumValidationWithSignedIntegerRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinimumValidationWithSignedInteger'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinimumValidationWithSignedInteger'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minimum
  /responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes:
    post:
      operationId: postMinimumValidationWithSignedIntegerResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimumValidationWithSignedInteger'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinimumValidationWithSignedInteger'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minimum
  /requestBody/postMinitemsValidationRequestBody:
    post:
      operationId: postMinitemsValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinitemsValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinitemsValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minItems
  /responseBody/postMinitemsValidationResponseBodyForContentTypes:
    post:
      operationId: postMinitemsValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinitemsValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinitemsValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minItems
  /requestBody/postMinitemsValidationWithADecimalRequestBody:
    post:
      operationId: postMinitemsValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinitemsValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinitemsValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minItems
  /responseBody/postMinitemsValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMinitemsValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinitemsValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinitemsValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minItems
  /requestBody/postMinlengthValidationRequestBody:
    post:
      operationId: postMinlengthValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinlengthValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinlengthValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minLength
  /responseBody/postMinlengthValidationResponseBodyForContentTypes:
    post:
      operationId: postMinlengthValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinlengthValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinlengthValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minLength
  /requestBody/postMinlengthValidationWithADecimalRequestBody:
    post:
      operationId: postMinlengthValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinlengthValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinlengthValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minLength
  /responseBody/postMinlengthValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMinlengthValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinlengthValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinlengthValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minLength
  /requestBody/postMinpropertiesValidationRequestBody:
    post:
      operationId: postMinpropertiesValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinpropertiesValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinpropertiesValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minProperties
  /responseBody/postMinpropertiesValidationResponseBodyForContentTypes:
    post:
      operationId: postMinpropertiesValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinpropertiesValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinpropertiesValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minProperties
  /requestBody/postMinpropertiesValidationWithADecimalRequestBody:
    post:
      operationId: postMinpropertiesValidationWithADecimalRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinpropertiesValidationWithADecimal'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/MinpropertiesValidationWithADecimal'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - minProperties
  /responseBody/postMinpropertiesValidationWithADecimalResponseBodyForContentTypes:
    post:
      operationId: postMinpropertiesValidationWithADecimalResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinpropertiesValidationWithADecimal'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/MinpropertiesValidationWithADecimal'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - minProperties
  /requestBody/postByIntRequestBody:
    post:
      operationId: postByIntRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByInt'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ByInt'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - multipleOf
  /responseBody/postByIntResponseBodyForContentTypes:
    post:
      operationId: postByIntResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ByInt'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ByInt'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - multipleOf
  /requestBody/postByNumberRequestBody:
    post:
      operationId: postByNumberRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByNumber'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ByNumber'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - multipleOf
  /responseBody/postByNumberResponseBodyForContentTypes:
    post:
      operationId: postByNumberResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ByNumber'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ByNumber'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - multipleOf
  /requestBody/postBySmallNumberRequestBody:
    post:
      operationId: postBySmallNumberRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BySmallNumber'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/BySmallNumber'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - multipleOf
  /responseBody/postBySmallNumberResponseBodyForContentTypes:
    post:
      operationId: postBySmallNumberResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BySmallNumber'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/BySmallNumber'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - multipleOf
  /requestBody/postFloatDivisionInfRequestBody:
    post:
      operationId: postFloatDivisionInfRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FloatDivisionInf'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/FloatDivisionInf'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - multipleOf
  /responseBody/postFloatDivisionInfResponseBodyForContentTypes:
    post:
      operationId: postFloatDivisionInfResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloatDivisionInf'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/FloatDivisionInf'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - multipleOf
  /requestBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfRequestBody:
    post:
      operationId: postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - multipleOf
  /responseBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfResponseBodyForContentTypes:
    post:
      operationId: postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - multipleOf
  /requestBody/postNotRequestBody:
    post:
      operationId: postNotRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Not'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Not'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - not
  /responseBody/postNotResponseBodyForContentTypes:
    post:
      operationId: postNotResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Not'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Not'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - not
  /requestBody/postNotMoreComplexSchemaRequestBody:
    post:
      operationId: postNotMoreComplexSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotMoreComplexSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NotMoreComplexSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - not
  /responseBody/postNotMoreComplexSchemaResponseBodyForContentTypes:
    post:
      operationId: postNotMoreComplexSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotMoreComplexSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NotMoreComplexSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - not
  /requestBody/postForbiddenPropertyRequestBody:
    post:
      operationId: postForbiddenPropertyRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForbiddenProperty'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ForbiddenProperty'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - not
  /responseBody/postForbiddenPropertyResponseBodyForContentTypes:
    post:
      operationId: postForbiddenPropertyResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenProperty'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ForbiddenProperty'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - not
  /requestBody/postOneofRequestBody:
    post:
      operationId: postOneofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oneof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/Oneof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofResponseBodyForContentTypes:
    post:
      operationId: postOneofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Oneof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/Oneof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofWithBaseSchemaRequestBody:
    post:
      operationId: postOneofWithBaseSchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofWithBaseSchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofWithBaseSchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofWithBaseSchemaResponseBodyForContentTypes:
    post:
      operationId: postOneofWithBaseSchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofWithBaseSchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofWithBaseSchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofComplexTypesRequestBody:
    post:
      operationId: postOneofComplexTypesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofComplexTypes'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofComplexTypes'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofComplexTypesResponseBodyForContentTypes:
    post:
      operationId: postOneofComplexTypesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofComplexTypes'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofComplexTypes'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofWithEmptySchemaRequestBody:
    post:
      operationId: postOneofWithEmptySchemaRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofWithEmptySchema'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofWithEmptySchema'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofWithEmptySchemaResponseBodyForContentTypes:
    post:
      operationId: postOneofWithEmptySchemaResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofWithEmptySchema'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofWithEmptySchema'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postOneofWithRequiredRequestBody:
    post:
      operationId: postOneofWithRequiredRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneofWithRequired'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OneofWithRequired'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postOneofWithRequiredResponseBodyForContentTypes:
    post:
      operationId: postOneofWithRequiredResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneofWithRequired'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OneofWithRequired'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postNestedOneofToCheckValidationSemanticsRequestBody:
    post:
      operationId: postNestedOneofToCheckValidationSemanticsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedOneofToCheckValidationSemantics'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NestedOneofToCheckValidationSemantics'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - oneOf
  /responseBody/postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes:
    post:
      operationId: postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestedOneofToCheckValidationSemantics'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NestedOneofToCheckValidationSemantics'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - oneOf
  /requestBody/postPatternValidationRequestBody:
    post:
      operationId: postPatternValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatternValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PatternValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - pattern
  /responseBody/postPatternValidationResponseBodyForContentTypes:
    post:
      operationId: postPatternValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PatternValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - pattern
  /requestBody/postPatternIsNotAnchoredRequestBody:
    post:
      operationId: postPatternIsNotAnchoredRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatternIsNotAnchored'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PatternIsNotAnchored'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - pattern
  /responseBody/postPatternIsNotAnchoredResponseBodyForContentTypes:
    post:
      operationId: postPatternIsNotAnchoredResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatternIsNotAnchored'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PatternIsNotAnchored'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - pattern
  /requestBody/postObjectPropertiesValidationRequestBody:
    post:
      operationId: postObjectPropertiesValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectPropertiesValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ObjectPropertiesValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - properties
  /responseBody/postObjectPropertiesValidationResponseBodyForContentTypes:
    post:
      operationId: postObjectPropertiesValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPropertiesValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ObjectPropertiesValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - properties
  /requestBody/postPropertiesWithEscapedCharactersRequestBody:
    post:
      operationId: postPropertiesWithEscapedCharactersRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesWithEscapedCharacters'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PropertiesWithEscapedCharacters'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - properties
  /responseBody/postPropertiesWithEscapedCharactersResponseBodyForContentTypes:
    post:
      operationId: postPropertiesWithEscapedCharactersResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesWithEscapedCharacters'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PropertiesWithEscapedCharacters'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - properties
  /requestBody/postPropertiesWithNullValuedInstancePropertiesRequestBody:
    post:
      operationId: postPropertiesWithNullValuedInstancePropertiesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesWithNullValuedInstanceProperties'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PropertiesWithNullValuedInstanceProperties'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - properties
  /responseBody/postPropertiesWithNullValuedInstancePropertiesResponseBodyForContentTypes:
    post:
      operationId: postPropertiesWithNullValuedInstancePropertiesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesWithNullValuedInstanceProperties'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PropertiesWithNullValuedInstanceProperties'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - properties
  /requestBody/postPropertiesWhoseNamesAreJavascriptObjectPropertyNamesRequestBody:
    post:
      operationId: postPropertiesWhoseNamesAreJavascriptObjectPropertyNamesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesWhoseNamesAreJavascriptObjectPropertyNames'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PropertiesWhoseNamesAreJavascriptObjectPropertyNames'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - properties
  /responseBody/postPropertiesWhoseNamesAreJavascriptObjectPropertyNamesResponseBodyForContentTypes:
    post:
      operationId: postPropertiesWhoseNamesAreJavascriptObjectPropertyNamesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesWhoseNamesAreJavascriptObjectPropertyNames'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PropertiesWhoseNamesAreJavascriptObjectPropertyNames'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - properties
  /requestBody/postRefAppliesAlongsideSiblingKeywordsRequestBody:
    post:
      operationId: postRefAppliesAlongsideSiblingKeywordsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefAppliesAlongsideSiblingKeywords'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefAppliesAlongsideSiblingKeywords'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefAppliesAlongsideSiblingKeywordsResponseBodyForContentTypes:
    post:
      operationId: postRefAppliesAlongsideSiblingKeywordsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefAppliesAlongsideSiblingKeywords'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefAppliesAlongsideSiblingKeywords'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postPropertyNamedRefThatIsNotAReferenceRequestBody:
    post:
      operationId: postPropertyNamedRefThatIsNotAReferenceRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/PropertyNamedRefThatIsNotAReference'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postPropertyNamedRefThatIsNotAReferenceResponseBodyForContentTypes:
    post:
      operationId: postPropertyNamedRefThatIsNotAReferenceResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/PropertyNamedRefThatIsNotAReference'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefCreatesNewScopeWhenAdjacentToKeywordsRequestBody:
    post:
      operationId: postRefCreatesNewScopeWhenAdjacentToKeywordsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefCreatesNewScopeWhenAdjacentToKeywords'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefCreatesNewScopeWhenAdjacentToKeywords'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefCreatesNewScopeWhenAdjacentToKeywordsResponseBodyForContentTypes:
    post:
      operationId: postRefCreatesNewScopeWhenAdjacentToKeywordsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefCreatesNewScopeWhenAdjacentToKeywords'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefCreatesNewScopeWhenAdjacentToKeywords'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postIdMustBeResolvedAgainstNearestParentNotJustImmediateParentRequestBody:
    post:
      operationId: postIdMustBeResolvedAgainstNearestParentNotJustImmediateParentRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdMustBeResolvedAgainstNearestParentNotJustImmediateParent'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IdMustBeResolvedAgainstNearestParentNotJustImmediateParent'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postIdMustBeResolvedAgainstNearestParentNotJustImmediateParentResponseBodyForContentTypes:
    post:
      operationId: postIdMustBeResolvedAgainstNearestParentNotJustImmediateParentResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeResolvedAgainstNearestParentNotJustImmediateParent'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IdMustBeResolvedAgainstNearestParentNotJustImmediateParent'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postOrderOfEvaluationIdAndRefRequestBody:
    post:
      operationId: postOrderOfEvaluationIdAndRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderOfEvaluationIdAndRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OrderOfEvaluationIdAndRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postOrderOfEvaluationIdAndRefResponseBodyForContentTypes:
    post:
      operationId: postOrderOfEvaluationIdAndRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderOfEvaluationIdAndRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OrderOfEvaluationIdAndRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postOrderOfEvaluationIdAndAnchorAndRefRequestBody:
    post:
      operationId: postOrderOfEvaluationIdAndAnchorAndRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderOfEvaluationIdAndAnchorAndRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/OrderOfEvaluationIdAndAnchorAndRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postOrderOfEvaluationIdAndAnchorAndRefResponseBodyForContentTypes:
    post:
      operationId: postOrderOfEvaluationIdAndAnchorAndRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderOfEvaluationIdAndAnchorAndRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/OrderOfEvaluationIdAndAnchorAndRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postSimpleUrnBaseUriWithRefViaTheUrnRequestBody:
    post:
      operationId: postSimpleUrnBaseUriWithRefViaTheUrnRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleUrnBaseUriWithRefViaTheUrn'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/SimpleUrnBaseUriWithRefViaTheUrn'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postSimpleUrnBaseUriWithRefViaTheUrnResponseBodyForContentTypes:
    post:
      operationId: postSimpleUrnBaseUriWithRefViaTheUrnResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleUrnBaseUriWithRefViaTheUrn'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/SimpleUrnBaseUriWithRefViaTheUrn'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postSimpleUrnBaseUriWithJsonPointerRequestBody:
    post:
      operationId: postSimpleUrnBaseUriWithJsonPointerRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleUrnBaseUriWithJsonPointer'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/SimpleUrnBaseUriWithJsonPointer'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postSimpleUrnBaseUriWithJsonPointerResponseBodyForContentTypes:
    post:
      operationId: postSimpleUrnBaseUriWithJsonPointerResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleUrnBaseUriWithJsonPointer'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/SimpleUrnBaseUriWithJsonPointer'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnBaseUriWithNssRequestBody:
    post:
      operationId: postUrnBaseUriWithNssRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnBaseUriWithNss'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnBaseUriWithNss'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnBaseUriWithNssResponseBodyForContentTypes:
    post:
      operationId: postUrnBaseUriWithNssResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnBaseUriWithNss'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnBaseUriWithNss'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnBaseUriWithRComponentRequestBody:
    post:
      operationId: postUrnBaseUriWithRComponentRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnBaseUriWithRComponent'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnBaseUriWithRComponent'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnBaseUriWithRComponentResponseBodyForContentTypes:
    post:
      operationId: postUrnBaseUriWithRComponentResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnBaseUriWithRComponent'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnBaseUriWithRComponent'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnBaseUriWithQComponentRequestBody:
    post:
      operationId: postUrnBaseUriWithQComponentRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnBaseUriWithQComponent'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnBaseUriWithQComponent'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnBaseUriWithQComponentResponseBodyForContentTypes:
    post:
      operationId: postUrnBaseUriWithQComponentResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnBaseUriWithQComponent'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnBaseUriWithQComponent'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnBaseUriWithFComponentRequestBody:
    post:
      operationId: postUrnBaseUriWithFComponentRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnBaseUriWithFComponent'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnBaseUriWithFComponent'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnBaseUriWithFComponentResponseBodyForContentTypes:
    post:
      operationId: postUrnBaseUriWithFComponentResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnBaseUriWithFComponent'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnBaseUriWithFComponent'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnBaseUriWithUrnAndJsonPointerRefRequestBody:
    post:
      operationId: postUrnBaseUriWithUrnAndJsonPointerRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnBaseUriWithUrnAndJsonPointerRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnBaseUriWithUrnAndJsonPointerRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnBaseUriWithUrnAndJsonPointerRefResponseBodyForContentTypes:
    post:
      operationId: postUrnBaseUriWithUrnAndJsonPointerRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnBaseUriWithUrnAndJsonPointerRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnBaseUriWithUrnAndJsonPointerRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnBaseUriWithUrnAndAnchorRefRequestBody:
    post:
      operationId: postUrnBaseUriWithUrnAndAnchorRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnBaseUriWithUrnAndAnchorRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnBaseUriWithUrnAndAnchorRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnBaseUriWithUrnAndAnchorRefResponseBodyForContentTypes:
    post:
      operationId: postUrnBaseUriWithUrnAndAnchorRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnBaseUriWithUrnAndAnchorRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnBaseUriWithUrnAndAnchorRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postUrnRefWithNestedPointerRefRequestBody:
    post:
      operationId: postUrnRefWithNestedPointerRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrnRefWithNestedPointerRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UrnRefWithNestedPointerRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postUrnRefWithNestedPointerRefResponseBodyForContentTypes:
    post:
      operationId: postUrnRefWithNestedPointerRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrnRefWithNestedPointerRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UrnRefWithNestedPointerRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInAdditionalpropertiesRequestBody:
    post:
      operationId: postRefInAdditionalpropertiesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInAdditionalproperties'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInAdditionalproperties'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInAdditionalpropertiesResponseBodyForContentTypes:
    post:
      operationId: postRefInAdditionalpropertiesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInAdditionalproperties'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInAdditionalproperties'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInItemsRequestBody:
    post:
      operationId: postRefInItemsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInItems'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInItems'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInItemsResponseBodyForContentTypes:
    post:
      operationId: postRefInItemsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInItems'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInItems'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInPropertyRequestBody:
    post:
      operationId: postRefInPropertyRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInProperty'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInProperty'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInPropertyResponseBodyForContentTypes:
    post:
      operationId: postRefInPropertyResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInProperty'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInProperty'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInAllofRequestBody:
    post:
      operationId: postRefInAllofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInAllof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInAllof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInAllofResponseBodyForContentTypes:
    post:
      operationId: postRefInAllofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInAllof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInAllof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInOneofRequestBody:
    post:
      operationId: postRefInOneofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInOneof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInOneof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInOneofResponseBodyForContentTypes:
    post:
      operationId: postRefInOneofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInOneof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInOneof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInAnyofRequestBody:
    post:
      operationId: postRefInAnyofRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInAnyof'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInAnyof'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInAnyofResponseBodyForContentTypes:
    post:
      operationId: postRefInAnyofResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInAnyof'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInAnyof'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRefInNotRequestBody:
    post:
      operationId: postRefInNotRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefInNot'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RefInNot'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRefInNotResponseBodyForContentTypes:
    post:
      operationId: postRefInNotResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefInNot'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RefInNot'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRemoteRefWithRefToDefsRequestBody:
    post:
      operationId: postRemoteRefWithRefToDefsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteRefWithRefToDefs'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RemoteRefWithRefToDefs'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRemoteRefWithRefToDefsResponseBodyForContentTypes:
    post:
      operationId: postRemoteRefWithRefToDefsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteRefWithRefToDefs'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RemoteRefWithRefToDefs'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postLocationIndependentIdentifierInRemoteRefRequestBody:
    post:
      operationId: postLocationIndependentIdentifierInRemoteRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationIndependentIdentifierInRemoteRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/LocationIndependentIdentifierInRemoteRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postLocationIndependentIdentifierInRemoteRefResponseBodyForContentTypes:
    post:
      operationId: postLocationIndependentIdentifierInRemoteRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationIndependentIdentifierInRemoteRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/LocationIndependentIdentifierInRemoteRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRetrievedNestedRefsResolveRelativeToTheirUriNotIdRequestBody:
    post:
      operationId: postRetrievedNestedRefsResolveRelativeToTheirUriNotIdRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrievedNestedRefsResolveRelativeToTheirUriNotId'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RetrievedNestedRefsResolveRelativeToTheirUriNotId'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRetrievedNestedRefsResolveRelativeToTheirUriNotIdResponseBodyForContentTypes:
    post:
      operationId: postRetrievedNestedRefsResolveRelativeToTheirUriNotIdResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievedNestedRefsResolveRelativeToTheirUriNotId'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RetrievedNestedRefsResolveRelativeToTheirUriNotId'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRemoteHttpRefWithDifferentIdRequestBody:
    post:
      operationId: postRemoteHttpRefWithDifferentIdRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHttpRefWithDifferentId'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RemoteHttpRefWithDifferentId'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRemoteHttpRefWithDifferentIdResponseBodyForContentTypes:
    post:
      operationId: postRemoteHttpRefWithDifferentIdResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHttpRefWithDifferentId'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RemoteHttpRefWithDifferentId'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRemoteHttpRefWithDifferentUrnIdRequestBody:
    post:
      operationId: postRemoteHttpRefWithDifferentUrnIdRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHttpRefWithDifferentUrnId'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RemoteHttpRefWithDifferentUrnId'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRemoteHttpRefWithDifferentUrnIdResponseBodyForContentTypes:
    post:
      operationId: postRemoteHttpRefWithDifferentUrnIdResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHttpRefWithDifferentUrnId'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RemoteHttpRefWithDifferentUrnId'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRemoteHttpRefWithNestedAbsoluteRefRequestBody:
    post:
      operationId: postRemoteHttpRefWithNestedAbsoluteRefRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHttpRefWithNestedAbsoluteRef'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RemoteHttpRefWithNestedAbsoluteRef'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - $ref
  /responseBody/postRemoteHttpRefWithNestedAbsoluteRefResponseBodyForContentTypes:
    post:
      operationId: postRemoteHttpRefWithNestedAbsoluteRefResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHttpRefWithNestedAbsoluteRef'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RemoteHttpRefWithNestedAbsoluteRef'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - $ref
  /requestBody/postRequiredValidationRequestBody:
    post:
      operationId: postRequiredValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RequiredValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - required
  /responseBody/postRequiredValidationResponseBodyForContentTypes:
    post:
      operationId: postRequiredValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RequiredValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - required
  /requestBody/postRequiredDefaultValidationRequestBody:
    post:
      operationId: postRequiredDefaultValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredDefaultValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RequiredDefaultValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - required
  /responseBody/postRequiredDefaultValidationResponseBodyForContentTypes:
    post:
      operationId: postRequiredDefaultValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredDefaultValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RequiredDefaultValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - required
  /requestBody/postRequiredWithEmptyArrayRequestBody:
    post:
      operationId: postRequiredWithEmptyArrayRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredWithEmptyArray'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RequiredWithEmptyArray'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - required
  /responseBody/postRequiredWithEmptyArrayResponseBodyForContentTypes:
    post:
      operationId: postRequiredWithEmptyArrayResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredWithEmptyArray'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RequiredWithEmptyArray'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - required
  /requestBody/postRequiredWithEscapedCharactersRequestBody:
    post:
      operationId: postRequiredWithEscapedCharactersRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredWithEscapedCharacters'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RequiredWithEscapedCharacters'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - required
  /responseBody/postRequiredWithEscapedCharactersResponseBodyForContentTypes:
    post:
      operationId: postRequiredWithEscapedCharactersResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredWithEscapedCharacters'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RequiredWithEscapedCharacters'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - required
  /requestBody/postRequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNamesRequestBody:
    post:
      operationId: postRequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNamesRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/RequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - required
  /responseBody/postRequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNamesResponseBodyForContentTypes:
    post:
      operationId: postRequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNamesResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/RequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - required
  /requestBody/postIntegerTypeMatchesIntegersRequestBody:
    post:
      operationId: postIntegerTypeMatchesIntegersRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegerTypeMatchesIntegers'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/IntegerTypeMatchesIntegers'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes:
    post:
      operationId: postIntegerTypeMatchesIntegersResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegerTypeMatchesIntegers'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/IntegerTypeMatchesIntegers'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postNumberTypeMatchesNumbersRequestBody:
    post:
      operationId: postNumberTypeMatchesNumbersRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NumberTypeMatchesNumbers'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NumberTypeMatchesNumbers'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes:
    post:
      operationId: postNumberTypeMatchesNumbersResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NumberTypeMatchesNumbers'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NumberTypeMatchesNumbers'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postStringTypeMatchesStringsRequestBody:
    post:
      operationId: postStringTypeMatchesStringsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringTypeMatchesStrings'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/StringTypeMatchesStrings'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes:
    post:
      operationId: postStringTypeMatchesStringsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringTypeMatchesStrings'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/StringTypeMatchesStrings'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postObjectTypeMatchesObjectsRequestBody:
    post:
      operationId: postObjectTypeMatchesObjectsRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectTypeMatchesObjects'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ObjectTypeMatchesObjects'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes:
    post:
      operationId: postObjectTypeMatchesObjectsResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectTypeMatchesObjects'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ObjectTypeMatchesObjects'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postBooleanTypeMatchesBooleansRequestBody:
    post:
      operationId: postBooleanTypeMatchesBooleansRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BooleanTypeMatchesBooleans'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/BooleanTypeMatchesBooleans'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes:
    post:
      operationId: postBooleanTypeMatchesBooleansResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooleanTypeMatchesBooleans'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/BooleanTypeMatchesBooleans'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postNullTypeMatchesOnlyTheNullObjectRequestBody:
    post:
      operationId: postNullTypeMatchesOnlyTheNullObjectRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NullTypeMatchesOnlyTheNullObject'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/NullTypeMatchesOnlyTheNullObject'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes:
    post:
      operationId: postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NullTypeMatchesOnlyTheNullObject'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/NullTypeMatchesOnlyTheNullObject'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postArrayTypeMatchesArraysRequestBody:
    post:
      operationId: postArrayTypeMatchesArraysRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrayTypeMatchesArrays'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/ArrayTypeMatchesArrays'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - type
  /responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes:
    post:
      operationId: postArrayTypeMatchesArraysResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayTypeMatchesArrays'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/ArrayTypeMatchesArrays'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - type
  /requestBody/postUniqueitemsValidationRequestBody:
    post:
      operationId: postUniqueitemsValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniqueitemsValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UniqueitemsValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - uniqueItems
  /responseBody/postUniqueitemsValidationResponseBodyForContentTypes:
    post:
      operationId: postUniqueitemsValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniqueitemsValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UniqueitemsValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - uniqueItems
  /requestBody/postUniqueitemsFalseValidationRequestBody:
    post:
      operationId: postUniqueitemsFalseValidationRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniqueitemsFalseValidation'
            x-schema-test-examples:
              $ref: '#/components/x-schema-test-examples/UniqueitemsFalseValidation'
        required: true
      responses:
        '200':
          description: success
      tags:
      - operation.requestBody
      - path.post
      - contentType_json
      - uniqueItems
  /responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes:
    post:
      operationId: postUniqueitemsFalseValidationResponseBodyForContentTypes
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniqueitemsFalseValidation'
              x-schema-test-examples:
                $ref: '#/components/x-schema-test-examples/UniqueitemsFalseValidation'
      tags:
      - response.content.contentType.schema
      - path.post
      - contentType_json
      - uniqueItems
components:
  schemas:
    AdditionalpropertiesWithSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
        bar: {}
      additionalProperties:
        type: boolean
    AdditionalpropertiesCanExistByItself:
      $schema: https://json-schema.org/draft/2020-12/schema
      additionalProperties:
        type: boolean
    AdditionalpropertiesAreAllowedByDefault:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
        bar: {}
    AdditionalpropertiesDoesNotLookInApplicators:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - properties:
          foo: {}
      additionalProperties:
        type: boolean
    AdditionalpropertiesWithNullValuedInstanceProperties:
      $schema: https://json-schema.org/draft/2020-12/schema
      additionalProperties:
        type: 'null'
    AdditionalpropertiesShouldNotLookInApplicators:
      allOf:
      - properties:
          foo: {}
      additionalProperties:
        type: boolean
    Allof:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - properties:
          bar:
            type: integer
        required:
        - bar
      - properties:
          foo:
            type: string
        required:
        - foo
    AllofWithBaseSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        bar:
          type: integer
      required:
      - bar
      allOf:
      - properties:
          foo:
            type: string
        required:
        - foo
      - properties:
          baz:
            type: 'null'
        required:
        - baz
    AllofSimpleTypes:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - maximum: 30
      - minimum: 20
    AllofWithOneEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - {}
    AllofWithTwoEmptySchemas:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - {}
      - {}
    AllofWithTheFirstEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - {}
      - type: number
    AllofWithTheLastEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - type: number
      - {}
    NestedAllofToCheckValidationSemantics:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - allOf:
        - type: 'null'
    AllofCombinedWithAnyofOneof:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - multipleOf: 2
      anyOf:
      - multipleOf: 3
      oneOf:
      - multipleOf: 5
    Anyof:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - type: integer
      - minimum: 2
    AnyofWithBaseSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      anyOf:
      - maxLength: 2
      - minLength: 4
    AnyofComplexTypes:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - properties:
          bar:
            type: integer
        required:
        - bar
      - properties:
          foo:
            type: string
        required:
        - foo
    AnyofWithOneEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - type: number
      - {}
    NestedAnyofToCheckValidationSemantics:
      $schema: https://json-schema.org/draft/2020-12/schema
      anyOf:
      - anyOf:
        - type: 'null'
    InvalidStringValueForDefault:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        bar:
          type: string
          minLength: 4
          default: bad
    TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      properties:
        alpha:
          type: number
          maximum: 3
          default: 5
    SimpleEnumValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 1
      - 2
      - 3
    EnumsInProperties:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      properties:
        foo:
          enum:
          - foo
        bar:
          enum:
          - bar
      required:
      - bar
    EnumWithEscapedCharacters:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 'foo

        bar'
      - "foo\rbar"
    EnumWithFalseDoesNotMatch0:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - false
    EnumWithTrueDoesNotMatch1:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - true
    EnumWith0DoesNotMatchFalse:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 0
    EnumWith1DoesNotMatchTrue:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - 1
    NulCharactersInStrings:
      $schema: https://json-schema.org/draft/2020-12/schema
      enum:
      - "hello\0there"
    EmailFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: email
    IdnEmailFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: idn-email
    RegexFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: regex
    Ipv4Format:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: ipv4
    Ipv6Format:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: ipv6
    IdnHostnameFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: idn-hostname
    HostnameFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: hostname
    DateFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: date
    DateTimeFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: date-time
    TimeFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: time
    JsonPointerFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: json-pointer
    RelativeJsonPointerFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: relative-json-pointer
    IriFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: iri
    IriReferenceFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: iri-reference
    UriFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uri
    UriReferenceFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uri-reference
    UriTemplateFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uri-template
    UuidFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: uuid
    DurationFormat:
      $schema: https://json-schema.org/draft/2020-12/schema
      format: duration
    NestedItems:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: array
      items:
        type: array
        items:
          type: array
          items:
            type: array
            items:
              type: number
    PrefixitemsWithNoAdditionalItemsAllowed:
      $schema: https://json-schema.org/draft/2020-12/schema
      prefixItems:
      - {}
      - {}
      - {}
      items: false
    ItemsDoesNotLookInApplicatorsValidCase:
      $schema: https://json-schema.org/draft/2020-12/schema
      allOf:
      - prefixItems:
        - minimum: 3
      items:
        minimum: 5
    PrefixitemsValidationAdjustsTheStartingIndexForItems:
      $schema: https://json-schema.org/draft/2020-12/schema
      prefixItems:
      - type: string
      items:
        type: integer
    ItemsWithNullInstanceElements:
      $schema: https://json-schema.org/draft/2020-12/schema
      items:
        type: 'null'
    MaximumValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maximum: 3.0
    MaximumValidationWithUnsignedInteger:
      $schema: https://json-schema.org/draft/2020-12/schema
      maximum: 300
    MaxitemsValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxItems: 2
    MaxitemsValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxItems: 2.0
    MaxlengthValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxLength: 2
    MaxlengthValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxLength: 2.0
    MaxpropertiesValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxProperties: 2
    MaxpropertiesValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxProperties: 2.0
    Maxproperties0MeansTheObjectIsEmpty:
      $schema: https://json-schema.org/draft/2020-12/schema
      maxProperties: 0
    MinimumValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      minimum: 1.1
    MinimumValidationWithSignedInteger:
      $schema: https://json-schema.org/draft/2020-12/schema
      minimum: -2
    MinitemsValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      minItems: 1
    MinitemsValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      minItems: 1.0
    MinlengthValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      minLength: 2
    MinlengthValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      minLength: 2.0
    MinpropertiesValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      minProperties: 1
    MinpropertiesValidationWithADecimal:
      $schema: https://json-schema.org/draft/2020-12/schema
      minProperties: 1.0
    ByInt:
      $schema: https://json-schema.org/draft/2020-12/schema
      multipleOf: 2
    ByNumber:
      $schema: https://json-schema.org/draft/2020-12/schema
      multipleOf: 1.5
    BySmallNumber:
      $schema: https://json-schema.org/draft/2020-12/schema
      multipleOf: 0.0001
    FloatDivisionInf:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: integer
      multipleOf: 0.123456789
    InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf:
      type: integer
      multipleOf: 0.123456789
    Not:
      $schema: https://json-schema.org/draft/2020-12/schema
      not:
        type: integer
    NotMoreComplexSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      not:
        type: object
        properties:
          foo:
            type: string
    ForbiddenProperty:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo:
          not: {}
    Oneof:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - type: integer
      - minimum: 2
    OneofWithBaseSchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      oneOf:
      - minLength: 2
      - maxLength: 4
    OneofComplexTypes:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - properties:
          bar:
            type: integer
        required:
        - bar
      - properties:
          foo:
            type: string
        required:
        - foo
    OneofWithEmptySchema:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - type: number
      - {}
    OneofWithRequired:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      oneOf:
      - required:
        - foo
        - bar
      - required:
        - foo
        - baz
    NestedOneofToCheckValidationSemantics:
      $schema: https://json-schema.org/draft/2020-12/schema
      oneOf:
      - oneOf:
        - type: 'null'
    PatternValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      pattern: ^a*$
    PatternIsNotAnchored:
      $schema: https://json-schema.org/draft/2020-12/schema
      pattern: a+
    ObjectPropertiesValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo:
          type: integer
        bar:
          type: string
    PropertiesWithEscapedCharacters:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        ? 'foo

          bar'
        : type: number
        foo"bar:
          type: number
        foo\bar:
          type: number
        "foo\rbar":
          type: number
        "foo\tbar":
          type: number
        "foo\fbar":
          type: number
    PropertiesWithNullValuedInstanceProperties:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo:
          type: 'null'
    PropertiesWhoseNamesAreJavascriptObjectPropertyNames:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        __proto__:
          type: number
        toString:
          properties:
            length:
              type: string
        constructor:
          type: number
    RefAppliesAlongsideSiblingKeywords:
      $schema: https://json-schema.org/draft/2020-12/schema
      $defs:
        reffed:
          type: array
      properties:
        foo:
          $ref: '#/$defs/reffed'
          maxItems: 2
    PropertyNamedRefThatIsNotAReference:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        $ref:
          type: string
    RefCreatesNewScopeWhenAdjacentToKeywords:
      $schema: https://json-schema.org/draft/2020-12/schema
      $defs:
        A:
          unevaluatedProperties: false
      properties:
        prop1:
          type: string
      $ref: '#/$defs/A'
    IdMustBeResolvedAgainstNearestParentNotJustImmediateParent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: http://example.com/a.json
      $defs:
        x:
          $id: http://example.com/b/c.json
          not:
            $defs:
              y:
                $id: d.json
                type: number
      allOf:
      - $ref: http://example.com/b/d.json
    OrderOfEvaluationIdAndRef:
      $comment: $id must be evaluated before $ref to get the proper $ref destination
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: /draft2020-12/ref-and-id1/base.json
      $ref: int.json
      $defs:
        bigint:
          $comment: 'canonical uri: /ref-and-id1/int.json'
          $id: int.json
          maximum: 10
        smallint:
          $comment: 'canonical uri: /ref-and-id1-int.json'
          $id: /draft2020-12/ref-and-id1-int.json
          maximum: 2
    OrderOfEvaluationIdAndAnchorAndRef:
      $comment: $id must be evaluated before $ref to get the proper $ref destination
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: /draft2020-12/ref-and-id2/base.json
      $ref: '#bigint'
      $defs:
        bigint:
          $comment: 'canonical uri: /ref-and-id2/base.json/$defs/bigint; another valid
            uri for this location: /ref-and-id2/base.json#bigint'
          $anchor: bigint
          maximum: 10
        smallint:
          $comment: 'canonical uri: /ref-and-id2#/$defs/smallint; another valid uri
            for this location: /ref-and-id2/#bigint'
          $id: /draft2020-12/ref-and-id2/
          $anchor: bigint
          maximum: 2
    SimpleUrnBaseUriWithRefViaTheUrn:
      $comment: URIs do not have to have HTTP(s) schemes
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed
      minimum: 30
      properties:
        foo:
          $ref: urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed
    SimpleUrnBaseUriWithJsonPointer:
      $comment: URIs do not have to have HTTP(s) schemes
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed
      properties:
        foo:
          $ref: '#/$defs/bar'
      $defs:
        bar:
          type: string
    UrnBaseUriWithNss:
      $comment: "RFC 8141 \xA72.2"
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:example:1/406/47452/2
      properties:
        foo:
          $ref: '#/$defs/bar'
      $defs:
        bar:
          type: string
    UrnBaseUriWithRComponent:
      $comment: "RFC 8141 \xA72.3.1"
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:example:foo-bar-baz-qux?+CCResolve:cc=uk
      properties:
        foo:
          $ref: '#/$defs/bar'
      $defs:
        bar:
          type: string
    UrnBaseUriWithQComponent:
      $comment: "RFC 8141 \xA72.3.2"
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z
      properties:
        foo:
          $ref: '#/$defs/bar'
      $defs:
        bar:
          type: string
    UrnBaseUriWithFComponent:
      $comment: "RFC 8141 \xA72.3.3, but we don't allow fragments"
      $schema: https://json-schema.org/draft/2020-12/schema
      $ref: https://json-schema.org/draft/2020-12/schema
    UrnBaseUriWithUrnAndJsonPointerRef:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:uuid:deadbeef-1234-0000-0000-4321feebdaed
      properties:
        foo:
          $ref: urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/$defs/bar
      $defs:
        bar:
          type: string
    UrnBaseUriWithUrnAndAnchorRef:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed
      properties:
        foo:
          $ref: urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something
      $defs:
        bar:
          $anchor: something
          type: string
    UrnRefWithNestedPointerRef:
      $ref: urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed
      $defs:
        foo:
          $id: urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed
          $defs:
            bar:
              type: string
          $ref: '#/$defs/bar'
    RefInAdditionalproperties:
      additionalProperties:
        $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RefInItems:
      items:
        $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RefInProperty:
      properties:
        a:
          $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RefInAllof:
      allOf:
      - $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RefInOneof:
      oneOf:
      - $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RefInAnyof:
      anyOf:
      - $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RefInNot:
      not:
        $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'
    RemoteRefWithRefToDefs:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: http://localhost:1234/draft2020-12/schema-remote-ref-ref-defs1.json
      $ref: ref-and-defs.json
    LocationIndependentIdentifierInRemoteRef:
      $schema: https://json-schema.org/draft/2020-12/schema
      $ref: http://localhost:1234/draft2020-12/locationIndependentIdentifier.json#/$defs/refToInteger
    RetrievedNestedRefsResolveRelativeToTheirUriNotId:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: http://localhost:1234/draft2020-12/some-id
      properties:
        name:
          $ref: nested/foo-ref-string.json
    RemoteHttpRefWithDifferentId:
      $ref: http://localhost:1234/different-id-ref-string.json
    RemoteHttpRefWithDifferentUrnId:
      $ref: http://localhost:1234/urn-ref-string.json
    RemoteHttpRefWithNestedAbsoluteRef:
      $ref: http://localhost:1234/nested-absolute-ref-to-string.json
    RequiredValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
        bar: {}
      required:
      - foo
    RequiredDefaultValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
    RequiredWithEmptyArray:
      $schema: https://json-schema.org/draft/2020-12/schema
      properties:
        foo: {}
      required: []
    RequiredWithEscapedCharacters:
      $schema: https://json-schema.org/draft/2020-12/schema
      required:
      - 'foo

        bar'
      - foo"bar
      - foo\bar
      - "foo\rbar"
      - "foo\tbar"
      - "foo\fbar"
    RequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames:
      $schema: https://json-schema.org/draft/2020-12/schema
      required:
      - __proto__
      - toString
      - constructor
    IntegerTypeMatchesIntegers:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: integer
    NumberTypeMatchesNumbers:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: number
    StringTypeMatchesStrings:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
    ObjectTypeMatchesObjects:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
    BooleanTypeMatchesBooleans:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: boolean
    NullTypeMatchesOnlyTheNullObject:
      $schema: https://json-schema.org/draft/2020-12/schema
      type: 'null'
    ArrayTypeMatchesArrays:
      type: array
      items: {}
    UniqueitemsValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      uniqueItems: true
    UniqueitemsFalseValidation:
      $schema: https://json-schema.org/draft/2020-12/schema
      uniqueItems: false
  x-schema-test-examples:
    AdditionalpropertiesWithSchema:
      NoAdditionalPropertiesIsValid:
        description: no additional properties is valid
        data:
          foo: 1
        valid: true
      AnAdditionalValidPropertyIsValid:
        description: an additional valid property is valid
        data:
          foo: 1
          bar: 2
          quux: true
        valid: true
      AnAdditionalInvalidPropertyIsInvalid:
        description: an additional invalid property is invalid
        data:
          foo: 1
          bar: 2
          quux: 12
        valid: false
    AdditionalpropertiesCanExistByItself:
      AnAdditionalValidPropertyIsValid:
        description: an additional valid property is valid
        data:
          foo: true
        valid: true
      AnAdditionalInvalidPropertyIsInvalid:
        description: an additional invalid property is invalid
        data:
          foo: 1
        valid: false
    AdditionalpropertiesAreAllowedByDefault:
      AdditionalPropertiesAreAllowed:
        description: additional properties are allowed
        data:
          foo: 1
          bar: 2
          quux: true
        valid: true
    AdditionalpropertiesDoesNotLookInApplicators:
      PropertiesDefinedInAllofAreNotExamined:
        description: properties defined in allOf are not examined
        data:
          foo: 1
          bar: true
        valid: false
    AdditionalpropertiesWithNullValuedInstanceProperties:
      AllowsNullValues:
        description: allows null values
        data:
          foo: null
        valid: true
    AdditionalpropertiesShouldNotLookInApplicators:
      ValidTestCase:
        description: valid test case
        data:
          foo: false
          bar: true
        valid: true
    Allof:
      Allof:
        description: allOf
        data:
          foo: baz
          bar: 2
        valid: true
      MismatchSecond:
        description: mismatch second
        data:
          foo: baz
        valid: false
      MismatchFirst:
        description: mismatch first
        data:
          bar: 2
        valid: false
      WrongType:
        description: wrong type
        data:
          foo: baz
          bar: quux
        valid: false
    AllofWithBaseSchema:
      Valid:
        description: valid
        data:
          foo: quux
          bar: 2
          baz: null
        valid: true
      MismatchBaseSchema:
        description: mismatch base schema
        data:
          foo: quux
          baz: null
        valid: false
      MismatchFirstAllof:
        description: mismatch first allOf
        data:
          bar: 2
          baz: null
        valid: false
      MismatchSecondAllof:
        description: mismatch second allOf
        data:
          foo: quux
          bar: 2
        valid: false
      MismatchBoth:
        description: mismatch both
        data:
          bar: 2
        valid: false
    AllofSimpleTypes:
      Valid:
        description: valid
        data: 25
        valid: true
      MismatchOne:
        description: mismatch one
        data: 35
        valid: false
    AllofWithOneEmptySchema:
      AnyDataIsValid:
        description: any data is valid
        data: 1
        valid: true
    AllofWithTwoEmptySchemas:
      AnyDataIsValid:
        description: any data is valid
        data: 1
        valid: true
    AllofWithTheFirstEmptySchema:
      NumberIsValid:
        description: number is valid
        data: 1
        valid: true
      StringIsInvalid:
        description: string is invalid
        data: foo
        valid: false
    AllofWithTheLastEmptySchema:
      NumberIsValid:
        description: number is valid
        data: 1
        valid: true
      StringIsInvalid:
        description: string is invalid
        data: foo
        valid: false
    NestedAllofToCheckValidationSemantics:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      AnythingNonNullIsInvalid:
        description: anything non-null is invalid
        data: 123
        valid: false
    AllofCombinedWithAnyofOneof:
      AllofFalseAnyofFalseOneofFalse:
        description: 'allOf: false, anyOf: false, oneOf: false'
        data: 1
        valid: false
      AllofFalseAnyofFalseOneofTrue:
        description: 'allOf: false, anyOf: false, oneOf: true'
        data: 5
        valid: false
      AllofFalseAnyofTrueOneofFalse:
        description: 'allOf: false, anyOf: true, oneOf: false'
        data: 3
        valid: false
      AllofFalseAnyofTrueOneofTrue:
        description: 'allOf: false, anyOf: true, oneOf: true'
        data: 15
        valid: false
      AllofTrueAnyofFalseOneofFalse:
        description: 'allOf: true, anyOf: false, oneOf: false'
        data: 2
        valid: false
      AllofTrueAnyofFalseOneofTrue:
        description: 'allOf: true, anyOf: false, oneOf: true'
        data: 10
        valid: false
      AllofTrueAnyofTrueOneofFalse:
        description: 'allOf: true, anyOf: true, oneOf: false'
        data: 6
        valid: false
      AllofTrueAnyofTrueOneofTrue:
        description: 'allOf: true, anyOf: true, oneOf: true'
        data: 30
        valid: true
    Anyof:
      FirstAnyofValid:
        description: first anyOf valid
        data: 1
        valid: true
      SecondAnyofValid:
        description: second anyOf valid
        data: 2.5
        valid: true
      BothAnyofValid:
        description: both anyOf valid
        data: 3
        valid: true
      NeitherAnyofValid:
        description: neither anyOf valid
        data: 1.5
        valid: false
    AnyofWithBaseSchema:
      MismatchBaseSchema:
        description: mismatch base schema
        data: 3
        valid: false
      OneAnyofValid:
        description: one anyOf valid
        data: foobar
        valid: true
      BothAnyofInvalid:
        description: both anyOf invalid
        data: foo
        valid: false
    AnyofComplexTypes:
      FirstAnyofValidComplex:
        description: first anyOf valid (complex)
        data:
          bar: 2
        valid: true
      SecondAnyofValidComplex:
        description: second anyOf valid (complex)
        data:
          foo: baz
        valid: true
      BothAnyofValidComplex:
        description: both anyOf valid (complex)
        data:
          foo: baz
          bar: 2
        valid: true
      NeitherAnyofValidComplex:
        description: neither anyOf valid (complex)
        data:
          foo: 2
          bar: quux
        valid: false
    AnyofWithOneEmptySchema:
      StringIsValid:
        description: string is valid
        data: foo
        valid: true
      NumberIsValid:
        description: number is valid
        data: 123
        valid: true
    NestedAnyofToCheckValidationSemantics:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      AnythingNonNullIsInvalid:
        description: anything non-null is invalid
        data: 123
        valid: false
    InvalidStringValueForDefault:
      ValidWhenPropertyIsSpecified:
        description: valid when property is specified
        data:
          bar: good
        valid: true
      StillValidWhenTheInvalidDefaultIsUsed:
        description: still valid when the invalid default is used
        data: {}
        valid: true
    TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing:
      AnExplicitPropertyValueIsCheckedAgainstMaximumPassing:
        description: an explicit property value is checked against maximum (passing)
        data:
          alpha: 1
        valid: true
      AnExplicitPropertyValueIsCheckedAgainstMaximumFailing:
        description: an explicit property value is checked against maximum (failing)
        data:
          alpha: 5
        valid: false
      MissingPropertiesAreNotFilledInWithTheDefault:
        description: missing properties are not filled in with the default
        data: {}
        valid: true
    SimpleEnumValidation:
      OneOfTheEnumIsValid:
        description: one of the enum is valid
        data: 1
        valid: true
      SomethingElseIsInvalid:
        description: something else is invalid
        data: 4
        valid: false
    EnumsInProperties:
      BothPropertiesAreValid:
        description: both properties are valid
        data:
          foo: foo
          bar: bar
        valid: true
      WrongFooValue:
        description: wrong foo value
        data:
          foo: foot
          bar: bar
        valid: false
      WrongBarValue:
        description: wrong bar value
        data:
          foo: foo
          bar: bart
        valid: false
      MissingOptionalPropertyIsValid:
        description: missing optional property is valid
        data:
          bar: bar
        valid: true
      MissingRequiredPropertyIsInvalid:
        description: missing required property is invalid
        data:
          foo: foo
        valid: false
      MissingAllPropertiesIsInvalid:
        description: missing all properties is invalid
        data: {}
        valid: false
    EnumWithEscapedCharacters:
      Member1IsValid:
        description: member 1 is valid
        data: 'foo

          bar'
        valid: true
      Member2IsValid:
        description: member 2 is valid
        data: "foo\rbar"
        valid: true
      AnotherStringIsInvalid:
        description: another string is invalid
        data: abc
        valid: false
    EnumWithFalseDoesNotMatch0:
      FalseIsValid:
        description: false is valid
        data: false
        valid: true
      IntegerZeroIsInvalid:
        description: integer zero is invalid
        data: 0
        valid: false
      FloatZeroIsInvalid:
        description: float zero is invalid
        data: 0.0
        valid: false
    EnumWithTrueDoesNotMatch1:
      TrueIsValid:
        description: true is valid
        data: true
        valid: true
      IntegerOneIsInvalid:
        description: integer one is invalid
        data: 1
        valid: false
      FloatOneIsInvalid:
        description: float one is invalid
        data: 1.0
        valid: false
    EnumWith0DoesNotMatchFalse:
      FalseIsInvalid:
        description: false is invalid
        data: false
        valid: false
      IntegerZeroIsValid:
        description: integer zero is valid
        data: 0
        valid: true
      FloatZeroIsValid:
        description: float zero is valid
        data: 0.0
        valid: true
    EnumWith1DoesNotMatchTrue:
      TrueIsInvalid:
        description: true is invalid
        data: true
        valid: false
      IntegerOneIsValid:
        description: integer one is valid
        data: 1
        valid: true
      FloatOneIsValid:
        description: float one is valid
        data: 1.0
        valid: true
    NulCharactersInStrings:
      MatchStringWithNul:
        description: match string with nul
        data: "hello\0there"
        valid: true
      DoNotMatchStringLackingNul:
        description: do not match string lacking nul
        data: hellothere
        valid: false
    EmailFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    IdnEmailFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    RegexFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    Ipv4Format:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    Ipv6Format:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    IdnHostnameFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    HostnameFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    DateFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    DateTimeFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    TimeFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    JsonPointerFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    RelativeJsonPointerFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    IriFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    IriReferenceFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    UriFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    UriReferenceFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    UriTemplateFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    UuidFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    DurationFormat:
      AllStringFormatsIgnoreIntegers:
        description: all string formats ignore integers
        data: 12
        valid: true
      AllStringFormatsIgnoreFloats:
        description: all string formats ignore floats
        data: 13.7
        valid: true
      AllStringFormatsIgnoreObjects:
        description: all string formats ignore objects
        data: {}
        valid: true
      AllStringFormatsIgnoreArrays:
        description: all string formats ignore arrays
        data: []
        valid: true
      AllStringFormatsIgnoreBooleans:
        description: all string formats ignore booleans
        data: false
        valid: true
      AllStringFormatsIgnoreNulls:
        description: all string formats ignore nulls
        data: null
        valid: true
    NestedItems:
      ValidNestedArray:
        description: valid nested array
        data:
        - - - - 1
          - - - 2
            - - 3
        - - - - 4
            - - 5
            - - 6
        valid: true
      NestedArrayWithInvalidType:
        description: nested array with invalid type
        data:
        - - - - '1'
          - - - 2
            - - 3
        - - - - 4
            - - 5
            - - 6
        valid: false
      NotDeepEnough:
        description: not deep enough
        data:
        - - - 1
          - - 2
          - - 3
        - - - 4
          - - 5
          - - 6
        valid: false
    PrefixitemsWithNoAdditionalItemsAllowed:
      EmptyArray:
        description: empty array
        data: []
        valid: true
      FewerNumberOfItemsPresent1:
        description: fewer number of items present (1)
        data:
        - 1
        valid: true
      FewerNumberOfItemsPresent2:
        description: fewer number of items present (2)
        data:
        - 1
        - 2
        valid: true
      EqualNumberOfItemsPresent:
        description: equal number of items present
        data:
        - 1
        - 2
        - 3
        valid: true
      AdditionalItemsAreNotPermitted:
        description: additional items are not permitted
        data:
        - 1
        - 2
        - 3
        - 4
        valid: false
    ItemsDoesNotLookInApplicatorsValidCase:
      PrefixitemsInAllofDoesNotConstrainItemsInvalidCase:
        description: prefixItems in allOf does not constrain items, invalid case
        data:
        - 3
        - 5
        valid: false
      PrefixitemsInAllofDoesNotConstrainItemsValidCase:
        description: prefixItems in allOf does not constrain items, valid case
        data:
        - 5
        - 5
        valid: true
    PrefixitemsValidationAdjustsTheStartingIndexForItems:
      ValidItems:
        description: valid items
        data:
        - x
        - 2
        - 3
        valid: true
      WrongTypeOfSecondItem:
        description: wrong type of second item
        data:
        - x
        - y
        valid: false
    ItemsWithNullInstanceElements:
      AllowsNullElements:
        description: allows null elements
        data:
        - null
        valid: true
    MaximumValidation:
      BelowTheMaximumIsValid:
        description: below the maximum is valid
        data: 2.6
        valid: true
      BoundaryPointIsValid:
        description: boundary point is valid
        data: 3.0
        valid: true
      AboveTheMaximumIsInvalid:
        description: above the maximum is invalid
        data: 3.5
        valid: false
      IgnoresNonNumbers:
        description: ignores non-numbers
        data: x
        valid: true
    MaximumValidationWithUnsignedInteger:
      BelowTheMaximumIsInvalid:
        description: below the maximum is invalid
        data: 299.97
        valid: true
      BoundaryPointIntegerIsValid:
        description: boundary point integer is valid
        data: 300
        valid: true
      BoundaryPointFloatIsValid:
        description: boundary point float is valid
        data: 300.0
        valid: true
      AboveTheMaximumIsInvalid:
        description: above the maximum is invalid
        data: 300.5
        valid: false
    MaxitemsValidation:
      ShorterIsValid:
        description: shorter is valid
        data:
        - 1
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data:
        - 1
        - 2
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
        - 1
        - 2
        - 3
        valid: false
      IgnoresNonArrays:
        description: ignores non-arrays
        data: foobar
        valid: true
    MaxitemsValidationWithADecimal:
      ShorterIsValid:
        description: shorter is valid
        data:
        - 1
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
        - 1
        - 2
        - 3
        valid: false
    MaxlengthValidation:
      ShorterIsValid:
        description: shorter is valid
        data: f
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data: fo
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data: foo
        valid: false
      IgnoresNonStrings:
        description: ignores non-strings
        data: 100
        valid: true
      TwoSupplementaryUnicodeCodePointsIsLongEnough:
        description: two supplementary Unicode code points is long enough
        data: "\U0001F4A9\U0001F4A9"
        valid: true
    MaxlengthValidationWithADecimal:
      ShorterIsValid:
        description: shorter is valid
        data: f
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data: foo
        valid: false
    MaxpropertiesValidation:
      ShorterIsValid:
        description: shorter is valid
        data:
          foo: 1
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data:
          foo: 1
          bar: 2
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
          foo: 1
          bar: 2
          baz: 3
        valid: false
      IgnoresArrays:
        description: ignores arrays
        data:
        - 1
        - 2
        - 3
        valid: true
      IgnoresStrings:
        description: ignores strings
        data: foobar
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
    MaxpropertiesValidationWithADecimal:
      ShorterIsValid:
        description: shorter is valid
        data:
          foo: 1
        valid: true
      TooLongIsInvalid:
        description: too long is invalid
        data:
          foo: 1
          bar: 2
          baz: 3
        valid: false
    Maxproperties0MeansTheObjectIsEmpty:
      NoPropertiesIsValid:
        description: no properties is valid
        data: {}
        valid: true
      OnePropertyIsInvalid:
        description: one property is invalid
        data:
          foo: 1
        valid: false
    MinimumValidation:
      AboveTheMinimumIsValid:
        description: above the minimum is valid
        data: 2.6
        valid: true
      BoundaryPointIsValid:
        description: boundary point is valid
        data: 1.1
        valid: true
      BelowTheMinimumIsInvalid:
        description: below the minimum is invalid
        data: 0.6
        valid: false
      IgnoresNonNumbers:
        description: ignores non-numbers
        data: x
        valid: true
    MinimumValidationWithSignedInteger:
      NegativeAboveTheMinimumIsValid:
        description: negative above the minimum is valid
        data: -1
        valid: true
      PositiveAboveTheMinimumIsValid:
        description: positive above the minimum is valid
        data: 0
        valid: true
      BoundaryPointIsValid:
        description: boundary point is valid
        data: -2
        valid: true
      BoundaryPointWithFloatIsValid:
        description: boundary point with float is valid
        data: -2.0
        valid: true
      FloatBelowTheMinimumIsInvalid:
        description: float below the minimum is invalid
        data: -2.0001
        valid: false
      IntBelowTheMinimumIsInvalid:
        description: int below the minimum is invalid
        data: -3
        valid: false
      IgnoresNonNumbers:
        description: ignores non-numbers
        data: x
        valid: true
    MinitemsValidation:
      LongerIsValid:
        description: longer is valid
        data:
        - 1
        - 2
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data:
        - 1
        valid: true
      TooShortIsInvalid:
        description: too short is invalid
        data: []
        valid: false
      IgnoresNonArrays:
        description: ignores non-arrays
        data: ''
        valid: true
    MinitemsValidationWithADecimal:
      LongerIsValid:
        description: longer is valid
        data:
        - 1
        - 2
        valid: true
      TooShortIsInvalid:
        description: too short is invalid
        data: []
        valid: false
    MinlengthValidation:
      LongerIsValid:
        description: longer is valid
        data: foo
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data: fo
        valid: true
      TooShortIsInvalid:
        description: too short is invalid
        data: f
        valid: false
      IgnoresNonStrings:
        description: ignores non-strings
        data: 1
        valid: true
      OneSupplementaryUnicodeCodePointIsNotLongEnough:
        description: one supplementary Unicode code point is not long enough
        data: "\U0001F4A9"
        valid: false
    MinlengthValidationWithADecimal:
      LongerIsValid:
        description: longer is valid
        data: foo
        valid: true
      TooShortIsInvalid:
        description: too short is invalid
        data: f
        valid: false
    MinpropertiesValidation:
      LongerIsValid:
        description: longer is valid
        data:
          foo: 1
          bar: 2
        valid: true
      ExactLengthIsValid:
        description: exact length is valid
        data:
          foo: 1
        valid: true
      TooShortIsInvalid:
        description: too short is invalid
        data: {}
        valid: false
      IgnoresArrays:
        description: ignores arrays
        data: []
        valid: true
      IgnoresStrings:
        description: ignores strings
        data: ''
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
    MinpropertiesValidationWithADecimal:
      LongerIsValid:
        description: longer is valid
        data:
          foo: 1
          bar: 2
        valid: true
      TooShortIsInvalid:
        description: too short is invalid
        data: {}
        valid: false
    ByInt:
      IntByInt:
        description: int by int
        data: 10
        valid: true
      IntByIntFail:
        description: int by int fail
        data: 7
        valid: false
      IgnoresNonNumbers:
        description: ignores non-numbers
        data: foo
        valid: true
    ByNumber:
      ZeroIsMultipleOfAnything:
        description: zero is multiple of anything
        data: 0
        valid: true
      45IsMultipleOf15:
        description: 4.5 is multiple of 1.5
        data: 4.5
        valid: true
      35IsNotMultipleOf15:
        description: 35 is not multiple of 1.5
        data: 35
        valid: false
    BySmallNumber:
      00075IsMultipleOf00001:
        description: 0.0075 is multiple of 0.0001
        data: 0.0075
        valid: true
      000751IsNotMultipleOf00001:
        description: 0.00751 is not multiple of 0.0001
        data: 0.00751
        valid: false
    FloatDivisionInf:
      AlwaysInvalidButNaiveImplementationsMayRaiseAnOverflowError:
        description: always invalid, but naive implementations may raise an overflow
          error
        data: 1.0e+308
        valid: false
    InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf:
      ValidIntegerWithMultipleofFloat:
        description: valid integer with multipleOf float
        data: 123456789
        valid: true
    Not:
      Allowed:
        description: allowed
        data: foo
        valid: true
      Disallowed:
        description: disallowed
        data: 1
        valid: false
    NotMoreComplexSchema:
      Match:
        description: match
        data: 1
        valid: true
      OtherMatch:
        description: other match
        data:
          foo: 1
        valid: true
      Mismatch:
        description: mismatch
        data:
          foo: bar
        valid: false
    ForbiddenProperty:
      PropertyPresent:
        description: property present
        data:
          foo: 1
          bar: 2
        valid: false
      PropertyAbsent:
        description: property absent
        data:
          bar: 1
          baz: 2
        valid: true
    Oneof:
      FirstOneofValid:
        description: first oneOf valid
        data: 1
        valid: true
      SecondOneofValid:
        description: second oneOf valid
        data: 2.5
        valid: true
      BothOneofValid:
        description: both oneOf valid
        data: 3
        valid: false
      NeitherOneofValid:
        description: neither oneOf valid
        data: 1.5
        valid: false
    OneofWithBaseSchema:
      MismatchBaseSchema:
        description: mismatch base schema
        data: 3
        valid: false
      OneOneofValid:
        description: one oneOf valid
        data: foobar
        valid: true
      BothOneofValid:
        description: both oneOf valid
        data: foo
        valid: false
    OneofComplexTypes:
      FirstOneofValidComplex:
        description: first oneOf valid (complex)
        data:
          bar: 2
        valid: true
      SecondOneofValidComplex:
        description: second oneOf valid (complex)
        data:
          foo: baz
        valid: true
      BothOneofValidComplex:
        description: both oneOf valid (complex)
        data:
          foo: baz
          bar: 2
        valid: false
      NeitherOneofValidComplex:
        description: neither oneOf valid (complex)
        data:
          foo: 2
          bar: quux
        valid: false
    OneofWithEmptySchema:
      OneValidValid:
        description: one valid - valid
        data: foo
        valid: true
      BothValidInvalid:
        description: both valid - invalid
        data: 123
        valid: false
    OneofWithRequired:
      BothInvalidInvalid:
        description: both invalid - invalid
        data:
          bar: 2
        valid: false
      FirstValidValid:
        description: first valid - valid
        data:
          foo: 1
          bar: 2
        valid: true
      SecondValidValid:
        description: second valid - valid
        data:
          foo: 1
          baz: 3
        valid: true
      BothValidInvalid:
        description: both valid - invalid
        data:
          foo: 1
          bar: 2
          baz: 3
        valid: false
    NestedOneofToCheckValidationSemantics:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      AnythingNonNullIsInvalid:
        description: anything non-null is invalid
        data: 123
        valid: false
    PatternValidation:
      AMatchingPatternIsValid:
        description: a matching pattern is valid
        data: aaa
        valid: true
      ANonMatchingPatternIsInvalid:
        description: a non-matching pattern is invalid
        data: abc
        valid: false
      IgnoresBooleans:
        description: ignores booleans
        data: true
        valid: true
      IgnoresIntegers:
        description: ignores integers
        data: 123
        valid: true
      IgnoresFloats:
        description: ignores floats
        data: 1.0
        valid: true
      IgnoresObjects:
        description: ignores objects
        data: {}
        valid: true
      IgnoresArrays:
        description: ignores arrays
        data: []
        valid: true
      IgnoresNull:
        description: ignores null
        data: null
        valid: true
    PatternIsNotAnchored:
      MatchesASubstring:
        description: matches a substring
        data: xxaayy
        valid: true
    ObjectPropertiesValidation:
      BothPropertiesPresentAndValidIsValid:
        description: both properties present and valid is valid
        data:
          foo: 1
          bar: baz
        valid: true
      OnePropertyInvalidIsInvalid:
        description: one property invalid is invalid
        data:
          foo: 1
          bar: {}
        valid: false
      BothPropertiesInvalidIsInvalid:
        description: both properties invalid is invalid
        data:
          foo: []
          bar: {}
        valid: false
      DoesnTInvalidateOtherProperties:
        description: doesn't invalidate other properties
        data:
          quux: []
        valid: true
      IgnoresArrays:
        description: ignores arrays
        data: []
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
    PropertiesWithEscapedCharacters:
      ObjectWithAllNumbersIsValid:
        description: object with all numbers is valid
        data:
          ? 'foo

            bar'
          : 1
          foo"bar: 1
          foo\bar: 1
          "foo\rbar": 1
          "foo\tbar": 1
          "foo\fbar": 1
        valid: true
      ObjectWithStringsIsInvalid:
        description: object with strings is invalid
        data:
          ? 'foo

            bar'
          : '1'
          foo"bar: '1'
          foo\bar: '1'
          "foo\rbar": '1'
          "foo\tbar": '1'
          "foo\fbar": '1'
        valid: false
    PropertiesWithNullValuedInstanceProperties:
      AllowsNullValues:
        description: allows null values
        data:
          foo: null
        valid: true
    PropertiesWhoseNamesAreJavascriptObjectPropertyNames:
      IgnoresArrays:
        description: ignores arrays
        data: []
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
      NoneOfThePropertiesMentioned:
        description: none of the properties mentioned
        data: {}
        valid: true
      ProtoNotValid:
        description: __proto__ not valid
        data:
          __proto__: foo
        valid: false
      TostringNotValid:
        description: toString not valid
        data:
          toString:
            length: 37
        valid: false
      ConstructorNotValid:
        description: constructor not valid
        data:
          constructor:
            length: 37
        valid: false
      AllPresentAndValid:
        description: all present and valid
        data:
          __proto__: 12
          toString:
            length: foo
          constructor: 37
        valid: true
    RefAppliesAlongsideSiblingKeywords:
      RefValidMaxitemsValid:
        description: ref valid, maxItems valid
        data:
          foo: []
        valid: true
      RefValidMaxitemsInvalid:
        description: ref valid, maxItems invalid
        data:
          foo:
          - 1
          - 2
          - 3
        valid: false
      RefInvalid:
        description: ref invalid
        data:
          foo: string
        valid: false
    PropertyNamedRefThatIsNotAReference:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          $ref: 2
        valid: false
    RefCreatesNewScopeWhenAdjacentToKeywords:
      ReferencedSubschemaDoesnTSeeAnnotationsFromProperties:
        description: referenced subschema doesn't see annotations from properties
        data:
          prop1: match
        valid: false
    IdMustBeResolvedAgainstNearestParentNotJustImmediateParent:
      NumberIsValid:
        description: number is valid
        data: 1
        valid: true
      NonNumberIsInvalid:
        description: non-number is invalid
        data: a
        valid: false
    OrderOfEvaluationIdAndRef:
      DataIsValidAgainstFirstDefinition:
        description: data is valid against first definition
        data: 5
        valid: true
      DataIsInvalidAgainstFirstDefinition:
        description: data is invalid against first definition
        data: 50
        valid: false
    OrderOfEvaluationIdAndAnchorAndRef:
      DataIsValidAgainstFirstDefinition:
        description: data is valid against first definition
        data: 5
        valid: true
      DataIsInvalidAgainstFirstDefinition:
        description: data is invalid against first definition
        data: 50
        valid: false
    SimpleUrnBaseUriWithRefViaTheUrn:
      ValidUnderTheUrnIdedSchema:
        description: valid under the URN IDed schema
        data:
          foo: 37
        valid: true
      InvalidUnderTheUrnIdedSchema:
        description: invalid under the URN IDed schema
        data:
          foo: 12
        valid: false
    SimpleUrnBaseUriWithJsonPointer:
      AStringIsValid:
        description: a string is valid
        data:
          foo: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data:
          foo: 12
        valid: false
    UrnBaseUriWithNss:
      AStringIsValid:
        description: a string is valid
        data:
          foo: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data:
          foo: 12
        valid: false
    UrnBaseUriWithRComponent:
      AStringIsValid:
        description: a string is valid
        data:
          foo: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data:
          foo: 12
        valid: false
    UrnBaseUriWithQComponent:
      AStringIsValid:
        description: a string is valid
        data:
          foo: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data:
          foo: 12
        valid: false
    UrnBaseUriWithFComponent:
      IsInvalid:
        description: is invalid
        data:
          $id: urn:example:foo-bar-baz-qux#somepart
        valid: false
    UrnBaseUriWithUrnAndJsonPointerRef:
      AStringIsValid:
        description: a string is valid
        data:
          foo: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data:
          foo: 12
        valid: false
    UrnBaseUriWithUrnAndAnchorRef:
      AStringIsValid:
        description: a string is valid
        data:
          foo: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data:
          foo: 12
        valid: false
    UrnRefWithNestedPointerRef:
      AStringIsValid:
        description: a string is valid
        data: bar
        valid: true
      ANonStringIsInvalid:
        description: a non-string is invalid
        data: 12
        valid: false
    RefInAdditionalproperties:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          someProp:
            $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          someProp:
            $ref: 2
        valid: false
    RefInItems:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
        - $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
        - $ref: 2
        valid: false
    RefInProperty:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          a:
            $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          a:
            $ref: 2
        valid: false
    RefInAllof:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          $ref: 2
        valid: false
    RefInOneof:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          $ref: 2
        valid: false
    RefInAnyof:
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          $ref: a
        valid: true
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          $ref: 2
        valid: false
    RefInNot:
      PropertyNamedRefInvalid:
        description: property named $ref invalid
        data:
          $ref: a
        valid: false
      PropertyNamedRefValid:
        description: property named $ref valid
        data:
          $ref: 2
        valid: true
    RemoteRefWithRefToDefs:
      Invalid:
        description: invalid
        data:
          bar: 1
        valid: false
      Valid:
        description: valid
        data:
          bar: a
        valid: true
    LocationIndependentIdentifierInRemoteRef:
      IntegerIsValid:
        description: integer is valid
        data: 1
        valid: true
      StringIsInvalid:
        description: string is invalid
        data: foo
        valid: false
    RetrievedNestedRefsResolveRelativeToTheirUriNotId:
      NumberIsInvalid:
        description: number is invalid
        data:
          name:
            foo: 1
        valid: false
      StringIsValid:
        description: string is valid
        data:
          name:
            foo: a
        valid: true
    RemoteHttpRefWithDifferentId:
      NumberIsInvalid:
        description: number is invalid
        data: 1
        valid: false
      StringIsValid:
        description: string is valid
        data: foo
        valid: true
    RemoteHttpRefWithDifferentUrnId:
      NumberIsInvalid:
        description: number is invalid
        data: 1
        valid: false
      StringIsValid:
        description: string is valid
        data: foo
        valid: true
    RemoteHttpRefWithNestedAbsoluteRef:
      NumberIsInvalid:
        description: number is invalid
        data: 1
        valid: false
      StringIsValid:
        description: string is valid
        data: foo
        valid: true
    RequiredValidation:
      PresentRequiredPropertyIsValid:
        description: present required property is valid
        data:
          foo: 1
        valid: true
      NonPresentRequiredPropertyIsInvalid:
        description: non-present required property is invalid
        data:
          bar: 1
        valid: false
      IgnoresArrays:
        description: ignores arrays
        data: []
        valid: true
      IgnoresStrings:
        description: ignores strings
        data: ''
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
    RequiredDefaultValidation:
      NotRequiredByDefault:
        description: not required by default
        data: {}
        valid: true
    RequiredWithEmptyArray:
      PropertyNotRequired:
        description: property not required
        data: {}
        valid: true
    RequiredWithEscapedCharacters:
      ObjectWithAllPropertiesPresentIsValid:
        description: object with all properties present is valid
        data:
          ? 'foo

            bar'
          : 1
          foo"bar: 1
          foo\bar: 1
          "foo\rbar": 1
          "foo\tbar": 1
          "foo\fbar": 1
        valid: true
      ObjectWithSomePropertiesMissingIsInvalid:
        description: object with some properties missing is invalid
        data:
          ? 'foo

            bar'
          : '1'
          foo"bar: '1'
        valid: false
    RequiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames:
      IgnoresArrays:
        description: ignores arrays
        data: []
        valid: true
      IgnoresOtherNonObjects:
        description: ignores other non-objects
        data: 12
        valid: true
      NoneOfThePropertiesMentioned:
        description: none of the properties mentioned
        data: {}
        valid: false
      ProtoPresent:
        description: __proto__ present
        data:
          __proto__: foo
        valid: false
      TostringPresent:
        description: toString present
        data:
          toString:
            length: 37
        valid: false
      ConstructorPresent:
        description: constructor present
        data:
          constructor:
            length: 37
        valid: false
      AllPresent:
        description: all present
        data:
          __proto__: 12
          toString:
            length: foo
          constructor: 37
        valid: true
    IntegerTypeMatchesIntegers:
      AnIntegerIsAnInteger:
        description: an integer is an integer
        data: 1
        valid: true
      AFloatWithZeroFractionalPartIsAnInteger:
        description: a float with zero fractional part is an integer
        data: 1.0
        valid: true
      AFloatIsNotAnInteger:
        description: a float is not an integer
        data: 1.1
        valid: false
      AStringIsNotAnInteger:
        description: a string is not an integer
        data: foo
        valid: false
      AStringIsStillNotAnIntegerEvenIfItLooksLikeOne:
        description: a string is still not an integer, even if it looks like one
        data: '1'
        valid: false
      AnObjectIsNotAnInteger:
        description: an object is not an integer
        data: {}
        valid: false
      AnArrayIsNotAnInteger:
        description: an array is not an integer
        data: []
        valid: false
      ABooleanIsNotAnInteger:
        description: a boolean is not an integer
        data: true
        valid: false
      NullIsNotAnInteger:
        description: null is not an integer
        data: null
        valid: false
    NumberTypeMatchesNumbers:
      AnIntegerIsANumber:
        description: an integer is a number
        data: 1
        valid: true
      AFloatWithZeroFractionalPartIsANumberAndAnInteger:
        description: a float with zero fractional part is a number (and an integer)
        data: 1.0
        valid: true
      AFloatIsANumber:
        description: a float is a number
        data: 1.1
        valid: true
      AStringIsNotANumber:
        description: a string is not a number
        data: foo
        valid: false
      AStringIsStillNotANumberEvenIfItLooksLikeOne:
        description: a string is still not a number, even if it looks like one
        data: '1'
        valid: false
      AnObjectIsNotANumber:
        description: an object is not a number
        data: {}
        valid: false
      AnArrayIsNotANumber:
        description: an array is not a number
        data: []
        valid: false
      ABooleanIsNotANumber:
        description: a boolean is not a number
        data: true
        valid: false
      NullIsNotANumber:
        description: null is not a number
        data: null
        valid: false
    StringTypeMatchesStrings:
      1IsNotAString:
        description: 1 is not a string
        data: 1
        valid: false
      AFloatIsNotAString:
        description: a float is not a string
        data: 1.1
        valid: false
      AStringIsAString:
        description: a string is a string
        data: foo
        valid: true
      AStringIsStillAStringEvenIfItLooksLikeANumber:
        description: a string is still a string, even if it looks like a number
        data: '1'
        valid: true
      AnEmptyStringIsStillAString:
        description: an empty string is still a string
        data: ''
        valid: true
      AnObjectIsNotAString:
        description: an object is not a string
        data: {}
        valid: false
      AnArrayIsNotAString:
        description: an array is not a string
        data: []
        valid: false
      ABooleanIsNotAString:
        description: a boolean is not a string
        data: true
        valid: false
      NullIsNotAString:
        description: null is not a string
        data: null
        valid: false
    ObjectTypeMatchesObjects:
      AnIntegerIsNotAnObject:
        description: an integer is not an object
        data: 1
        valid: false
      AFloatIsNotAnObject:
        description: a float is not an object
        data: 1.1
        valid: false
      AStringIsNotAnObject:
        description: a string is not an object
        data: foo
        valid: false
      AnObjectIsAnObject:
        description: an object is an object
        data: {}
        valid: true
      AnArrayIsNotAnObject:
        description: an array is not an object
        data: []
        valid: false
      ABooleanIsNotAnObject:
        description: a boolean is not an object
        data: true
        valid: false
      NullIsNotAnObject:
        description: null is not an object
        data: null
        valid: false
    BooleanTypeMatchesBooleans:
      AnIntegerIsNotABoolean:
        description: an integer is not a boolean
        data: 1
        valid: false
      ZeroIsNotABoolean:
        description: zero is not a boolean
        data: 0
        valid: false
      AFloatIsNotABoolean:
        description: a float is not a boolean
        data: 1.1
        valid: false
      AStringIsNotABoolean:
        description: a string is not a boolean
        data: foo
        valid: false
      AnEmptyStringIsNotABoolean:
        description: an empty string is not a boolean
        data: ''
        valid: false
      AnObjectIsNotABoolean:
        description: an object is not a boolean
        data: {}
        valid: false
      AnArrayIsNotABoolean:
        description: an array is not a boolean
        data: []
        valid: false
      TrueIsABoolean:
        description: true is a boolean
        data: true
        valid: true
      FalseIsABoolean:
        description: false is a boolean
        data: false
        valid: true
      NullIsNotABoolean:
        description: null is not a boolean
        data: null
        valid: false
    NullTypeMatchesOnlyTheNullObject:
      AnIntegerIsNotNull:
        description: an integer is not null
        data: 1
        valid: false
      AFloatIsNotNull:
        description: a float is not null
        data: 1.1
        valid: false
      ZeroIsNotNull:
        description: zero is not null
        data: 0
        valid: false
      AStringIsNotNull:
        description: a string is not null
        data: foo
        valid: false
      AnEmptyStringIsNotNull:
        description: an empty string is not null
        data: ''
        valid: false
      AnObjectIsNotNull:
        description: an object is not null
        data: {}
        valid: false
      AnArrayIsNotNull:
        description: an array is not null
        data: []
        valid: false
      TrueIsNotNull:
        description: true is not null
        data: true
        valid: false
      FalseIsNotNull:
        description: false is not null
        data: false
        valid: false
      NullIsNull:
        description: null is null
        data: null
        valid: true
    ArrayTypeMatchesArrays:
      AnIntegerIsNotAnArray:
        description: an integer is not an array
        data: 1
        valid: false
      AFloatIsNotAnArray:
        description: a float is not an array
        data: 1.1
        valid: false
      AStringIsNotAnArray:
        description: a string is not an array
        data: foo
        valid: false
      AnObjectIsNotAnArray:
        description: an object is not an array
        data: {}
        valid: false
      AnArrayIsAnArray:
        description: an array is an array
        data: []
        valid: true
      ABooleanIsNotAnArray:
        description: a boolean is not an array
        data: true
        valid: false
      NullIsNotAnArray:
        description: null is not an array
        data: null
        valid: false
    UniqueitemsValidation:
      UniqueArrayOfIntegersIsValid:
        description: unique array of integers is valid
        data:
        - 1
        - 2
        valid: true
      NonUniqueArrayOfIntegersIsInvalid:
        description: non-unique array of integers is invalid
        data:
        - 1
        - 1
        valid: false
      NonUniqueArrayOfMoreThanTwoIntegersIsInvalid:
        description: non-unique array of more than two integers is invalid
        data:
        - 1
        - 2
        - 1
        valid: false
      NumbersAreUniqueIfMathematicallyUnequal:
        description: numbers are unique if mathematically unequal
        data:
        - 1.0
        - 1.0
        - 1
        valid: false
      FalseIsNotEqualToZero:
        description: false is not equal to zero
        data:
        - 0
        - false
        valid: true
      TrueIsNotEqualToOne:
        description: true is not equal to one
        data:
        - 1
        - true
        valid: true
      UniqueArrayOfStringsIsValid:
        description: unique array of strings is valid
        data:
        - foo
        - bar
        - baz
        valid: true
      NonUniqueArrayOfStringsIsInvalid:
        description: non-unique array of strings is invalid
        data:
        - foo
        - bar
        - foo
        valid: false
      UniqueArrayOfObjectsIsValid:
        description: unique array of objects is valid
        data:
        - foo: bar
        - foo: baz
        valid: true
      NonUniqueArrayOfObjectsIsInvalid:
        description: non-unique array of objects is invalid
        data:
        - foo: bar
        - foo: bar
        valid: false
      UniqueArrayOfNestedObjectsIsValid:
        description: unique array of nested objects is valid
        data:
        - foo:
            bar:
              baz: true
        - foo:
            bar:
              baz: false
        valid: true
      NonUniqueArrayOfNestedObjectsIsInvalid:
        description: non-unique array of nested objects is invalid
        data:
        - foo:
            bar:
              baz: true
        - foo:
            bar:
              baz: true
        valid: false
      UniqueArrayOfArraysIsValid:
        description: unique array of arrays is valid
        data:
        - - foo
        - - bar
        valid: true
      NonUniqueArrayOfArraysIsInvalid:
        description: non-unique array of arrays is invalid
        data:
        - - foo
        - - foo
        valid: false
      NonUniqueArrayOfMoreThanTwoArraysIsInvalid:
        description: non-unique array of more than two arrays is invalid
        data:
        - - foo
        - - bar
        - - foo
        valid: false
      1AndTrueAreUnique:
        description: '[1] and [true] are unique'
        data:
        - - 1
        - - true
        valid: true
      0AndFalseAreUnique:
        description: '[0] and [false] are unique'
        data:
        - - 0
        - - false
        valid: true
      Nested1AndTrueAreUnique:
        description: nested [1] and [true] are unique
        data:
        - - - 1
          - foo
        - - - true
          - foo
        valid: true
      Nested0AndFalseAreUnique:
        description: nested [0] and [false] are unique
        data:
        - - - 0
          - foo
        - - - false
          - foo
        valid: true
      UniqueHeterogeneousTypesAreValid:
        description: unique heterogeneous types are valid
        data:
        - {}
        - - 1
        - true
        - null
        - 1
        - '{}'
        valid: true
      NonUniqueHeterogeneousTypesAreInvalid:
        description: non-unique heterogeneous types are invalid
        data:
        - {}
        - - 1
        - true
        - null
        - {}
        - 1
        valid: false
      DifferentObjectsAreUnique:
        description: different objects are unique
        data:
        - a: 1
          b: 2
        - a: 2
          b: 1
        valid: true
      ObjectsAreNonUniqueDespiteKeyOrder:
        description: objects are non-unique despite key order
        data:
        - a: 1
          b: 2
        - b: 2
          a: 1
        valid: false
      AFalseAndA0AreUnique:
        description: '{"a": false} and {"a": 0} are unique'
        data:
        - a: false
        - a: 0
        valid: true
      ATrueAndA1AreUnique:
        description: '{"a": true} and {"a": 1} are unique'
        data:
        - a: true
        - a: 1
        valid: true
    UniqueitemsFalseValidation:
      UniqueArrayOfIntegersIsValid:
        description: unique array of integers is valid
        data:
        - 1
        - 2
        valid: true
      NonUniqueArrayOfIntegersIsValid:
        description: non-unique array of integers is valid
        data:
        - 1
        - 1
        valid: true
      NumbersAreUniqueIfMathematicallyUnequal:
        description: numbers are unique if mathematically unequal
        data:
        - 1.0
        - 1.0
        - 1
        valid: true
      FalseIsNotEqualToZero:
        description: false is not equal to zero
        data:
        - 0
        - false
        valid: true
      TrueIsNotEqualToOne:
        description: true is not equal to one
        data:
        - 1
        - true
        valid: true
      UniqueArrayOfObjectsIsValid:
        description: unique array of objects is valid
        data:
        - foo: bar
        - foo: baz
        valid: true
      NonUniqueArrayOfObjectsIsValid:
        description: non-unique array of objects is valid
        data:
        - foo: bar
        - foo: bar
        valid: true
      UniqueArrayOfNestedObjectsIsValid:
        description: unique array of nested objects is valid
        data:
        - foo:
            bar:
              baz: true
        - foo:
            bar:
              baz: false
        valid: true
      NonUniqueArrayOfNestedObjectsIsValid:
        description: non-unique array of nested objects is valid
        data:
        - foo:
            bar:
              baz: true
        - foo:
            bar:
              baz: true
        valid: true
      UniqueArrayOfArraysIsValid:
        description: unique array of arrays is valid
        data:
        - - foo
        - - bar
        valid: true
      NonUniqueArrayOfArraysIsValid:
        description: non-unique array of arrays is valid
        data:
        - - foo
        - - foo
        valid: true
      1AndTrueAreUnique:
        description: 1 and true are unique
        data:
        - 1
        - true
        valid: true
      0AndFalseAreUnique:
        description: 0 and false are unique
        data:
        - 0
        - false
        valid: true
      UniqueHeterogeneousTypesAreValid:
        description: unique heterogeneous types are valid
        data:
        - {}
        - - 1
        - true
        - null
        - 1
        valid: true
      NonUniqueHeterogeneousTypesAreValid:
        description: non-unique heterogeneous types are valid
        data:
        - {}
        - - 1
        - true
        - null
        - {}
        - 1
        valid: true
