openapi: 3.0.1
info:
  version: 1.0.0
  title: Example
  license:
    name: MIT
servers:
  - url: http://api.example.xyz/v1
paths:
  /resolve_inline_request_body:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: object
                  properties:
                    street:
                      type: string
      operationId: resolveInlineRequestBody
      responses:
        '200':
          description: OK
  /resolve_inline_request_body_with_required:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: true
      operationId: resolveInlineRequestBodyWithRequired
      responses:
        '200':
          description: OK
  /resolve_inline_request_body_with_title:
    post:
      requestBody:
        content:
          application/json:
            schema:
              title: resolve_inline_request_body_with_title
              type: object
              properties:
                name:
                  type: string
      operationId: resolveInlineRequestBodyWithTitle
      responses:
        '200':
          description: OK
  /non_model_request_body:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      operationId: nonModelRequestBody
      responses:
        '200':
          description: OK
  /resolve_inline_array_request_body:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  street:
                    type: string
                  city:
                    type: string
      operationId: resolveInlineArrayRequestBody
      responses:
        '200':
          description: OK
  /resolve_inline_array_request_body_with_title:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                title: InlineArrayItemsTitle
                type: object
                properties:
                  street_2:
                    type: string
                  city_2:
                    type: string
      operationId: resolveInlineArrayRequestBodyOperationId
      responses:
        '200':
          description: OK
  /resolve_inline_array_response:
    get:
      operationId: resolveInlineArrayResponse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    array_response_property:
                      type: string
  /resolve_inline_array_response_with_title:
    get:
      operationId: resolveInlineArrayResponseWithTitleOperation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  title: InlineArrayItemsTitle
                  type: object
                  properties:
                    array_response_with_title_property:
                      type: string
  /resolve_inline_object_response_with_additional_properties:
    get:
      operationId: resolveInlineObjectResponseWithAdditionalProperties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    resolve_inline_object_response_with_additional_properties:
                      type: string
  /resolve_inline_map_schema_in_response:
    get:
      operationId: resolveInlineMapSchemaInResponse
      responses:
        '200':
          description: OK
          # Swagger parser doesn't use MapSchema currently,
          # so we need to set a MapSchema instance as the schema manually for testing.
          # see InlineModelResolverTest#resolveInlineMapSchemaInResponse()
  /arbitrary_object_request_body:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
      operationId: arbitraryObjectRequestBody
      responses:
        '200':
          description: OK
  /arbitrary_object_request_body_property:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                arbitrary_object_request_body_property:
                  type: object
      operationId: arbitraryObjectRequestBodyProperty
      responses:
        '200':
          description: OK
  /arbitrary_request_body_array:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: item
              items:
                type: object
      operationId: arbitraryRequestBodyArray
      responses:
        '200':
          description: OK
  /arbitrary_request_body_array_property:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: item
              items:
                type: object
                properties:
                  arbitrary_request_body_array_property:
                    type: object
      operationId: arbitraryRequestBodyArrayProperty
      responses:
        '200':
          description: OK
  /arbitrary_object_response:
    get:
      operationId: arbitraryObjectResponse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /arbitrary_object_response_array:
    get:
      operationId: arbitraryObjectResponseArray
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /arbitrary_object_response_array_inline:
    get:
      operationId: arbitraryObjectResponseArrayInline
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    arbitrary_object_response_array_inline:
                      type: object
  /arbitrary_object_response_with_additional_property:
    get:
      operationId: arbitraryObjectResponseWithAdditionalProperty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /empty_example_on_string_models:
    get:
      operationId: emptyExampleoOnStringTypeModels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmptyExampleOnStringTypeModels'
  /nullable_properties:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nullable_request_body_property:
                  type: object
                  nullable: true
                  properties:
                    nullable_request_body_property_name:
                      type: string
      operationId: nullableProperties
      responses:
        '200':
          description: OK
  /cats:
    get:
      operationId: getCats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
  /callback:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUri:
                  type: string
      responses:
        201:
          headers:
            Location:
              description: Contains the URI of the newly created resource
              schema:
                type: string
      callbacks:
        webhook:
          '{$request.body#/callbackUri}':
            post:
              operationId: webhookNotify
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        notificationId:
                          type: string
                        action:
                          type: string
                        data:
                          type: string
components:
  schemas:
    Users:
      type: array
      items:
        title: User
        type: object
        properties:
          street:
            type: string
          city:
            type: string
    ComposedObjectModelInline:
      allOf:
      - type: object
        properties:
          composed_object_model_inline_allOf:
            type: object
            properties:
              prop1:
                type: string
      anyOf:
      - type: object
        properties:
          composed_object_model_inline_anyOf:
            type: object
            properties:
              prop1:
                type: string
      oneOf:
      - type: object
        properties:
          composed_object_model_inline_oneOf:
            type: object
            properties:
              prop1:
                type: string
    ArbitraryObjectModelInline:
      type: object
      properties:
        arbitrary_object_model_inline:
          type: object
    ArbitraryObjectModelWithArrayInlineWithoutTitle:
      type: array
      items:
        type: object
        properties:
          arbitrary_object_model_with_array_inline_without_title:
            type: object
    ArbitraryObjectModelWithArrayInlineWithTitle:
      type: array
      items:
        title: ArbitraryObjectModelWithArrayInlineWithTitleInner
        type: object
        properties:
          arbitrary_object_model_with_array_inline_with_title:
            type: object
    EmptyExampleOnStringTypeModels:
      type: string
      example: ''
    InlinePropertyIsNullable:
      type: object
      properties:
        nullable_property:
          type: object
          nullable: true
          properties:
            nullable_property_name:
              type: string
    Cat:
      description: Complex model with many inline models defined within it.
      type: object
      properties:
        myFood:
          oneOf: # inline oneOf
            - type: object
              properties:
                ingredients:
                  type: array
                  items:
                    type: string
            - type: object
              properties:
                pounds:
                  type: integer
        myHabitat:
          allOf: # inline allOf
            - type: object
              title: Geography
              properties:
                lat:
                  type: number
                  format: float
                long:
                  type: number
                  format: float
                continent:
                  type: string
                  enum:
                    - Africa
                    - Antarctica
                    - Asia
                    - Europe
                    - North America
                    - Oceania
                    - South America
              required: [lat,long]
            - type: object
              description: Weather of the habitat defined here
              properties:
                rainfallInches:
                  type: number
                averageTemperatureCelsius:
                  type: number
        myTaxonomy:
          anyOf: # inline anyOf
            - description: Species inline anyOf schema
              type: object
              title: Species
              properties:
                name:
                  type: string
                genus:
                  type: string
                karyotype:
                  type: string
            - description: Order inline anyOf schema
              type: object
              title: Order
              properties:
                name:
                  type: string
                class:
                  type: string
        cuteness: # inline enum
          type: integer
          enum: [1,3,5]
        kittens:
          type: array
          items: # inline array where the items are inline models
            allOf:
              - $ref: '#/components/schemas/Cat'
        preferences:
          type: object
          properties:
            favoriteToy: # inline object with properties defined
              type: string
          additionalProperties: # inline object with additionalProperties containing inline models
            title: Metadata
            type: string
            enum: [hidden,createdOn,createdBy,modifiedOn,modifiedBy]