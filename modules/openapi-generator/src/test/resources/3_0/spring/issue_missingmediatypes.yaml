openapi: 3.0.2
info:
  title: Petstore - OpenAPI 3.0
  description: |-
    Forked and modified by International Network Support & Service - Glas.
    This document contains some more endpoints containing APIs that don't have only common formats like application/json and other commonly used formats, and contains also float numbers and Umlaute.
    This is to test & check if a tool can handle also those formats.
  termsOfService: http://inss.ch
  contact:
    email: openapi@inss.ch
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api/v3
tags:
  - name: troublemaker
    description: APIs causing possibly issues.
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Operations about user
  - name: user
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /books:
    get:
      tags:
        - book-controller
      summary: getAll
      operationId: getAllUsingGET
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourcesBookResource'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /books/{customerId}:
    get:
      tags:
        - book-controller
      summary: getAllByCustomerId
      operationId: getAllByCustomerIdUsingGET
      parameters:
        - name: customerId
          in: path
          description: customerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourcesBookResource'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /customers:
    get:
      tags:
        - customer-controller
      summary: getAll
      operationId: getAllUsingGET_1
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourcesCustomerResource'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
        - customer-controller
      summary: update
      operationId: updateUsingPUT
      requestBody:
        description: updCustomerResource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourceCustomerResource'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: updCustomerResource
    post:
      tags:
        - customer-controller
      summary: insert
      operationId: insertUsingPOST
      requestBody:
        description: newCustomerResource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourceCustomerResource'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: newCustomerResource
  /customers/{id}:
    get:
      tags:
        - customer-controller
      summary: get
      operationId: getUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourceCustomerResource'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
        - customer-controller
      summary: delete
      operationId: deleteUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Resourceobject'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /customers/{id}/v2:
    get:
      tags:
        - customer-controller
      summary: getWithoutGeneralLinks
      operationId: getWithoutGeneralLinksUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CustomerResource'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findbystatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
            example: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findbytags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
            example: [tags1,tags2]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /oops:
    get:
      tags:
        - troublemaker
        - failing
      operationId: failingRequest
      summary: Always fails
      description: Produces sample error response.
      responses:
        200:
          description: Never returned.
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'

  /version:
    get:
      tags:
        - troublemaker
      summary: Responds with a single plain text version.
      description: Returns plain text.
      operationId: getVersion

      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Version 1.0.0
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
        - troublemaker
      summary: Find pet by ID
      description: Returns a single pet with example of a german Umlaut.
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
            example: 99
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: 'Updates a pet in the store with form data.'
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
            example: 99
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
            example: dog
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
            example: in progress.
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: 'Deletes a pet.'
      operationId: deletePet
      parameters:
        - name: API_KEY
          in: header
          description: 'Api key.'
          required: false
          schema:
            type: string
            example: apikeyvalue1
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 99
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadimage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: 'Uploads an image.'
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
            example: 99
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
            example: metadata
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
        - troublemaker
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            example: 1001
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            example: 1001
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/createwithlist:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: 'Logs user into the system'
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
            example: jonny
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
            example: password
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
                example: 100
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
                example: '2017-07-21T17:32:28Z'
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: 'Logs out current logged in user session'
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: 'Get user by user name'
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
            example: jonny
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
            example: jonny
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            example: jonny
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Book:
      title: Book
      type: object
      properties:
        author:
          type: string
        errorMsg:
          type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        title:
          type: string
    BookResource:
      title: BookResource
      type: object
      properties:
        _links:
          type: array
          xml:
            name: link
            attribute: false
            wrapped: false
          items:
            $ref: '#/components/schemas/Link'
        book:
          $ref: '#/components/schemas/Book'
    Customer:
      title: Customer
      type: object
      properties:
        company:
          type: string
        errorMsg:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
    CustomerResource:
      title: CustomerResource
      type: object
      properties:
        _links:
          type: array
          xml:
            name: link
            attribute: false
            wrapped: false
          items:
            $ref: '#/components/schemas/Link'
        customer:
          $ref: '#/components/schemas/Customer'
    Link:
      title: Link
      type: object
      properties:
        deprecation:
          type: string
          xml:
            name: deprecation
            attribute: true
            wrapped: false
        href:
          type: string
          xml:
            name: href
            attribute: true
            wrapped: false
        hreflang:
          type: string
          xml:
            name: hreflang
            attribute: true
            wrapped: false
        media:
          type: string
          xml:
            name: media
            attribute: true
            wrapped: false
        rel:
          type: string
          xml:
            name: rel
            attribute: true
            wrapped: false
        templated:
          type: boolean
        title:
          type: string
          xml:
            name: title
            attribute: true
            wrapped: false
        type:
          type: string
          xml:
            name: type
            attribute: true
            wrapped: false
    ResourcesBookResource:
      title: Resources«BookResource»
      type: object
      properties:
        _embedded:
          type: array
          xml:
            name: embedded
            attribute: false
            wrapped: true
          items:
            $ref: '#/components/schemas/BookResource'
        _links:
          type: array
          xml:
            name: link
            attribute: false
            wrapped: false
          items:
            $ref: '#/components/schemas/Link'
    ResourcesCustomerResource:
      title: Resources«CustomerResource»
      type: object
      properties:
        _embedded:
          type: array
          xml:
            name: embedded
            attribute: false
            wrapped: true
          items:
            $ref: '#/components/schemas/CustomerResource'
        _links:
          type: array
          xml:
            name: link
            attribute: false
            wrapped: false
          items:
            $ref: '#/components/schemas/Link'
    ResourceCustomerResource:
      title: Resource«CustomerResource»
      type: object
      properties:
        _links:
          type: array
          xml:
            name: link
            attribute: false
            wrapped: false
          items:
            $ref: '#/components/schemas/Link'
        customer:
          $ref: '#/components/schemas/Customer'
    Resourceobject:
      title: Resource«object»
      type: object
      properties:
        _links:
          type: array
          xml:
            name: link
            attribute: false
            wrapped: false
          items:
            $ref: '#/components/schemas/Link'
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: 'Id of the order.'
        petId:
          type: integer
          format: int64
          example: 198772
          description: 'PetId'
        pricebrutto:
          type: number
          format: float
          example: 345.45
          description: Brutto price
        pricenetto:
          type: number
          format: float
          example: 300.00
          description: Netto price
        rabatt:
          type: number
          format: float
          example: 25.90
          description: Rabatt reduction.
        quantity:
          type: integer
          format: int32
          example: 7
          description: 'Quantity'
        shipDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          description: 'Shipping date.'
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          example: true
          description: Order completed.
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 'Id'
        name:
          type: string
          example: Dogs
          description: 'Name of category.'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: 'Id'
        username:
          type: string
          example: theUser
          description: 'Username'
        firstName:
          type: string
          example: John
          description: 'First name'
        lastName:
          type: string
          example: James
          description: 'Last name'
        email:
          type: string
          example: john@email.com
          format: email
          description: 'User mail address.'
        password:
          type: string
          example: 'password'
          description: 'Password.'
        phone:
          type: string
          example: '012345'
          description: 'Phone number'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 'Id'
        name:
          type: string
          example: tag1
          description: 'Name of tag.'
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          description: 'Id'
        name:
          type: string
          example: SChäferhund
          description: 'Name'
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
          example: [http://example.com/photo.png, http://example.com/photo2,png]
          description: 'Photo urls.'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          example: available
    RestError:
      title: REST Error
      description: The schema for all error responses.
      type: object
      properties:
        status:
          title: Status
          description: The HTTP status code.
          type: integer
          format: int32
          example: 400
          readOnly: true
        error:
          title: Error
          description: The short error message.
          type: string
          example: Bad Request
          readOnly: true
        path:
          title: Path
          description: The path of the URL for this request.
          type: string
          format: uri
          example: '/api/owners'
          readOnly: true
        timestamp:
          title: Timestamp
          description: The time the error occured.
          type: string
          format: date-time
          example: '2019-08-21T21:41:46.158+0000'
          readOnly: true
        message:
          title: Message
          description: The long error message.
          type: string
          example: 'Request failed schema validation'
          readOnly: true
        trace:
          title: Trace
          description: The stacktrace for this error.
          type: string
          example: 'com.atlassian.oai.validator.springmvc.InvalidRequestException: ...'
          readOnly: true
      required:
        - status
        - error
        - path
        - timestamp
        - message
        - schemaValidationErrors
    ModelApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 123
          description: 'Code'
        type:
          type: string
          example: responsetype
          description: 'Response type'
        message:
          type: string
          example: Message.
          description: 'The message.'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header