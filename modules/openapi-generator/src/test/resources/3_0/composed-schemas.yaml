

openapi: 3.0.1
info:
  version: 1.0.0
  title: Example
  license:
    name: MIT
servers:
  - url: http://api.example.xyz/v1
paths:
  /pets:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
                # This field will not match to any type.
                - description: Any kind of pet
              discriminator:
                propertyName: pet_type
      responses:
        '200':
          description: Updated

  /sizes:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sizes'
      responses:
        '200':
          description: Created

  /pets-filtered:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/PetByAge'
                - $ref: '#/components/schemas/PetByType'
                # This field will not match to any type.
                - description: Any kind of filter
      responses:
        '200':
          description: Updated

  /file:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  allOf:
                    - type: file
                    # This field will not match to any type.
                    - description: The file to upload
      responses:
        '200':
          description: File uploaded

components:
  schemas:
    Pet:
      type: object
      required:
        - pet_type
    Breed:
      type: string
      example: Retriever
      enum: [Dingo, Husky, Retriever, Shepherd]
    Sizes:
      type: object
      required:
        - data
        - parent_breeds
        - possible_breeds
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: number
              description: tuple with timestamp and value
              format: double
              nullable: true
            minItems: 2
            maxItems: 2
            description: Array of pet sizes over time.
            example: [1575317847.0, 12.3]
        parent_breeds:
          type: array
          example: [["Dingo", "Dingo"], ["Husky", "Shepherd"]]
          items:
            type: array
            items:
              $ref: '#/components/schemas/Breed'
            minItems: 2
            maxItems: 2
            description: Parent breeds.
        possible_breeds:
          type: array
          items:
            $ref: '#/components/schemas/Breed'
    Dog:
      allOf:
        # This field will not match to any type.
        - description: Dog information
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            bark:
              type: boolean
            breed:
              type: string
              enum: [Dingo, Husky, Retriever, Shepherd]
    Cat:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            hunts:
              type: boolean
            age:
              type: integer
    PetByAge:
      type: object
      properties:
        age:
          type: integer
        nickname:
          type: string
      required:
        - age

    PetByType:
      type: object
      properties:
        pet_type:
          type: string
          enum: [Cat, Dog]
        hunts:
          type: boolean
      required:
        - pet_type