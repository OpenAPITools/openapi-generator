openapi: 3.0.3
info:
  title: openapi 3.0.3 sample spec
  description: sample spec for testing openapi functionality, built from json schema
    tests for draft6
  version: 0.0.1
paths: {}
components:
  schemas:
    SimpleEnumValidation:
      enum:
      - 1
      - 2
      - 3
    EnumsInProperties:
      type: object
      properties:
        foo:
          enum:
          - foo
        bar:
          enum:
          - bar
      required:
      - bar
    EnumWithEscapedCharacters:
      enum:
      - 'foo

        bar'
      - "foo\rbar"
    EnumWithFalseDoesNotMatch0:
      enum:
      - false
    EnumWithTrueDoesNotMatch1:
      enum:
      - true
    EnumWith0DoesNotMatchFalse:
      enum:
      - 0
    EnumWith1DoesNotMatchTrue:
      enum:
      - 1
    NulCharactersInStrings:
      enum:
      - "hello\0there"
  x-schema-test-examples:
    SimpleEnumValidation:
      OneOfTheEnumIsValid:
        description: one of the enum is valid
        data: 1
        valid: true
      SomethingElseIsInvalid:
        description: something else is invalid
        data: 4
        valid: false
    EnumsInProperties:
      BothPropertiesAreValid:
        description: both properties are valid
        data:
          foo: foo
          bar: bar
        valid: true
      WrongFooValue:
        description: wrong foo value
        data:
          foo: foot
          bar: bar
        valid: false
      WrongBarValue:
        description: wrong bar value
        data:
          foo: foo
          bar: bart
        valid: false
      MissingOptionalPropertyIsValid:
        description: missing optional property is valid
        data:
          bar: bar
        valid: true
      MissingRequiredPropertyIsInvalid:
        description: missing required property is invalid
        data:
          foo: foo
        valid: false
      MissingAllPropertiesIsInvalid:
        description: missing all properties is invalid
        data: {}
        valid: false
    EnumWithEscapedCharacters:
      Member1IsValid:
        description: member 1 is valid
        data: 'foo

          bar'
        valid: true
      Member2IsValid:
        description: member 2 is valid
        data: "foo\rbar"
        valid: true
      AnotherStringIsInvalid:
        description: another string is invalid
        data: abc
        valid: false
    EnumWithFalseDoesNotMatch0:
      FalseIsValid:
        description: false is valid
        data: false
        valid: true
      IntegerZeroIsInvalid:
        description: integer zero is invalid
        data: 0
        valid: false
      FloatZeroIsInvalid:
        description: float zero is invalid
        data: 0.0
        valid: false
    EnumWithTrueDoesNotMatch1:
      TrueIsValid:
        description: true is valid
        data: true
        valid: true
      IntegerOneIsInvalid:
        description: integer one is invalid
        data: 1
        valid: false
      FloatOneIsInvalid:
        description: float one is invalid
        data: 1.0
        valid: false
    EnumWith0DoesNotMatchFalse:
      FalseIsInvalid:
        description: false is invalid
        data: false
        valid: false
      IntegerZeroIsValid:
        description: integer zero is valid
        data: 0
        valid: true
      FloatZeroIsValid:
        description: float zero is valid
        data: 0.0
        valid: true
    EnumWith1DoesNotMatchTrue:
      TrueIsInvalid:
        description: true is invalid
        data: true
        valid: false
      IntegerOneIsValid:
        description: integer one is valid
        data: 1
        valid: true
      FloatOneIsValid:
        description: float one is valid
        data: 1.0
        valid: true
    NulCharactersInStrings:
      MatchStringWithNul:
        description: match string with nul
        data: "hello\0there"
        valid: true
      DoNotMatchStringLackingNul:
        description: do not match string lacking nul
        data: hellothere
        valid: false
