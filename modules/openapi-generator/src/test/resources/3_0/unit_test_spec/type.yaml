openapi: 3.0.3
info:
  title: openapi 3.0.3 sample spec
  description: sample spec for testing openapi functionality, built from json schema
    tests for draft6
  version: 0.0.1
paths: {}
components:
  schemas:
    IntegerTypeMatchesIntegers:
      type: integer
    NumberTypeMatchesNumbers:
      type: number
    StringTypeMatchesStrings:
      type: string
    ObjectTypeMatchesObjects:
      type: object
    BooleanTypeMatchesBooleans:
      type: boolean
    NullTypeMatchesOnlyTheNullObject:
      type: 'null'
    ArrayTypeMatchesArrays:
      type: array
      items: {}
    AdditionalpropertiesAllowsASchemaWhichShouldValidate:
      properties:
        foo: {}
        bar: {}
      additionalProperties:
        type: boolean
    AdditionalpropertiesCanExistByItself:
      additionalProperties:
        type: boolean
    AdditionalpropertiesAreAllowedByDefault:
      properties:
        foo: {}
        bar: {}
    AdditionalpropertiesShouldNotLookInApplicators:
      allOf:
      - properties:
          foo: {}
      additionalProperties:
        type: boolean
    InvalidTypeForDefault:
      properties:
        foo:
          type: integer
          default: []
    InvalidStringValueForDefault:
      properties:
        bar:
          type: string
          minLength: 4
          default: bad
    TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing:
      type: object
      properties:
        alpha:
          type: number
          maximum: 3
          default: 5
    SimpleEnumValidation:
      enum:
      - 1
      - 2
      - 3
    HeterogeneousEnumValidation:
      enum:
      - 6
      - foo
      - []
      - true
      - foo: 12
    HeterogeneousEnumWithNullValidation:
      enum:
      - 6
      - null
    EnumsInProperties:
      type: object
      properties:
        foo:
          enum:
          - foo
        bar:
          enum:
          - bar
      required:
      - bar
    EnumWithEscapedCharacters:
      enum:
      - 'foo

        bar'
      - "foo\rbar"
    EnumWithFalseDoesNotMatch0:
      enum:
      - false
    EnumWithTrueDoesNotMatch1:
      enum:
      - true
    EnumWith0DoesNotMatchFalse:
      enum:
      - 0
    EnumWith1DoesNotMatchTrue:
      enum:
      - 1
    NulCharactersInStrings:
      enum:
      - "hello\0there"
  x-schema-test-examples:
    IntegerTypeMatchesIntegers:
      AnIntegerIsAnInteger:
        description: an integer is an integer
        data: 1
        valid: true
      AFloatWithZeroFractionalPartIsAnInteger:
        description: a float with zero fractional part is an integer
        data: 1.0
        valid: true
      AFloatIsNotAnInteger:
        description: a float is not an integer
        data: 1.1
        valid: false
      AStringIsNotAnInteger:
        description: a string is not an integer
        data: foo
        valid: false
      AStringIsStillNotAnIntegerEvenIfItLooksLikeOne:
        description: a string is still not an integer, even if it looks like one
        data: '1'
        valid: false
      AnObjectIsNotAnInteger:
        description: an object is not an integer
        data: {}
        valid: false
      AnArrayIsNotAnInteger:
        description: an array is not an integer
        data: []
        valid: false
      ABooleanIsNotAnInteger:
        description: a boolean is not an integer
        data: true
        valid: false
      NullIsNotAnInteger:
        description: null is not an integer
        data: null
        valid: false
    NumberTypeMatchesNumbers:
      AnIntegerIsANumber:
        description: an integer is a number
        data: 1
        valid: true
      AFloatWithZeroFractionalPartIsANumberAndAnInteger:
        description: a float with zero fractional part is a number (and an integer)
        data: 1.0
        valid: true
      AFloatIsANumber:
        description: a float is a number
        data: 1.1
        valid: true
      AStringIsNotANumber:
        description: a string is not a number
        data: foo
        valid: false
      AStringIsStillNotANumberEvenIfItLooksLikeOne:
        description: a string is still not a number, even if it looks like one
        data: '1'
        valid: false
      AnObjectIsNotANumber:
        description: an object is not a number
        data: {}
        valid: false
      AnArrayIsNotANumber:
        description: an array is not a number
        data: []
        valid: false
      ABooleanIsNotANumber:
        description: a boolean is not a number
        data: true
        valid: false
      NullIsNotANumber:
        description: null is not a number
        data: null
        valid: false
    StringTypeMatchesStrings:
      1IsNotAString:
        description: 1 is not a string
        data: 1
        valid: false
      AFloatIsNotAString:
        description: a float is not a string
        data: 1.1
        valid: false
      AStringIsAString:
        description: a string is a string
        data: foo
        valid: true
      AStringIsStillAStringEvenIfItLooksLikeANumber:
        description: a string is still a string, even if it looks like a number
        data: '1'
        valid: true
      AnEmptyStringIsStillAString:
        description: an empty string is still a string
        data: ''
        valid: true
      AnObjectIsNotAString:
        description: an object is not a string
        data: {}
        valid: false
      AnArrayIsNotAString:
        description: an array is not a string
        data: []
        valid: false
      ABooleanIsNotAString:
        description: a boolean is not a string
        data: true
        valid: false
      NullIsNotAString:
        description: null is not a string
        data: null
        valid: false
    ObjectTypeMatchesObjects:
      AnIntegerIsNotAnObject:
        description: an integer is not an object
        data: 1
        valid: false
      AFloatIsNotAnObject:
        description: a float is not an object
        data: 1.1
        valid: false
      AStringIsNotAnObject:
        description: a string is not an object
        data: foo
        valid: false
      AnObjectIsAnObject:
        description: an object is an object
        data: {}
        valid: true
      AnArrayIsNotAnObject:
        description: an array is not an object
        data: []
        valid: false
      ABooleanIsNotAnObject:
        description: a boolean is not an object
        data: true
        valid: false
      NullIsNotAnObject:
        description: null is not an object
        data: null
        valid: false
    BooleanTypeMatchesBooleans:
      AnIntegerIsNotABoolean:
        description: an integer is not a boolean
        data: 1
        valid: false
      ZeroIsNotABoolean:
        description: zero is not a boolean
        data: 0
        valid: false
      AFloatIsNotABoolean:
        description: a float is not a boolean
        data: 1.1
        valid: false
      AStringIsNotABoolean:
        description: a string is not a boolean
        data: foo
        valid: false
      AnEmptyStringIsNotABoolean:
        description: an empty string is not a boolean
        data: ''
        valid: false
      AnObjectIsNotABoolean:
        description: an object is not a boolean
        data: {}
        valid: false
      AnArrayIsNotABoolean:
        description: an array is not a boolean
        data: []
        valid: false
      TrueIsABoolean:
        description: true is a boolean
        data: true
        valid: true
      FalseIsABoolean:
        description: false is a boolean
        data: false
        valid: true
      NullIsNotABoolean:
        description: null is not a boolean
        data: null
        valid: false
    NullTypeMatchesOnlyTheNullObject:
      AnIntegerIsNotNull:
        description: an integer is not null
        data: 1
        valid: false
      AFloatIsNotNull:
        description: a float is not null
        data: 1.1
        valid: false
      ZeroIsNotNull:
        description: zero is not null
        data: 0
        valid: false
      AStringIsNotNull:
        description: a string is not null
        data: foo
        valid: false
      AnEmptyStringIsNotNull:
        description: an empty string is not null
        data: ''
        valid: false
      AnObjectIsNotNull:
        description: an object is not null
        data: {}
        valid: false
      AnArrayIsNotNull:
        description: an array is not null
        data: []
        valid: false
      TrueIsNotNull:
        description: true is not null
        data: true
        valid: false
      FalseIsNotNull:
        description: false is not null
        data: false
        valid: false
      NullIsNull:
        description: null is null
        data: null
        valid: true
    ArrayTypeMatchesArrays:
      AnIntegerIsNotAnArray:
        description: an integer is not an array
        data: 1
        valid: false
      AFloatIsNotAnArray:
        description: a float is not an array
        data: 1.1
        valid: false
      AStringIsNotAnArray:
        description: a string is not an array
        data: foo
        valid: false
      AnObjectIsNotAnArray:
        description: an object is not an array
        data: {}
        valid: false
      AnArrayIsAnArray:
        description: an array is an array
        data: []
        valid: true
      ABooleanIsNotAnArray:
        description: a boolean is not an array
        data: true
        valid: false
      NullIsNotAnArray:
        description: null is not an array
        data: null
        valid: false
    AdditionalpropertiesAllowsASchemaWhichShouldValidate:
      NoAdditionalPropertiesIsValid:
        description: no additional properties is valid
        data:
          foo: 1
        valid: true
      AnAdditionalValidPropertyIsValid:
        description: an additional valid property is valid
        data:
          foo: 1
          bar: 2
          quux: true
        valid: true
      AnAdditionalInvalidPropertyIsInvalid:
        description: an additional invalid property is invalid
        data:
          foo: 1
          bar: 2
          quux: 12
        valid: false
    AdditionalpropertiesCanExistByItself:
      AnAdditionalValidPropertyIsValid:
        description: an additional valid property is valid
        data:
          foo: true
        valid: true
      AnAdditionalInvalidPropertyIsInvalid:
        description: an additional invalid property is invalid
        data:
          foo: 1
        valid: false
    AdditionalpropertiesAreAllowedByDefault:
      AdditionalPropertiesAreAllowed:
        description: additional properties are allowed
        data:
          foo: 1
          bar: 2
          quux: true
        valid: true
    AdditionalpropertiesShouldNotLookInApplicators:
      PropertiesDefinedInAllofAreNotExamined:
        description: properties defined in allOf are not examined
        data:
          foo: 1
          bar: true
        valid: false
    InvalidTypeForDefault:
      ValidWhenPropertyIsSpecified:
        description: valid when property is specified
        data:
          foo: 13
        valid: true
      StillValidWhenTheInvalidDefaultIsUsed:
        description: still valid when the invalid default is used
        data: {}
        valid: true
    InvalidStringValueForDefault:
      ValidWhenPropertyIsSpecified:
        description: valid when property is specified
        data:
          bar: good
        valid: true
      StillValidWhenTheInvalidDefaultIsUsed:
        description: still valid when the invalid default is used
        data: {}
        valid: true
    TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing:
      AnExplicitPropertyValueIsCheckedAgainstMaximumPassing:
        description: an explicit property value is checked against maximum (passing)
        data:
          alpha: 1
        valid: true
      AnExplicitPropertyValueIsCheckedAgainstMaximumFailing:
        description: an explicit property value is checked against maximum (failing)
        data:
          alpha: 5
        valid: false
      MissingPropertiesAreNotFilledInWithTheDefault:
        description: missing properties are not filled in with the default
        data: {}
        valid: true
    SimpleEnumValidation:
      OneOfTheEnumIsValid:
        description: one of the enum is valid
        data: 1
        valid: true
      SomethingElseIsInvalid:
        description: something else is invalid
        data: 4
        valid: false
    HeterogeneousEnumValidation:
      OneOfTheEnumIsValid:
        description: one of the enum is valid
        data: []
        valid: true
      SomethingElseIsInvalid:
        description: something else is invalid
        data: null
        valid: false
      ObjectsAreDeepCompared:
        description: objects are deep compared
        data:
          foo: false
        valid: false
      ValidObjectMatches:
        description: valid object matches
        data:
          foo: 12
        valid: true
      ExtraPropertiesInObjectIsInvalid:
        description: extra properties in object is invalid
        data:
          foo: 12
          boo: 42
        valid: false
    HeterogeneousEnumWithNullValidation:
      NullIsValid:
        description: null is valid
        data: null
        valid: true
      NumberIsValid:
        description: number is valid
        data: 6
        valid: true
      SomethingElseIsInvalid:
        description: something else is invalid
        data: test
        valid: false
    EnumsInProperties:
      BothPropertiesAreValid:
        description: both properties are valid
        data:
          foo: foo
          bar: bar
        valid: true
      WrongFooValue:
        description: wrong foo value
        data:
          foo: foot
          bar: bar
        valid: false
      WrongBarValue:
        description: wrong bar value
        data:
          foo: foo
          bar: bart
        valid: false
      MissingOptionalPropertyIsValid:
        description: missing optional property is valid
        data:
          bar: bar
        valid: true
      MissingRequiredPropertyIsInvalid:
        description: missing required property is invalid
        data:
          foo: foo
        valid: false
      MissingAllPropertiesIsInvalid:
        description: missing all properties is invalid
        data: {}
        valid: false
    EnumWithEscapedCharacters:
      Member1IsValid:
        description: member 1 is valid
        data: 'foo

          bar'
        valid: true
      Member2IsValid:
        description: member 2 is valid
        data: "foo\rbar"
        valid: true
      AnotherStringIsInvalid:
        description: another string is invalid
        data: abc
        valid: false
    EnumWithFalseDoesNotMatch0:
      FalseIsValid:
        description: false is valid
        data: false
        valid: true
      IntegerZeroIsInvalid:
        description: integer zero is invalid
        data: 0
        valid: false
      FloatZeroIsInvalid:
        description: float zero is invalid
        data: 0.0
        valid: false
    EnumWithTrueDoesNotMatch1:
      TrueIsValid:
        description: true is valid
        data: true
        valid: true
      IntegerOneIsInvalid:
        description: integer one is invalid
        data: 1
        valid: false
      FloatOneIsInvalid:
        description: float one is invalid
        data: 1.0
        valid: false
    EnumWith0DoesNotMatchFalse:
      FalseIsInvalid:
        description: false is invalid
        data: false
        valid: false
      IntegerZeroIsValid:
        description: integer zero is valid
        data: 0
        valid: true
      FloatZeroIsValid:
        description: float zero is valid
        data: 0.0
        valid: true
    EnumWith1DoesNotMatchTrue:
      TrueIsInvalid:
        description: true is invalid
        data: true
        valid: false
      IntegerOneIsValid:
        description: integer one is valid
        data: 1
        valid: true
      FloatOneIsValid:
        description: float one is valid
        data: 1.0
        valid: true
    NulCharactersInStrings:
      MatchStringWithNul:
        description: match string with nul
        data: "hello\0there"
        valid: true
      DoNotMatchStringLackingNul:
        description: do not match string lacking nul
        data: hellothere
        valid: false
