openapi: 3.0.0
info:
  description: This is a sample server Petstore server.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://petstore.swagger.io/v2
paths:
  /pet:
    post:
      operationId: addPet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "405":
          description: Invalid input
    put:
      externalDocs:
        description: API documentation for the updatePet operation
        url: http://petstore.swagger.io/v2/doc/updatePet
      operationId: updatePet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
  /pet/findByStatus:
    get:
      deprecated: true
      operationId: findPetsByStatus
      parameters:
        - deprecated: true
          explode: true
          in: query
          name: limit
          required: false
          schema:
            type: integer
          style: form
          x-internal: true
        - deprecated: true
          description: Status values that need to be considered for filter
          explode: false
          in: query
          name: status
          required: true
          schema:
            items:
              default: available
              enum:
                - available
                - pending
                - sold
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
          description: successful operation
        "400":
          description: Invalid status value
    parameters:
      - deprecated: true
        explode: false
        in: header
        name: role
        required: false
        schema:
          type: string
        style: simple
        x-internal: true
  /pet/findByTags:
    get:
      deprecated: true
      operationId: findPetsByTags
      parameters:
        - description: Tags to filter by
          explode: false
          in: query
          name: tags
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
  /pet/{petId}:
    delete:
      description: ""
      operationId: deletePet
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Pet id to delete
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "400":
          description: Invalid pet value
      summary: Deletes a pet
    get:
      operationId: getPetById
      parameters:
        - description: ID of pet to return
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
    post:
      operationId: updatePetWithForm
      parameters:
        - description: ID of pet that needs to be updated
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
              type: object
      responses:
        "405":
          description: Invalid input
  /store/inventory:
    get:
      deprecated: true
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
  /store/order:
    post:
      operationId: placeOrder
      requestBody:
        $ref: "#/components/requestBodies/Order"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: successful operation
        "400":
          description: Invalid Order
  /store/order/{orderId}:
    delete:
      operationId: deleteOrder
      parameters:
        - $ref: "#/components/parameters/orderId"
    get:
      operationId: getOrderById
      parameters:
        - $ref: "#/components/parameters/orderId"
      responses:
        "200":
          $ref: "#/components/responses/Order"
  /user:
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      operationId: createUsersWithListInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
  /user/login:
    get:
      operationId: loginUser
      parameters:
        - description: The user name for login
          explode: true
          in: query
          name: username
          required: true
          schema:
            pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
            type: string
          style: form
        - description: The password for login in clear text
          explode: true
          in: query
          name: password
          required: true
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
              x-internal: true
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      operationId: logoutUser
  /user/{username}:
    delete:
      operationId: deleteUser
      parameters:
        - description: The name that needs to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
    get:
      operationId: getUserByName
      parameters:
        - description: The name that needs to be fetched. Use user1 for testing.
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: successful operation
    put:
      operationId: updateUser
      parameters:
        - description: name that need to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
components:
  parameters:
    orderId:
      explode: false
      in: path
      name: orderId
      required: true
      schema:
        type: string
      style: simple
    offset:
      deprecated: true
      explode: true
      in: query
      name: offset
      required: false
      schema:
        type: integer
      style: form
      x-internal: true
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/User"
            type: array
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
      description: Pet object that needs to be added to the store
      required: true
    Order:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Order"
      description: order placed for purchasing the pet
      required: true
  responses:
    Order:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Order"
      description: successful operation
  schemas:
    Order:
      description: An order for a pets from the pet store
      properties:
        id:
          format: int64
          type: integer
        petId:
          format: int64
          type: integer
        quantity:
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          type: string
        complete:
          default: false
          type: boolean
      title: Pet Order
      type: object
    Category:
      description: A category for a pet
      properties:
        id:
          format: int64
          type: integer
        name:
          pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          type: string
      title: Pet category
      type: object
    User:
      description: A User who is purchasing from the pet store
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          format: int32
          type: integer
      title: a User
      type: object
    Tag:
      description: A tag for a pet
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      title: Pet Tag
      type: object
    Pet:
      description: A pet for sale in the pet store
      properties:
        id:
          format: int64
          type: integer
        category:
          $ref: "#/components/schemas/Category"
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
          type: array
        tags:
          items:
            $ref: "#/components/schemas/Tag"
          type: array
        status:
          deprecated: true
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
      required:
        - name
        - photoUrls
      title: a Pet
      type: object
    ApiResponse:
      description: Describes the result of uploading an image resource
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      title: An uploaded response
      type: object
