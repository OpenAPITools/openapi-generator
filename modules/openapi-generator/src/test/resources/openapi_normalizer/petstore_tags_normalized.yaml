openapi: 3.0.0
info:
  description: This is a sample server Petstore server.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://petstore.swagger.io/v2
tags:
  - description: Everything about your Pets
    name: pet
paths:
  /pet:
    post:
      operationId: addPet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "405":
          description: Invalid input
      tags:
        - pet
    put:
      externalDocs:
        description: API documentation for the updatePet operation
        url: http://petstore.swagger.io/v2/doc/updatePet
      operationId: updatePet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
      tags:
        - pet
  /pet/findByStatus:
    get:
      deprecated: true
      operationId: findPetsByStatus
      parameters:
        - deprecated: true
          explode: true
          in: query
          name: limit
          required: false
          schema:
            type: integer
          style: form
          x-internal: true
        - $ref: "#/components/parameters/offset"
        - deprecated: true
          description: Status values that need to be considered for filter
          explode: false
          in: query
          name: status
          required: true
          schema:
            items:
              default: available
              enum:
                - available
                - pending
                - sold
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      tags:
        - pet
    parameters:
      - deprecated: true
        explode: false
        in: header
        name: role
        required: false
        schema:
          type: string
        style: simple
        x-internal: true
  /pet/findByTags:
    get:
      deprecated: true
      operationId: findPetsByTags
      parameters:
        - description: Tags to filter by
          explode: false
          in: query
          name: tags
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
      tags:
        - pet
  /pet/{petId}:
    delete:
      description: ""
      operationId: deletePet
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Pet id to delete
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "400":
          description: Invalid pet value
      summary: Deletes a pet
      tags:
        - pet
    get:
      operationId: getPetById
      parameters:
        - description: ID of pet to return
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      tags:
        - pet
    post:
      operationId: updatePetWithForm
      parameters:
        - description: ID of pet that needs to be updated
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
              type: object
      responses:
        "405":
          description: Invalid input
      tags:
        - pet
components:
  parameters:
    offset:
      deprecated: true
      explode: true
      in: query
      name: offset
      required: false
      schema:
        type: integer
      style: form
      x-internal: true
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
      description: Pet object that needs to be added to the store
      required: true
  schemas:
    Category:
      description: A category for a pet
      properties:
        id:
          format: int64
          type: integer
        name:
          pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          type: string
      title: Pet category
      type: object
    Tag:
      description: A tag for a pet
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      title: Pet Tag
      type: object
    Pet:
      description: A pet for sale in the pet store
      properties:
        id:
          format: int64
          type: integer
        category:
          $ref: "#/components/schemas/Category"
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
          type: array
        tags:
          items:
            $ref: "#/components/schemas/Tag"
          type: array
        status:
          deprecated: true
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
      required:
        - name
        - photoUrls
      title: a Pet
      type: object
