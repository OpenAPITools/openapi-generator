# coding: utf-8

from __future__ import absolute_import
{{#imports}}{{import}}
{{/imports}}
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


{{#models}}
{{#model}}
class {{classname}}(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

{{#allowableValues}}
    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}
{{/enumVars}}
{{/allowableValues}}

    def __init__(self{{#vars}}, {{name}}{{^supportPython2}}: {{datatype}}{{/supportPython2}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}):
        """
        {{classname}} - a model defined in Swagger

        {{#vars}}
        :param {{name}}: The {{name}} of this {{classname}}.
        :type {{name}}: {{datatype}}
        {{/vars}}
        """
        self.swagger_types = {
            {{#vars}}'{{name}}': {{{datatype}}}{{#hasMore}},
            {{/hasMore}}{{/vars}}
        }

        self.attribute_map = {
            {{#vars}}'{{name}}': '{{baseName}}'{{#hasMore}},
            {{/hasMore}}{{/vars}}
        }

{{#vars}}
        self._{{name}} = {{name}}
{{/vars}}

    @classmethod
    def from_dict(cls, dikt){{^supportPython2}} -> '{{classname}}'{{/supportPython2}}:
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The {{name}} of this {{classname}}.
        :rtype: {{classname}}
        """
        return deserialize_model(dikt, cls)
{{#vars}}{{#-first}}
{{/-first}}
    @property
    def {{name}}(self){{^supportPython2}} -> {{datatype}}{{/supportPython2}}:
        """
        Gets the {{name}} of this {{classname}}.
        {{#description}}
        {{{description}}}
        {{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{datatype}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}{{^supportPython2}}: {{datatype}}{{/supportPython2}}):
        """
        Sets the {{name}} of this {{classname}}.
        {{#description}}
        {{{description}}}
        {{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.
        :type {{name}}: {{datatype}}
        """
{{#isEnum}}
        allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{#isContainer}}
{{#isListContainer}}
        if not set({{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}})-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}}.keys())-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        if {{{name}}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#required}}
        if {{name}} is None:
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")
{{/required}}
{{#hasValidation}}
{{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")
{{/maxLength}}
{{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")
{{/minLength}}
{{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:
            raise ValueError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")
{{/maximum}}
{{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:
            raise ValueError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")
{{/minimum}}
{{#pattern}}
        if {{name}} is not None and not re.search('{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):
            raise ValueError("Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")
{{/pattern}}
{{#maxItems}}
        if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")
{{/maxItems}}
{{#minItems}}
        if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}

        self._{{name}} = {{name}}

{{/vars}}
{{/model}}
{{/models}}
