require "uri"

{{#operations}}
class {{classname}}
  basePath = "{{basePath}}"
  # apiInvoker = APIInvoker
{{#operation}}
{{newline}}
  # {{summary}}
  # {{notes}}
{{#allParams}}{{#required}}  # @param {{paramName}} {{description}}
{{/required}}{{/allParams}}  # @param [Hash] opts the optional parameters
{{#allParams}}{{^required}}  # @option opts [{{dataType}}] :{{paramName}} {{description}}
{{/required}}{{/allParams}}  # @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
  def self.{{nickname}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}opts = {})
    {{#allParams}}{{#required}}
    # verify the required parameter '{{paramName}}' is set
    raise "Missing the required parameter '{{paramName}}' when calling {{nickname}}" if {{{paramName}}}.nil?
    {{/required}}{{/allParams}}

    # resource path
    path = "{{path}}".sub('{format}','json'){{#pathParams}}.sub('{' + '{{baseName}}' + '}', {{paramName}}.to_s){{/pathParams}}

    # query parameters
    query_params = {}{{#queryParams}}{{#required}}
    query_params[:'{{{baseName}}}'] = {{{paramName}}}{{/required}}{{/queryParams}}{{#queryParams}}{{^required}}
    query_params[:'{{{baseName}}}'] = opts[:'{{{paramName}}}'] if opts[:'{{{paramName}}}']{{/required}}{{/queryParams}}

    # header parameters
    header_params = {}

    # HTTP header 'Accept' (if needed)
    _header_accept = [{{#produces}}'{{mediaType}}'{{#hasMore}}, {{/hasMore}}{{/produces}}]
    _header_accept_result = Swagger::Request.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

    # HTTP header 'Content-Type'
    _header_content_type = [{{#consumes}}'{{mediaType}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}]
    header_params['Content-Type'] = Swagger::Request.select_header_content_type(_header_content_type){{#headerParams}}{{#required}}
    header_params[:'{{{baseName}}}'] = {{{paramName}}}{{/required}}{{/headerParams}}{{#headerParams}}{{^required}}
    header_params[:'{{{baseName}}}'] = opts[:'{{{paramName}}}'] if opts[:'{{{paramName}}}']{{/required}}{{/headerParams}}

    # form parameters
    form_params = {}{{#formParams}}{{#required}}
    form_params["{{baseName}}"] = {{paramName}}{{/required}}{{/formParams}}{{#formParams}}{{^required}}
    form_params["{{baseName}}"] = opts[:'{{paramName}}'] if opts[:'{{paramName}}']{{/required}}{{/formParams}}

    # http body (model)
    post_body = nil{{#bodyParam}}
    _body_param = {{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:'{{{paramName}}}']{{/required}}
    if _body_param != nil
      if _body_param.is_a?(Array)
        _array = Array.new
        _body_param.each do |item|
          if item.respond_to?(:to_body)
            _array.push item.to_body
          else
            _array.push item
          end
        end
        post_body = _array
      else 
        if _body_param.respond_to?(:to_body)
          post_body = _body_param.to_body
        else
          post_body = _body_param
        end
      end
    end{{/bodyParam}}

{{#returnType}}
    response = Swagger::Request.new(:{{httpMethod}}, path, {:params => query_params, :headers => header_params, :form_params => form_params, :body => post_body}).make.body
    {{#returnContainer}}response.map {|response| {{/returnContainer}}{{returnBaseType}}.new(response){{#returnContainer}} }{{/returnContainer}}{{/returnType}}{{^returnType}}    Swagger::Request.new(:{{httpMethod}}, path, {:params => query_params,:headers => header_params, :form_params => form_params, :body => post_body}).make{{/returnType}}
  end
{{/operation}}
end
{{/operations}}
