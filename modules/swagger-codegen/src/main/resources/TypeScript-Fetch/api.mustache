import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
{{^supportsES6}}
import * as assign from "core-js/library/fn/object/assign";
{{/supportsES6}}

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(basePath: string = "{{basePath}}", fetch: FetchAPI = isomorphicFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

{{#models}}
{{#model}}
{{#description}}
/**
 * {{{description}}}
 */
{{/description}}
export interface {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
    /**
     * {{{description}}}
     */
{{/description}}
    "{{name}}"{{^required}}?{{/required}}: {{#isEnum}}{{classname}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
export type {{classname}}{{datatypeWithEnum}} = {{#allowableValues}}{{#values}}"{{.}}"{{^-last}} | {{/-last}}{{/values}}{{/allowableValues}};
{{/isEnum}}
{{/vars}}
{{/hasEnums}}
{{/model}}
{{/models}}

{{#apiInfo}}
{{#apis}}
{{#operations}}

{{#description}}
/**
* {{&description}}
*/
{{/description}}
export class {{classname}} extends BaseAPI {
{{#operation}}
    /** {{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }{{/hasParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
{{#allParams}}
{{#required}}
        // verify required parameter "{{paramName}}" is set
        if (params["{{paramName}}"] == null) {
            throw new Error("Missing required parameter {{paramName}} when calling {{nickname}}");
        }
{{/required}}
{{/allParams}}
        const baseUrl = `${this.basePath}{{path}}`{{#pathParams}}
            .replace(`{${"{{baseName}}"}}`, `${ params.{{paramName}} }`){{/pathParams}};
        let urlObj = url.parse(baseUrl, true);
{{#hasQueryParams}}
        urlObj.query = {{#supportsES6}}Object.{{/supportsES6}}assign({}, urlObj.query, { {{#queryParams}}
            "{{baseName}}": params.{{paramName}},{{/queryParams}}
        });
{{/hasQueryParams}}
        let fetchOptions: RequestInit = { method: "{{httpMethod}}" };

        let contentTypeHeader: Dictionary<string>;
{{#hasFormParams}}
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ {{#formParams}}
            "{{baseName}}": params.{{paramName}},{{/formParams}}
        });
{{/hasFormParams}}
{{#hasBodyParam}}
        contentTypeHeader = { "Content-Type": "application/json" };{{#bodyParam}}
        if (params["{{paramName}}"]) {
            fetchOptions.body = JSON.stringify(params["{{paramName}}"] || {});
        }{{/bodyParam}}
{{/hasBodyParam}}
{{#hasHeaderParam}}
        fetchOptions.headers = {{#supportsES6}}Object.{{/supportsES6}}assign({ {{#headerParams}}
            "{{baseName}}": params.{{paramName}},{{/headerParams}}
        }, contentTypeHeader);
{{/hasHeaderParam}}
{{^hasHeaderParam}}
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
{{/hasHeaderParam}}
        return this.fetch(url.format(urlObj), fetchOptions).then((response) => {
            if (response.status >= 200 && response.status < 300) {
                return response{{#returnType}}.json(){{/returnType}};
            } else {
                throw response;
            }
        });
    }
{{/operation}}
}

{{/operations}}
{{/apis}}
{{/apiInfo}}
