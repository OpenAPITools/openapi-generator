import request = require('request');
import promise = require('bluebird');
import http = require('http');

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

{{#models}}
{{#model}}
{{#description}}
/**
* {{{description}}}
*/
{{/description}}
export class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
    /**
    * {{{description}}}
    */
{{/description}}
    {{name}}: {{#isEnum}}{{classname}}.{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}

{{#hasEnums}}
export module {{classname}} {
{{#vars}}
{{#isEnum}}
    export enum {{datatypeWithEnum}} { {{#allowableValues}}{{#values}}
        {{.}} = <any> '{{.}}',{{/values}}{{/allowableValues}}
    }
{{/isEnum}}
{{/vars}}
}
{{/hasEnums}}
{{/model}}
{{/models}}

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export class {{classname}} {
    private basePath = '{{contextPath}}';

    constructor(private url: string, private username: string, private password: string, basePath?: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }
{{#operation}}

    public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : Promise<{ response: http.ClientResponse; {{#returnType}}body: {{{returnType}}}; {{/returnType}} }> {
        var path = this.url + this.basePath + '{{path}}';

{{#pathParams}}
        path = path.replace('{' + '{{paramName}}' + '}', String({{paramName}}));

{{/pathParams}}
        var queryParameters: any = {};
        var headerParams: any = {};

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is set
        if (!{{paramName}}) {
            throw new Error('Missing required parameter {{paramName}} when calling {{nickname}}');
        }

{{/required}}
{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters['{{paramName}}'] = {{paramName}};
        }

{{/queryParams}}
{{#headerParams}}
        headerParams['{{paramName}}'] = {{paramName}};

{{/headerParams}}
        var deferred = promise.defer<{ response: http.ClientResponse; {{#returnType}}body: {{{returnType}}}; {{/returnType}} }>();

        request({
            method: '{{httpMethod}}',
            qs: queryParameters,
            uri: path,
            json: true,
            {{#bodyParam}}body: {{paramName}},
            {{/bodyParam}}
            auth: {
                username: this.username, password: this.password
            }
        }, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}
