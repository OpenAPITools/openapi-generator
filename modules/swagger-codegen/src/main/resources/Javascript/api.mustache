{{=< >=}}(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'<#imports>, '../model/<import>'</imports>], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient')<#imports>, require('../model/<import>')</imports>);
  } else {
    // Browser globals (root is window)
    if (!root.<moduleName>) {
      root.<moduleName> = {};
    }
    root.<moduleName>.<classname> = factory(root.<moduleName>.ApiClient<#imports>, root.<moduleName>.<import></imports>);
  }
}(this, function(ApiClient<#imports>, <import></imports>) {
  'use strict';

  var <classname> = function <classname>(apiClient) {
    this.apiClient = apiClient || ApiClient.default;

    var self = this;
    <#operations>
    <#operation>
    /**
     * <summary>
     * <notes><#allParams>
     * @param {<dataType>} <#required><paramName></required><^required>opts['<paramName>']</required> <description></allParams><^usePromises>
     * @param {function} callback the callback function, accepting three arguments: error, data, response</usePromises><#returnType>
     *   data is of type: <&returnType></returnType>
     */
    self.<nickname> = function(<vendorExtensions.x-codegen-argList>) {<#hasOptionalParams>
      opts = opts || {};</hasOptionalParams>
      var postBody = <#bodyParam><#required><paramName></required><^required>opts['<paramName>']</required></bodyParam><^bodyParam>null</bodyParam>;
      <#allParams><#required>
      // verify the required parameter '<paramName>' is set
      if (<paramName> == null) {
        throw "Missing the required parameter '<paramName>' when calling <nickname>";
      }
      </required></allParams>

      var pathParams = {<#pathParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></pathParams>
      };
      var queryParams = {<#queryParams>
        '<baseName>': <#collectionFormat>this.apiClient.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></queryParams>
      };
      var headerParams = {<#headerParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></headerParams>
      };
      var formParams = {<#formParams>
        '<baseName>': <#collectionFormat>this.apiClient.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></formParams>
      };

      var authNames = [<#authMethods>'<name>'<#hasMore>, </hasMore></authMethods>];
      var contentTypes = [<#consumes>'<mediaType>'<#hasMore>, </hasMore></consumes>];
      var accepts = [<#produces>'<mediaType>'<#hasMore>, </hasMore></produces>];
      var returnType = <#returnType><&returnType></returnType><^returnType>null</returnType>;

      return this.apiClient.callApi(
        '<&path>', '<httpMethod>',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType<^usePromises>, callback</usePromises>
      );

    }
    </operation>
    </operations>
  };

  return <classname>;
}));<={{ }}=>
