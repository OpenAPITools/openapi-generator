{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

{{^parent}}
{{{defaultInclude}}}
#include "ModelBase.h"
{{/parent}}

{{#imports}}{{{this}}}
{{/imports}}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

/// <summary>
/// {{description}}
/// </summary>
class {{declspec}} {{classname}}
    : public {{#parent}}{{{parent}}}{{/parent}}{{^parent}}ModelBase{{/parent}}
{
public:
    {{classname}}();
    virtual ~{{classname}}();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// {{classname}} members

    {{#vars}}
    {{^isInherited}}
    /// <summary>
    /// {{description}}
    /// </summary>
    {{^isNotContainer}}{{{datatype}}}& {{getter}}();
    {{/isNotContainer}}{{#isNotContainer}}{{{datatype}}} {{getter}}() const;
    {{/isNotContainer}}{{^required}}bool {{baseName}}IsSet() const;
    void unset{{name}}();
    {{/required}}
    void {{setter}}({{{datatype}}} value);
    {{/isInherited}}
    {{/vars}}

protected:
    {{#vars}}
    {{^isInherited}}
    {{{datatype}}} m_{{name}};
    {{^required}}bool m_{{name}}IsSet;
    {{/required}}
    {{/isInherited}}
    {{/vars}}
};

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

#endif /* {{classname}}_H_ */
{{/model}}
{{/models}}
