using System;
using System.Collections.Generic;
using RestSharp;
using {{invokerPackage}};
using {{modelPackage}};
{{#imports}}
{{/imports}}

namespace {{package}} {
  {{#operations}}
  public class {{classname}} {
    string basePath;
    public ApiInvoker apiClient {get; set;}

    public {{classname}}(String basePath = "{{basePath}}")
    {
      this.basePath = basePath;
      this.apiClient = new ApiInvoker(basePath);
    }

    /// <summary>
    /// Sets the endpoint base url for the services being accessed
    /// </summary>
    /// <param name="basePath"> Base URL
    /// <returns></returns>
    public void SetBasePath(string basePath) {
      this.basePath = basePath;
    }

    /// <summary>
    /// Gets the endpoint base url for the services being accessed
    /// <returns>Base URL</returns>
    /// </summary>
    public String GetBasePath() {
      return this.basePath;
    }

    {{#operation}}
    
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
{{#allParams}}    /// <param name="{{paramName}}">{{description}}</param>
{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {

      {{#allParams}}{{#required}}
      // verify the required parameter '{{paramName}}' is set
      if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
      {{/required}}{{/allParams}}

      var path = "{{path}}";
      path = path.Replace("{format}", "json");
      {{#pathParams}}path = path.Replace("{" + "{{baseName}}" + "}", apiClient.ParameterToString({{{paramName}}}));
      {{/pathParams}}

      var queryParams = new Dictionary<String, String>();
      var headerParams = new Dictionary<String, String>();
      var formParams = new Dictionary<String, String>();
      var fileParams = new Dictionary<String, String>();
      String postBody = null;

      {{#queryParams}} if ({{paramName}} != null) queryParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // query parameter
      {{/queryParams}}
      {{#headerParams}} if ({{paramName}} != null) headerParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // header parameter
      {{/headerParams}}
      {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", {{paramName}});{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
      {{/formParams}}
      {{#bodyParam}}postBody = apiClient.Serialize({{paramName}}); // http body (model) parameter
      {{/bodyParam}}

      // make the HTTP request
      IRestResponse response = (IRestResponse) apiClient.CallApi("{{path}}", Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams);

      if (((int)response.StatusCode) >= 400) {
        throw new ApiException ((int)response.StatusCode, "Error calling {{nickname}}: " + response.Content);
      }
      {{#returnType}}return ({{{returnType}}}) apiClient.Deserialize(response.Content, typeof({{{returnType}}}));{{/returnType}}{{^returnType}}
      return;{{/returnType}}
    }
    {{/operation}}
  }
  {{/operations}}
}
