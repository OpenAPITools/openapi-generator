<?php
{{#apiInfo}}/**
 * {{appName}}
 * @version {{appVersion}}
 */

$app->get('/', function () use ($app) {
    return $app->version();
});

{{#apis}}
{{#operations}}
{{#operation}}
/**
 * {{httpMethod}} {{nickname}}
 * Summary: {{summary}}
 * Notes: {{notes}}
{{#hasProduces}} * Output-Formats: [{{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}]{{/hasProduces}}
 */
$app->{{httpMethod}}('{{path}}', function({{#pathParams}}${{paramName}}, {{/pathParams}}$null = null) use ($app) {
    $input = Request::all();

    {{#allParams}}
    {{#required}}
    if (!isset($input['{{paramName}}'])) {
        throw new \InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
    }
    {{/required}}
    {{#hasValidation}}
    {{#maxLength}}
    if (strlen($input['{{paramName}}']) > {{maxLength}}) {
        throw new \InvalidArgumentException('invalid length for ${{paramName}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
    }
    {{/maxLength}}
    {{#minLength}}
    if (strlen($input['{{paramName}}']) < {{minLength}}) {
        throw new \InvalidArgumentException('invalid length for ${{paramName}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
    }
    {{/minLength}}
    {{#maximum}}
    if ($input['{{paramName}}'] > {{maximum}}) {
        throw new \InvalidArgumentException('invalid value for ${{paramName}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maximum}}.');
    }
    {{/maximum}}
    {{#minimum}}
    if ($input['{{paramName}}'] < {{minimum}}) {
        throw new \InvalidArgumentException('invalid value for ${{paramName}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minimum}}.');
    }
    {{/minimum}}
    {{#pattern}}
    if (!preg_match("{{pattern}}", $input['{{paramName}}'])) {
        throw new \InvalidArgumentException('invalid value for ${{paramName}} when calling {{classname}}.{{operationId}}, must conform to the pattern {{pattern}}.');
    }
    {{/pattern}}
    {{/hasValidation}}
    ${{paramName}} = $input['{{paramName}}']; 

    {{/allParams}}
    return response('How about implementing {{nickname}} as a {{httpMethod}} method ?');
});

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

