{{#models}}{{#model}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

{{#description}}

/** {{description}} */{{/description}}
{{#isArrayModel}}
public typealias {{classname}} = [{{arrayModelType}}]
{{/isArrayModel}}
{{^isArrayModel}}
{{#isEnum}}
public enum {{classname}}: {{dataType}}, Codable {
{{#allowableValues}}{{#enumVars}}    case {{name}} = "{{{value}}}"
{{/enumVars}}{{/allowableValues}}
}
{{/isEnum}}
{{^isEnum}}

open class {{classname}}: {{#parent}}{{{parent}}}{{/parent}}{{^parent}}Codable{{/parent}} {

{{#vars}}
{{#isEnum}}
    public enum {{enumName}}: {{^isContainer}}{{datatype}}{{/isContainer}}{{#isContainer}}String{{/isContainer}}, Codable { {{#allowableValues}}{{#enumVars}}
        case {{name}} = {{#isContainer}}"{{/isContainer}}{{#isString}}"{{/isString}}{{{value}}}{{#isString}}"{{/isString}}{{#isContainer}}"{{/isContainer}}{{/enumVars}}{{/allowableValues}}
    }
{{/isEnum}}
{{/vars}}
{{#vars}}
{{#isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}public var {{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
{{/isEnum}}
{{^isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}public var {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{#objcCompatible}}{{#vendorExtensions.x-swift-optional-scalar}}
    public var {{name}}Num: NSNumber? {
        get {
            return {{name}}.map({ return NSNumber(value: $0) })
        }
    }{{/vendorExtensions.x-swift-optional-scalar}}{{/objcCompatible}}
{{/isEnum}}
{{/vars}}

{{#additionalPropertiesType}}
    public var additionalProperties: [String:{{{additionalPropertiesType}}}] = [:]

    public subscript(key: String) -> {{{additionalPropertiesType}}}? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }
{{/additionalPropertiesType}}

    {{#hasVars}}
    public init({{#vars}}{{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/vars}}) {
        {{#vars}}
        self.{{name}} = {{name}}
        {{/vars}}
    }
    {{/hasVars}}

    // Encodable protocol methods

    public {{#parent}}override {{/parent}}func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        {{#vars}}
        try container.encode{{#isListContainer}}Array{{/isListContainer}}{{^required}}IfPresent{{/required}}({{{name}}}, forKey: "{{{baseName}}}")
        {{/vars}}
        {{#additionalPropertiesType}}
        try container.encodeMap(additionalProperties)
        {{/additionalPropertiesType}}
    }

    // Decodable protocol methods

    public {{#parent}}override {{/parent}}required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        {{#vars}}
        {{name}} = try container.decode{{#isListContainer}}Array{{/isListContainer}}{{^required}}IfPresent{{/required}}({{#isListContainer}}{{{items.datatype}}}{{/isListContainer}}{{^isListContainer}}{{{datatypeWithEnum}}}{{/isListContainer}}.self, forKey: "{{{baseName}}}")
        {{/vars}}
        {{#additionalPropertiesType}}
        var nonAdditionalPropertyKeys = Set<String>()
        {{#vars}}
        nonAdditionalPropertyKeys.insert("{{{baseName}}}")
        {{/vars}}
        additionalProperties = try container.decodeMap({{{additionalPropertiesType}}}.self, excludedKeys: nonAdditionalPropertyKeys)
        {{/additionalPropertiesType}}
    }
}

{{/isEnum}}
{{/isArrayModel}}
{{/model}}
{{/models}}
