class {{classname}} {{#parentSchema}}extends {{{parent}}} {{/parentSchema}}implements ModelInterface, \ArrayAccess
{
    const DISCRIMINATOR = {{#discriminator}}'{{discriminator}}'{{/discriminator}}{{^discriminator}}null{{/discriminator}};

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = '{{name}}';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [{{#vars}}
        '{{name}}' => ['{{baseName}}', '{{{vendorExtensions.x-fullType}}}', {{#dataFormat}}'{{{dataFormat}}}'{{/dataFormat}}{{^dataFormat}}null{{/dataFormat}}, '{{setter}}', '{{getter}}'],{{/vars}}
    ];
    {{#vars}}{{#isEnum}}

    /**
     * Allowed values of {{name}}
     */{{#allowableValues}}{{#enumVars}}
    const {{enumName}}_{{{name}}} = {{{value}}};{{/enumVars}}{{/allowableValues}}{{/isEnum}}{{/vars}}

    {{#vars}}{{#isEnum}}
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function {{getter}}AllowableValues()
    {
        return [
            {{#allowableValues}}{{#enumVars}}self::{{enumName}}_{{{name}}},{{^-last}}
            {{/-last}}{{/enumVars}}{{/allowableValues}}
        ];
    }
    {{/isEnum}}{{/vars}}
    {{#vars}}
    /**{{#description}}
     * {{description}}
     *
    {{/description}}
     * @var {{{datatype}}}{{^required}}|null{{/required}}
     */
    protected ${{name}};

    {{/vars}}
    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        {{#parentSchema}}
        parent::__construct($data);

        {{/parentSchema}}
        {{#vars}}
        $this->{{name}} = isset($data['{{name}}']) ? $data['{{name}}'] : {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}};
        {{/vars}}
        {{#discriminator}}

        // Initialize discriminator property with the model name.
        foreach (self::$_attributes as $_name => $attribute) {
            list($baseName) = $attribute;
            if ('{{discriminator}}' === $baseName) {
                $this->$_name = static::$_name;
            }
        }
        {{/discriminator}}
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        {{#parent}}
        $invalid_properties = parent::listInvalidProperties();
        {{/parent}}
        {{^parent}}
        $invalid_properties = [];
        {{/parent}}

        {{#vars}}
        {{#required}}
        if ($this->{{name}} === null) {
            $invalid_properties[] = "'{{name}}' can't be null";
        }
        {{/required}}
        {{#isEnum}}
        {{^isContainer}}
        $allowedValues = $this->{{getter}}AllowableValues();
        if (!in_array($this->{{name}}, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for '{{name}}', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        {{/isContainer}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}(strlen($this->{{name}}) > {{maxLength}})) {
            $invalid_properties[] = "invalid value for '{{name}}', the character length must be smaller than or equal to {{{maxLength}}}.";
        }

        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}(strlen($this->{{name}}) < {{minLength}})) {
            $invalid_properties[] = "invalid value for '{{name}}', the character length must be bigger than or equal to {{{minLength}}}.";
        }

        {{/minLength}}
        {{#maximum}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}($this->{{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}})) {
            $invalid_properties[] = "invalid value for '{{name}}', must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.";
        }

        {{/maximum}}
        {{#minimum}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}($this->{{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}})) {
            $invalid_properties[] = "invalid value for '{{name}}', must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.";
        }

        {{/minimum}}
        {{#pattern}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}!preg_match("{{{pattern}}}", $this->{{name}})) {
            $invalid_properties[] = "invalid value for '{{name}}', must be conform to the pattern {{{pattern}}}.";
        }

        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}(count($this->{{name}}) > {{maxItems}})) {
            $invalid_properties[] = "invalid value for '{{name}}', number of items must be less than or equal to {{{maxItems}}}.";
        }

        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}!is_null($this->{{name}}) && {{/required}}(count($this->{{name}}) < {{minItems}})) {
            $invalid_properties[] = "invalid value for '{{name}}', number of items must be greater than or equal to {{{minItems}}}.";
        }

        {{/minItems}}
        {{/hasValidation}}
        {{/vars}}
        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        {{#parentSchema}}return array_merge(parent::$_attributes, self::$_attributes);{{/parentSchema}}
        {{^parentSchema}}return self::$_attributes;{{/parentSchema}}
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        {{#parent}}
        if (!parent::isValid()) {
            return false;
        }

        {{/parent}}
        {{#vars}}
        {{#required}}
        if ($this->{{name}} === null) {
            return false;
        }
        {{/required}}
        {{#isEnum}}
        {{^isContainer}}
        $allowedValues = $this->{{getter}}AllowableValues();
        if (!in_array($this->{{name}}, $allowedValues)) {
            return false;
        }
        {{/isContainer}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if (strlen($this->{{name}}) > {{maxLength}}) {
            return false;
        }
        {{/maxLength}}
        {{#minLength}}
        if (strlen($this->{{name}}) < {{minLength}}) {
            return false;
        }
        {{/minLength}}
        {{#maximum}}
        if ($this->{{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            return false;
        }
        {{/maximum}}
        {{#minimum}}
        if ($this->{{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            return false;
        }
        {{/minimum}}
        {{#pattern}}
        if (!preg_match("{{{pattern}}}", $this->{{name}})) {
            return false;
        }
        {{/pattern}}
        {{#maxItems}}
        if (count($this->{{name}}) > {{maxItems}}) {
            return false;
        }
        {{/maxItems}}
        {{#minItems}}
        if (count($this->{{name}}) < {{minItems}}) {
            return false;
        }
        {{/minItems}}
        {{/hasValidation}}
        {{/vars}}
        return true;
    }

    {{#vars}}

    /**
     * Gets {{name}}.
     *
     * @return {{{datatype}}}{{^required}}|null{{/required}}
     */
    public function {{getter}}()
    {
        return $this->{{name}};
    }

    /**
     * Sets {{name}}.
     *
     * @param {{{datatype}}}{{^required}}|null{{/required}} ${{name}}{{#description}}  {{{description}}}{{/description}}
     *
     * @return $this
     */
    public function {{setter}}({{#vendorExtensions.x-typeAnnotation}}{{vendorExtensions.x-typeAnnotation}} {{/vendorExtensions.x-typeAnnotation}}${{name}}{{^required}} = null{{/required}})
    {
        {{#isEnum}}
        $allowedValues = $this->{{getter}}AllowableValues();
        {{^isContainer}}
        if ({{^required}}${{name}} !== null && {{/required}}!in_array(${{{name}}}, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for '{{name}}', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        {{/isContainer}}
        {{#isContainer}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}array_diff(${{{name}}}, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for '{{name}}', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        {{/isContainer}}
        {{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(strlen(${{name}}) > {{maxLength}})) {
            throw new \InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }{{/maxLength}}
        {{#minLength}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(strlen(${{name}}) < {{minLength}})) {
            throw new \InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(${{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}})) {
            throw new \InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(${{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}})) {
            throw new \InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(!preg_match("{{{pattern}}}", ${{name}}))) {
            throw new \InvalidArgumentException("invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(count(${{name}}) > {{maxItems}})) {
            throw new \InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }{{/maxItems}}
        {{#minItems}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}(count(${{name}}) < {{minItems}})) {
            throw new \InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}
        {{/hasValidation}}
        $this->{{name}} = ${{name}};

        return $this;
    }
    {{/vars}}
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}
