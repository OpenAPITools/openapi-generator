// Extensions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit
import SwiftyJSON

extension Bool: JSONEncodable {
    func encode() -> AnyObject { return self }
}

extension Float: JSONEncodable {
    func encode() -> AnyObject { return self }
}

extension Int: JSONEncodable {
    func encode() -> AnyObject { return self }
}

extension Double: JSONEncodable {
    func encode() -> AnyObject { return self }
}

extension String: JSONEncodable {
    func encode() -> AnyObject { return self }
}

extension Array: JSONEncodable {
    func encode() -> AnyObject {
        if Element.self is JSONEncodable {
            return self.map { ($0 as! JSONEncodable).encode() }
        } else {
            return self.map { ($0 as! AnyObject) }
        }
    }
}

extension JSON {
    func decode() -> Bool? {
        return self.bool
    }
    func decode() -> Bool {
        return self.boolValue
    }
    func decode() -> Int? {
        return self.int
    }
    func decode() -> Int {
        return self.intValue
    }
    func decode() -> Float? {
        return self.float
    }
    func decode() -> Float {
        return self.floatValue
    }
    func decode() -> Double? {
        return self.double
    }
    func decode() -> Double {
        return self.doubleValue
    }
    func decode() -> String? {
        return self.string
    }
    func decode() -> String {
        return self.stringValue
    }
    func decode<T>() -> [T]? {
        return self.array?.map({ $0 as! T })
    }
    static let DateFormat: NSDateFormatter = {
        let formatter = NSDateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss'Z'"
        return formatter
    }()
    func decode() -> NSDate? {
        return JSON.DateFormat.dateFromString(self.string ?? "")
    }
    func decode() -> NSData? {
        return self.rawData(options: .allZeros, error: nil)
    }
    func decode() -> NSData {
        return self.decode()!
    }
}

