<?php
{{#models}}
{{#model}}
/**
 * {{classname}}
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{modelPackage}};

use \ArrayAccess;
/**
 * {{classname}} Class Doc Comment
 *
 * @category    Class
 * @description {{description}}
 * @package     {{invokerPackage}}
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = '{{name}}';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        {{#vars}}'{{name}}' => '{{{datatype}}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes{{#parent}} + parent::swaggerTypes(){{/parent}};
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        {{#vars}}'{{name}}' => '{{baseName}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    );
  
    static function attributeMap() {
        return {{#parent}}parent::attributeMap() + {{/parent}}self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        {{#vars}}'{{name}}' => '{{setter}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    );
  
    static function setters() {
        return {{#parent}}parent::setters() + {{/parent}}self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        {{#vars}}'{{name}}' => '{{getter}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    );
  
    static function getters() {
        return {{#parent}}parent::getters() + {{/parent}}self::$getters;
    }

    {{#vars}}
    /**
      * ${{name}} {{#description}}{{{description}}}{{/description}}
      * @var {{datatype}}
      */
    protected ${{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
    {{/vars}}

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        {{#parent}}parent::__construct($data);{{/parent}}
        {{#discriminator}}// Initialize discriminator property with the model name.
        $discrimintor = array_search('{{discriminator}}', self::$attributeMap);
        $this->{$discrimintor} = static::$swaggerModelName;
        {{/discriminator}}

        if ($data != null) {
            {{#vars}}
            if (isset($data["{{name}}"])) {
                $this->{{name}} = $data["{{name}}"];
            }{{#hasMore}}{{/hasMore}}
            {{/vars}}
        }
    }

    /**
     * show all the invalid properties with reasons.
     * 
     * @return array invalid properties with reasons
     */
    public function list_invalid_properties()
    {
        $invalid_properties = array();
        {{#vars}}{{#required}}
        if ($this->{{name}} === null) {
            $invalid_properties[] = "'${{name}}' can't be null";
        }{{/required}}
        {{#isEnum}}$allowed_values = array({{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}});
        if (!in_array($this->{{name}}, $allowed_values))) {
            $invalid_properties[] = "invalid value for '${{name}}', must be one of #{allowed_values}.";
        }{{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if (strlen($this->{{name}}) > {{maxLength}}) {
            $invalid_properties[] = "invalid value for '${{name}}', the character length must be smaller than or equal to {{{maxLength}}}.";
        }
        {{/maxLength}}
        {{#minLength}}
        if (strlen($this->{{name}}) < {{minLength}}) {
            $invalid_properties[] = "invalid value for '${{name}}', the character length must be bigger than or equal to {{{minLength}}}.";
        }
        {{/minLength}}
        {{#maximum}}
        if ($this->{{name}} > {{maximum}}) {
            $invalid_properties[] = "invalid value for '${{name}}', must be smaller than or equal to {{maximum}}.";
        }
        {{/maximum}}
        {{#minimum}}
        if ($this->{{name}} < {{minimum}}) {
            $invalid_properties[] = "invalid value for '${{name}}', must be bigger than or equal to {{minimum}}.";
        }
        {{/minimum}}
        {{#pattern}}
        if (!preg_match("{{pattern}}", $this->{{name}})) {
            $invalid_properties[] = "invalid value for '${{name}}', must be conform to the pattern {{pattern}}.";
        }
        {{/pattern}}{{/hasValidation}}{{/vars}}
        return $invalid_properties;
    }

    /**
     * validate all the parameters in the model
     * return true if all passed
     * 
     * @return bool [description]
     */
    public function valid()
    {
        {{#vars}}{{#required}}
        if ($this->{{name}} === null) {
            return false;
        }{{/required}}
        {{#isEnum}}$allowed_values = array({{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}});
        if (!in_array($this->{{name}}, $allowed_values))) {
            return false;
        }{{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if (strlen($this->{{name}}) > {{maxLength}}) {
            return false;
        }
        {{/maxLength}}
        {{#minLength}}
        if (strlen($this->{{name}}) < {{minLength}}) {
            return false;
        }
        {{/minLength}}
        {{#maximum}}
        if ($this->{{name}} > {{maximum}}) {
            return false;
        }
        {{/maximum}}
        {{#minimum}}
        if ($this->{{name}} < {{minimum}}) {
            return false;
        }
        {{/minimum}}
        {{#pattern}}
        if (!preg_match("{{pattern}}", $this->{{name}})) {
            return false;
        }
        {{/pattern}}{{/hasValidation}}{{/vars}}
        return true;
    }


    {{#vars}}
    /**
     * Gets {{name}}
     * @return {{datatype}}
     */
    public function {{getter}}()
    {
        return $this->{{name}};
    }
  
    /**
     * Sets {{name}}
     * @param {{datatype}} ${{name}} {{#description}}{{{description}}}{{/description}}
     * @return $this
     */
    public function {{setter}}(${{name}})
    {
        {{#isEnum}}$allowed_values = array({{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}});
        if (!in_array(${{{name}}}, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for '{{name}}', must be one of {{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}");
        }{{/isEnum}}
        {{#hasValidation}}
        {{#maxLength}}
        if (strlen(${{name}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }{{/maxLength}}
        {{#minLength}}
        if (strlen(${{name}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if (${{name}} > {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if (${{name}} < {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if (!preg_match("{{pattern}}", ${{name}})) {
            throw new \InvalidArgumentException('invalid value for ${{name}} when calling {{classname}}.{{operationId}}, must be conform to the pattern {{pattern}}.');
        }
        {{/pattern}}{{/hasValidation}}
        $this->{{name}} = ${{name}};
        return $this;
    }
    {{/vars}}
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\{{invokerPackage}}\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\{{invokerPackage}}\ObjectSerializer::sanitizeForSerialization($this));
    }
}
{{/model}}
{{/models}}
