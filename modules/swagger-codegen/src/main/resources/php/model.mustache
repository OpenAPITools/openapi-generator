<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

{{#models}}
{{#model}}
/**
 * {{description}}
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace {{modelPackage}};

use \ArrayAccess;

class {{classname}} implements ArrayAccess {
  /** @var string[] Array of property to type mappings. Used for (de)serialization */
  static $swaggerTypes = array(
      {{#vars}}'{{name}}' => '{{{datatype}}}'{{#hasMore}},
      {{/hasMore}}{{/vars}}
  );

  /** @var string[] Array of attributes where the key is the local name, and the value is the original name */
  static $attributeMap = array(
      {{#vars}}'{{name}}' => '{{baseName}}'{{#hasMore}},
      {{/hasMore}}{{/vars}}
  );

  /** @var string[] Array of attributes to setter functions (for deserialization of responses) */
  static $setters = array(
    {{#vars}}'{{name}}' => '{{setter}}'{{#hasMore}},
    {{/hasMore}}{{/vars}}
  );

  /** @var string[] Array of attributes to getter functions (for serialization of requests) */
  static $getters = array(
    {{#vars}}'{{name}}' => '{{getter}}'{{#hasMore}},
    {{/hasMore}}{{/vars}}
  );

  {{#vars}}
  /** @var {{datatype}} ${{name}} {{#description}}{{{description}}} {{/description}}*/
  protected ${{name}};
  {{/vars}}
  public function __construct(array $data = null) {
    if ($data != null) {
      {{#vars}}$this->{{name}} = $data["{{name}}"];{{#hasMore}}
      {{/hasMore}}{{/vars}}
    }
  }
  {{#vars}}
  /**
   * get {{name}}
   * @return {{datatype}}
   */
  public function {{getter}}() {
    return $this->{{name}};
  }

  /**
   * set {{name}}
   * @param {{datatype}} ${{name}}
   * @return $this
   */
  public function {{setter}}(${{name}}) {
    $this->{{name}} = ${{name}};
    return $this;
  }
  {{/vars}}
  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }

  public function __toString() {
    if (defined('JSON_PRETTY_PRINT')) {
      return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
    } else {
      return json_encode(get_object_vars($this));
    }
  }
}
{{/model}}
{{/models}}
