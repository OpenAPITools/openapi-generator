using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Sharpility.Extensions;
using NodaTime;

{{#models}}
{{#model}}
namespace {{packageName}}.{{packageContext}}.Models
{   {{#vars}}{{#isEnum}}
    {{>innerModelEnum}}{{/isEnum}}{{#items.isEnum}}
    {{#items}}{{>innerModelEnum}}{{/items}}{{/items.isEnum}}{{/vars}}

    public sealed class {{classname}}: {{#parent}}{{{parent}}}, {{/parent}} IEquatable<{{classname}}>
    { {{#vars}}
        public {{>nullableDataType}} {{name}} { get; private set; }{{/vars}}

        public {{classname}}({{#vars}}{{>nullableDataType}} {{name}}{{#hasMore}}, {{/hasMore}}{{/vars}})
        {
            {{#vars}}
            this.{{name}} = {{name}};
            {{/vars}}
        }

        public static {{classname}}Builder Builder()
        {
            return new {{classname}}Builder();
        }

        public {{classname}}Builder With()
        {
            return Builder()
            {{#vars}}
                .{{name}}({{name}}){{#hasMore}}
{{/hasMore}}{{/vars}};
        }

        public override string ToString()
        {
            return this.PropertiesToString();
        }

        public override bool Equals(object obj)
        {
            return this.EqualsByProperties(obj);
        }

        public bool Equals({{classname}} other)
        {
            return Equals((object) other);
        }

        public override int GetHashCode()
        {
            return this.PropertiesHash();
        }

        public static bool operator == ({{classname}} left, {{classname}} right)
        {
            return Equals(left, right);
        }

        public static bool operator != ({{classname}} left, {{classname}} right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Builder of {{classname}} model
        /// </summary>
        public sealed class {{classname}}Builder
        {
            {{#vars}}
            private {{>nullableDataType}} _{{name}};
            {{/vars}}

            internal {{classname}}Builder()
            {
                SetupDefaults();
            }

            private void SetupDefaults()
            {
                {{#vars}}
                {{^required}}
                {{#defaultValue}}
                _{{name}} = {{{defaultValue}}};
                {{/defaultValue}}
                {{/required}}
                {{/vars}}
            }

            {{#vars}}
            public {{classname}}Builder {{name}}({{>nullableDataType}} value)
            {
                _{{name}} = value;
                return this;
            }

            {{/vars}}

            public {{classname}} Build()
            {
                Validate();
                return new {{classname}}(
                    {{#vars}}
                    {{name}}: _{{name}}{{#hasMore}},{{/hasMore}}
                    {{/vars}}
                );
            }

            private void Validate()
            {
                {{#vars}}{{#required}}
                if (_{{name}} == null)
                {
                    throw new ArgumentException("{{name}} is a required property for {{classname}} and cannot be null");
                }
                {{/required}}{{/vars}}
            }
        }
    }
{{/model}}
{{/models}}
}
