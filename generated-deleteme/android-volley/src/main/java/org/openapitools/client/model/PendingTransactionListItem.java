/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * A list of pending Transactions
 **/
@ApiModel(description = "A list of pending Transactions")
public class PendingTransactionListItem {
  
  @SerializedName("accountId")
  private String accountId = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("merchantName")
  private String merchantName = null;
  @SerializedName("availabilityDate")
  private Date availabilityDate = null;
  @SerializedName("amount")
  private BigDecimal amount = null;
  public enum UncollectedFundsTypeEnum {
     Hold,  Float,  Memo-Float, 
  };
  @SerializedName("uncollectedFundsType")
  private UncollectedFundsTypeEnum uncollectedFundsType = null;

  /**
   * The id of the account the transaction is for
   **/
  @ApiModelProperty(required = true, value = "The id of the account the transaction is for")
  public String getAccountId() {
    return accountId;
  }
  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  /**
   * The description of the transaction
   **/
  @ApiModelProperty(required = true, value = "The description of the transaction")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * The merchant Name of the transaction
   **/
  @ApiModelProperty(value = "The merchant Name of the transaction")
  public String getMerchantName() {
    return merchantName;
  }
  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }

  /**
   * The date-time the funds will become available (the hold will be released).
   **/
  @ApiModelProperty(value = "The date-time the funds will become available (the hold will be released).")
  public Date getAvailabilityDate() {
    return availabilityDate;
  }
  public void setAvailabilityDate(Date availabilityDate) {
    this.availabilityDate = availabilityDate;
  }

  /**
   * The amount of the transaction
   **/
  @ApiModelProperty(required = true, value = "The amount of the transaction")
  public BigDecimal getAmount() {
    return amount;
  }
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  /**
   * Indicates the type of uncollected funds.
   **/
  @ApiModelProperty(required = true, value = "Indicates the type of uncollected funds.")
  public UncollectedFundsTypeEnum getUncollectedFundsType() {
    return uncollectedFundsType;
  }
  public void setUncollectedFundsType(UncollectedFundsTypeEnum uncollectedFundsType) {
    this.uncollectedFundsType = uncollectedFundsType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingTransactionListItem pendingTransactionListItem = (PendingTransactionListItem) o;
    return (this.accountId == null ? pendingTransactionListItem.accountId == null : this.accountId.equals(pendingTransactionListItem.accountId)) &&
        (this.description == null ? pendingTransactionListItem.description == null : this.description.equals(pendingTransactionListItem.description)) &&
        (this.merchantName == null ? pendingTransactionListItem.merchantName == null : this.merchantName.equals(pendingTransactionListItem.merchantName)) &&
        (this.availabilityDate == null ? pendingTransactionListItem.availabilityDate == null : this.availabilityDate.equals(pendingTransactionListItem.availabilityDate)) &&
        (this.amount == null ? pendingTransactionListItem.amount == null : this.amount.equals(pendingTransactionListItem.amount)) &&
        (this.uncollectedFundsType == null ? pendingTransactionListItem.uncollectedFundsType == null : this.uncollectedFundsType.equals(pendingTransactionListItem.uncollectedFundsType));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.accountId == null ? 0: this.accountId.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.merchantName == null ? 0: this.merchantName.hashCode());
    result = 31 * result + (this.availabilityDate == null ? 0: this.availabilityDate.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.uncollectedFundsType == null ? 0: this.uncollectedFundsType.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingTransactionListItem {\n");
    
    sb.append("  accountId: ").append(accountId).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  merchantName: ").append(merchantName).append("\n");
    sb.append("  availabilityDate: ").append(availabilityDate).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  uncollectedFundsType: ").append(uncollectedFundsType).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
