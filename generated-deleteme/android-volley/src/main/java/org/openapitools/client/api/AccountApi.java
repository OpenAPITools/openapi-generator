/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AcceptInviteRequest;
import org.openapitools.client.model.AccountInvite;
import org.openapitools.client.model.AccountInviteResponse;
import org.openapitools.client.model.BadRequestError;
import java.math.BigDecimal;
import java.util.Date;
import org.openapitools.client.model.ForbiddenError;
import org.openapitools.client.model.InternalServerError;
import org.openapitools.client.model.InviteResponse;
import org.openapitools.client.model.NotFoundError;
import org.openapitools.client.model.PendingTransactionList;
import org.openapitools.client.model.TransactionList;
import org.openapitools.client.model.TransactionPage;
import org.openapitools.client.model.UnauthorizedAltError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccountApi {
  String basePath = "https://sim.nonprod.gbcloud.com.au/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Delete an account invite
  * Delete an account invite
   * @param inviteCode 
   * @return void
  */
  public void deleteV1AccountInviteInviteCode (String inviteCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'inviteCode' is set
    if (inviteCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteCode' when calling deleteV1AccountInviteInviteCode",
        new ApiException(400, "Missing the required parameter 'inviteCode' when calling deleteV1AccountInviteInviteCode"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteCode}".replaceAll("\\{" + "inviteCode" + "\\}", apiInvoker.escapeString(inviteCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an account invite
   * Delete an account invite
   * @param inviteCode 
  */
  public void deleteV1AccountInviteInviteCode (String inviteCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'inviteCode' is set
    if (inviteCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteCode' when calling deleteV1AccountInviteInviteCode",
        new ApiException(400, "Missing the required parameter 'inviteCode' when calling deleteV1AccountInviteInviteCode"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "inviteCode" + "\\}", apiInvoker.escapeString(inviteCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * A list of pending transactions
  * Returns all pending (aka on-hold or authorisation) transactions for a given account.
   * @param accountId The account Id is in the form &lt;account_type&gt;-&lt;account_number&gt;.
   * @return PendingTransactionList
  */
  public PendingTransactionList getV1AccountsAccountIdPendingTransactions (String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV1AccountsAccountIdPendingTransactions",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV1AccountsAccountIdPendingTransactions"));
    }

    // create path and map variables
    String path = "/v1/accounts/{accountId}/pending-transactions".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PendingTransactionList) ApiInvoker.deserialize(localVarResponse, "", PendingTransactionList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * A list of pending transactions
   * Returns all pending (aka on-hold or authorisation) transactions for a given account.
   * @param accountId The account Id is in the form &lt;account_type&gt;-&lt;account_number&gt;.
  */
  public void getV1AccountsAccountIdPendingTransactions (String accountId, final Response.Listener<PendingTransactionList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV1AccountsAccountIdPendingTransactions",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV1AccountsAccountIdPendingTransactions"));
    }

    // create path and map variables
    String path = "/v1/accounts/{accountId}/pending-transactions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PendingTransactionList) ApiInvoker.deserialize(localVarResponse,  "", PendingTransactionList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GET request for joint account invitation
  * Get joint account invitation 
   * @param inviteCode 
   * @return InviteResponse
  */
  public InviteResponse getV1InviteCode (String inviteCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'inviteCode' is set
    if (inviteCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteCode' when calling getV1InviteCode",
        new ApiException(400, "Missing the required parameter 'inviteCode' when calling getV1InviteCode"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteCode}".replaceAll("\\{" + "inviteCode" + "\\}", apiInvoker.escapeString(inviteCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InviteResponse) ApiInvoker.deserialize(localVarResponse, "", InviteResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GET request for joint account invitation
   * Get joint account invitation 
   * @param inviteCode 
  */
  public void getV1InviteCode (String inviteCode, final Response.Listener<InviteResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'inviteCode' is set
    if (inviteCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteCode' when calling getV1InviteCode",
        new ApiException(400, "Missing the required parameter 'inviteCode' when calling getV1InviteCode"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "inviteCode" + "\\}", apiInvoker.escapeString(inviteCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InviteResponse) ApiInvoker.deserialize(localVarResponse,  "", InviteResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * A list of pending transactions filtered by description (if provided)
  * Returns all pending (aka on-hold or authorisation) transactions for a given account. The transactons can be filtered based on the query parameters.
   * @param accountId 
   * @param descriptionFilter Only return transactions who&#39;s description contains this text.  The text is URL encoded.
   * @param minimumAmount The desired amount, or low amount for a range inquiry.
   * @param maximumAmount The high amount for a range inquiry.
   * @return PendingTransactionList
  */
  public PendingTransactionList getV2PendingTransactions (String accountId, String descriptionFilter, BigDecimal minimumAmount, BigDecimal maximumAmount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV2PendingTransactions",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV2PendingTransactions"));
    }

    // create path and map variables
    String path = "/v2/accounts/{accountId}/pending-transactions".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "descriptionFilter", descriptionFilter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minimumAmount", minimumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maximumAmount", maximumAmount));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PendingTransactionList) ApiInvoker.deserialize(localVarResponse, "", PendingTransactionList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * A list of pending transactions filtered by description (if provided)
   * Returns all pending (aka on-hold or authorisation) transactions for a given account. The transactons can be filtered based on the query parameters.
   * @param accountId    * @param descriptionFilter Only return transactions who&#39;s description contains this text.  The text is URL encoded.   * @param minimumAmount The desired amount, or low amount for a range inquiry.   * @param maximumAmount The high amount for a range inquiry.
  */
  public void getV2PendingTransactions (String accountId, String descriptionFilter, BigDecimal minimumAmount, BigDecimal maximumAmount, final Response.Listener<PendingTransactionList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV2PendingTransactions",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV2PendingTransactions"));
    }

    // create path and map variables
    String path = "/v2/accounts/{accountId}/pending-transactions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "descriptionFilter", descriptionFilter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minimumAmount", minimumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maximumAmount", maximumAmount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PendingTransactionList) ApiInvoker.deserialize(localVarResponse,  "", PendingTransactionList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a list transactions
  * Get a list transactions. The transactions can be filtered based on the query parameters.
   * @param accountId The account Id is in the form &lt;account_type&gt;-&lt;account_number&gt;.
   * @param descriptionFilter Only return transactions who&#39;s description contains this text.  The text is URL encoded.
   * @param startDate The low date selection for a date range inquiry (inclusive).
   * @param endDate The high date selection for a date range inquiry
   * @param minimumAmount The desired amount, or low amount for a range inquiry.
   * @param maximumAmount The high amount for a range inquiry.
   * @param transactionType The transaction type to filter on.
   * @param orderDescending Transactions returned ordered by newest execution to oldest execution.  Defaults to true.
   * @return TransactionList
  */
  public TransactionList getV3Transactions (String accountId, String descriptionFilter, Date startDate, Date endDate, Double minimumAmount, Double maximumAmount, String transactionType, Boolean orderDescending) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV3Transactions",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV3Transactions"));
    }

    // create path and map variables
    String path = "/v3/accounts/{accountId}/transactions".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "descriptionFilter", descriptionFilter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minimumAmount", minimumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maximumAmount", maximumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transactionType", transactionType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "orderDescending", orderDescending));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionList) ApiInvoker.deserialize(localVarResponse, "", TransactionList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a list transactions
   * Get a list transactions. The transactions can be filtered based on the query parameters.
   * @param accountId The account Id is in the form &lt;account_type&gt;-&lt;account_number&gt;.   * @param descriptionFilter Only return transactions who&#39;s description contains this text.  The text is URL encoded.   * @param startDate The low date selection for a date range inquiry (inclusive).   * @param endDate The high date selection for a date range inquiry   * @param minimumAmount The desired amount, or low amount for a range inquiry.   * @param maximumAmount The high amount for a range inquiry.   * @param transactionType The transaction type to filter on.   * @param orderDescending Transactions returned ordered by newest execution to oldest execution.  Defaults to true.
  */
  public void getV3Transactions (String accountId, String descriptionFilter, Date startDate, Date endDate, Double minimumAmount, Double maximumAmount, String transactionType, Boolean orderDescending, final Response.Listener<TransactionList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV3Transactions",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV3Transactions"));
    }

    // create path and map variables
    String path = "/v3/accounts/{accountId}/transactions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "descriptionFilter", descriptionFilter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minimumAmount", minimumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maximumAmount", maximumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transactionType", transactionType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "orderDescending", orderDescending));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionList) ApiInvoker.deserialize(localVarResponse,  "", TransactionList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a list transactions, returned as paged results.
  * Get a paginated list of transactions. The transactions can be filtered based on the query parameters. When getting paged results, pass the pageSize, pageNumber, previousRequestId (unless it&#39;s the first page). Also, the other filters (startDate, endDate, minimumAmount, maximumAmount, transactionType) can be used with paging searches; but if used on the first page, they must be submitted for each page request. The descriptionFilter cannot be used in conjunction with paging requests.
   * @param accountId The account Id is in the form &lt;account_type&gt;-&lt;account_number&gt;.
   * @param pageNumber The page number to start listing transactions from (starting from page 1)
   * @param pageSize The number of transactions to include in the listing (not completely respected)
   * @param previousRequestId The request id of the first page request (if not the first request)
   * @param startDate The low date selection for a date range inquiry (inclusive).
   * @param endDate The high date selection for a date range inquiry
   * @param minimumAmount The desired amount, or low amount for a range inquiry.
   * @param maximumAmount The high amount for a range inquiry.
   * @param transactionType The transaction type to filter on.
   * @param orderDescending Transactions returned ordered by newest execution to oldest execution.  Defaults to true.
   * @return TransactionPage
  */
  public TransactionPage getV3TransactionsPaged (String accountId, Integer pageNumber, Integer pageSize, String previousRequestId, Date startDate, Date endDate, Double minimumAmount, Double maximumAmount, String transactionType, Boolean orderDescending) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV3TransactionsPaged",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV3TransactionsPaged"));
    }

    // create path and map variables
    String path = "/v3/accounts/{accountId}/transactions/paginated".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageNumber", pageNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "previousRequestId", previousRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minimumAmount", minimumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maximumAmount", maximumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transactionType", transactionType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "orderDescending", orderDescending));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionPage) ApiInvoker.deserialize(localVarResponse, "", TransactionPage.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a list transactions, returned as paged results.
   * Get a paginated list of transactions. The transactions can be filtered based on the query parameters. When getting paged results, pass the pageSize, pageNumber, previousRequestId (unless it&#39;s the first page). Also, the other filters (startDate, endDate, minimumAmount, maximumAmount, transactionType) can be used with paging searches; but if used on the first page, they must be submitted for each page request. The descriptionFilter cannot be used in conjunction with paging requests.
   * @param accountId The account Id is in the form &lt;account_type&gt;-&lt;account_number&gt;.   * @param pageNumber The page number to start listing transactions from (starting from page 1)   * @param pageSize The number of transactions to include in the listing (not completely respected)   * @param previousRequestId The request id of the first page request (if not the first request)   * @param startDate The low date selection for a date range inquiry (inclusive).   * @param endDate The high date selection for a date range inquiry   * @param minimumAmount The desired amount, or low amount for a range inquiry.   * @param maximumAmount The high amount for a range inquiry.   * @param transactionType The transaction type to filter on.   * @param orderDescending Transactions returned ordered by newest execution to oldest execution.  Defaults to true.
  */
  public void getV3TransactionsPaged (String accountId, Integer pageNumber, Integer pageSize, String previousRequestId, Date startDate, Date endDate, Double minimumAmount, Double maximumAmount, String transactionType, Boolean orderDescending, final Response.Listener<TransactionPage> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getV3TransactionsPaged",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getV3TransactionsPaged"));
    }

    // create path and map variables
    String path = "/v3/accounts/{accountId}/transactions/paginated".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageNumber", pageNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "previousRequestId", previousRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endDate", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minimumAmount", minimumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maximumAmount", maximumAmount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transactionType", transactionType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "orderDescending", orderDescending));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionPage) ApiInvoker.deserialize(localVarResponse,  "", TransactionPage.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Regenerate an invite code for an existing invite
  * Regenerate an invite for an existing invite
   * @param inviteId 
   * @return AccountInviteResponse
  */
  public AccountInviteResponse postV1AccountInviteRegenerate (String inviteId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'inviteId' is set
    if (inviteId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteId' when calling postV1AccountInviteRegenerate",
        new ApiException(400, "Missing the required parameter 'inviteId' when calling postV1AccountInviteRegenerate"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteId}/regenerate".replaceAll("\\{" + "inviteId" + "\\}", apiInvoker.escapeString(inviteId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountInviteResponse) ApiInvoker.deserialize(localVarResponse, "", AccountInviteResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Regenerate an invite code for an existing invite
   * Regenerate an invite for an existing invite
   * @param inviteId 
  */
  public void postV1AccountInviteRegenerate (String inviteId, final Response.Listener<AccountInviteResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'inviteId' is set
    if (inviteId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteId' when calling postV1AccountInviteRegenerate",
        new ApiException(400, "Missing the required parameter 'inviteId' when calling postV1AccountInviteRegenerate"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteId}/regenerate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "inviteId" + "\\}", apiInvoker.escapeString(inviteId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountInviteResponse) ApiInvoker.deserialize(localVarResponse,  "", AccountInviteResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Request to accept an invite
   * @param inviteId 
   * @param acceptInviteRequest 
   * @return void
  */
  public void postV1InviteCodeAccept (String inviteId, AcceptInviteRequest acceptInviteRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = acceptInviteRequest;
    // verify the required parameter 'inviteId' is set
    if (inviteId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteId' when calling postV1InviteCodeAccept",
        new ApiException(400, "Missing the required parameter 'inviteId' when calling postV1InviteCodeAccept"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteId}/accept".replaceAll("\\{" + "inviteId" + "\\}", apiInvoker.escapeString(inviteId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Request to accept an invite
   * @param inviteId    * @param acceptInviteRequest 
  */
  public void postV1InviteCodeAccept (String inviteId, AcceptInviteRequest acceptInviteRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = acceptInviteRequest;

    // verify the required parameter 'inviteId' is set
    if (inviteId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inviteId' when calling postV1InviteCodeAccept",
        new ApiException(400, "Missing the required parameter 'inviteId' when calling postV1InviteCodeAccept"));
    }

    // create path and map variables
    String path = "/v1/account-invite/{inviteId}/accept".replaceAll("\\{format\\}","json").replaceAll("\\{" + "inviteId" + "\\}", apiInvoker.escapeString(inviteId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Invite to a joint account
  * Create an invite for a joint account
   * @param accountId 
   * @param accountInvite 
   * @return AccountInviteResponse
  */
  public AccountInviteResponse postV3AccountsInvite (String accountId, AccountInvite accountInvite) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = accountInvite;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling postV3AccountsInvite",
        new ApiException(400, "Missing the required parameter 'accountId' when calling postV3AccountsInvite"));
    }

    // create path and map variables
    String path = "/v3/accounts/{accountId}/invite".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountInviteResponse) ApiInvoker.deserialize(localVarResponse, "", AccountInviteResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Invite to a joint account
   * Create an invite for a joint account
   * @param accountId    * @param accountInvite 
  */
  public void postV3AccountsInvite (String accountId, AccountInvite accountInvite, final Response.Listener<AccountInviteResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = accountInvite;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling postV3AccountsInvite",
        new ApiException(400, "Missing the required parameter 'accountId' when calling postV3AccountsInvite"));
    }

    // create path and map variables
    String path = "/v3/accounts/{accountId}/invite".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountInviteResponse) ApiInvoker.deserialize(localVarResponse,  "", AccountInviteResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
