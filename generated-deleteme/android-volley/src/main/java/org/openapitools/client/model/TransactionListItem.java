/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * 
 **/
@ApiModel(description = "")
public class TransactionListItem {
  
  @SerializedName("id")
  private String id = null;
  @SerializedName("accountId")
  private String accountId = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("category")
  private String category = null;
  @SerializedName("executionDateTime")
  private Date executionDateTime = null;
  @SerializedName("postingDateTime")
  private Date postingDateTime = null;
  @SerializedName("amount")
  private BigDecimal amount = null;
  @SerializedName("balanceAmount")
  private BigDecimal balanceAmount = null;
  public enum CreditDebitIndicatorEnum {
     Debit,  Credit, 
  };
  @SerializedName("creditDebitIndicator")
  private CreditDebitIndicatorEnum creditDebitIndicator = null;
  @SerializedName("nppPaymentId")
  private String nppPaymentId = null;

  /**
   * The unique identifier of the transaction
   **/
  @ApiModelProperty(required = true, value = "The unique identifier of the transaction")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * The id of the account the transaction is for
   **/
  @ApiModelProperty(required = true, value = "The id of the account the transaction is for")
  public String getAccountId() {
    return accountId;
  }
  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  /**
   * The description of the transaction
   **/
  @ApiModelProperty(required = true, value = "The description of the transaction")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * The category of the transaction
   **/
  @ApiModelProperty(required = true, value = "The category of the transaction")
  public String getCategory() {
    return category;
  }
  public void setCategory(String category) {
    this.category = category;
  }

  /**
   * The date the transaction was executed by the originating customer
   **/
  @ApiModelProperty(required = true, value = "The date the transaction was executed by the originating customer")
  public Date getExecutionDateTime() {
    return executionDateTime;
  }
  public void setExecutionDateTime(Date executionDateTime) {
    this.executionDateTime = executionDateTime;
  }

  /**
   * The time the transaction was posted
   **/
  @ApiModelProperty(required = true, value = "The time the transaction was posted")
  public Date getPostingDateTime() {
    return postingDateTime;
  }
  public void setPostingDateTime(Date postingDateTime) {
    this.postingDateTime = postingDateTime;
  }

  /**
   * The amount of the transaction
   **/
  @ApiModelProperty(required = true, value = "The amount of the transaction")
  public BigDecimal getAmount() {
    return amount;
  }
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  /**
   * The running balance
   **/
  @ApiModelProperty(required = true, value = "The running balance")
  public BigDecimal getBalanceAmount() {
    return balanceAmount;
  }
  public void setBalanceAmount(BigDecimal balanceAmount) {
    this.balanceAmount = balanceAmount;
  }

  /**
   * Indicates whether the transaction is credit or debit
   **/
  @ApiModelProperty(value = "Indicates whether the transaction is credit or debit")
  public CreditDebitIndicatorEnum getCreditDebitIndicator() {
    return creditDebitIndicator;
  }
  public void setCreditDebitIndicator(CreditDebitIndicatorEnum creditDebitIndicator) {
    this.creditDebitIndicator = creditDebitIndicator;
  }

  /**
   * The NPP payment ID (if the transaction is an NPP payment)
   **/
  @ApiModelProperty(value = "The NPP payment ID (if the transaction is an NPP payment)")
  public String getNppPaymentId() {
    return nppPaymentId;
  }
  public void setNppPaymentId(String nppPaymentId) {
    this.nppPaymentId = nppPaymentId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionListItem transactionListItem = (TransactionListItem) o;
    return (this.id == null ? transactionListItem.id == null : this.id.equals(transactionListItem.id)) &&
        (this.accountId == null ? transactionListItem.accountId == null : this.accountId.equals(transactionListItem.accountId)) &&
        (this.description == null ? transactionListItem.description == null : this.description.equals(transactionListItem.description)) &&
        (this.category == null ? transactionListItem.category == null : this.category.equals(transactionListItem.category)) &&
        (this.executionDateTime == null ? transactionListItem.executionDateTime == null : this.executionDateTime.equals(transactionListItem.executionDateTime)) &&
        (this.postingDateTime == null ? transactionListItem.postingDateTime == null : this.postingDateTime.equals(transactionListItem.postingDateTime)) &&
        (this.amount == null ? transactionListItem.amount == null : this.amount.equals(transactionListItem.amount)) &&
        (this.balanceAmount == null ? transactionListItem.balanceAmount == null : this.balanceAmount.equals(transactionListItem.balanceAmount)) &&
        (this.creditDebitIndicator == null ? transactionListItem.creditDebitIndicator == null : this.creditDebitIndicator.equals(transactionListItem.creditDebitIndicator)) &&
        (this.nppPaymentId == null ? transactionListItem.nppPaymentId == null : this.nppPaymentId.equals(transactionListItem.nppPaymentId));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.accountId == null ? 0: this.accountId.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.category == null ? 0: this.category.hashCode());
    result = 31 * result + (this.executionDateTime == null ? 0: this.executionDateTime.hashCode());
    result = 31 * result + (this.postingDateTime == null ? 0: this.postingDateTime.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.balanceAmount == null ? 0: this.balanceAmount.hashCode());
    result = 31 * result + (this.creditDebitIndicator == null ? 0: this.creditDebitIndicator.hashCode());
    result = 31 * result + (this.nppPaymentId == null ? 0: this.nppPaymentId.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionListItem {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  accountId: ").append(accountId).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  category: ").append(category).append("\n");
    sb.append("  executionDateTime: ").append(executionDateTime).append("\n");
    sb.append("  postingDateTime: ").append(postingDateTime).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  balanceAmount: ").append(balanceAmount).append("\n");
    sb.append("  creditDebitIndicator: ").append(creditDebitIndicator).append("\n");
    sb.append("  nppPaymentId: ").append(nppPaymentId).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
