/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * An NPP alias
 **/
@ApiModel(description = "An NPP alias")
public class Alias {
  
  @SerializedName("identifier")
  private String identifier = null;
  @SerializedName("isNameCustomised")
  private Boolean isNameCustomised = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("status")
  private String status = null;
  @SerializedName("type")
  private String type = null;

  /**
   * The alias identifier (email address, phone number, abn/acn, organisation name) in a normalised format
   **/
  @ApiModelProperty(required = true, value = "The alias identifier (email address, phone number, abn/acn, organisation name) in a normalised format")
  public String getIdentifier() {
    return identifier;
  }
  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  /**
   * Whether the alias is using a customised name set by a staff member.
   **/
  @ApiModelProperty(value = "Whether the alias is using a customised name set by a staff member.")
  public Boolean getIsNameCustomised() {
    return isNameCustomised;
  }
  public void setIsNameCustomised(Boolean isNameCustomised) {
    this.isNameCustomised = isNameCustomised;
  }

  /**
   * Short/descriptive name of the alias owner
   **/
  @ApiModelProperty(required = true, value = "Short/descriptive name of the alias owner")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Status of the alias {Active, Disabled, Portable, PortableRequested, Deregistered}
   **/
  @ApiModelProperty(required = true, value = "Status of the alias {Active, Disabled, Portable, PortableRequested, Deregistered}")
  public String getStatus() {
    return status;
  }
  public void setStatus(String status) {
    this.status = status;
  }

  /**
   * The type of alias identifier stored (dictates how to interpretIdentifier). {Email, Phone, ABN, Organisation}
   **/
  @ApiModelProperty(required = true, value = "The type of alias identifier stored (dictates how to interpretIdentifier). {Email, Phone, ABN, Organisation}")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alias alias = (Alias) o;
    return (this.identifier == null ? alias.identifier == null : this.identifier.equals(alias.identifier)) &&
        (this.isNameCustomised == null ? alias.isNameCustomised == null : this.isNameCustomised.equals(alias.isNameCustomised)) &&
        (this.name == null ? alias.name == null : this.name.equals(alias.name)) &&
        (this.status == null ? alias.status == null : this.status.equals(alias.status)) &&
        (this.type == null ? alias.type == null : this.type.equals(alias.type));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.identifier == null ? 0: this.identifier.hashCode());
    result = 31 * result + (this.isNameCustomised == null ? 0: this.isNameCustomised.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alias {\n");
    
    sb.append("  identifier: ").append(identifier).append("\n");
    sb.append("  isNameCustomised: ").append(isNameCustomised).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
