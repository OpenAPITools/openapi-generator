/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Details regarding the payment itself
 **/
@ApiModel(description = "Details regarding the payment itself")
public class Payment {
  
  @SerializedName("initiatorCustomerId")
  private String initiatorCustomerId = null;
  @SerializedName("fromAccountNumber")
  private String fromAccountNumber = null;
  @SerializedName("fromAccountId")
  private String fromAccountId = null;
  @SerializedName("amount")
  private BigDecimal amount = null;
  @SerializedName("paymentDescription")
  private String paymentDescription = null;
  @SerializedName("endToEndId")
  private String endToEndId = null;

  /**
   * The ID of the customer who initiated this payment.
   **/
  @ApiModelProperty(required = true, value = "The ID of the customer who initiated this payment.")
  public String getInitiatorCustomerId() {
    return initiatorCustomerId;
  }
  public void setInitiatorCustomerId(String initiatorCustomerId) {
    this.initiatorCustomerId = initiatorCustomerId;
  }

  /**
   * The account number of the account from which funds will be deducted.
   **/
  @ApiModelProperty(required = true, value = "The account number of the account from which funds will be deducted.")
  public String getFromAccountNumber() {
    return fromAccountNumber;
  }
  public void setFromAccountNumber(String fromAccountNumber) {
    this.fromAccountNumber = fromAccountNumber;
  }

  /**
   * The account ID of the account from which funds will be deducted.
   **/
  @ApiModelProperty(required = true, value = "The account ID of the account from which funds will be deducted.")
  public String getFromAccountId() {
    return fromAccountId;
  }
  public void setFromAccountId(String fromAccountId) {
    this.fromAccountId = fromAccountId;
  }

  /**
   * The currency value to be paid to the payee.
   **/
  @ApiModelProperty(required = true, value = "The currency value to be paid to the payee.")
  public BigDecimal getAmount() {
    return amount;
  }
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  /**
   * A description of the payment.
   **/
  @ApiModelProperty(required = true, value = "A description of the payment.")
  public String getPaymentDescription() {
    return paymentDescription;
  }
  public void setPaymentDescription(String paymentDescription) {
    this.paymentDescription = paymentDescription;
  }

  /**
   * This is a second optional field which can include formal information related to the payment, such as an invoice or reference number.
   **/
  @ApiModelProperty(value = "This is a second optional field which can include formal information related to the payment, such as an invoice or reference number.")
  public String getEndToEndId() {
    return endToEndId;
  }
  public void setEndToEndId(String endToEndId) {
    this.endToEndId = endToEndId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return (this.initiatorCustomerId == null ? payment.initiatorCustomerId == null : this.initiatorCustomerId.equals(payment.initiatorCustomerId)) &&
        (this.fromAccountNumber == null ? payment.fromAccountNumber == null : this.fromAccountNumber.equals(payment.fromAccountNumber)) &&
        (this.fromAccountId == null ? payment.fromAccountId == null : this.fromAccountId.equals(payment.fromAccountId)) &&
        (this.amount == null ? payment.amount == null : this.amount.equals(payment.amount)) &&
        (this.paymentDescription == null ? payment.paymentDescription == null : this.paymentDescription.equals(payment.paymentDescription)) &&
        (this.endToEndId == null ? payment.endToEndId == null : this.endToEndId.equals(payment.endToEndId));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.initiatorCustomerId == null ? 0: this.initiatorCustomerId.hashCode());
    result = 31 * result + (this.fromAccountNumber == null ? 0: this.fromAccountNumber.hashCode());
    result = 31 * result + (this.fromAccountId == null ? 0: this.fromAccountId.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.paymentDescription == null ? 0: this.paymentDescription.hashCode());
    result = 31 * result + (this.endToEndId == null ? 0: this.endToEndId.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    
    sb.append("  initiatorCustomerId: ").append(initiatorCustomerId).append("\n");
    sb.append("  fromAccountNumber: ").append(fromAccountNumber).append("\n");
    sb.append("  fromAccountId: ").append(fromAccountId).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  paymentDescription: ").append(paymentDescription).append("\n");
    sb.append("  endToEndId: ").append(endToEndId).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
