/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AcceptInviteRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AcceptInviteRequest>>(){}.getType();
    }
    
    if ("Account".equalsIgnoreCase(className)) {
      return new TypeToken<List<Account>>(){}.getType();
    }
    
    if ("AccountBSBPayee".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountBSBPayee>>(){}.getType();
    }
    
    if ("AccountBSBPayeeAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountBSBPayeeAllOf>>(){}.getType();
    }
    
    if ("AccountInvite".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountInvite>>(){}.getType();
    }
    
    if ("AccountInviteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountInviteResponse>>(){}.getType();
    }
    
    if ("AddressList".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddressList>>(){}.getType();
    }
    
    if ("Alias".equalsIgnoreCase(className)) {
      return new TypeToken<List<Alias>>(){}.getType();
    }
    
    if ("AliasPayee".equalsIgnoreCase(className)) {
      return new TypeToken<List<AliasPayee>>(){}.getType();
    }
    
    if ("AliasPayeeAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<AliasPayeeAllOf>>(){}.getType();
    }
    
    if ("ApplicationPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationPostResponseBody>>(){}.getType();
    }
    
    if ("ApplicationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationRequest>>(){}.getType();
    }
    
    if ("ApplicationRequestApplicants".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationRequestApplicants>>(){}.getType();
    }
    
    if ("ApplicationRequestContactDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationRequestContactDetails>>(){}.getType();
    }
    
    if ("ApplicationRequestContactDetailsResidentialAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationRequestContactDetailsResidentialAddress>>(){}.getType();
    }
    
    if ("BadRequestError".equalsIgnoreCase(className)) {
      return new TypeToken<List<BadRequestError>>(){}.getType();
    }
    
    if ("CustomerGetResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerGetResponseBody>>(){}.getType();
    }
    
    if ("CustomerOccupationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerOccupationRequest>>(){}.getType();
    }
    
    if ("CustomerOccupationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerOccupationResponse>>(){}.getType();
    }
    
    if ("CustomerPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerPostResponseBody>>(){}.getType();
    }
    
    if ("CustomerRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerRequest>>(){}.getType();
    }
    
    if ("CustomerSourceOfWealthRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerSourceOfWealthRequest>>(){}.getType();
    }
    
    if ("CustomerSourceOfWealthResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerSourceOfWealthResponse>>(){}.getType();
    }
    
    if ("CustomerVerificationPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationPostResponseBody>>(){}.getType();
    }
    
    if ("CustomerVerificationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequest>>(){}.getType();
    }
    
    if ("CustomerVerificationRequestApplicants".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequestApplicants>>(){}.getType();
    }
    
    if ("CustomerVerificationRequestContactDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequestContactDetails>>(){}.getType();
    }
    
    if ("CustomerVerificationRequestContactDetailsPostalAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequestContactDetailsPostalAddress>>(){}.getType();
    }
    
    if ("CustomerVerificationRequestDriverLicense".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequestDriverLicense>>(){}.getType();
    }
    
    if ("CustomerVerificationRequestMedicareCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequestMedicareCard>>(){}.getType();
    }
    
    if ("CustomerVerificationRequestPassport".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomerVerificationRequestPassport>>(){}.getType();
    }
    
    if ("ErrorItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ErrorItem>>(){}.getType();
    }
    
    if ("ForbiddenError".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForbiddenError>>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenAccessCodeCommand".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenerateOtpForForgottenAccessCodeCommand>>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenAccessCodeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenerateOtpForForgottenAccessCodeResponse>>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenPasswordCommand".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenerateOtpForForgottenPasswordCommand>>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenPasswordResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenerateOtpForForgottenPasswordResponse>>(){}.getType();
    }
    
    if ("GetCustomerPayeesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetCustomerPayeesResponse>>(){}.getType();
    }
    
    if ("GetFeatures".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetFeatures>>(){}.getType();
    }
    
    if ("InternalServerError".equalsIgnoreCase(className)) {
      return new TypeToken<List<InternalServerError>>(){}.getType();
    }
    
    if ("InviteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<InviteResponse>>(){}.getType();
    }
    
    if ("LendingAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingAddress>>(){}.getType();
    }
    
    if ("LendingApplicantDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingApplicantDetails>>(){}.getType();
    }
    
    if ("LendingApplicationDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingApplicationDetails>>(){}.getType();
    }
    
    if ("LendingApplicationOverview".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingApplicationOverview>>(){}.getType();
    }
    
    if ("LendingApplicationState".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingApplicationState>>(){}.getType();
    }
    
    if ("LendingNewApplicationCommand".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingNewApplicationCommand>>(){}.getType();
    }
    
    if ("LendingPersonalLoanProduct".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingPersonalLoanProduct>>(){}.getType();
    }
    
    if ("LendingProduct".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingProduct>>(){}.getType();
    }
    
    if ("LendingSubmitApplicationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingSubmitApplicationResponse>>(){}.getType();
    }
    
    if ("LendingUpdateApplicationDetailsCommand".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingUpdateApplicationDetailsCommand>>(){}.getType();
    }
    
    if ("LendingViewApplicationDetailsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingViewApplicationDetailsResponse>>(){}.getType();
    }
    
    if ("LendingViewApplicationsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LendingViewApplicationsResponse>>(){}.getType();
    }
    
    if ("NotFoundError".equalsIgnoreCase(className)) {
      return new TypeToken<List<NotFoundError>>(){}.getType();
    }
    
    if ("NppPaymentGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentGetResponse>>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAccountPostRequest>>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostRequestOtpVerification".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAccountPostRequestOtpVerification>>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostRequestPayee".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAccountPostRequestPayee>>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAccountPostResponse>>(){}.getType();
    }
    
    if ("NppPaymentsAliasPostRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAliasPostRequest>>(){}.getType();
    }
    
    if ("NppPaymentsAliasPostRequestAlias".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAliasPostRequestAlias>>(){}.getType();
    }
    
    if ("NppPaymentsAliasPostResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppPaymentsAliasPostResponse>>(){}.getType();
    }
    
    if ("NppRejectedPaymentsGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppRejectedPaymentsGetResponse>>(){}.getType();
    }
    
    if ("NppResolveAccountGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppResolveAccountGetResponse>>(){}.getType();
    }
    
    if ("NppResolveAliasGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NppResolveAliasGetResponse>>(){}.getType();
    }
    
    if ("OccupationCode".equalsIgnoreCase(className)) {
      return new TypeToken<List<OccupationCode>>(){}.getType();
    }
    
    if ("OccupationCodeListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<OccupationCodeListResponse>>(){}.getType();
    }
    
    if ("Payee".equalsIgnoreCase(className)) {
      return new TypeToken<List<Payee>>(){}.getType();
    }
    
    if ("Payment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Payment>>(){}.getType();
    }
    
    if ("PendingMobileNumberPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<PendingMobileNumberPostResponseBody>>(){}.getType();
    }
    
    if ("PendingMobileNumberRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PendingMobileNumberRequest>>(){}.getType();
    }
    
    if ("PendingTransactionList".equalsIgnoreCase(className)) {
      return new TypeToken<List<PendingTransactionList>>(){}.getType();
    }
    
    if ("PendingTransactionListItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<PendingTransactionListItem>>(){}.getType();
    }
    
    if ("PendingUserRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PendingUserRequest>>(){}.getType();
    }
    
    if ("PreconditionFailedError".equalsIgnoreCase(className)) {
      return new TypeToken<List<PreconditionFailedError>>(){}.getType();
    }
    
    if ("PreconditionFailedErrorAttempts".equalsIgnoreCase(className)) {
      return new TypeToken<List<PreconditionFailedErrorAttempts>>(){}.getType();
    }
    
    if ("PreconditionFailedErrorOtpRecipients".equalsIgnoreCase(className)) {
      return new TypeToken<List<PreconditionFailedErrorOtpRecipients>>(){}.getType();
    }
    
    if ("ResetForgottenAccessCodeCommand".equalsIgnoreCase(className)) {
      return new TypeToken<List<ResetForgottenAccessCodeCommand>>(){}.getType();
    }
    
    if ("ResetForgottenAccessCodeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ResetForgottenAccessCodeResponse>>(){}.getType();
    }
    
    if ("ResetForgottenPasswordCommand".equalsIgnoreCase(className)) {
      return new TypeToken<List<ResetForgottenPasswordCommand>>(){}.getType();
    }
    
    if ("TermsAndConditionsPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<TermsAndConditionsPostResponseBody>>(){}.getType();
    }
    
    if ("TermsAndConditionsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<TermsAndConditionsRequest>>(){}.getType();
    }
    
    if ("TransactionList".equalsIgnoreCase(className)) {
      return new TypeToken<List<TransactionList>>(){}.getType();
    }
    
    if ("TransactionListItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<TransactionListItem>>(){}.getType();
    }
    
    if ("TransactionPage".equalsIgnoreCase(className)) {
      return new TypeToken<List<TransactionPage>>(){}.getType();
    }
    
    if ("UnauthorizedAltError".equalsIgnoreCase(className)) {
      return new TypeToken<List<UnauthorizedAltError>>(){}.getType();
    }
    
    if ("UnprocessableEntityError".equalsIgnoreCase(className)) {
      return new TypeToken<List<UnprocessableEntityError>>(){}.getType();
    }
    
    if ("ValidatedAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<ValidatedAddress>>(){}.getType();
    }
    
    if ("ValidatedAddressResidentialAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<ValidatedAddressResidentialAddress>>(){}.getType();
    }
    
    if ("VerifyMobileNumberPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<VerifyMobileNumberPostResponseBody>>(){}.getType();
    }
    
    if ("VerifyMobileNumberRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<VerifyMobileNumberRequest>>(){}.getType();
    }
    
    if ("VerifyUserPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<VerifyUserPostResponseBody>>(){}.getType();
    }
    
    if ("VerifyUserRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<VerifyUserRequest>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AcceptInviteRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AcceptInviteRequest>(){}.getType();
    }
    
    if ("Account".equalsIgnoreCase(className)) {
      return new TypeToken<Account>(){}.getType();
    }
    
    if ("AccountBSBPayee".equalsIgnoreCase(className)) {
      return new TypeToken<AccountBSBPayee>(){}.getType();
    }
    
    if ("AccountBSBPayeeAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<AccountBSBPayeeAllOf>(){}.getType();
    }
    
    if ("AccountInvite".equalsIgnoreCase(className)) {
      return new TypeToken<AccountInvite>(){}.getType();
    }
    
    if ("AccountInviteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AccountInviteResponse>(){}.getType();
    }
    
    if ("AddressList".equalsIgnoreCase(className)) {
      return new TypeToken<AddressList>(){}.getType();
    }
    
    if ("Alias".equalsIgnoreCase(className)) {
      return new TypeToken<Alias>(){}.getType();
    }
    
    if ("AliasPayee".equalsIgnoreCase(className)) {
      return new TypeToken<AliasPayee>(){}.getType();
    }
    
    if ("AliasPayeeAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<AliasPayeeAllOf>(){}.getType();
    }
    
    if ("ApplicationPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationPostResponseBody>(){}.getType();
    }
    
    if ("ApplicationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationRequest>(){}.getType();
    }
    
    if ("ApplicationRequestApplicants".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationRequestApplicants>(){}.getType();
    }
    
    if ("ApplicationRequestContactDetails".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationRequestContactDetails>(){}.getType();
    }
    
    if ("ApplicationRequestContactDetailsResidentialAddress".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationRequestContactDetailsResidentialAddress>(){}.getType();
    }
    
    if ("BadRequestError".equalsIgnoreCase(className)) {
      return new TypeToken<BadRequestError>(){}.getType();
    }
    
    if ("CustomerGetResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerGetResponseBody>(){}.getType();
    }
    
    if ("CustomerOccupationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerOccupationRequest>(){}.getType();
    }
    
    if ("CustomerOccupationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerOccupationResponse>(){}.getType();
    }
    
    if ("CustomerPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerPostResponseBody>(){}.getType();
    }
    
    if ("CustomerRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerRequest>(){}.getType();
    }
    
    if ("CustomerSourceOfWealthRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerSourceOfWealthRequest>(){}.getType();
    }
    
    if ("CustomerSourceOfWealthResponse".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerSourceOfWealthResponse>(){}.getType();
    }
    
    if ("CustomerVerificationPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationPostResponseBody>(){}.getType();
    }
    
    if ("CustomerVerificationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequest>(){}.getType();
    }
    
    if ("CustomerVerificationRequestApplicants".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequestApplicants>(){}.getType();
    }
    
    if ("CustomerVerificationRequestContactDetails".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequestContactDetails>(){}.getType();
    }
    
    if ("CustomerVerificationRequestContactDetailsPostalAddress".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequestContactDetailsPostalAddress>(){}.getType();
    }
    
    if ("CustomerVerificationRequestDriverLicense".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequestDriverLicense>(){}.getType();
    }
    
    if ("CustomerVerificationRequestMedicareCard".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequestMedicareCard>(){}.getType();
    }
    
    if ("CustomerVerificationRequestPassport".equalsIgnoreCase(className)) {
      return new TypeToken<CustomerVerificationRequestPassport>(){}.getType();
    }
    
    if ("ErrorItem".equalsIgnoreCase(className)) {
      return new TypeToken<ErrorItem>(){}.getType();
    }
    
    if ("ForbiddenError".equalsIgnoreCase(className)) {
      return new TypeToken<ForbiddenError>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenAccessCodeCommand".equalsIgnoreCase(className)) {
      return new TypeToken<GenerateOtpForForgottenAccessCodeCommand>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenAccessCodeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GenerateOtpForForgottenAccessCodeResponse>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenPasswordCommand".equalsIgnoreCase(className)) {
      return new TypeToken<GenerateOtpForForgottenPasswordCommand>(){}.getType();
    }
    
    if ("GenerateOtpForForgottenPasswordResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GenerateOtpForForgottenPasswordResponse>(){}.getType();
    }
    
    if ("GetCustomerPayeesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GetCustomerPayeesResponse>(){}.getType();
    }
    
    if ("GetFeatures".equalsIgnoreCase(className)) {
      return new TypeToken<GetFeatures>(){}.getType();
    }
    
    if ("InternalServerError".equalsIgnoreCase(className)) {
      return new TypeToken<InternalServerError>(){}.getType();
    }
    
    if ("InviteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<InviteResponse>(){}.getType();
    }
    
    if ("LendingAddress".equalsIgnoreCase(className)) {
      return new TypeToken<LendingAddress>(){}.getType();
    }
    
    if ("LendingApplicantDetails".equalsIgnoreCase(className)) {
      return new TypeToken<LendingApplicantDetails>(){}.getType();
    }
    
    if ("LendingApplicationDetails".equalsIgnoreCase(className)) {
      return new TypeToken<LendingApplicationDetails>(){}.getType();
    }
    
    if ("LendingApplicationOverview".equalsIgnoreCase(className)) {
      return new TypeToken<LendingApplicationOverview>(){}.getType();
    }
    
    if ("LendingApplicationState".equalsIgnoreCase(className)) {
      return new TypeToken<LendingApplicationState>(){}.getType();
    }
    
    if ("LendingNewApplicationCommand".equalsIgnoreCase(className)) {
      return new TypeToken<LendingNewApplicationCommand>(){}.getType();
    }
    
    if ("LendingPersonalLoanProduct".equalsIgnoreCase(className)) {
      return new TypeToken<LendingPersonalLoanProduct>(){}.getType();
    }
    
    if ("LendingProduct".equalsIgnoreCase(className)) {
      return new TypeToken<LendingProduct>(){}.getType();
    }
    
    if ("LendingSubmitApplicationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LendingSubmitApplicationResponse>(){}.getType();
    }
    
    if ("LendingUpdateApplicationDetailsCommand".equalsIgnoreCase(className)) {
      return new TypeToken<LendingUpdateApplicationDetailsCommand>(){}.getType();
    }
    
    if ("LendingViewApplicationDetailsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LendingViewApplicationDetailsResponse>(){}.getType();
    }
    
    if ("LendingViewApplicationsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LendingViewApplicationsResponse>(){}.getType();
    }
    
    if ("NotFoundError".equalsIgnoreCase(className)) {
      return new TypeToken<NotFoundError>(){}.getType();
    }
    
    if ("NppPaymentGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentGetResponse>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostRequest".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAccountPostRequest>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostRequestOtpVerification".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAccountPostRequestOtpVerification>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostRequestPayee".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAccountPostRequestPayee>(){}.getType();
    }
    
    if ("NppPaymentsAccountPostResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAccountPostResponse>(){}.getType();
    }
    
    if ("NppPaymentsAliasPostRequest".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAliasPostRequest>(){}.getType();
    }
    
    if ("NppPaymentsAliasPostRequestAlias".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAliasPostRequestAlias>(){}.getType();
    }
    
    if ("NppPaymentsAliasPostResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NppPaymentsAliasPostResponse>(){}.getType();
    }
    
    if ("NppRejectedPaymentsGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NppRejectedPaymentsGetResponse>(){}.getType();
    }
    
    if ("NppResolveAccountGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NppResolveAccountGetResponse>(){}.getType();
    }
    
    if ("NppResolveAliasGetResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NppResolveAliasGetResponse>(){}.getType();
    }
    
    if ("OccupationCode".equalsIgnoreCase(className)) {
      return new TypeToken<OccupationCode>(){}.getType();
    }
    
    if ("OccupationCodeListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<OccupationCodeListResponse>(){}.getType();
    }
    
    if ("Payee".equalsIgnoreCase(className)) {
      return new TypeToken<Payee>(){}.getType();
    }
    
    if ("Payment".equalsIgnoreCase(className)) {
      return new TypeToken<Payment>(){}.getType();
    }
    
    if ("PendingMobileNumberPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<PendingMobileNumberPostResponseBody>(){}.getType();
    }
    
    if ("PendingMobileNumberRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PendingMobileNumberRequest>(){}.getType();
    }
    
    if ("PendingTransactionList".equalsIgnoreCase(className)) {
      return new TypeToken<PendingTransactionList>(){}.getType();
    }
    
    if ("PendingTransactionListItem".equalsIgnoreCase(className)) {
      return new TypeToken<PendingTransactionListItem>(){}.getType();
    }
    
    if ("PendingUserRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PendingUserRequest>(){}.getType();
    }
    
    if ("PreconditionFailedError".equalsIgnoreCase(className)) {
      return new TypeToken<PreconditionFailedError>(){}.getType();
    }
    
    if ("PreconditionFailedErrorAttempts".equalsIgnoreCase(className)) {
      return new TypeToken<PreconditionFailedErrorAttempts>(){}.getType();
    }
    
    if ("PreconditionFailedErrorOtpRecipients".equalsIgnoreCase(className)) {
      return new TypeToken<PreconditionFailedErrorOtpRecipients>(){}.getType();
    }
    
    if ("ResetForgottenAccessCodeCommand".equalsIgnoreCase(className)) {
      return new TypeToken<ResetForgottenAccessCodeCommand>(){}.getType();
    }
    
    if ("ResetForgottenAccessCodeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ResetForgottenAccessCodeResponse>(){}.getType();
    }
    
    if ("ResetForgottenPasswordCommand".equalsIgnoreCase(className)) {
      return new TypeToken<ResetForgottenPasswordCommand>(){}.getType();
    }
    
    if ("TermsAndConditionsPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<TermsAndConditionsPostResponseBody>(){}.getType();
    }
    
    if ("TermsAndConditionsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<TermsAndConditionsRequest>(){}.getType();
    }
    
    if ("TransactionList".equalsIgnoreCase(className)) {
      return new TypeToken<TransactionList>(){}.getType();
    }
    
    if ("TransactionListItem".equalsIgnoreCase(className)) {
      return new TypeToken<TransactionListItem>(){}.getType();
    }
    
    if ("TransactionPage".equalsIgnoreCase(className)) {
      return new TypeToken<TransactionPage>(){}.getType();
    }
    
    if ("UnauthorizedAltError".equalsIgnoreCase(className)) {
      return new TypeToken<UnauthorizedAltError>(){}.getType();
    }
    
    if ("UnprocessableEntityError".equalsIgnoreCase(className)) {
      return new TypeToken<UnprocessableEntityError>(){}.getType();
    }
    
    if ("ValidatedAddress".equalsIgnoreCase(className)) {
      return new TypeToken<ValidatedAddress>(){}.getType();
    }
    
    if ("ValidatedAddressResidentialAddress".equalsIgnoreCase(className)) {
      return new TypeToken<ValidatedAddressResidentialAddress>(){}.getType();
    }
    
    if ("VerifyMobileNumberPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<VerifyMobileNumberPostResponseBody>(){}.getType();
    }
    
    if ("VerifyMobileNumberRequest".equalsIgnoreCase(className)) {
      return new TypeToken<VerifyMobileNumberRequest>(){}.getType();
    }
    
    if ("VerifyUserPostResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<VerifyUserPostResponseBody>(){}.getType();
    }
    
    if ("VerifyUserRequest".equalsIgnoreCase(className)) {
      return new TypeToken<VerifyUserRequest>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
