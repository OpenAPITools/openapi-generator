/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BadRequestError;
import org.openapitools.client.model.InternalServerError;
import org.openapitools.client.model.LendingApplicationDetails;
import org.openapitools.client.model.LendingApplicationOverview;
import org.openapitools.client.model.LendingNewApplicationCommand;
import org.openapitools.client.model.LendingSubmitApplicationResponse;
import org.openapitools.client.model.LendingUpdateApplicationDetailsCommand;
import org.openapitools.client.model.LendingViewApplicationDetailsResponse;
import org.openapitools.client.model.LendingViewApplicationsResponse;
import org.openapitools.client.model.NotFoundError;
import java.util.UUID;
import org.openapitools.client.model.UnprocessableEntityError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IbLendingApplicationApi {
  String basePath = "https://sim.nonprod.gbcloud.com.au/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * View overview of users applications
  * List of an overview of each lending applications for the user.
   * @return LendingViewApplicationsResponse
  */
  public LendingViewApplicationsResponse getV1ListApplications () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/lending-applications";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LendingViewApplicationsResponse) ApiInvoker.deserialize(localVarResponse, "", LendingViewApplicationsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View overview of users applications
   * List of an overview of each lending applications for the user.

  */
  public void getV1ListApplications (final Response.Listener<LendingViewApplicationsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/lending-applications".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LendingViewApplicationsResponse) ApiInvoker.deserialize(localVarResponse,  "", LendingViewApplicationsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View lending application detail
  * Read an exisiting lending application by applicationId
   * @param applicationId The applicationId associated with the lending application
   * @return LendingViewApplicationDetailsResponse
  */
  public LendingViewApplicationDetailsResponse getV1ReadApplication (UUID applicationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'applicationId' when calling getV1ReadApplication",
        new ApiException(400, "Missing the required parameter 'applicationId' when calling getV1ReadApplication"));
    }

    // create path and map variables
    String path = "/v1/lending-applications/{applicationId}".replaceAll("\\{" + "applicationId" + "\\}", apiInvoker.escapeString(applicationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LendingViewApplicationDetailsResponse) ApiInvoker.deserialize(localVarResponse, "", LendingViewApplicationDetailsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View lending application detail
   * Read an exisiting lending application by applicationId
   * @param applicationId The applicationId associated with the lending application
  */
  public void getV1ReadApplication (UUID applicationId, final Response.Listener<LendingViewApplicationDetailsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'applicationId' when calling getV1ReadApplication",
        new ApiException(400, "Missing the required parameter 'applicationId' when calling getV1ReadApplication"));
    }

    // create path and map variables
    String path = "/v1/lending-applications/{applicationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "applicationId" + "\\}", apiInvoker.escapeString(applicationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LendingViewApplicationDetailsResponse) ApiInvoker.deserialize(localVarResponse,  "", LendingViewApplicationDetailsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update lending application details
  * Update part of a lending application for the fields provided in the body.
   * @param applicationId The applicationId associated with the lending application
   * @param lendingUpdateApplicationDetailsCommand New values for the details
   * @return LendingApplicationDetails
  */
  public LendingApplicationDetails patchV1UpdateApplication (UUID applicationId, LendingUpdateApplicationDetailsCommand lendingUpdateApplicationDetailsCommand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = lendingUpdateApplicationDetailsCommand;
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'applicationId' when calling patchV1UpdateApplication",
        new ApiException(400, "Missing the required parameter 'applicationId' when calling patchV1UpdateApplication"));
    }

    // create path and map variables
    String path = "/v1/lending-applications/{applicationId}".replaceAll("\\{" + "applicationId" + "\\}", apiInvoker.escapeString(applicationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LendingApplicationDetails) ApiInvoker.deserialize(localVarResponse, "", LendingApplicationDetails.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update lending application details
   * Update part of a lending application for the fields provided in the body.
   * @param applicationId The applicationId associated with the lending application   * @param lendingUpdateApplicationDetailsCommand New values for the details
  */
  public void patchV1UpdateApplication (UUID applicationId, LendingUpdateApplicationDetailsCommand lendingUpdateApplicationDetailsCommand, final Response.Listener<LendingApplicationDetails> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = lendingUpdateApplicationDetailsCommand;

    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'applicationId' when calling patchV1UpdateApplication",
        new ApiException(400, "Missing the required parameter 'applicationId' when calling patchV1UpdateApplication"));
    }

    // create path and map variables
    String path = "/v1/lending-applications/{applicationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "applicationId" + "\\}", apiInvoker.escapeString(applicationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LendingApplicationDetails) ApiInvoker.deserialize(localVarResponse,  "", LendingApplicationDetails.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Open new application
  * Create new lending application record linked to a user.
   * @param lendingNewApplicationCommand 
   * @return LendingApplicationOverview
  */
  public LendingApplicationOverview postV1CreateApplication (LendingNewApplicationCommand lendingNewApplicationCommand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = lendingNewApplicationCommand;

    // create path and map variables
    String path = "/v1/lending-applications";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LendingApplicationOverview) ApiInvoker.deserialize(localVarResponse, "", LendingApplicationOverview.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Open new application
   * Create new lending application record linked to a user.
   * @param lendingNewApplicationCommand 
  */
  public void postV1CreateApplication (LendingNewApplicationCommand lendingNewApplicationCommand, final Response.Listener<LendingApplicationOverview> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = lendingNewApplicationCommand;


    // create path and map variables
    String path = "/v1/lending-applications".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LendingApplicationOverview) ApiInvoker.deserialize(localVarResponse,  "", LendingApplicationOverview.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Submit application to staff
  * Submit lending application to staff member.
   * @param applicationId 
   * @return LendingSubmitApplicationResponse
  */
  public LendingSubmitApplicationResponse postV1SubmitApplication (String applicationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'applicationId' when calling postV1SubmitApplication",
        new ApiException(400, "Missing the required parameter 'applicationId' when calling postV1SubmitApplication"));
    }

    // create path and map variables
    String path = "/v1/lending-applications/{applicationId}/submit".replaceAll("\\{" + "applicationId" + "\\}", apiInvoker.escapeString(applicationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LendingSubmitApplicationResponse) ApiInvoker.deserialize(localVarResponse, "", LendingSubmitApplicationResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Submit application to staff
   * Submit lending application to staff member.
   * @param applicationId 
  */
  public void postV1SubmitApplication (String applicationId, final Response.Listener<LendingSubmitApplicationResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'applicationId' is set
    if (applicationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'applicationId' when calling postV1SubmitApplication",
        new ApiException(400, "Missing the required parameter 'applicationId' when calling postV1SubmitApplication"));
    }

    // create path and map variables
    String path = "/v1/lending-applications/{applicationId}/submit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "applicationId" + "\\}", apiInvoker.escapeString(applicationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LendingSubmitApplicationResponse) ApiInvoker.deserialize(localVarResponse,  "", LendingSubmitApplicationResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
