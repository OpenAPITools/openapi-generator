/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BadRequestError;
import org.openapitools.client.model.ForbiddenError;
import org.openapitools.client.model.InternalServerError;
import org.openapitools.client.model.NotFoundError;
import org.openapitools.client.model.NppPaymentGetResponse;
import org.openapitools.client.model.NppPaymentsAccountPostRequest;
import org.openapitools.client.model.NppPaymentsAccountPostResponse;
import org.openapitools.client.model.NppPaymentsAliasPostRequest;
import org.openapitools.client.model.NppPaymentsAliasPostResponse;
import org.openapitools.client.model.NppRejectedPaymentsGetResponse;
import org.openapitools.client.model.NppResolveAccountGetResponse;
import org.openapitools.client.model.NppResolveAliasGetResponse;
import org.openapitools.client.model.PreconditionFailedError;
import org.openapitools.client.model.UnauthorizedAltError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class NppApi {
  String basePath = "https://sim.nonprod.gbcloud.com.au/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get a NPP payment for a given paymentId.
  * Get a NPP payment for a given paymentId
   * @param paymentId The unique payment identifier
   * @param accountId The associated account id which the payment is about
   * @return NppPaymentGetResponse
  */
  public NppPaymentGetResponse getPayment (String paymentId, String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'paymentId' when calling getPayment",
        new ApiException(400, "Missing the required parameter 'paymentId' when calling getPayment"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getPayment",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getPayment"));
    }

    // create path and map variables
    String path = "/v1/npp/payment";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "paymentId", paymentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "accountId", accountId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NppPaymentGetResponse) ApiInvoker.deserialize(localVarResponse, "", NppPaymentGetResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a NPP payment for a given paymentId.
   * Get a NPP payment for a given paymentId
   * @param paymentId The unique payment identifier   * @param accountId The associated account id which the payment is about
  */
  public void getPayment (String paymentId, String accountId, final Response.Listener<NppPaymentGetResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'paymentId' when calling getPayment",
        new ApiException(400, "Missing the required parameter 'paymentId' when calling getPayment"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getPayment",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getPayment"));
    }

    // create path and map variables
    String path = "/v1/npp/payment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "paymentId", paymentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "accountId", accountId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NppPaymentGetResponse) ApiInvoker.deserialize(localVarResponse,  "", NppPaymentGetResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets any rejected NPP payments from the past 30 days for a specific account.
  * Gets any rejected NPP payments from the past 30 days for a specific account.
   * @param accountId The ID of the account for which rejected payments will be retrieved
   * @return NppRejectedPaymentsGetResponse
  */
  public NppRejectedPaymentsGetResponse getRejectedPayments (String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getRejectedPayments",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getRejectedPayments"));
    }

    // create path and map variables
    String path = "/v1/npp/payments/{accountId}/rejected".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NppRejectedPaymentsGetResponse) ApiInvoker.deserialize(localVarResponse, "", NppRejectedPaymentsGetResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets any rejected NPP payments from the past 30 days for a specific account.
   * Gets any rejected NPP payments from the past 30 days for a specific account.
   * @param accountId The ID of the account for which rejected payments will be retrieved
  */
  public void getRejectedPayments (String accountId, final Response.Listener<NppRejectedPaymentsGetResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling getRejectedPayments",
        new ApiException(400, "Missing the required parameter 'accountId' when calling getRejectedPayments"));
    }

    // create path and map variables
    String path = "/v1/npp/payments/{accountId}/rejected".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NppRejectedPaymentsGetResponse) ApiInvoker.deserialize(localVarResponse,  "", NppRejectedPaymentsGetResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * NPP Resolve Account.
  * Provides functionality for determining whether or not a specified account supports a specified payment overlay.
   * @param accountBsb The BSB number of the account
   * @param accountNumber The account number of the account
   * @param overlay This request will assess whether or not the specified account supports this overlay
   * @return NppResolveAccountGetResponse
  */
  public NppResolveAccountGetResponse getResolveAccount (String accountBsb, String accountNumber, String overlay) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountBsb' is set
    if (accountBsb == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountBsb' when calling getResolveAccount",
        new ApiException(400, "Missing the required parameter 'accountBsb' when calling getResolveAccount"));
    }
    // verify the required parameter 'accountNumber' is set
    if (accountNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountNumber' when calling getResolveAccount",
        new ApiException(400, "Missing the required parameter 'accountNumber' when calling getResolveAccount"));
    }
    // verify the required parameter 'overlay' is set
    if (overlay == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'overlay' when calling getResolveAccount",
        new ApiException(400, "Missing the required parameter 'overlay' when calling getResolveAccount"));
    }

    // create path and map variables
    String path = "/v1/npp/resolve/account";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "accountBsb", accountBsb));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "accountNumber", accountNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "overlay", overlay));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NppResolveAccountGetResponse) ApiInvoker.deserialize(localVarResponse, "", NppResolveAccountGetResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * NPP Resolve Account.
   * Provides functionality for determining whether or not a specified account supports a specified payment overlay.
   * @param accountBsb The BSB number of the account   * @param accountNumber The account number of the account   * @param overlay This request will assess whether or not the specified account supports this overlay
  */
  public void getResolveAccount (String accountBsb, String accountNumber, String overlay, final Response.Listener<NppResolveAccountGetResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountBsb' is set
    if (accountBsb == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountBsb' when calling getResolveAccount",
        new ApiException(400, "Missing the required parameter 'accountBsb' when calling getResolveAccount"));
    }
    // verify the required parameter 'accountNumber' is set
    if (accountNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountNumber' when calling getResolveAccount",
        new ApiException(400, "Missing the required parameter 'accountNumber' when calling getResolveAccount"));
    }
    // verify the required parameter 'overlay' is set
    if (overlay == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'overlay' when calling getResolveAccount",
        new ApiException(400, "Missing the required parameter 'overlay' when calling getResolveAccount"));
    }

    // create path and map variables
    String path = "/v1/npp/resolve/account".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "accountBsb", accountBsb));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "accountNumber", accountNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "overlay", overlay));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NppResolveAccountGetResponse) ApiInvoker.deserialize(localVarResponse,  "", NppResolveAccountGetResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * NPP Resolve Alias.
  * Provides a lookup for PayIDAlias
   * @param identifier The PayID identifier to be used for the lookup. For example phone number.
   * @param type The PayID identifier type to be used for the lookup. For example Phone.
   * @return NppResolveAliasGetResponse
  */
  public NppResolveAliasGetResponse getResolveAlias (String identifier, String type) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'identifier' is set
    if (identifier == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'identifier' when calling getResolveAlias",
        new ApiException(400, "Missing the required parameter 'identifier' when calling getResolveAlias"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling getResolveAlias",
        new ApiException(400, "Missing the required parameter 'type' when calling getResolveAlias"));
    }

    // create path and map variables
    String path = "/v1/npp/resolve/alias";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "identifier", identifier));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NppResolveAliasGetResponse) ApiInvoker.deserialize(localVarResponse, "", NppResolveAliasGetResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * NPP Resolve Alias.
   * Provides a lookup for PayIDAlias
   * @param identifier The PayID identifier to be used for the lookup. For example phone number.   * @param type The PayID identifier type to be used for the lookup. For example Phone.
  */
  public void getResolveAlias (String identifier, String type, final Response.Listener<NppResolveAliasGetResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'identifier' is set
    if (identifier == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'identifier' when calling getResolveAlias",
        new ApiException(400, "Missing the required parameter 'identifier' when calling getResolveAlias"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling getResolveAlias",
        new ApiException(400, "Missing the required parameter 'type' when calling getResolveAlias"));
    }

    // create path and map variables
    String path = "/v1/npp/resolve/alias".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "identifier", identifier));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NppResolveAliasGetResponse) ApiInvoker.deserialize(localVarResponse,  "", NppResolveAliasGetResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * No description available
   * @param nppPaymentsAccountPostRequest 
   * @return NppPaymentsAccountPostResponse
  */
  public NppPaymentsAccountPostResponse postPaymentAccount (NppPaymentsAccountPostRequest nppPaymentsAccountPostRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = nppPaymentsAccountPostRequest;

    // create path and map variables
    String path = "/v1/npp/payment/account";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NppPaymentsAccountPostResponse) ApiInvoker.deserialize(localVarResponse, "", NppPaymentsAccountPostResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * No description available
   * @param nppPaymentsAccountPostRequest 
  */
  public void postPaymentAccount (NppPaymentsAccountPostRequest nppPaymentsAccountPostRequest, final Response.Listener<NppPaymentsAccountPostResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = nppPaymentsAccountPostRequest;


    // create path and map variables
    String path = "/v1/npp/payment/account".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NppPaymentsAccountPostResponse) ApiInvoker.deserialize(localVarResponse,  "", NppPaymentsAccountPostResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * No description available
   * @param nppPaymentsAliasPostRequest 
   * @return NppPaymentsAliasPostResponse
  */
  public NppPaymentsAliasPostResponse postPaymentAlias (NppPaymentsAliasPostRequest nppPaymentsAliasPostRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = nppPaymentsAliasPostRequest;

    // create path and map variables
    String path = "/v1/npp/payment/alias";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NppPaymentsAliasPostResponse) ApiInvoker.deserialize(localVarResponse, "", NppPaymentsAliasPostResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * No description available
   * @param nppPaymentsAliasPostRequest 
  */
  public void postPaymentAlias (NppPaymentsAliasPostRequest nppPaymentsAliasPostRequest, final Response.Listener<NppPaymentsAliasPostResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = nppPaymentsAliasPostRequest;


    // create path and map variables
    String path = "/v1/npp/payment/alias".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NppPaymentsAliasPostResponse) ApiInvoker.deserialize(localVarResponse,  "", NppPaymentsAliasPostResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
