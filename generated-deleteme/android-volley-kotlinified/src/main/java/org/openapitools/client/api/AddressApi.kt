/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import com.android.volley.Response
import org.openapitools.client.ApiInvoker.Companion.instance
import org.openapitools.client.ApiInvoker.addDefaultHeader
import org.openapitools.client.ApiInvoker.Companion.parameterToPairs
import org.openapitools.client.ApiInvoker.invokeAPI
import org.openapitools.client.ApiInvoker.Companion.deserialize
import org.openapitools.client.ApiInvoker
import kotlin.Throws
import java.util.concurrent.TimeoutException
import java.util.concurrent.ExecutionException
import java.lang.InterruptedException
import org.openapitools.client.ApiException
import org.openapitools.client.model.AddressList
import com.android.volley.VolleyError
import java.util.ArrayList
import java.util.HashMap
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.HttpEntity
import org.openapitools.client.Pair
import org.openapitools.client.model.ValidatedAddress

class AddressApi {
    var basePath = "https://sim.nonprod.gbcloud.com.au/api"
    var invoker = instance
    fun addHeader(key: String?, value: String?) {
        invoker!!.addDefaultHeader(key!!, value!!)
    }

    /**
     * Get a list of addresses matching provided query.
     * Get a list of addresses matching provided query
     * @param address Single line address filter
     * @return AddressList
     */
    @Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    fun getLookupAddress(address: String?): AddressList? {
        var postBody: Any? = null
        // verify the required parameter 'address' is set
        if (address == null) {
            val error = VolleyError(
                "Missing the required parameter 'address' when calling getLookupAddress",
                ApiException(400, "Missing the required parameter 'address' when calling getLookupAddress")
            )
        }

        // create path and map variables
        val path = "/v1/address/lookup"

        // query params
        val queryParams: MutableList<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        queryParams.addAll(parameterToPairs("", "address", address))
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        return try {
            val localVarResponse = invoker!!.invokeAPI(
                basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames
            )
            if (localVarResponse != null) {
                deserialize(localVarResponse, "", AddressList::class.java) as AddressList?
            } else {
                null
            }
        } catch (ex: ApiException) {
            throw ex
        } catch (ex: InterruptedException) {
            throw ex
        } catch (ex: ExecutionException) {
            if (ex.cause is VolleyError) {
                val volleyError = ex.cause as VolleyError?
                if (volleyError!!.networkResponse != null) {
                    throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                }
            }
            throw ex
        } catch (ex: TimeoutException) {
            throw ex
        }
    }

    /**
     * Get a list of addresses matching provided query.
     * Get a list of addresses matching provided query
     * @param address Single line address filter
     */
    fun getLookupAddress(
        address: String?,
        responseListener: Response.Listener<AddressList?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null

        // verify the required parameter 'address' is set
        if (address == null) {
            val error = VolleyError(
                "Missing the required parameter 'address' when calling getLookupAddress",
                ApiException(400, "Missing the required parameter 'address' when calling getLookupAddress")
            )
        }

        // create path and map variables
        val path = "/v1/address/lookup".replace("\\{format\\}".toRegex(), "json")

        // query params
        val queryParams: MutableList<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        queryParams.addAll(parameterToPairs("", "address", address))
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                AddressList::class.java
                            ) as AddressList?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }

    /**
     * Get a validated address.
     * Get a validated address
     * @param address No description available
     * @return ValidatedAddress
     */
    @Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    fun getValidateAddress(address: String?): ValidatedAddress? {
        var postBody: Any? = null
        // verify the required parameter 'address' is set
        if (address == null) {
            val error = VolleyError(
                "Missing the required parameter 'address' when calling getValidateAddress",
                ApiException(400, "Missing the required parameter 'address' when calling getValidateAddress")
            )
        }

        // create path and map variables
        val path = "/v1/address/validate"

        // query params
        val queryParams: MutableList<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        queryParams.addAll(parameterToPairs("", "address", address))
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        return try {
            val localVarResponse = invoker!!.invokeAPI(
                basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames
            )
            if (localVarResponse != null) {
                deserialize(localVarResponse, "", ValidatedAddress::class.java) as ValidatedAddress?
            } else {
                null
            }
        } catch (ex: ApiException) {
            throw ex
        } catch (ex: InterruptedException) {
            throw ex
        } catch (ex: ExecutionException) {
            if (ex.cause is VolleyError) {
                val volleyError = ex.cause as VolleyError?
                if (volleyError!!.networkResponse != null) {
                    throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                }
            }
            throw ex
        } catch (ex: TimeoutException) {
            throw ex
        }
    }

    /**
     * Get a validated address.
     * Get a validated address
     * @param address No description available
     */
    fun getValidateAddress(
        address: String?,
        responseListener: Response.Listener<ValidatedAddress?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null

        // verify the required parameter 'address' is set
        if (address == null) {
            val error = VolleyError(
                "Missing the required parameter 'address' when calling getValidateAddress",
                ApiException(400, "Missing the required parameter 'address' when calling getValidateAddress")
            )
        }

        // create path and map variables
        val path = "/v1/address/validate".replace("\\{format\\}".toRegex(), "json")

        // query params
        val queryParams: MutableList<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        queryParams.addAll(parameterToPairs("", "address", address))
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                ValidatedAddress::class.java
                            ) as ValidatedAddress?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }
}