/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BadRequestError;
import org.openapitools.client.model.CustomerGetResponseBody;
import org.openapitools.client.model.ForbiddenError;
import org.openapitools.client.model.GenerateOtpForForgottenAccessCodeCommand;
import org.openapitools.client.model.GenerateOtpForForgottenAccessCodeResponse;
import org.openapitools.client.model.GenerateOtpForForgottenPasswordCommand;
import org.openapitools.client.model.GenerateOtpForForgottenPasswordResponse;
import org.openapitools.client.model.GetFeatures;
import org.openapitools.client.model.InternalServerError;
import org.openapitools.client.model.NotFoundError;
import org.openapitools.client.model.ResetForgottenAccessCodeCommand;
import org.openapitools.client.model.ResetForgottenAccessCodeResponse;
import org.openapitools.client.model.ResetForgottenPasswordCommand;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UserAnonymousApi {
  String basePath = "https://sim.nonprod.gbcloud.com.au/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Look up if an existing customer with this username exists.
  * Look up if an existing customer with this username exists
   * @param username Username
   * @return CustomerGetResponseBody
  */
  public CustomerGetResponseBody getCustomer (String username) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getCustomer",
        new ApiException(400, "Missing the required parameter 'username' when calling getCustomer"));
    }

    // create path and map variables
    String path = "/v1/users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "username", username));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerGetResponseBody) ApiInvoker.deserialize(localVarResponse, "", CustomerGetResponseBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Look up if an existing customer with this username exists.
   * Look up if an existing customer with this username exists
   * @param username Username
  */
  public void getCustomer (String username, final Response.Listener<CustomerGetResponseBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getCustomer",
        new ApiException(400, "Missing the required parameter 'username' when calling getCustomer"));
    }

    // create path and map variables
    String path = "/v1/users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "username", username));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerGetResponseBody) ApiInvoker.deserialize(localVarResponse,  "", CustomerGetResponseBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get environment features.
  * # Get environment features    Gets a list of application features all users on the environment are allowed to access  
   * @return GetFeatures
  */
  public GetFeatures getEnvironmentEnabledFeatures () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/features";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetFeatures) ApiInvoker.deserialize(localVarResponse, "", GetFeatures.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get environment features.
   * # Get environment features    Gets a list of application features all users on the environment are allowed to access  

  */
  public void getEnvironmentEnabledFeatures (final Response.Listener<GetFeatures> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/features".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetFeatures) ApiInvoker.deserialize(localVarResponse,  "", GetFeatures.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send request to generate OTP that can be used to reset forgotten access code
  * Generate OTP for forgotten access code
   * @param generateOtpForForgottenAccessCodeCommand command
   * @return GenerateOtpForForgottenAccessCodeResponse
  */
  public GenerateOtpForForgottenAccessCodeResponse postV1GenerateOtpForForgottenAccessCode (GenerateOtpForForgottenAccessCodeCommand generateOtpForForgottenAccessCodeCommand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateOtpForForgottenAccessCodeCommand;
    // verify the required parameter 'generateOtpForForgottenAccessCodeCommand' is set
    if (generateOtpForForgottenAccessCodeCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateOtpForForgottenAccessCodeCommand' when calling postV1GenerateOtpForForgottenAccessCode",
        new ApiException(400, "Missing the required parameter 'generateOtpForForgottenAccessCodeCommand' when calling postV1GenerateOtpForForgottenAccessCode"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-access-code/generate-otp";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateOtpForForgottenAccessCodeResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateOtpForForgottenAccessCodeResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send request to generate OTP that can be used to reset forgotten access code
   * Generate OTP for forgotten access code
   * @param generateOtpForForgottenAccessCodeCommand command
  */
  public void postV1GenerateOtpForForgottenAccessCode (GenerateOtpForForgottenAccessCodeCommand generateOtpForForgottenAccessCodeCommand, final Response.Listener<GenerateOtpForForgottenAccessCodeResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateOtpForForgottenAccessCodeCommand;

    // verify the required parameter 'generateOtpForForgottenAccessCodeCommand' is set
    if (generateOtpForForgottenAccessCodeCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateOtpForForgottenAccessCodeCommand' when calling postV1GenerateOtpForForgottenAccessCode",
        new ApiException(400, "Missing the required parameter 'generateOtpForForgottenAccessCodeCommand' when calling postV1GenerateOtpForForgottenAccessCode"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-access-code/generate-otp".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateOtpForForgottenAccessCodeResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateOtpForForgottenAccessCodeResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send request to generate OTP that can be used to reset forgotten password
  * Generate OTP for forgotten password
   * @param generateOtpForForgottenPasswordCommand command
   * @return GenerateOtpForForgottenPasswordResponse
  */
  public GenerateOtpForForgottenPasswordResponse postV1GenerateOtpForForgottenPassword (GenerateOtpForForgottenPasswordCommand generateOtpForForgottenPasswordCommand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateOtpForForgottenPasswordCommand;
    // verify the required parameter 'generateOtpForForgottenPasswordCommand' is set
    if (generateOtpForForgottenPasswordCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateOtpForForgottenPasswordCommand' when calling postV1GenerateOtpForForgottenPassword",
        new ApiException(400, "Missing the required parameter 'generateOtpForForgottenPasswordCommand' when calling postV1GenerateOtpForForgottenPassword"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-password/generate-otp";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateOtpForForgottenPasswordResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateOtpForForgottenPasswordResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send request to generate OTP that can be used to reset forgotten password
   * Generate OTP for forgotten password
   * @param generateOtpForForgottenPasswordCommand command
  */
  public void postV1GenerateOtpForForgottenPassword (GenerateOtpForForgottenPasswordCommand generateOtpForForgottenPasswordCommand, final Response.Listener<GenerateOtpForForgottenPasswordResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateOtpForForgottenPasswordCommand;

    // verify the required parameter 'generateOtpForForgottenPasswordCommand' is set
    if (generateOtpForForgottenPasswordCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateOtpForForgottenPasswordCommand' when calling postV1GenerateOtpForForgottenPassword",
        new ApiException(400, "Missing the required parameter 'generateOtpForForgottenPasswordCommand' when calling postV1GenerateOtpForForgottenPassword"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-password/generate-otp".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateOtpForForgottenPasswordResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateOtpForForgottenPasswordResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send request to validate OTP and reset access code
  * Reset forgotten access code
   * @param resetForgottenAccessCodeCommand command
   * @return ResetForgottenAccessCodeResponse
  */
  public ResetForgottenAccessCodeResponse postV1ResetForgottenAccessCode (ResetForgottenAccessCodeCommand resetForgottenAccessCodeCommand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = resetForgottenAccessCodeCommand;
    // verify the required parameter 'resetForgottenAccessCodeCommand' is set
    if (resetForgottenAccessCodeCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resetForgottenAccessCodeCommand' when calling postV1ResetForgottenAccessCode",
        new ApiException(400, "Missing the required parameter 'resetForgottenAccessCodeCommand' when calling postV1ResetForgottenAccessCode"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-access-code/reset";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResetForgottenAccessCodeResponse) ApiInvoker.deserialize(localVarResponse, "", ResetForgottenAccessCodeResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send request to validate OTP and reset access code
   * Reset forgotten access code
   * @param resetForgottenAccessCodeCommand command
  */
  public void postV1ResetForgottenAccessCode (ResetForgottenAccessCodeCommand resetForgottenAccessCodeCommand, final Response.Listener<ResetForgottenAccessCodeResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = resetForgottenAccessCodeCommand;

    // verify the required parameter 'resetForgottenAccessCodeCommand' is set
    if (resetForgottenAccessCodeCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resetForgottenAccessCodeCommand' when calling postV1ResetForgottenAccessCode",
        new ApiException(400, "Missing the required parameter 'resetForgottenAccessCodeCommand' when calling postV1ResetForgottenAccessCode"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-access-code/reset".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResetForgottenAccessCodeResponse) ApiInvoker.deserialize(localVarResponse,  "", ResetForgottenAccessCodeResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send request to validate OTP and reset password
  * Reset forgotten password
   * @param resetForgottenPasswordCommand command
   * @return void
  */
  public void postV1ResetForgottenPassword (ResetForgottenPasswordCommand resetForgottenPasswordCommand) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = resetForgottenPasswordCommand;
    // verify the required parameter 'resetForgottenPasswordCommand' is set
    if (resetForgottenPasswordCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resetForgottenPasswordCommand' when calling postV1ResetForgottenPassword",
        new ApiException(400, "Missing the required parameter 'resetForgottenPasswordCommand' when calling postV1ResetForgottenPassword"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-password/reset";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send request to validate OTP and reset password
   * Reset forgotten password
   * @param resetForgottenPasswordCommand command
  */
  public void postV1ResetForgottenPassword (ResetForgottenPasswordCommand resetForgottenPasswordCommand, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = resetForgottenPasswordCommand;

    // verify the required parameter 'resetForgottenPasswordCommand' is set
    if (resetForgottenPasswordCommand == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resetForgottenPasswordCommand' when calling postV1ResetForgottenPassword",
        new ApiException(400, "Missing the required parameter 'resetForgottenPasswordCommand' when calling postV1ResetForgottenPassword"));
    }

    // create path and map variables
    String path = "/v1/user/forgotten-password/reset".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
