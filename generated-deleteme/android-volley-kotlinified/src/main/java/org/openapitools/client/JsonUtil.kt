/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client

import com.google.gson.GsonBuilder
import com.google.gson.Gson
import org.openapitools.client.JsonUtil
import java.lang.Class
import com.google.gson.JsonDeserializer
import kotlin.Throws
import com.google.gson.JsonParseException
import com.google.gson.JsonElement
import com.google.gson.JsonDeserializationContext
import com.google.gson.reflect.TypeToken
import org.openapitools.client.model.*
import java.lang.reflect.Type
import java.util.*

object JsonUtil {
    var gsonBuilder: GsonBuilder? = null
    val gson: Gson
        get() = gsonBuilder!!.create()

    fun serialize(obj: Any?): String {
        return gson.toJson(obj)
    }

    fun <T> deserializeToList(jsonString: String?, cls: Class<*>): T {
        return gson.fromJson(jsonString, getListTypeForDeserialization(cls))
    }

    fun <T> deserializeToObject(jsonString: String?, cls: Class<*>): T {
        return gson.fromJson(jsonString, getTypeForDeserialization(cls))
    }

    fun getListTypeForDeserialization(cls: Class<*>): Type {
        val className = cls.simpleName
        if ("AcceptInviteRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AcceptInviteRequest?>?>() {}.type
        }
        if ("Account".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<Account?>?>() {}.type
        }
        if ("AccountBSBPayee".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AccountBSBPayee?>?>() {}.type
        }
        if ("AccountBSBPayeeAllOf".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AccountBSBPayeeAllOf?>?>() {}.type
        }
        if ("AccountInvite".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AccountInvite?>?>() {}.type
        }
        if ("AccountInviteResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AccountInviteResponse?>?>() {}.type
        }
        if ("AddressList".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AddressList?>?>() {}.type
        }
        if ("Alias".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<Alias?>?>() {}.type
        }
        if ("AliasPayee".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AliasPayee?>?>() {}.type
        }
        if ("AliasPayeeAllOf".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<AliasPayeeAllOf?>?>() {}.type
        }
        if ("ApplicationPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ApplicationPostResponseBody?>?>() {}.type
        }
        if ("ApplicationRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ApplicationRequest?>?>() {}.type
        }
        if ("ApplicationRequestApplicants".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ApplicationRequestApplicants?>?>() {}.type
        }
        if ("ApplicationRequestContactDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ApplicationRequestContactDetails?>?>() {}.type
        }
        if ("ApplicationRequestContactDetailsResidentialAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ApplicationRequestContactDetailsResidentialAddress?>?>() {}.type
        }
        if ("BadRequestError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<BadRequestError?>?>() {}.type
        }
        if ("CustomerGetResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerGetResponseBody?>?>() {}.type
        }
        if ("CustomerOccupationRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerOccupationRequest?>?>() {}.type
        }
        if ("CustomerOccupationResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerOccupationResponse?>?>() {}.type
        }
        if ("CustomerPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerPostResponseBody?>?>() {}.type
        }
        if ("CustomerRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerRequest?>?>() {}.type
        }
        if ("CustomerSourceOfWealthRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerSourceOfWealthRequest?>?>() {}.type
        }
        if ("CustomerSourceOfWealthResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerSourceOfWealthResponse?>?>() {}.type
        }
        if ("CustomerVerificationPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationPostResponseBody?>?>() {}.type
        }
        if ("CustomerVerificationRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequest?>?>() {}.type
        }
        if ("CustomerVerificationRequestApplicants".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequestApplicants?>?>() {}.type
        }
        if ("CustomerVerificationRequestContactDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequestContactDetails?>?>() {}.type
        }
        if ("CustomerVerificationRequestContactDetailsPostalAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequestContactDetailsPostalAddress?>?>() {}.type
        }
        if ("CustomerVerificationRequestDriverLicense".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequestDriverLicense?>?>() {}.type
        }
        if ("CustomerVerificationRequestMedicareCard".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequestMedicareCard?>?>() {}.type
        }
        if ("CustomerVerificationRequestPassport".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<CustomerVerificationRequestPassport?>?>() {}.type
        }
        if ("ErrorItem".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ErrorItem?>?>() {}.type
        }
        if ("ForbiddenError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ForbiddenError?>?>() {}.type
        }
        if ("GenerateOtpForForgottenAccessCodeCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<GenerateOtpForForgottenAccessCodeCommand?>?>() {}.type
        }
        if ("GenerateOtpForForgottenAccessCodeResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<GenerateOtpForForgottenAccessCodeResponse?>?>() {}.type
        }
        if ("GenerateOtpForForgottenPasswordCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<GenerateOtpForForgottenPasswordCommand?>?>() {}.type
        }
        if ("GenerateOtpForForgottenPasswordResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<GenerateOtpForForgottenPasswordResponse?>?>() {}.type
        }
        if ("GetCustomerPayeesResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<GetCustomerPayeesResponse?>?>() {}.type
        }
        if ("GetFeatures".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<GetFeatures?>?>() {}.type
        }
        if ("InternalServerError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<InternalServerError?>?>() {}.type
        }
        if ("InviteResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<InviteResponse?>?>() {}.type
        }
        if ("LendingAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingAddress?>?>() {}.type
        }
        if ("LendingApplicantDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingApplicantDetails?>?>() {}.type
        }
        if ("LendingApplicationDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingApplicationDetails?>?>() {}.type
        }
        if ("LendingApplicationOverview".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingApplicationOverview?>?>() {}.type
        }
        if ("LendingApplicationState".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingApplicationState?>?>() {}.type
        }
        if ("LendingNewApplicationCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingNewApplicationCommand?>?>() {}.type
        }
        if ("LendingPersonalLoanProduct".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingPersonalLoanProduct?>?>() {}.type
        }
        if ("LendingProduct".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingProduct?>?>() {}.type
        }
        if ("LendingSubmitApplicationResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingSubmitApplicationResponse?>?>() {}.type
        }
        if ("LendingUpdateApplicationDetailsCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingUpdateApplicationDetailsCommand?>?>() {}.type
        }
        if ("LendingViewApplicationDetailsResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingViewApplicationDetailsResponse?>?>() {}.type
        }
        if ("LendingViewApplicationsResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<LendingViewApplicationsResponse?>?>() {}.type
        }
        if ("NotFoundError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NotFoundError?>?>() {}.type
        }
        if ("NppPaymentGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentGetResponse?>?>() {}.type
        }
        if ("NppPaymentsAccountPostRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAccountPostRequest?>?>() {}.type
        }
        if ("NppPaymentsAccountPostRequestOtpVerification".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAccountPostRequestOtpVerification?>?>() {}.type
        }
        if ("NppPaymentsAccountPostRequestPayee".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAccountPostRequestPayee?>?>() {}.type
        }
        if ("NppPaymentsAccountPostResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAccountPostResponse?>?>() {}.type
        }
        if ("NppPaymentsAliasPostRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAliasPostRequest?>?>() {}.type
        }
        if ("NppPaymentsAliasPostRequestAlias".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAliasPostRequestAlias?>?>() {}.type
        }
        if ("NppPaymentsAliasPostResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppPaymentsAliasPostResponse?>?>() {}.type
        }
        if ("NppRejectedPaymentsGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppRejectedPaymentsGetResponse?>?>() {}.type
        }
        if ("NppResolveAccountGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppResolveAccountGetResponse?>?>() {}.type
        }
        if ("NppResolveAliasGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<NppResolveAliasGetResponse?>?>() {}.type
        }
        if ("OccupationCode".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<OccupationCode?>?>() {}.type
        }
        if ("OccupationCodeListResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<OccupationCodeListResponse?>?>() {}.type
        }
        if ("Payee".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<Payee?>?>() {}.type
        }
        if ("Payment".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<Payment?>?>() {}.type
        }
        if ("PendingMobileNumberPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PendingMobileNumberPostResponseBody?>?>() {}.type
        }
        if ("PendingMobileNumberRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PendingMobileNumberRequest?>?>() {}.type
        }
        if ("PendingTransactionList".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PendingTransactionList?>?>() {}.type
        }
        if ("PendingTransactionListItem".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PendingTransactionListItem?>?>() {}.type
        }
        if ("PendingUserRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PendingUserRequest?>?>() {}.type
        }
        if ("PreconditionFailedError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PreconditionFailedError?>?>() {}.type
        }
        if ("PreconditionFailedErrorAttempts".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PreconditionFailedErrorAttempts?>?>() {}.type
        }
        if ("PreconditionFailedErrorOtpRecipients".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<PreconditionFailedErrorOtpRecipients?>?>() {}.type
        }
        if ("ResetForgottenAccessCodeCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ResetForgottenAccessCodeCommand?>?>() {}.type
        }
        if ("ResetForgottenAccessCodeResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ResetForgottenAccessCodeResponse?>?>() {}.type
        }
        if ("ResetForgottenPasswordCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ResetForgottenPasswordCommand?>?>() {}.type
        }
        if ("TermsAndConditionsPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<TermsAndConditionsPostResponseBody?>?>() {}.type
        }
        if ("TermsAndConditionsRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<TermsAndConditionsRequest?>?>() {}.type
        }
        if ("TransactionList".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<TransactionList?>?>() {}.type
        }
        if ("TransactionListItem".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<TransactionListItem?>?>() {}.type
        }
        if ("TransactionPage".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<TransactionPage?>?>() {}.type
        }
        if ("UnauthorizedAltError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<UnauthorizedAltError?>?>() {}.type
        }
        if ("UnprocessableEntityError".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<UnprocessableEntityError?>?>() {}.type
        }
        if ("ValidatedAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ValidatedAddress?>?>() {}.type
        }
        if ("ValidatedAddressResidentialAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<ValidatedAddressResidentialAddress?>?>() {}.type
        }
        if ("VerifyMobileNumberPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<VerifyMobileNumberPostResponseBody?>?>() {}.type
        }
        if ("VerifyMobileNumberRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<VerifyMobileNumberRequest?>?>() {}.type
        }
        if ("VerifyUserPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<List<VerifyUserPostResponseBody?>?>() {}.type
        }
        return if ("VerifyUserRequest".equals(className, ignoreCase = true)) {
            object : TypeToken<List<VerifyUserRequest?>?>() {}.type
        } else object : TypeToken<List<Any?>?>() {}.type
    }

    fun getTypeForDeserialization(cls: Class<*>): Type {
        val className = cls.simpleName
        if ("AcceptInviteRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<AcceptInviteRequest?>() {}.type
        }
        if ("Account".equals(className, ignoreCase = true)) {
            return object : TypeToken<Account?>() {}.type
        }
        if ("AccountBSBPayee".equals(className, ignoreCase = true)) {
            return object : TypeToken<AccountBSBPayee?>() {}.type
        }
        if ("AccountBSBPayeeAllOf".equals(className, ignoreCase = true)) {
            return object : TypeToken<AccountBSBPayeeAllOf?>() {}.type
        }
        if ("AccountInvite".equals(className, ignoreCase = true)) {
            return object : TypeToken<AccountInvite?>() {}.type
        }
        if ("AccountInviteResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<AccountInviteResponse?>() {}.type
        }
        if ("AddressList".equals(className, ignoreCase = true)) {
            return object : TypeToken<AddressList?>() {}.type
        }
        if ("Alias".equals(className, ignoreCase = true)) {
            return object : TypeToken<Alias?>() {}.type
        }
        if ("AliasPayee".equals(className, ignoreCase = true)) {
            return object : TypeToken<AliasPayee?>() {}.type
        }
        if ("AliasPayeeAllOf".equals(className, ignoreCase = true)) {
            return object : TypeToken<AliasPayeeAllOf?>() {}.type
        }
        if ("ApplicationPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<ApplicationPostResponseBody?>() {}.type
        }
        if ("ApplicationRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<ApplicationRequest?>() {}.type
        }
        if ("ApplicationRequestApplicants".equals(className, ignoreCase = true)) {
            return object : TypeToken<ApplicationRequestApplicants?>() {}.type
        }
        if ("ApplicationRequestContactDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<ApplicationRequestContactDetails?>() {}.type
        }
        if ("ApplicationRequestContactDetailsResidentialAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<ApplicationRequestContactDetailsResidentialAddress?>() {}.type
        }
        if ("BadRequestError".equals(className, ignoreCase = true)) {
            return object : TypeToken<BadRequestError?>() {}.type
        }
        if ("CustomerGetResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerGetResponseBody?>() {}.type
        }
        if ("CustomerOccupationRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerOccupationRequest?>() {}.type
        }
        if ("CustomerOccupationResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerOccupationResponse?>() {}.type
        }
        if ("CustomerPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerPostResponseBody?>() {}.type
        }
        if ("CustomerRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerRequest?>() {}.type
        }
        if ("CustomerSourceOfWealthRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerSourceOfWealthRequest?>() {}.type
        }
        if ("CustomerSourceOfWealthResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerSourceOfWealthResponse?>() {}.type
        }
        if ("CustomerVerificationPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationPostResponseBody?>() {}.type
        }
        if ("CustomerVerificationRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequest?>() {}.type
        }
        if ("CustomerVerificationRequestApplicants".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequestApplicants?>() {}.type
        }
        if ("CustomerVerificationRequestContactDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequestContactDetails?>() {}.type
        }
        if ("CustomerVerificationRequestContactDetailsPostalAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequestContactDetailsPostalAddress?>() {}.type
        }
        if ("CustomerVerificationRequestDriverLicense".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequestDriverLicense?>() {}.type
        }
        if ("CustomerVerificationRequestMedicareCard".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequestMedicareCard?>() {}.type
        }
        if ("CustomerVerificationRequestPassport".equals(className, ignoreCase = true)) {
            return object : TypeToken<CustomerVerificationRequestPassport?>() {}.type
        }
        if ("ErrorItem".equals(className, ignoreCase = true)) {
            return object : TypeToken<ErrorItem?>() {}.type
        }
        if ("ForbiddenError".equals(className, ignoreCase = true)) {
            return object : TypeToken<ForbiddenError?>() {}.type
        }
        if ("GenerateOtpForForgottenAccessCodeCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<GenerateOtpForForgottenAccessCodeCommand?>() {}.type
        }
        if ("GenerateOtpForForgottenAccessCodeResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<GenerateOtpForForgottenAccessCodeResponse?>() {}.type
        }
        if ("GenerateOtpForForgottenPasswordCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<GenerateOtpForForgottenPasswordCommand?>() {}.type
        }
        if ("GenerateOtpForForgottenPasswordResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<GenerateOtpForForgottenPasswordResponse?>() {}.type
        }
        if ("GetCustomerPayeesResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<GetCustomerPayeesResponse?>() {}.type
        }
        if ("GetFeatures".equals(className, ignoreCase = true)) {
            return object : TypeToken<GetFeatures?>() {}.type
        }
        if ("InternalServerError".equals(className, ignoreCase = true)) {
            return object : TypeToken<InternalServerError?>() {}.type
        }
        if ("InviteResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<InviteResponse?>() {}.type
        }
        if ("LendingAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingAddress?>() {}.type
        }
        if ("LendingApplicantDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingApplicantDetails?>() {}.type
        }
        if ("LendingApplicationDetails".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingApplicationDetails?>() {}.type
        }
        if ("LendingApplicationOverview".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingApplicationOverview?>() {}.type
        }
        if ("LendingApplicationState".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingApplicationState?>() {}.type
        }
        if ("LendingNewApplicationCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingNewApplicationCommand?>() {}.type
        }
        if ("LendingPersonalLoanProduct".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingPersonalLoanProduct?>() {}.type
        }
        if ("LendingProduct".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingProduct?>() {}.type
        }
        if ("LendingSubmitApplicationResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingSubmitApplicationResponse?>() {}.type
        }
        if ("LendingUpdateApplicationDetailsCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingUpdateApplicationDetailsCommand?>() {}.type
        }
        if ("LendingViewApplicationDetailsResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingViewApplicationDetailsResponse?>() {}.type
        }
        if ("LendingViewApplicationsResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<LendingViewApplicationsResponse?>() {}.type
        }
        if ("NotFoundError".equals(className, ignoreCase = true)) {
            return object : TypeToken<NotFoundError?>() {}.type
        }
        if ("NppPaymentGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentGetResponse?>() {}.type
        }
        if ("NppPaymentsAccountPostRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAccountPostRequest?>() {}.type
        }
        if ("NppPaymentsAccountPostRequestOtpVerification".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAccountPostRequestOtpVerification?>() {}.type
        }
        if ("NppPaymentsAccountPostRequestPayee".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAccountPostRequestPayee?>() {}.type
        }
        if ("NppPaymentsAccountPostResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAccountPostResponse?>() {}.type
        }
        if ("NppPaymentsAliasPostRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAliasPostRequest?>() {}.type
        }
        if ("NppPaymentsAliasPostRequestAlias".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAliasPostRequestAlias?>() {}.type
        }
        if ("NppPaymentsAliasPostResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppPaymentsAliasPostResponse?>() {}.type
        }
        if ("NppRejectedPaymentsGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppRejectedPaymentsGetResponse?>() {}.type
        }
        if ("NppResolveAccountGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppResolveAccountGetResponse?>() {}.type
        }
        if ("NppResolveAliasGetResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<NppResolveAliasGetResponse?>() {}.type
        }
        if ("OccupationCode".equals(className, ignoreCase = true)) {
            return object : TypeToken<OccupationCode?>() {}.type
        }
        if ("OccupationCodeListResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<OccupationCodeListResponse?>() {}.type
        }
        if ("Payee".equals(className, ignoreCase = true)) {
            return object : TypeToken<Payee?>() {}.type
        }
        if ("Payment".equals(className, ignoreCase = true)) {
            return object : TypeToken<Payment?>() {}.type
        }
        if ("PendingMobileNumberPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<PendingMobileNumberPostResponseBody?>() {}.type
        }
        if ("PendingMobileNumberRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<PendingMobileNumberRequest?>() {}.type
        }
        if ("PendingTransactionList".equals(className, ignoreCase = true)) {
            return object : TypeToken<PendingTransactionList?>() {}.type
        }
        if ("PendingTransactionListItem".equals(className, ignoreCase = true)) {
            return object : TypeToken<PendingTransactionListItem?>() {}.type
        }
        if ("PendingUserRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<PendingUserRequest?>() {}.type
        }
        if ("PreconditionFailedError".equals(className, ignoreCase = true)) {
            return object : TypeToken<PreconditionFailedError?>() {}.type
        }
        if ("PreconditionFailedErrorAttempts".equals(className, ignoreCase = true)) {
            return object : TypeToken<PreconditionFailedErrorAttempts?>() {}.type
        }
        if ("PreconditionFailedErrorOtpRecipients".equals(className, ignoreCase = true)) {
            return object : TypeToken<PreconditionFailedErrorOtpRecipients?>() {}.type
        }
        if ("ResetForgottenAccessCodeCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<ResetForgottenAccessCodeCommand?>() {}.type
        }
        if ("ResetForgottenAccessCodeResponse".equals(className, ignoreCase = true)) {
            return object : TypeToken<ResetForgottenAccessCodeResponse?>() {}.type
        }
        if ("ResetForgottenPasswordCommand".equals(className, ignoreCase = true)) {
            return object : TypeToken<ResetForgottenPasswordCommand?>() {}.type
        }
        if ("TermsAndConditionsPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<TermsAndConditionsPostResponseBody?>() {}.type
        }
        if ("TermsAndConditionsRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<TermsAndConditionsRequest?>() {}.type
        }
        if ("TransactionList".equals(className, ignoreCase = true)) {
            return object : TypeToken<TransactionList?>() {}.type
        }
        if ("TransactionListItem".equals(className, ignoreCase = true)) {
            return object : TypeToken<TransactionListItem?>() {}.type
        }
        if ("TransactionPage".equals(className, ignoreCase = true)) {
            return object : TypeToken<TransactionPage?>() {}.type
        }
        if ("UnauthorizedAltError".equals(className, ignoreCase = true)) {
            return object : TypeToken<UnauthorizedAltError?>() {}.type
        }
        if ("UnprocessableEntityError".equals(className, ignoreCase = true)) {
            return object : TypeToken<UnprocessableEntityError?>() {}.type
        }
        if ("ValidatedAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<ValidatedAddress?>() {}.type
        }
        if ("ValidatedAddressResidentialAddress".equals(className, ignoreCase = true)) {
            return object : TypeToken<ValidatedAddressResidentialAddress?>() {}.type
        }
        if ("VerifyMobileNumberPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<VerifyMobileNumberPostResponseBody?>() {}.type
        }
        if ("VerifyMobileNumberRequest".equals(className, ignoreCase = true)) {
            return object : TypeToken<VerifyMobileNumberRequest?>() {}.type
        }
        if ("VerifyUserPostResponseBody".equals(className, ignoreCase = true)) {
            return object : TypeToken<VerifyUserPostResponseBody?>() {}.type
        }
        return if ("VerifyUserRequest".equals(className, ignoreCase = true)) {
            object : TypeToken<VerifyUserRequest?>() {}.type
        } else object : TypeToken<Any?>() {}.type
    }

    init {
        gsonBuilder = GsonBuilder()
        gsonBuilder!!.serializeNulls()
        gsonBuilder!!.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
        gsonBuilder!!.registerTypeAdapter(
            Date::class.java,
            JsonDeserializer { json, typeOfT, context -> Date(json.asJsonPrimitive.asLong) })
    }
}