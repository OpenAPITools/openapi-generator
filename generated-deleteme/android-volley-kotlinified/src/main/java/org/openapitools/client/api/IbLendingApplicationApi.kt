/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import com.android.volley.Response
import org.openapitools.client.ApiInvoker.Companion.instance
import org.openapitools.client.ApiInvoker.addDefaultHeader
import org.openapitools.client.ApiInvoker.invokeAPI
import org.openapitools.client.ApiInvoker.Companion.deserialize
import org.openapitools.client.ApiInvoker.escapeString
import org.openapitools.client.ApiInvoker
import kotlin.Throws
import java.util.concurrent.TimeoutException
import java.util.concurrent.ExecutionException
import java.lang.InterruptedException
import org.openapitools.client.ApiException
import org.openapitools.client.model.LendingViewApplicationsResponse
import java.util.ArrayList
import java.util.HashMap
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.HttpEntity
import com.android.volley.VolleyError
import org.openapitools.client.Pair
import java.util.UUID
import org.openapitools.client.model.LendingViewApplicationDetailsResponse
import org.openapitools.client.model.LendingUpdateApplicationDetailsCommand
import org.openapitools.client.model.LendingApplicationDetails
import org.openapitools.client.model.LendingNewApplicationCommand
import org.openapitools.client.model.LendingApplicationOverview
import org.openapitools.client.model.LendingSubmitApplicationResponse

class IbLendingApplicationApi {
    var basePath = "https://sim.nonprod.gbcloud.com.au/api"
    var invoker = instance
    fun addHeader(key: String?, value: String?) {
        invoker!!.addDefaultHeader(key!!, value!!)
    }// normal form params// file uploading// create path and map variables

    // query params
    // header params
    // form params
    /**
     * View overview of users applications
     * List of an overview of each lending applications for the user.
     * @return LendingViewApplicationsResponse
     */
    @get:Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    val v1ListApplications: LendingViewApplicationsResponse?
        get() {
            var postBody: Any? = null

            // create path and map variables
            val path = "/v1/lending-applications"

            // query params
            val queryParams: List<Pair> = ArrayList()
            // header params
            val headerParams: Map<String?, String?> = HashMap()
            // form params
            val formParams: Map<String?, String?> = HashMap()
            val contentTypes = arrayOf<String>()
            val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
            if (contentType.startsWith("multipart/form-data")) {
                // file uploading
                val localVarBuilder = MultipartEntityBuilder.create()
                val httpEntity = localVarBuilder.build()
                postBody = httpEntity
            } else {
                // normal form params
            }
            val authNames = arrayOf<String>()
            return try {
                val localVarResponse = invoker!!.invokeAPI(
                    basePath,
                    path,
                    "GET",
                    queryParams,
                    postBody,
                    headerParams,
                    formParams,
                    contentType,
                    authNames
                )
                if (localVarResponse != null) {
                    deserialize(
                        localVarResponse,
                        "",
                        LendingViewApplicationsResponse::class.java
                    ) as LendingViewApplicationsResponse?
                } else {
                    null
                }
            } catch (ex: ApiException) {
                throw ex
            } catch (ex: InterruptedException) {
                throw ex
            } catch (ex: ExecutionException) {
                if (ex.cause is VolleyError) {
                    val volleyError = ex.cause as VolleyError?
                    if (volleyError!!.networkResponse != null) {
                        throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                    }
                }
                throw ex
            } catch (ex: TimeoutException) {
                throw ex
            }
        }

    /**
     * View overview of users applications
     * List of an overview of each lending applications for the user.
     *
     */
    fun getV1ListApplications(
        responseListener: Response.Listener<LendingViewApplicationsResponse?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null


        // create path and map variables
        val path = "/v1/lending-applications".replace("\\{format\\}".toRegex(), "json")

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                LendingViewApplicationsResponse::class.java
                            ) as LendingViewApplicationsResponse?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }

    /**
     * View lending application detail
     * Read an exisiting lending application by applicationId
     * @param applicationId The applicationId associated with the lending application
     * @return LendingViewApplicationDetailsResponse
     */
    @Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    fun getV1ReadApplication(applicationId: UUID?): LendingViewApplicationDetailsResponse? {
        var postBody: Any? = null
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            val error = VolleyError(
                "Missing the required parameter 'applicationId' when calling getV1ReadApplication",
                ApiException(400, "Missing the required parameter 'applicationId' when calling getV1ReadApplication")
            )
        }

        // create path and map variables
        val path = "/v1/lending-applications/{applicationId}".replace(
            "\\{" + "applicationId" + "\\}".toRegex(),
            invoker!!.escapeString(applicationId.toString())
        )

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        return try {
            val localVarResponse = invoker!!.invokeAPI(
                basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames
            )
            if (localVarResponse != null) {
                deserialize(
                    localVarResponse,
                    "",
                    LendingViewApplicationDetailsResponse::class.java
                ) as LendingViewApplicationDetailsResponse?
            } else {
                null
            }
        } catch (ex: ApiException) {
            throw ex
        } catch (ex: InterruptedException) {
            throw ex
        } catch (ex: ExecutionException) {
            if (ex.cause is VolleyError) {
                val volleyError = ex.cause as VolleyError?
                if (volleyError!!.networkResponse != null) {
                    throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                }
            }
            throw ex
        } catch (ex: TimeoutException) {
            throw ex
        }
    }

    /**
     * View lending application detail
     * Read an exisiting lending application by applicationId
     * @param applicationId The applicationId associated with the lending application
     */
    fun getV1ReadApplication(
        applicationId: UUID?,
        responseListener: Response.Listener<LendingViewApplicationDetailsResponse?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            val error = VolleyError(
                "Missing the required parameter 'applicationId' when calling getV1ReadApplication",
                ApiException(400, "Missing the required parameter 'applicationId' when calling getV1ReadApplication")
            )
        }

        // create path and map variables
        val path = "/v1/lending-applications/{applicationId}".replace("\\{format\\}".toRegex(), "json")
            .replace("\\{" + "applicationId" + "\\}".toRegex(), invoker!!.escapeString(applicationId.toString()))

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                LendingViewApplicationDetailsResponse::class.java
                            ) as LendingViewApplicationDetailsResponse?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }

    /**
     * Update lending application details
     * Update part of a lending application for the fields provided in the body.
     * @param applicationId The applicationId associated with the lending application
     * @param lendingUpdateApplicationDetailsCommand New values for the details
     * @return LendingApplicationDetails
     */
    @Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    fun patchV1UpdateApplication(
        applicationId: UUID?,
        lendingUpdateApplicationDetailsCommand: LendingUpdateApplicationDetailsCommand?
    ): LendingApplicationDetails? {
        var postBody: Any? = lendingUpdateApplicationDetailsCommand
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            val error = VolleyError(
                "Missing the required parameter 'applicationId' when calling patchV1UpdateApplication",
                ApiException(
                    400,
                    "Missing the required parameter 'applicationId' when calling patchV1UpdateApplication"
                )
            )
        }

        // create path and map variables
        val path = "/v1/lending-applications/{applicationId}".replace(
            "\\{" + "applicationId" + "\\}".toRegex(),
            invoker!!.escapeString(applicationId.toString())
        )

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf(
            "application/json"
        )
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        return try {
            val localVarResponse = invoker!!.invokeAPI(
                basePath,
                path,
                "PATCH",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames
            )
            if (localVarResponse != null) {
                deserialize(localVarResponse, "", LendingApplicationDetails::class.java) as LendingApplicationDetails?
            } else {
                null
            }
        } catch (ex: ApiException) {
            throw ex
        } catch (ex: InterruptedException) {
            throw ex
        } catch (ex: ExecutionException) {
            if (ex.cause is VolleyError) {
                val volleyError = ex.cause as VolleyError?
                if (volleyError!!.networkResponse != null) {
                    throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                }
            }
            throw ex
        } catch (ex: TimeoutException) {
            throw ex
        }
    }

    /**
     * Update lending application details
     * Update part of a lending application for the fields provided in the body.
     * @param applicationId The applicationId associated with the lending application   * @param lendingUpdateApplicationDetailsCommand New values for the details
     */
    fun patchV1UpdateApplication(
        applicationId: UUID?,
        lendingUpdateApplicationDetailsCommand: LendingUpdateApplicationDetailsCommand?,
        responseListener: Response.Listener<LendingApplicationDetails?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = lendingUpdateApplicationDetailsCommand

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            val error = VolleyError(
                "Missing the required parameter 'applicationId' when calling patchV1UpdateApplication",
                ApiException(
                    400,
                    "Missing the required parameter 'applicationId' when calling patchV1UpdateApplication"
                )
            )
        }

        // create path and map variables
        val path = "/v1/lending-applications/{applicationId}".replace("\\{format\\}".toRegex(), "json")
            .replace("\\{" + "applicationId" + "\\}".toRegex(), invoker!!.escapeString(applicationId.toString()))

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf(
            "application/json"
        )
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "PATCH",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                LendingApplicationDetails::class.java
                            ) as LendingApplicationDetails?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }

    /**
     * Open new application
     * Create new lending application record linked to a user.
     * @param lendingNewApplicationCommand
     * @return LendingApplicationOverview
     */
    @Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    fun postV1CreateApplication(lendingNewApplicationCommand: LendingNewApplicationCommand?): LendingApplicationOverview? {
        var postBody: Any? = lendingNewApplicationCommand

        // create path and map variables
        val path = "/v1/lending-applications"

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf(
            "application/json"
        )
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        return try {
            val localVarResponse = invoker!!.invokeAPI(
                basePath,
                path,
                "POST",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames
            )
            if (localVarResponse != null) {
                deserialize(localVarResponse, "", LendingApplicationOverview::class.java) as LendingApplicationOverview?
            } else {
                null
            }
        } catch (ex: ApiException) {
            throw ex
        } catch (ex: InterruptedException) {
            throw ex
        } catch (ex: ExecutionException) {
            if (ex.cause is VolleyError) {
                val volleyError = ex.cause as VolleyError?
                if (volleyError!!.networkResponse != null) {
                    throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                }
            }
            throw ex
        } catch (ex: TimeoutException) {
            throw ex
        }
    }

    /**
     * Open new application
     * Create new lending application record linked to a user.
     * @param lendingNewApplicationCommand
     */
    fun postV1CreateApplication(
        lendingNewApplicationCommand: LendingNewApplicationCommand?,
        responseListener: Response.Listener<LendingApplicationOverview?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = lendingNewApplicationCommand


        // create path and map variables
        val path = "/v1/lending-applications".replace("\\{format\\}".toRegex(), "json")

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf(
            "application/json"
        )
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "POST",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                LendingApplicationOverview::class.java
                            ) as LendingApplicationOverview?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }

    /**
     * Submit application to staff
     * Submit lending application to staff member.
     * @param applicationId
     * @return LendingSubmitApplicationResponse
     */
    @Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    fun postV1SubmitApplication(applicationId: String?): LendingSubmitApplicationResponse? {
        var postBody: Any? = null
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            val error = VolleyError(
                "Missing the required parameter 'applicationId' when calling postV1SubmitApplication",
                ApiException(400, "Missing the required parameter 'applicationId' when calling postV1SubmitApplication")
            )
        }

        // create path and map variables
        val path = "/v1/lending-applications/{applicationId}/submit".replace(
            "\\{" + "applicationId" + "\\}".toRegex(),
            invoker!!.escapeString(applicationId.toString())
        )

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        return try {
            val localVarResponse = invoker!!.invokeAPI(
                basePath,
                path,
                "POST",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames
            )
            if (localVarResponse != null) {
                deserialize(
                    localVarResponse,
                    "",
                    LendingSubmitApplicationResponse::class.java
                ) as LendingSubmitApplicationResponse?
            } else {
                null
            }
        } catch (ex: ApiException) {
            throw ex
        } catch (ex: InterruptedException) {
            throw ex
        } catch (ex: ExecutionException) {
            if (ex.cause is VolleyError) {
                val volleyError = ex.cause as VolleyError?
                if (volleyError!!.networkResponse != null) {
                    throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                }
            }
            throw ex
        } catch (ex: TimeoutException) {
            throw ex
        }
    }

    /**
     * Submit application to staff
     * Submit lending application to staff member.
     * @param applicationId
     */
    fun postV1SubmitApplication(
        applicationId: String?,
        responseListener: Response.Listener<LendingSubmitApplicationResponse?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            val error = VolleyError(
                "Missing the required parameter 'applicationId' when calling postV1SubmitApplication",
                ApiException(400, "Missing the required parameter 'applicationId' when calling postV1SubmitApplication")
            )
        }

        // create path and map variables
        val path = "/v1/lending-applications/{applicationId}/submit".replace("\\{format\\}".toRegex(), "json")
            .replace("\\{" + "applicationId" + "\\}".toRegex(), invoker!!.escapeString(applicationId.toString()))

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "POST",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                LendingSubmitApplicationResponse::class.java
                            ) as LendingSubmitApplicationResponse?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }
}