/**
 * Internet Banking
 * Public API for Internet Banking (IB) clients - web, iOS, Android. A combination of specifications from Backbase, as well as home-grown specifications.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@greater.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import com.android.volley.Response
import org.openapitools.client.ApiInvoker.Companion.instance
import org.openapitools.client.ApiInvoker.addDefaultHeader
import org.openapitools.client.ApiInvoker.invokeAPI
import org.openapitools.client.ApiInvoker.Companion.deserialize
import org.openapitools.client.ApiInvoker
import kotlin.Throws
import java.util.concurrent.TimeoutException
import java.util.concurrent.ExecutionException
import java.lang.InterruptedException
import org.openapitools.client.ApiException
import org.openapitools.client.model.OccupationCodeListResponse
import java.util.ArrayList
import java.util.HashMap
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.HttpEntity
import com.android.volley.VolleyError
import org.openapitools.client.Pair

class CustomerApi {
    var basePath = "https://sim.nonprod.gbcloud.com.au/api"
    var invoker = instance
    fun addHeader(key: String?, value: String?) {
        invoker!!.addDefaultHeader(key!!, value!!)
    }// normal form params// file uploading// create path and map variables

    // query params
    // header params
    // form params
    /**
     * Get occupation code options
     * Get the occupation code options available
     * @return OccupationCodeListResponse
     */
    @get:Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    val v1CustomerOccupationCodes: OccupationCodeListResponse?
        get() {
            var postBody: Any? = null

            // create path and map variables
            val path = "/v1/customer/occupation-codes"

            // query params
            val queryParams: List<Pair> = ArrayList()
            // header params
            val headerParams: Map<String?, String?> = HashMap()
            // form params
            val formParams: Map<String?, String?> = HashMap()
            val contentTypes = arrayOf<String>()
            val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
            if (contentType.startsWith("multipart/form-data")) {
                // file uploading
                val localVarBuilder = MultipartEntityBuilder.create()
                val httpEntity = localVarBuilder.build()
                postBody = httpEntity
            } else {
                // normal form params
            }
            val authNames = arrayOf<String>()
            return try {
                val localVarResponse = invoker!!.invokeAPI(
                    basePath,
                    path,
                    "GET",
                    queryParams,
                    postBody,
                    headerParams,
                    formParams,
                    contentType,
                    authNames
                )
                if (localVarResponse != null) {
                    deserialize(
                        localVarResponse,
                        "",
                        OccupationCodeListResponse::class.java
                    ) as OccupationCodeListResponse?
                } else {
                    null
                }
            } catch (ex: ApiException) {
                throw ex
            } catch (ex: InterruptedException) {
                throw ex
            } catch (ex: ExecutionException) {
                if (ex.cause is VolleyError) {
                    val volleyError = ex.cause as VolleyError?
                    if (volleyError!!.networkResponse != null) {
                        throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                    }
                }
                throw ex
            } catch (ex: TimeoutException) {
                throw ex
            }
        }

    /**
     * Get occupation code options
     * Get the occupation code options available
     *
     */
    fun getV1CustomerOccupationCodes(
        responseListener: Response.Listener<OccupationCodeListResponse?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null


        // create path and map variables
        val path = "/v1/customer/occupation-codes".replace("\\{format\\}".toRegex(), "json")

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "",
                                OccupationCodeListResponse::class.java
                            ) as OccupationCodeListResponse?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }// normal form params// file uploading// create path and map variables

    // query params
    // header params
    // form params
    /**
     * List of sources of wealth options
     * Get the list of options for a customers sources of wealth
     * @return List<String>
    </String> */
    @get:Throws(TimeoutException::class, ExecutionException::class, InterruptedException::class, ApiException::class)
    val v1CustomerSourcesOfWealth: List<String>?
        get() {
            var postBody: Any? = null

            // create path and map variables
            val path = "/v1/customer/sources-of-wealth"

            // query params
            val queryParams: List<Pair> = ArrayList()
            // header params
            val headerParams: Map<String?, String?> = HashMap()
            // form params
            val formParams: Map<String?, String?> = HashMap()
            val contentTypes = arrayOf<String>()
            val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
            if (contentType.startsWith("multipart/form-data")) {
                // file uploading
                val localVarBuilder = MultipartEntityBuilder.create()
                val httpEntity = localVarBuilder.build()
                postBody = httpEntity
            } else {
                // normal form params
            }
            val authNames = arrayOf<String>()
            return try {
                val localVarResponse = invoker!!.invokeAPI(
                    basePath,
                    path,
                    "GET",
                    queryParams,
                    postBody,
                    headerParams,
                    formParams,
                    contentType,
                    authNames
                )
                if (localVarResponse != null) {
                    deserialize(localVarResponse, "array", String::class.java) as List<String>?
                } else {
                    null
                }
            } catch (ex: ApiException) {
                throw ex
            } catch (ex: InterruptedException) {
                throw ex
            } catch (ex: ExecutionException) {
                if (ex.cause is VolleyError) {
                    val volleyError = ex.cause as VolleyError?
                    if (volleyError!!.networkResponse != null) {
                        throw ApiException(volleyError.networkResponse.statusCode, volleyError.message)
                    }
                }
                throw ex
            } catch (ex: TimeoutException) {
                throw ex
            }
        }

    /**
     * List of sources of wealth options
     * Get the list of options for a customers sources of wealth
     *
     */
    fun getV1CustomerSourcesOfWealth(
        responseListener: Response.Listener<List<String?>?>,
        errorListener: Response.ErrorListener
    ) {
        var postBody: Any? = null


        // create path and map variables
        val path = "/v1/customer/sources-of-wealth".replace("\\{format\\}".toRegex(), "json")

        // query params
        val queryParams: List<Pair> = ArrayList()
        // header params
        val headerParams: Map<String?, String?> = HashMap()
        // form params
        val formParams: Map<String?, String?> = HashMap()
        val contentTypes = arrayOf<String>()
        val contentType = if (contentTypes.size > 0) contentTypes[0] else "application/json"
        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            val localVarBuilder = MultipartEntityBuilder.create()
            val httpEntity = localVarBuilder.build()
            postBody = httpEntity
        } else {
            // normal form params
        }
        val authNames = arrayOf<String>()
        try {
            invoker!!.invokeAPI(basePath,
                path,
                "GET",
                queryParams,
                postBody,
                headerParams,
                formParams,
                contentType,
                authNames,
                Response.Listener { localVarResponse ->
                    try {
                        responseListener.onResponse(
                            deserialize(
                                localVarResponse,
                                "array",
                                String::class.java
                            ) as List<String?>?
                        )
                    } catch (exception: ApiException) {
                        errorListener.onErrorResponse(VolleyError(exception))
                    }
                },
                Response.ErrorListener { error -> errorListener.onErrorResponse(error) })
        } catch (ex: ApiException) {
            errorListener.onErrorResponse(VolleyError(ex))
        }
    }
}