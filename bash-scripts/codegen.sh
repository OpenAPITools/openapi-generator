#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([output],[o],[output path for generated models export])
# ARG_OPTIONAL_SINGLE([github],[g],[github url for stoplight docs clone])
# ARG_OPTIONAL_SINGLE([path],[p],[the path of stoplight docs])
# ARG_HELP([This tool is used for generating code from openapi.anythiny you need please create an issue in
# https://github.com/AfterShip/openapi-generator-scripts ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ogph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output=
_arg_github=
_arg_path=


print_help()
{
	printf '%s\n' "This tool is used for generating code from openapi.anythiny you need please create an issue in
# https://github.com/AfterShip/openapi-generator-scripts "
	printf 'Usage: %s [-o|--output <arg>] [-g|--github <arg>] [-p|--path <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-o, --output: output path for generated models export (no default)"
	printf '\t%s\n' "-g, --github: github url for stoplight docs clone (no default)"
	printf '\t%s\n' "-p, --path: the path of stoplight docs (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-o|--output)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			-g|--github)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_github="$2"
				shift
				;;
			--github=*)
				_arg_github="${_key##--github=}"
				;;
			-g*)
				_arg_github="${_key##-g}"
				;;
			-p|--path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_path="$2"
				shift
				;;
			--path=*)
				_arg_path="${_key##--path=}"
				;;
			-p*)
				_arg_path="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [ -z $_arg_output ];then
	  printf "please set output path for models generate\n"
    exit 0;
fi

rootPath=$(dirname "$PWD")
cloePath="$rootPath/stoplight"
if [ -z $â‰ˆ ] && [ -z $_arg_path ];then
	  printf "please set github url or openapi path for code generator\n"
    exit 0;
elif  [ ! -z $_arg_github ]; then
    # printf "$rootPath\n"
    git clone --filter=blob:none --no-checkout --depth 1 --sparse "$_arg_github" "$cloePath"
    git -C "$cloePath" sparse-checkout add "/reference"
    git -C "$cloePath" checkout >> /dev/null 2>&1
    OPENAPI_PATH="$cloePath"
elif [ ! -z $_arg_path ]; then
    OPENAPI_PATH="$_arg_path"
fi

#Absolute path of generators.
MODELS_PATH="${_arg_output}"
PROJECT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

# printf "$OPENAPI_PATH\n"
# printf "$PROJECT_PATH\n"
# printf "$MODELS_PATH\n"

VALIDATE_RESULT=$(bash /opt/scripts/validate.sh $OPENAPI_PATH)

result=$(echo $VALIDATE_RESULT | grep "error")

if [ ! -z $result ]; then
    read -p "There are some errors, does the generation continue? (enter 'y/Y' to continue)" ANSWER
    if [ "$ANSWER" != y -a "$ANSWER" != Y ]; then
      rm -rf ../stoplight/
      exit
    fi
fi

bash /opt/scripts/generate.sh $OPENAPI_PATH


cd $MODELS_PATH
ls | xargs -L 1 bash -c 'cd $0 && gofmt -w . >> /dev/null 2>&1 && goimports -w . >> /dev/null 2>&1 && go mod init $0 && go mod tidy'

if  [ ! -z "$_arg_github" ]; then
	rm -rf "$cloePath"
fi

# ] <-- needed because of Argbash